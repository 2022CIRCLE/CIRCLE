golden:
private void createSynthesizedExternVar(String varName) { Node nameNode = Node.newString(Token.NAME, varName);  // Mark the variable as constant if it matches the coding convention // for constant vars. // NOTE(nicksantos): honestly, i'm not sure how much this matters. // AFAIK, all people who use the CONST coding convention also // compile with undeclaredVars as errors. We have some test // cases for this configuration though, and it makes them happier. if (compiler.getCodingConvention().isConstant(varName)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); }  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
inference:
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar()
static void createSynthesizedExternVar()
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
createSynthesizedExternVar()
void createSynthesizedExternVar()
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
static const void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  varsToDeclareInExterns.remove(varName);
getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
static static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode));
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)

getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));
public void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
CreateSynthesizedExternVar()
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
void createSynthesizedExternVar(String varName)  varsToDeclareInExterns.remove(varName);
getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
inline void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar()
NS_IMETHOD createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
inline void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
static inline void createSynthesizedExternVar()
static const void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar()  varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName)  Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar()  varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName);
virtual void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar()  varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName)  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName);
getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) const  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName)  Node nameNode; Node.newString(Token.NAME, varName);
createSynthesizedExternVar()  return createSynthesizedExternVar();
createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
public void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
CreateSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static PRBool createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, name);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
virtual void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName)
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
void createSynthesizedExternVar(String varName)  Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  varsToDeclareInExterns.remove(varName);
getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
getSynthesizedExternsRoot().addChildToBack(Node(Token.VAR, nameNode));
virtual void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode)  if (compiler.getCodingConvention().isConstant(nameNode))  nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Token.NAME;
virtual void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Token.NAME;
CreateSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
void createSynthesizedExternVar(Node nameNode)  Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName);
static inline void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)  GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
getSynthesizedExternsRoot().addChildToBack(Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention())  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))
static void createSynthesizedExternVar(String varName)  Node nameNode;
createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (!nameNode) return;
static void createSynthesizedExternVar()  static void createSynthesizedExternVar()
static void createSynthesizedExternVar(Node nameNode)  if (compiler.getCodingConvention().isConstant(nameNode))  nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  GetSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar()  varsToDeclareInExterns.removeElement(varName);
private void createSynthesizedExternVar(void)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static static void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar(String varName)  GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar()  Node nameNode = Token.NAME;
static void createSynthesizedExternVar(String varName)  GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName));
void createSynthesizedExternVar(String varName)  Node nameNode;
private void createSynthesizedExternVar(Node nameNode)  if (compiler.getCodingConvention().isConstant(nameNode))  nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);  else
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
NS_IMETHOD createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Name.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
inline void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(Node nameNode)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention())  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
virtual void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);  else  varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  goto done;
break;
void createSynthesizedExternVar(const char * varName)  if (!token.findIdent(varName)) return;
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char *name, char *name)  static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
static const void createSynthesizedExternVar()  static const char *synthesizedExternsRoot; static const char *synthesizedExternsRoot; static const char *token; static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternVar*, &synthesizedExternsRoot); static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedEx
static void createSynthesizedExternVar(void)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);  else  varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null)  if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName)  char *varName;
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  nsAutoString varName(&varName);
void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens())  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(node)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType)  nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp)  tmp.mFlags |= PG_FLAG_TIME_VALUE;   else  tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR)  tmp.mSegment = PG_FORCE;  if (tmp.mTitle == PG_NAME)
private void createSynthesizedExternVar(String name)  nameNode = Node.newString(Token.NAME, name);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar()  /* We've already started up. */ node = mCurrentNode.next; if (node == node)  mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);   getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);  else  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(Node nameNode)  Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName())  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern)  if(null!= aExtern)  aExtern = null;  else  aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar()  /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);  else  varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);  else  varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src)  if (src.mUniqueHasPositioned)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  else  nameNode = src.mNative; nameNode.mProp = varName;  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName)  const char* nameNode = &Node;
static void createSynthesizedExternVar(nsAutoString varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar()  nsCOMPtrnsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
private void createSynthesizedExternVar(Node nameNode)  if (nameNode.get() == null) return;
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char *varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAutoString varName)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String nameNode)  nodename = Node.newString(Token.NAME, nameNode); varsToDeclareInExterns.remove(nameNode);
static const char* createSynthesizedExternVar(String varName)  if (!mParent) return NS_ERROR_FAILURE;
private void createSynthesizedExternVar(const char* varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom)  if (nameNode.GetInstance() == null)  nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode)  if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node varName)  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(Node nameNode)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar()  nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0)  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));  else  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar()  nsAutoString varName; aString.ToNewUnicode(&varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr)  nsAWritableString aStr; if (mContext)  aStr = aStr.get();  else  aStr = aStr.get();
private void createSynthesizedExternVar(Node nameNode)  if (compiler.getCodingConvention().isConstant(nameNode))  nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar()  if (!compiler.getCodingConvention().isConstant(varName))  node = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(nsString& varName)  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(String varName, const char* varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == varName) return;
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet)  Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static const void createSynthesizedExternVar(void)
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode))  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.get(); else nameNode = nameNode.get();
static void createSynthesizedExternVar(void)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mInstantiation) nameNode.mInstantiation = varName; if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else  nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get())  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME)  /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);   else  /* XXX */  else  /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);   getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nsAReadableString& aValue)  return createSynthesizedExternVar(aValue, aValue);
void createSynthesizedExternVar()  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName)  if (nodeName.get() == '0' || nodeName.get() == '0')  nodeName.get() = '0';  else  nodeName.get() = '0';
static const char* createSynthesizedExternVar()  static const char*  char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
NS_IMETHOD CreateSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar()  static const char* char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const charset_fork()
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char *name)  Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  if (compiler.getCodingConvention().isConstant(nameNode))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar()  void fcnt; if (compiler.getCodingConvention().isConstant(fcnt))  fcnt = fcnt; fcnt = fcnt; fcnt = fcnt;  else  fcnt = fcnt;
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == null) return; varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName)  if (varName.Equals(""))  varName.Append(""");  else  varName.Append(""");
void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.replace(Token.NAME, ""); else nameNode = nameNode; varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative())  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar()  if (!compiler.isConstant(varName)) return;
static const void createSynthesizedExternVar(const char* aConst, String varName)  Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char *varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  varName = Token.NAME;
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = varName; else nameNode = Token.nsAReadableString(); if (nameNode) nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName)  /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsString& aName)  Node nameNode = aName.GetUnicode();
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0)  nameNode.mProp = nameNode.mProp; nameNode.mParent = null;  else  /* XXX */
void createSynthesizedExternVar(const String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String name)  nodeName = Node.newString(Name); varsToDeclareInExterns.remove(name);
static const char *typeNode = aNode.getNodeType(); static const char* s = NS_STATIC_CAST(const char*, typeNode).Token.Type(); static const char* sp = NS_STATIC_CAST(const char*, typeNode).Token.Assignment; static const char* sp = NS_STATIC_CAST(const char*, typeNode).Token.Assignment; static const char* const char* sp; static const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const char* const
void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);   getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName)  char *prefix; if (compiler.getCodingConvention().isConstant(prefix))  prefix.replace('0', '0');  else  prefix.replace('0', '0');
private void createSynthesizedExternVar()  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode)  static const char *nameNode = nameNode.mAssignment; static char *attrName = NS_ConvertASCIItoUCS2(nameNode, varName); static char *prefix = NS_CONST_ATTR_NO_VALUE; static char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *pair = NS_CONST_ATTR_NO_VALUE; static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *specName = NS_CONST_NAME_STRING(spec
static void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (nameNode)  if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);  getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);  else  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, char* namePtr)  Node nameNode = Node.newString(Token.NAME, varName); if (namePtr) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName)  Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); else <aStr = aStr.get();
static void createSynthesizedExternVar(String varName) const &Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() &static const char* &char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
static const char* createSynthesizedExternVar() <static const char* &char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String name) nodeName = Node.newString(Name); varsToDeclareInExterns.remove(name);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = varName; else nameNode = Token.nsAReadableString(); if (nameNode) nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '&0'); else prefix.replace('0', '0');
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("""); &else varName.Append(""");
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
createSynthesizedExternVar() return createSynthesizedExternVar();
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
static void createSynthesizedExternVar(String varName) &Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == null) return; varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar()
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); else &aStr = aStr.get();
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName));
createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("&""); &else varName.Append(""");
virtual void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* <char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else <aStr = aStr.get();
private void createSynthesizedExternVar(String varName, char* namePtr) <Node nameNode = Node.newString(Token.NAME, varName); if (namePtr) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Token.NAME;
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
inline void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* &char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("&""); else varName.Append(""");
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Token.NAME;
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
virtual void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() <static const char* char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const charset_fork()
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* We've already started up. */ node = mCurrentNode.next; if (node == node) <mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* aConst, String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static const void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &nsAutoString varName; aString.ToNewUnicode(&varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() static const char* &char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static const void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("<""); &else varName.Append(""");
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else <aStr = aStr.get();
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("&""); <else varName.Append(""");
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Token.NAME;
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName);
static static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
virtual void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else aStr = aStr.get();
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '<0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* &char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("""); <else varName.Append(""");
private void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, name);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char *name, char *name) static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '<0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
virtual void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(node) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else &aStr = aStr.get();
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(void)
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
static void createSynthesizedExternVar(nsString& varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
static void createSynthesizedExternVar(const char* varName) &const char* nameNode = &Node;
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
virtual void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(Node nameNode) if (nameNode.get() == null) return;
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else &aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static const char* createSynthesizedExternVar() static const char* <char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == varName) return;
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char *name, char *name) &static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '&0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* <char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("<""); <else varName.Append(""");
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); else <aStr = aStr.get();
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else &aStr = aStr.get();
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("<""); <else varName.Append(""");
static const void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &if (!compiler.getCodingConvention().isConstant(varName)) <node = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) <if (nameNode.get() == null) return;
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() if (!compiler.getCodingConvention().isConstant(varName)) &node = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else <varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("&""); &else varName.Append(""");
void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <static void createSynthesizedExternVar()
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(String varName, const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == varName) return;
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("<""); <else varName.Append(""");
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* &char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) nsAutoString varName(&varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static const char* createSynthesizedExternVar() &static const char* <char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* &char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("<""); &else varName.Append(""");
static const void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("<""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &varName = Token.NAME;
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() static const char* char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &/* We've already started up. */ node = mCurrentNode.next; if (node == node) mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("&""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else <aStr = aStr.get();
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() <return createSynthesizedExternVar();
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) char *varName;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else &aStr = aStr.get();
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsString& aName) Node nameNode = aName.GetUnicode();
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else <aStr = aStr.get();
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() static const char* char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else <aStr = aStr.get();
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() <static const char* <char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static inline void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(Node varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() <static const char* char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static const char* createSynthesizedExternVar() &static const char* <char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("<""); <else varName.Append(""");
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); else &aStr = aStr.get();
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar() &Node nameNode = Token.NAME;
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) <const char* nameNode = &Node;
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char * varName) if (!token.findIdent(varName)) return;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(nsString& aName) &Node nameNode = aName.GetUnicode();
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.get(); else nameNode = nameNode.get();
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() <static const char *synthesizedExternsRoot; static const char *synthesizedExternsRoot; static const char *token; static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternVar*, &synthesizedExternsRoot); static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedEx
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
private void createSynthesizedExternVar(String nameNode) <nodename = Node.newString(Token.NAME, nameNode); varsToDeclareInExterns.remove(nameNode);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) <GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
inline void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '&0'); else prefix.replace('0', '0');
static const char* createSynthesizedExternVar() static const char* char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = varName; else nameNode = Token.nsAReadableString(); if (nameNode) nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char * varName) <if (!token.findIdent(varName)) return;
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else aStr = aStr.get();
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() nsCOMPtrnsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(node) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else <aStr = aStr.get();
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else <aStr = aStr.get();
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("&""); <else varName.Append(""");
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (!compiler.isConstant(varName)) return;
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) <Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
static inline void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("""); <else varName.Append(""");
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("""); &else varName.Append(""");
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else aStr = aStr.get();
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else <aStr = aStr.get();
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(String varName, const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == varName) return;
inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else &aStr = aStr.get();
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static PRBool createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const char* createSynthesizedExternVar() <static const char* <char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else &aStr = aStr.get();
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) <GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <varName = Token.NAME;
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) &GetSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
virtual void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &if (!compiler.getCodingConvention().isConstant(varName)) &node = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char *name, char *name) <static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else &aStr = aStr.get();
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else &aStr = aStr.get();
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node varName) <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static inline void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '<0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else aStr = aStr.get();
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
public void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("&""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(nsAReadableString& aValue) <return createSynthesizedExternVar(aValue, aValue);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '&0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const char* createSynthesizedExternVar() <static const char* <char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); else <aStr = aStr.get();
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); else aStr = aStr.get();
static inline void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static const char* createSynthesizedExternVar() static const char* <char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("&""); else varName.Append(""");
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else <aStr = aStr.get();
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
static const char* createSynthesizedExternVar() static const char* char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("""); &else varName.Append(""");
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("<""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) const <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else
static static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("<""); &else varName.Append(""");
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName)
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("<""); &else varName.Append(""");
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("<""); <else varName.Append(""");
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("""); else varName.Append(""");
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else aStr = aStr.get();
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else &aStr = aStr.get();
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) varName = Token.NAME;
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("<""); else varName.Append(""");
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (!nameNode) return;
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() static const char* char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("""); &else varName.Append(""");
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else &aStr = aStr.get();
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("""); <else varName.Append(""");
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* <char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static const char* createSynthesizedExternVar() <static const char* &char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("""); &else varName.Append(""");
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
static const char* createSynthesizedExternVar(String varName) &if (!mParent) return NS_ERROR_FAILURE;
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("""); &else varName.Append(""");
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("&""); <else varName.Append(""");
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() <static const char* &char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else &aStr = aStr.get();
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else <aStr = aStr.get();
static void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mInstantiation) nameNode.mInstantiation = varName; if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar(String varName) if (!mParent) return NS_ERROR_FAILURE;
virtual void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() varsToDeclareInExterns.removeElement(varName);
static const void createSynthesizedExternVar(const char *name, char *name) <static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '<0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else &aStr = aStr.get();
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else <aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Token.NAME;
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static inline void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) GetSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else &varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String name) &nameNode = Node.newString(Token.NAME, name);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &char *varName;
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("&""); <else varName.Append(""");
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("""); else varName.Append(""");
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <varsToDeclareInExterns.removeElement(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.replace(Token.NAME, ""); else nameNode = nameNode; varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else aStr = aStr.get();
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == null) return; varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* <char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
virtual void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static const char* createSynthesizedExternVar() &static const char* &char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar() &if (!compiler.getCodingConvention().isConstant(varName)) node = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(String varName) &GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else &aStr = aStr.get();
createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char *name, char *name) &static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() &static const char* &char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == null) return; varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar()
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else aStr = aStr.get();
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '&0'); else prefix.replace('0', '0');
CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.get(); else nameNode = nameNode.get();
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
static void createSynthesizedExternVar(String varName)
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("&""); <else varName.Append(""");
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char * varName) &if (!token.findIdent(varName)) return;
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* <char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
public void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else <aStr = aStr.get();
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAutoString varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '0'); else prefix.replace('0', '0');
static const void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Token.NAME;
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
virtual void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("&""); &else varName.Append(""");
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Name.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("""); <else varName.Append(""");
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("<""); &else varName.Append(""");
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("<""); <else varName.Append(""");
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar()
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar() <nsCOMPtrnsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
inline void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAutoString varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else aStr = aStr.get();
static static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
public void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static const char* createSynthesizedExternVar() &static const char* char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
static inline void createSynthesizedExternVar()
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("&""); <else varName.Append(""");
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* We've already started up. */ node = mCurrentNode.next; if (node == node) mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsString& aName) <Node nameNode = aName.GetUnicode();
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else <aStr = aStr.get();
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(String nameNode) &nodename = Node.newString(Token.NAME, nameNode); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <GetSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
static const char* createSynthesizedExternVar() <static const char* char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (!nameNode) return;
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() nsCOMPtr<nsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* &char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("&""); else varName.Append(""");
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
inline void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("<""); else varName.Append(""");
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else
static const char* createSynthesizedExternVar() &static const char* char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("&""); else varName.Append(""");
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() <static const char* <char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) <node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <nsAutoString varName; aString.ToNewUnicode(&varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) &if (nameNode.get() == null) return;
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mInstantiation) nameNode.mInstantiation = varName; if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
virtual void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static const void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else &aStr = aStr.get();
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) const Node nameNode = Node.newString(Token.NAME, varName);
inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() <static const char* char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static const void createSynthesizedExternVar(const char* aConst, String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mInstantiation) nameNode.mInstantiation = varName; if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("&""); <else varName.Append(""");
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
static void createSynthesizedExternVar() </* We've already started up. */ node = mCurrentNode.next; if (node == node) <mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = varName; else nameNode = Token.nsAReadableString(); if (nameNode) nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); else nameNode = Token.nsAReadableString(); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) Node nameNode;
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String name) &nodeName = Node.newString(Name); varsToDeclareInExterns.remove(name);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Token.NAME;
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Name.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); else aStr = aStr.get();
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &nsCOMPtr<nsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
inline void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char *name, char *name) <static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '&0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.replace(Token.NAME, ""); else nameNode = nameNode; varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else &aStr = aStr.get();
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("""); else varName.Append(""");
createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() static const char* &char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar() static void createSynthesizedExternVar()
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '<0'); else prefix.replace('0', '0');
static const char* createSynthesizedExternVar() static const char* char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const charset_fork()
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, name);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* &char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* &char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* <char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("<""); &else varName.Append(""");
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static PRBool createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.get(); else nameNode = nameNode.get();
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("<""); else varName.Append(""");
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() if (!compiler.getCodingConvention().isConstant(varName)) <node = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
public void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static const void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
static inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(Node nameNode) &static const char *nameNode = nameNode.mAssignment; static char *attrName = NS_ConvertASCIItoUCS2(nameNode, varName); static char *prefix = NS_CONST_ATTR_NO_VALUE; static char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *pair = NS_CONST_ATTR_NO_VALUE; static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *specName = NS_CONST_NAME_STRING(spec
private void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
static inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '<0'); else prefix.replace('0', '0');
static const char* createSynthesizedExternVar() &static const char* <char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else <aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Name.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("""); <else varName.Append(""");
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
inline void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* <char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("&""); &else varName.Append(""");
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() <if (!compiler.getCodingConvention().isConstant(varName)) <node = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) &Node nameNode;
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('&0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String varName, char* namePtr) Node nameNode = Node.newString(Token.NAME, varName); if (namePtr) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar() <if (!compiler.getCodingConvention().isConstant(varName)) &node = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else <aStr = aStr.get();
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsString& varName) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else aStr = aStr.get();
void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() nsCOMPtr&nsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else aStr = aStr.get();
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* <char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(nsString& varName) Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() <nsCOMPtr&nsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(String varName, char* namePtr) &Node nameNode = Node.newString(Token.NAME, varName); if (namePtr) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) &varName.Append("<""); &else varName.Append(""");
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static PRBool createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else <aStr = aStr.get();
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
static void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else &aStr = aStr.get();
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("&""); <else varName.Append(""");
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '&0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const void createSynthesizedExternVar() &static const char *synthesizedExternsRoot; static const char *synthesizedExternsRoot; static const char *token; static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternVar*, &synthesizedExternsRoot); static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedEx
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar()
static void createSynthesizedExternVar() &/* We've already started up. */ node = mCurrentNode.next; if (node == node) &mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* <char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.replace(Token.NAME, ""); else nameNode = nameNode; varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else aStr = aStr.get();
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (!compiler.isConstant(varName)) return;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else <aStr = aStr.get();
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char *name, char *name) static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
static const void createSynthesizedExternVar() static const char *synthesizedExternsRoot; static const char *synthesizedExternsRoot; static const char *token; static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternVar*, &synthesizedExternsRoot); static const char *token = NS_STATIC_CAST(nsISynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedExternSynthesizedEx
void createSynthesizedExternVar() &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String name) <nameNode = Node.newString(Token.NAME, name);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else &aStr = aStr.get();
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else aStr = aStr.get();
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else aStr = aStr.get();
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("""); else varName.Append(""");
void createSynthesizedExternVar(String varName) <Node nameNode;
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &nsCOMPtrnsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName)
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("&""); &else varName.Append(""");
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else aStr = aStr.get();
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else aStr = aStr.get();
static inline void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode;
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else &aStr = aStr.get();
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) static const char *nameNode = nameNode.mAssignment; static char *attrName = NS_ConvertASCIItoUCS2(nameNode, varName); static char *prefix = NS_CONST_ATTR_NO_VALUE; static char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *pair = NS_CONST_ATTR_NO_VALUE; static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *specName = NS_CONST_NAME_STRING(spec
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() &static void createSynthesizedExternVar()
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() static const char* &char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static const char* createSynthesizedExternVar() static const char* <char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) Node nameNode = Token.NAME;
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else &aStr = aStr.get();
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("<""); &else varName.Append(""");
private void createSynthesizedExternVar(const char *& varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("""); else varName.Append(""");
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '<0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else <aStr = aStr.get();
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() <static const char* &char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); <else aStr = aStr.get();
static const char* createSynthesizedExternVar() static const char* &char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <if (!compiler.getCodingConvention().isConstant(varName)) node = Node.newString(Token.NAME, varName);
createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() <static const char* <char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else <aStr = aStr.get();
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("<""); else varName.Append(""");
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar(node) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else &aStr = aStr.get();
virtual void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const void createSynthesizedExternVar(const char *name, char *name) static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '&0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* &char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '&0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; &else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else <aStr = aStr.get();
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('&0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() &static const char* &char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else <aStr = aStr.get();
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("<""); <else varName.Append(""");
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else <varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* <char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '<0') &nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &Node nameNode; Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '<0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
static void createSynthesizedExternVar(String varName) &Node nameNode;
static static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElementAt(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
static const void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else &aStr = aStr.get();
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* &char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String name) nameNode = Node.newString(Token.NAME, name);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nsAReadableString& aValue) &return createSynthesizedExternVar(aValue, aValue);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
virtual void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName))
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("<""); else varName.Append(""");
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) &aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nsAReadableString& aValue) return createSynthesizedExternVar(aValue, aValue);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName));
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else /* XXX */
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char *name, char *name) &static const Node* nameNode = Token.newString(name); static const char *name = Token.NAME; static const char *varName = Token.NAME; static const char *name = Token.NAME; static const char *nameString = '<0'; static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varName = Token.prefix(); static const char *varNode = Token.newString(Token.name, varName); static const char *varName = Token.next; static const char *varString = Token.next; static const char *varNode =
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (!nameNode) return;
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar()
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else &/* XXX */
virtual void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('&0', '<0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <char *varName;
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) <Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
CreateSynthesizedExternVar()
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '&0') &nodeName.get() = '0'; else nodeName.get() = '0';
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAutoString varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, name);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; &else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("<""); <else varName.Append(""");
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() static const char* &char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); <else <aStr = aStr.get();
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("<""); <else varName.Append(""");
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("<""); &else varName.Append(""");
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char *varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <nsCOMPtr<nsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
static inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('<0', '0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '&0'); else prefix.replace('0', '0');
virtual void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() </* We've already started up. */ node = mCurrentNode.next; if (node == node) mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) &aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else </* XXX */
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); &else &aStr = aStr.get();
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("&""); <else varName.Append(""");
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(Node nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char *& varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.get() == nsCRT::strlen(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); return NS_OK;
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &nsCOMPtr&nsIAtom> tag; rv = GetTag(*getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv = &tag.mTarget.mNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumN
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) aStr = aStr.get(); <else <aStr = aStr.get();
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* <char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '&0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) &varName.Append("&""); else varName.Append(""");
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) <nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else /* XXX */
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(nsAutoString varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* <char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("""); <else varName.Append(""");
void createSynthesizedExternVar(String varName) &GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); goto done;
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("&""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* &char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else /* XXX */
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '0'); else prefix.replace('0', '0');
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &goto done;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
public void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeElement(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('0', '<0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* &char* ; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '0') &nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("""); &else varName.Append(""");
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("""); &else varName.Append(""");
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() nsAutoString varName; aString.ToNewUnicode(&varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("&""); else varName.Append(""");
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode; Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
public void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) &Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar() &if (!compiler.isConstant(varName)) return;
private void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName);
virtual void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) &tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* char* ; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) aExtern = null; <else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '&0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) prefix.replace('0', '0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) <varName.Append("<""); else varName.Append(""");
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) <aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
private void createSynthesizedExternVar(String varName, void* aExtern) if(null!= aExtern) <aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '<0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) <GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else <fcnt = fcnt;
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() if (!compiler.getCodingConvention().isConstant(varName)) node = Node.newString(Token.NAME, varName);
static const void createSynthesizedExternVar(const char* varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else <fcnt = fcnt;
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; <else &/* XXX */
static const char* createSynthesizedExternVar(String varName) <if (!mParent) return NS_ERROR_FAILURE;
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) </* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar() </* We've already started up. */ node = mCurrentNode.next; if (node == node) &mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '0' || nodeName.get() == '<0') nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else fcnt = fcnt;
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("""); <else varName.Append(""");
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode;
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else </* XXX */
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) <if (nodeName.get() == '&0' || nodeName.get() == '&0') <nodeName.get() = '0'; else nodeName.get() = '0';
static const char* createSynthesizedExternVar() &static const char* char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &nsAutoString varName(&varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else aStr = aStr.get();
inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
private static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* nameNode = Node.newString(Token.NAME, varName); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const char* newExterns = charset_fork(); static const charset_fork()
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == null) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); <else Node nameNode = Node.newString(Token.NAME, varName);
static const char* createSynthesizedExternVar() &static const char* <char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(String varName) <Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else &aStr = aStr.get();
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); else &aStr = aStr.get();
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(nsAWritableString aStr) &nsAWritableString aStr; if (mContext) &aStr = aStr.get(); &else aStr = aStr.get();
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char *name) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) &/* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() <void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else &fcnt = fcnt;
void createSynthesizedExternVar(String varName) <nsAutoString varName(&varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static const char* createSynthesizedExternVar() &static const char* &char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else &aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else &nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(nodeName) if (nodeName.get() == '<0' || nodeName.get() == '0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("&""); &else varName.Append(""");
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* char* &; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
createSynthesizedExternVar() &return createSynthesizedExternVar();
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static inline void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasMoreTokens()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static const void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Token.NAME;
static void createSynthesizedExternVar(String varName) <Node nameNode; Node.newString(Token.NAME, varName);
NS_IMETHOD createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) &if (nameNode.GetInstance() == null) nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '<0' || nodeName.get() == '&0') nodeName.get() = '0'; else nodeName.get() = '0';
void createSynthesizedExternVar(const String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) const char* nameNode = &Node;
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &/* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) if (nameNode.GetInstance() == null) &nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) <varName.Append("<""); else varName.Append(""");
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); else Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
private void createSynthesizedExternVar(String varName, const char* varName, nsIAtom* aAtom) <if (nameNode.GetInstance() == null) <nameNode.getString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char *name) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("""); else varName.Append(""");
void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("&""); &else varName.Append(""");
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '0'); else prefix.replace('0', '0');
static void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) &prefix.replace('<0', '0'); else prefix.replace('0', '0');
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("&""); &else varName.Append(""");
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <static const char *nameNode = nameNode.mAssignment; static char *attrName = NS_ConvertASCIItoUCS2(nameNode, varName); static char *prefix = NS_CONST_ATTR_NO_VALUE; static char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *attrFlags = NS_CONST_ATTR_NO_VALUE; static const char *pair = NS_CONST_ATTR_NO_VALUE; static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *nameNode = NS_CONST_NAME_STRING(token.nAME, nameNode); static const char *specName = NS_CONST_NAME_STRING(spec
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* We've already started up. */ node = mCurrentNode.next; if (node == node) <mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
static void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsICSSStyleSheet*& aSheet) Node nameNode = aSheet.newString(Token.NAME, aSheet); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(aSheet);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
static void createSynthesizedExternVar(nsAutoString varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static const char* createSynthesizedExternVar() &static const char* &char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() static const char* <char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) /* * The value is * ignored here, * because we have the first string for this function * the corresponding value. We don't know how much we've got. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); &else aStr = aStr.get();
static const void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) Node nameNode = Node.newString(Token.NAME, nameNode); if (nameNode.getName() == nameNode.getName()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() <static const char* char* <; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static const void createSynthesizedExternVar(const char* aConst, String varName) &Node nameNode = Node.newString(Token.NAME, varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) <if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(String nameNode) nodename = Node.newString(Token.NAME, nameNode); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &if (varName.Equals("")) varName.Append("""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) &nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtrnsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtrnsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(nodeName) &if (nodeName.get() == '&0' || nodeName.get() == '<0') <nodeName.get() = '0'; else nodeName.get() = '0';
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else <fcnt = fcnt;
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME) == 0) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) nameNode.mProp = nameNode.mProp; nameNode.mParent = null; else </* XXX */
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); &else &varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else fcnt = fcnt;
void createSynthesizedExternVar() &nsString nameNode; nameNode.Append("&"); if (nameNode.Length() > 0) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); &else <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) &fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; <else &fcnt = fcnt;
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() static const char* <char* &; static const char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsAutoString varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; &else fcnt = fcnt;
static void createSynthesizedExternVar(void) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node varName) Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode; Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else <aStr = aStr.get();
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); <else &varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; <else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.removeAll(varName);
private void createSynthesizedExternVar(Node nameNode) <if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) aStr = aStr.get(); else aStr = aStr.get();
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <goto done;
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.compiler().getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) <varName.Append("""); <else varName.Append(""");
void createSynthesizedExternVar(const String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(String name) <nodeName = Node.newString(Name); varsToDeclareInExterns.remove(name);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode; else <nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName); else &varsToDeclareInExterns.remove(varName);
static const void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) <if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int varName) <char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('0', '<0'); else prefix.replace('0', '0');
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("""); else varName.Append(""");
static void createSynthesizedExternVar(String varName) &GetSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, varName));
NS_IMETHOD createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &/* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() &void fcnt; if (compiler.getCodingConvention().isConstant(fcnt)) <fcnt = fcnt; fcnt = fcnt; fcnt = fcnt; else &fcnt = fcnt;
private void createSynthesizedExternVar(nsAWritableString aStr) nsAWritableString aStr; if (mContext) <aStr = aStr.get(); else aStr = aStr.get();
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == nsCRT::strdup(nameNode)) getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = nameNode.get(); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) &Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar() &varsToDeclareInExterns.removeElement(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mProp!= 0) &nameNode.mProp = nameNode.mProp; nameNode.mParent = null; &else &/* XXX */
private void createSynthesizedExternVar(const char *varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (nameNode.getBooleanProp(Node.IS_CONSTANT_NAME, true)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
inline void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(nameNode)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(void) <Node nameNode = Node.newString(Token.NAME, varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(nsAWritableString aStr) <nsAWritableString aStr; if (mContext) &aStr = aStr.get(); else aStr = aStr.get();
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) &/* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) &varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(Node nameNode) &if (compiler.getCodingConvention().isConstant(nameNode)) &nameNode.putBooleanProp(nameNode.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.name()!= 0) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &varsToDeclareInExterns.remove(varName); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) varName.Append("&""); &else varName.Append(""");
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) /* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) <aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(Node nameNode) <Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(nameNode);
void createSynthesizedExternVar() <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.hasAttributes) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar() <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) if (src.mUniqueHasPositioned) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else <nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) varsToDeclareInExterns.remove(varName);
static inline void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(const char* varName) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (nameNode == NS_CONSTANT_NAME) </* The flags to add to the list */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &else /* XXX */ else /* * Note that the name field has a non-string to getsaved result. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.V
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) &if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
static const char* createSynthesizedExternVar() <static const char* &char* <; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); &else varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) &Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) </* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
void createSynthesizedExternVar(String varName) <if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <else varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static const char* createSynthesizedExternVar() &static const char* <char* <; static const char* &; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char* ; static const char*
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else &nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, const char *name) Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(nsIComponentType& aType) <nsIComponentType tm = NS_CONST_TIME_BASE; nsCOMPtr<nsIComponentType> tmp = NS_ConST_TIME_BASE; nsCOMPtr&nsIComponentType> tmp(do_QueryInterface(aType)); if (tmp) <tmp.mFlags |= PG_FLAG_TIME_VALUE; else tmp.mType = PG_ELEMENT_CONSTRAINEDS_LIST; if (tmp.mFlags && tmp.mFlags && tmp.mFlags & PG_FLAG_TO_CHAR) tmp.mSegment = PG_FORCE; if (tmp.mTitle == PG_NAME) <unk>
private void createSynthesizedExternVar(int varName) &char *prefix; if (compiler.getCodingConvention().isConstant(prefix)) <prefix.replace('<0', '<0'); else prefix.replace('0', '0');
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) &aExtern = null; &else <aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) nameNode = Node.newString(Token.NAME, varName); else &if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) &if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.isNative()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
createSynthesizedExternVar() Node nameNode = Node.newString(Token.NAME, varName);
private void createSynthesizedExternVar(const char* varName) <if (varName.Equals("")) varName.Append("""); &else varName.Append(""");
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
private void createSynthesizedExternVar(const char* varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) /* * XXX we don't have anything to add here, since the XXX value should be used with it. */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_N
private void createSynthesizedExternVar(int src) &if (src.mUniqueHasPositioned) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode.mNative) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <else nameNode = src.mNative; nameNode.mProp = varName; getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
NS_IMETHOD CreateSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
virtual void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(String varName) Node nameNode = Node.newString(Token.NAME, varName); if (nameNode) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
void createSynthesizedExternVar(String varName) <Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention()) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(const char* varName) if (varName.Equals("")) &varName.Append("""); <else varName.Append(""");
private void createSynthesizedExternVar(String varName, void* aExtern) &if(null!= aExtern) aExtern = null; <else aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
static void createSynthesizedExternVar() </* * Don't take care of it being taken back by the name */ if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar(void) &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) &nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); <getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName);
static void createSynthesizedExternVar() /* We've already started up. */ node = mCurrentNode.next; if (node == node) &mCurrentNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
NS_IMETHOD CreateSynthesizedExternVar(String varName) &Node nameNode = Node.newString(Token.NAME, varName); varsToDeclareInExterns.remove(varName);
private void createSynthesizedExternVar(String varName, void* aExtern) <if(null!= aExtern) aExtern = null; else &aExtern.Name.AssignWithConversion(aExtern); aExtern.AddChildToBack(aExtern);
createSynthesizedExternVar() &Node nameNode = Node.newString(Token.NAME, varName); if (compiler.getCodingConvention().isConstant(varName)) nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
void createSynthesizedExternVar(String varName) if (compiler.getCodingConvention().isConstant(varName)) <nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); &getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); else varsToDeclareInExterns.remove(varName);
