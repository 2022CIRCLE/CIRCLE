return val1;
return (-val1);
return 0;
return -1;
return (val1 - val1);

return val1 - val1;
return (val1);
return val2;
return -val1;
return result;
return(-val1);
return -val2;
return *val1;
return val;
return (0);
return (val1 - val2);
return VAL1;
return (val1) -val1;
return (-1);
break;
return (val1) - val1;
return 1;
return val1 == 0;
ret = -val1;
return val1 - val2;
return -1L;
return (val1 - total);
result = -val1;
return (val1  val1);
return;
return (val1  0);
return val1 + val2;
return total;
return -val1; return 0;
return -(int)val1;
return (val1 + val2);
return ++val1;
return -val1 + val2;
return (val1 - 1);
goto out;
return (*val1);
return(val1);
return val1 == -1;
return -val1 + 1;
return (val1  val2);
return val1 / val1;
return 0L;
return -(long)val1;
return val1 - total;
return val2 - val1;
return val0;
return null;
return (val1 / val2);
return -val1 - total;
return (1);
return result -val1;
result = -val1; return result;
return (-val1;
return val1 == null;
return val1  0;
return (int) -val1;
return -val1 == 0;
case -1: return val1;
return false;
goto safeMultiply;
return -val1 - 1;
return(-1);
return &val1;
return val1 * val2;
goto ret;
return (int)-val1;
#endif return val1;
return return val1;
return integer;
return +1;
return -val1 * val2;
return val1-1;
else return -val1;
return -val;
return -val1; break;
return (val1 == 0);
return (int) val1;
#endif return -val1;
return -2;
return val1, val2;
return -val0;
return (val1 / val1);
return = -val1;
return(val1 - val1);
return ret;
return EINVAL;
return -val1 + total;
return val - val1;
goto bad;
return (total) -val1;
return -lval1;
return l;
return (int)val1;
return (val) -val1;
return + val1;
case -1: return 0;
return n;
return (val1  total);
return val1 ;
return safeMultiply(val1);
return (null);
return (+val1);
case 0: return 0L;
return val1 + val1;
result = -val1; break;
retval = -val1;
return NS_OK;
return (val1--);
return (val1!= 0);
return int(val1);
return +val1;
(void) -val1;
return len;
return -2*val1;
return --val1;
return return 0;
return y;
case -1: return -val1;
return return -val1;
return -val1; return -1;
return val1 * val1;
return val1  total;
return (val);
return (val1  0L);
return (val1 * val2);
return val1 = -val1;
return val1, -val1;
return (val1) * val1;
return (total / val1);
return (l);
return (val1 > 0);
return true;
return val1; return 0;
return val1 / total;
return v;
case -1: return -1;
return return (-val1);
return -xval1;
return return -1;
return /* -val1;
return -l;
return i;
return ((long)-val1);
return false;
return val-1;
return rv;
return (ret);
return -val1; #endif
return (val1+1);
default: return -val1;
return val1 / val2;
return val3;
return (val1 = 0);
return (val1 | val2);
return -val1, val2;
return val1[0];
return false;
return (val1 || val2);
return val1--val1;
res = -val1;
return ;
return (val1-val1);
return: -val1;
return (val1, -val1);
return count;
return -(void *)val1;
return val1  val1;
return int(-val1);
return (val1) + val1;
return -val1 + val1;
return -val1 || 0;
return **val1;
return val1; break;
return safeMultiply(-val1);
return EIF_SUCCESS;
return retval;
return (val1 || val1);
return -val1; /* We've already done the long. */ return 0;
return -val1 - val2;
return -val1; return -(caddr_t)val1;
return -val1; return ((long)-val1)  val2;
return -val1;  else  if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return val1 &total;
return -val1; return ((long)-val1) val2;
&return -val1;
return (val1 &0L);
&return -val1;
<return val1;
return (val1 &0);
return (val1 val2);
return (val1 <0);
return val1;
return val1 0;
return (val1 &= 0);
return val1 val1;
return -val1; else &if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return (val1 total);
return -val1; <else <if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return (val1 <val1);
return (val1 0);
return (val1 <total);
return val1 &val1;
return (-val1);
return -val1; &else &if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return val1;
return -val1; else <if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return (val1 &val2);
return (val1 val1);
return (val1 <val2);
return (val1 &total);
return val1 <0;
&return val1;
return val1 <total;
return (val1 0L);
return -val1; return ((long)-val1) &val2;
return -val1; &else if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
<return val1;
return (val1 <= 0);
<return (-val1);
return -val1;
return -val1; <else &if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return (val1 &val1);
<return -val1;
return val1 <val1;
return val1 total;
return (val1 = 0);
return -val1;
<return -val1;
&return (-val1);
return -val1; &else <if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return -val1; <else if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return -val1; else if (!(val1 = -val1)) return 0; val1 = -val2; return (total) -val1;
return -val1; return ((long)-val1) <val2;
return val1 &0;
return (val1 <0L);
&return val1;
