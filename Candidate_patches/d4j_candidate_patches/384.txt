golden:
Node node = newNode(type, operand);
inference:
Node node = newNode(type);
Node node = newNode(type, operand, 0);
Node node = newNode(type, operand, null);
Node node = newNode(type, operand, true);
Node node = newNode(type, operand);
Node node = newNode(type, operand, type);
Node node = newNode(type, operand.get());
Node node = newNode(type, operand, null);
Node node = newNode(type.get(), operand);
Node node = newNode(type, operand, -1);
Node node = newNode(nodeType, operand);
Node operand = newNode(type, operand);
Node node = newNode(type, operand, flags);
Node node = newNode(type, operand, operator);
Node node = newNode(type, operand, len);
Node node = newNode (type, operand);
Node node = newNode(type, operand, nodeType);
Node node = newNode(type, operand, 1);
Node node = newNode(type, operand, false);
Node node = newNode(type, operand, node);
Node node = null_node(type, operand);
Node node = createNode(type, operand);
Node node = newNode(type, operand, &type);
Node node = newNode(type, operand, p);
Node node = newNode();
Node node = newNode(type, operand, operand);
Node node = newNode(type, operand, length);
Node node = newNode(type, operand, aType);
Node node = newNode(type, operand, port);
Node node = newNode(mode, operand);
Node node = newNode(type, operand, literal);
Node node = newNode(type, operand, isPostfix);
Node node = newNode(type, operand, newNode);
Node node = newNode(type, operand, ret);
Node node = newNode(typ, operand);
Node node = newNode(operand, type);
Node node = newNode(type, operand, prefix);
Node node = Node.newNode(type, operand);
Node node = newNode(type, operand, context);
node = newNode(type);
Node node = newNode(type, operand, scope);
Node node = newNode(type, operand, false);
Node node = newNode(&type, operand);
Node node = newNode(aType, operand);
Node node = new Node(type);
Node node = newNode(type, operand, i);
Node node = newNode(type, operand, offset);
Node node = node.newNode(type, operand);
Node node = newNode(type, operand, this);
Node node = newNode(type, operand, expand);
Node node = newNode(type, operand, dummy);
Node node = newNode(type, operand, ref);
Node node = newNode(type, operand, name);
Node node = newNode(type, operand, parent);
Node node = newNode(type, operand, transform);
Node node = newNode(type, operand, v);
Node node = newNode(type, operand, id);
Node node = newNode(*type, operand);
Node node = newNode(type, operand, param);
Node node = newNode(type, operand, base);
Node node = newNode(type, operand, value);
Node node = newNode(type, operand, auth);
Node node = newNode(type, operand, global);

Node node = newNode(operand);
Node node = newNode(type, operand, token);
Node node = newNode(type, operand)
Node node=newNode(type, operand);
Node node = newNode(type, operand, None);
Node node = newNode(type, operand, operation);
Node node = newNode(type, operand, loc);
Node node = node_newNode(type, operand);
Nodenode = newNode(type, operand);
Node node = newNode(type, operand, *type);
Node exprNode = newNode(type, operand);
Node node = newNode(type, operand, handle);
Node node = newNode(type, operand, -type);
Node node = newNode(type, operand, count);
Node node = newNode(type, operand, owner);
Node node = newNode(type, operand, namespaceID);
Node node = newNode(type, operand, data);
Node node = newNode(type, operand, size);
Node node = newNode(type, operand, line);
Node nextNode = newNode(type, operand);
Node node = nullNode(type, operand);
Node node = newNode(type, operand, rv);
Node node = newNode(type, operand, l);
Node node = newNode(type, operand, op);
Node node = newNode(type, operand, proc);
const Node node = newNode(type, operand);
Node node = newNode(type, operand, fp);
Node node = newNode(type)
Node node = newNode(type, operand, true);
Node node = newNode(type, operand, dev);
Node node = newNode(int type, operand);
Node node = newNode(type, operand, modifier);
Node n = newNode(type, operand);
Node node = newNode(type, operand, namespace);
Node node = buildNode(type, operand);
Node node = newNode(type, &ops);
Node node = newNode(type, operand, addr);
Node node = newNode(type, operand, subtype);
Node node = newNode(type, operand, end);
Node node = newNode(type, operand, mode);
Node node = newNode(type, ops);
Node node = newNode(type, operand, mutex);
Node node = newNode(type, operand, key);
Node node = newNode(type, operand, u);
Node node = newNode(type, operand, nil);
Node node = (Node) newNode(type, operand);
Node operand = newNode(type);
Node *node = newNode(type, operand);
Node node = newNode(type, operand, self);
Node node = newNode(type, operand, result);
Node node = newNode(type, operand, callback);
Node node = newNode(type, operand, ignore);
Node node = newNode(type, operand, indent);
Node node = newNode(type, operand, arg);
Node node = newNode(type, operand, meta);
Node node = newNode(type, operand, mask);
Node node = newNode(type, operand, private);
Node node = numpy.node(type, operand);
Node node = newNode(type, operand, operandType);
Node node = addNode(type, operand);
Node node = newNode(type, operand, ep);
Node node = newNode(type, operand, alloc);
Node node = newNode(type, operand, entry);
Node node = node.newNode(type, operand);
node = newNode(type, operand, 0);
Node node = newNode(type, operand, nodeInfo);
Node node = newNode(type.type, operand);
Node node = newNode(type, operand, linenum);
Node node = newNode(type, operand, style);
Node node = newNode(type, operand, delta);
Node node = newNode(type, operand, NUMBER);
Node node = newNode(type, operand, newType);
Node node = newNode(type, operand, state);
Node node = newNode(type, operand, input);
Node node = newNode(type, exprNode);
Node node = newNode(tokenType, operand);
Node node = newNode(type, operand, *this);
Node node = newNode(type, operand, long);
Node node = newNode(type, operand, res);
Node node = newNode(type, operands);
Node node = newNode(type, operand, true);
Node node = newNode(type, op);
Node node = newNode(type, operand, 2);
Node node = newNode(type, operand.type);
Node node = newNode(type, operand, call);
node = newNode(type, operand, null);
Node node = newNode(type, operand, void);
Node node = newNode(type, operand, authtype);
node = newNode(type, operand);
Node node = newNode(type, operand, int type);
Node node = newNode(type, operand, amt);
Node node = newNode(type, operand, fn);
Node node = newNode(type, operand, fd);
Node node;
Node node = newNode(type, operand, nodetype);
Node node = newNode(type, operand, dep);
Node node = newNode(type, operand, numpg);
Node node = nullNode;
Node node = newNode(type, operand, authType);
Node node = newNode(type, operand, append);
Node node = newNode(type, operand, params);
Node node = newNode(type, operand, 0, 0);
Node type = newNode(type, operand);
Node node; Node operand;
Node node = newNode(type, operand, args);
Node node = newNode(type, operand, td);
Node node = node;
Node node = newNode(type, operand, deps);
Node node = newNode(type, operand, hash);
Node node = newNode(type, operand == 0);
Node node = newNode(type, operand, attr);
Node node = newNode(exprNode, type);
Node node = newNode(type, operand, encoding);
Node node = newNode(type, operand, &ops);
Node node = newNode(type, operand, mType);
Node node = newNode(type, operand, c);
Node node = null_node;
Node node = null_node();
Node node = newNode(type, operand, cp);
Node node = newNode(type, operand, operand2);
Node node = newNode(type, operand, charset);
Node node = newNode(type, operand, io);
Node node = Node();
Node node = newNode(type, operand, &open);
Node node = newNode(type, operand, tmp);
Node node = null;
newNode(type, operand);
Node node = newNode(type, operand, operands);
Node node = newNode(type, operand, fc);
Node node = newNode(type, operand, ip);
Node node = newNode[type];
Node node = newNode(type, operand, iop);
Node node = newNode(type, operand, *exprNode.getOperand());
Node node = newNode(type, operand, null);
Node node = newNode(type, operand, caller);
Node node = newNode(type, operand, aNode);
Node node = newNode(type, operand, nid);
Node node = newNode(type, operand, exprNode.type);
Node node = newNode(type, operand, cd.type);
Node node = newNode(type, operand, isInline);
Node node = newNode(type, operand, node.getOperand());
Node node = newNode(type, operand, exprNode);
Node node = newNode(type, operand, -node);
Node node = newNode(type, operand, *item);
Node node = newNode(type, operand, intsyntax);
Node node = newNode(type, operand, &node);
Node node = newNode(type, operand, false);
Node node = newNode(type, operand, f);
Node node = newNode(type, operand, *ops);
Node node = newNode(type, operand, const Int32& aInt32)
Node node = newNode(type, operand, exprNode.getType());
Node node = newNode(type, operand, sizeof(operand));
Node node = newNode(type, operand, *sc);
Node node = newNode(type, operand, isAvailable);
Node node = newNode(type, operand, ctx);
Node node = newNode(type, operand, isSign);
Node node = newNode(type, operand, &res);
Node node = newNode(type, operand, irq);
Node node = newNode(type, operand, int exprNode.intVal);
Node node = newNode(type, operand, idle);
Node node = newNode(type, operand, *notifiers);
Node node = newNode(type, operand, &rv);
Node node = newNode(type, operand, *str);
Node node = newNode(type, operand, operand.clone());
Node node = newNode(type, operand, &rval);
Node node = newNode(type, operand, ntokens);
Node node = newNode(type, operand, exprNode.isPostfix());
Node node = newNode(type, operand, **defs);
Node node = newNode(type, operand, eofprNode);
Node node = newNode(type, operand, operand.getNodeType());
Node node = newNode(type, operand, **kobjs);
Node node = newNode(type, operand, &op, &op.dvd.type);
Node node = newNode(type, operand, recurse);
Node node = newNode(type, operand, ioCnt);
Node node = newNode(type, operand, operand.getParent());
Node node = newNode(type, operand, cstrlen(cstrlen));
Node node = newNode(type, operand, ltype);
Node node = newNode(type, operand, sizeof(type));
Node node = newNode(type, operand, deprecated);
Node node = newNode(type, operand, &newNode);
Node node = newNode(type, operand, aInstanceOf);
Node node = newNode(type, operand, node.getIncremental());
Node node = newNode(type, operand, inttype);
Node node = newNode(type, operand, &result);
Node node = newNode(type, operand, exprNode.getOperand());
Node node = newNode(type, operand, getter_AddRefs(operand));
Node node = newNode(type, operand, true);
Node node = newNode(type, operand, u_int32_t);
Node node = newNode(type, operand, operand.size());
Node node = newNode(type, operand, lc);
Node node = newNode(type, operand, e_Type);
Node node = newNode(type, operand, &operands);
Node node = newNode(type, operand, aExtension);
Node node = newNode(type, operand, &freeNode);
Node node = newNode(type, operand, operand.getFirst());
Node node = newNode(type, operand, &opt);
Node node = newNode(type, operand, mInner);
Node node = newNode(type, operand, aDependent);
Node node = newNode(type, operand, &free);
Node node = newNode(type, operand, kNumBool);
Node node = newNode(type, operand, (void *)operand);
Node node = newNode(type, operand, mInstance);
Node node = newNode(type, operand, *getter_AddRefs(operand));
Node node = newNode(type, operand, (uint32)(symbol));
Node node = newNode(type, operand, &m_ref);
Node node = newNode(type, operand, *newNode);
Node node = newNode(type, operand, &exprNode.getOperands());
Node node = newNode(type, operand, operand.type);
Node node = newNode(type, operand, sizeof(exprNode));
Node node = newNode(type, operand, *p);
Node node = newNode(type, operand, isLoop);
Node node = newNode(type, operand, isCommand);
Node node = newNode(type, operand, node.getNext());
