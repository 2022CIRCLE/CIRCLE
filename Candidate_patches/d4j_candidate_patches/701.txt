name = new Name("");
name = new Name(node);
name = new Node();
name = new Name(functionNode);

name = new Name(null);
name = new Name(null);
name = new Name(void);
name = new Name();
name = new Name(fnName);
name = new Name(&name);
name = new Name ();
name = new Name(true);
name = new Name(name);
name = new Name(0);
name = new Name;
name = new Name(this);
name = null;
Name name = new Name();
name = new Name(aName);
name = null;
name = new Name(*functionNode);
name = new nsName();
name = name.get();
node = new Node();
name = new Name(null);
name = name;
name = new Name(aNode);
name = new Name( );
name = new Name(1);
name = new Name(true);
Node newName = new Node();
name = new Name(FunctionNode);
name = new Name(fn);
name = new NullName();
name = new Name(&node);
name = new Name(false);
*name = new Name();
name=new Name();
name = new NameNode();
name = new name;
name = new Name(token.FUNCTION);
name = new Name(&functionNode);
name = nsCRT::name();
node.addChildToBack(name);
name = new Name(char *);
if (name) name = new Name();
name = new Name(newName);
name = new Name(true);
Node newName = new Name();
nameName = new Name();
name = new Name(",");
name = new Name(char*);
name = new Name( "" );
name = new NAME();
name = new Name(tmp);
name = NS_NewName();
name = new Name(());
name = new Name(None);
name = new NewName();
Node name = new Node();
name = new SimpleName();
name = new Name(s);
name = createName();
name = new Nam();
name = new *name;
name = nullName();
result = new Name();
name = new Name( functionNode );
name = new NodeName();
name = new Name(type);
newName = new Node();
name = new Name([]);
name = new Name(&newName);
Node name = new Name();
name = new Label();
name= new Name();
name = new Name(functionName);
name = new Name(&fnName);
newName = new Name(node);
name = nullName;
newName = new Name("");
name = new "";
name = new Name(Node);
name = new Name(n);
name = new GenericName();
name = new TokenName();
name = null;
name = new Token();
name = nsCRT::Name();
aName = new aName();
name = new Name( functionNode);
name = new Name(options);
name = (Node) new Name();
name = new Name(eNode);
rv = new Name();
name = new Name(void));
return new Name();
name = newName("");
name = new Name(element);
name = new Name('0');
name = builder.newName();
name = (name = new Name());
name = new NS_Name();
name = new Name(;);
name = new Name("", functionNode);
name = new Name('"');
name = new Name(false);
name = new nsFunctionName();
Name newName = new Name();
name = new UnnamedName();
name = new nsCAutoString();
name = new Name::name();
name = NullName();
name = new Name(__unused);
name = Node.newName();
name = new Name2();
name = new DOMName();
name = new GlobalName();
fnName = new Name();
(void) new Name();
name;
name = new InitialName();
name = new Name(key);
name = new Name(flags);
name.name = new Name();
name = buildName();
name = new Name(fnNode);
name = new Name(function);
name = new Name(aFunctionNode);
name = new Name(&null);
name = new Name(bool);
name = NodeNewName();
name = new None;
nameStr = new Name();
name = new LocalName();
newName = new Name(null);
name = newName(node);
name = new String();
name = new Name(*this);
const char* name = new Name();
name = new Name(void)();
name = new Name(!functionNode);
name = new Name("", "");
name = new Name( null );
name = new Name(0, 0);
name = new DOMNode();
name = new Name(string);
name = new Name(buf);
name = new Name(lpColumn);
name = null_name;
name = newName;
name = new Name(fnname);
name = new Name("", null);
name = new Name(obj);
name = new Name("".);
name = new Name(str);
newName = new Name(functionNode);
name = new Name(node, "");
name = fnName;
name = new Name( null);
name = newName(functionNode);
name = new Name(TOken.FUNCTION);
Node newName = transform(newName);
name = new Name(node, null);
name = new Name(char **);
name = new Name( "");
name = functionNode.getName();
name = new Name(ep);
name = new Name(token);
isUnnamedFunction = true;
name = new Name(nsAutoString());
name = new Name(charset);
name = new Name(unnamed);
name = new Name(aFunctionName);
name = None;
name = new Name((void**)&name);
name = fnName.getName();
name = new Name(null, null);
name = new Name(ptr);
name = new Name(aFunction);
Node node = new Node();
name = new Name(functionNode.name);
name = new Name(functionNode).get();
name = new Name((void **)&name);
name = new Name(functionNode, null);
name = new Name(uint32_t);
nsAutoString name = new Name();
name = new Name(functionNode.getName());
NS_PRECONDITION(name, "bad name");
lp = new Node(Token.LP);
if (name)  name = new Name();  else  name = -1;
r = new Name();
nsString name; nsString name(nsString);
NS_PRECONDITION(newName, "bad name");
name = new Name(aConflictNode);
name = new Name(functionNode.getFunctionName());
name = new Name( NS_LITERAL_STRING("").get());
name = new Name(&nsCRT::strdup(functionNode));
/* We can't do this here */ name = new Name();
name = new Name(&functionNode.getFunctionName());
nsFunctionNode::name = new nsFunctionNode::Name();
if (node == null) name = new Name();
name = new Name( nsCRT::strlen(name) );
if (name == null)  name = new Name();
name = new Name(et);
name = new Name( NS_LITERAL_STRING(""));
name = new Name(eType);
name = new Name( ) ;
name = new Name(PRUnichar("").get());
name = new Name( functionNode.getFunctionName() );
lp = newNode(Token.LP);
char *name = new char*();
name = new Name(functionNode.getUniqueName());
name = new Name( functionNode.getFunctionName());
name = new Name(functionNode.getLineno());
name = new Name(aPrefix);
name = new Name(functionNode.getLp());
NS_ENSURE_ARG_POINTER(functionNode); name = new Name();
if (!name) return NS_ERROR_NULL_POINTER;
if (name) &name = new Name(); <else &name = -1;
name = new Name();
if (name) name = new Name(); &else name = -1;
if (name) <name = new Name(); &else &name = -1;
if (name) &name = new Name(); else <name = -1;
if (name) <name = new Name(); <else <name = -1;
if (name) <name = new Name(); else name = -1;
name = new Name('<0');
if (name) name = new Name(); else <name = -1;
if (name) name = new Name(); else &name = -1;
if (name) <name = new Name(); &else name = -1;
if (name) &name = new Name(); else &name = -1;
if (name == null) <name = new Name();
name = new Name("");
if (name) &name = new Name(); <else name = -1;
if (name) <name = new Name(); else <name = -1;
if (name) name = new Name(); &else <name = -1;
name = new Name(<"");
if (name) name = new Name(); <else name = -1;
if (name) name = new Name(); <else <name = -1;
if (name == null) &name = new Name();
if (name) &name = new Name(); &else name = -1;
if (name) name = new Name(); else name = -1;
if (name) &name = new Name(); <else <name = -1;
if (name) &name = new Name(); &else &name = -1;
name = new Name(&"");
name = new Name('&0');
if (name) name = new Name(); &else &name = -1;
if (name == null) name = new Name();
if (name) <name = new Name(); <else name = -1;
if (name) &name = new Name(); &else <name = -1;
if (name) &name = new Name(); else name = -1;
if (name) <name = new Name(); &else <name = -1;
if (name) <name = new Name(); <else &name = -1;
if (name) <name = new Name(); else &name = -1;
name = new Name('0');
if (name) name = new Name(); <else &name = -1;
