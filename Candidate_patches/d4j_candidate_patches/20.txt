golden:
public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; }
inference:
public double getLInfNorm()  return 0;
private double getLInfNorm()  return 0;
private double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
virtual double getLInfNorm()  return 0;
public double getLInfNorm()  return double max;
getLInfNorm()
public double getLInfNorm()  return iter.value();
public double getLInfNorm(void)  return 0;
public double getLInfNorm()  return -1;
virtual double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  return mLInfNorm;
getLInfNorm()  return 0;
private double getLInfNorm()  return double max;
inline double getLInfNorm()  return 0;
static double getLInfNorm()  return 0;
virtual double getLInfNorm()  return double max;
private double getLInfNorm()  return mLInfNorm;
public double getLInfNorm()  return NS_OK;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm() const  return 0;
public double getLInfNorm()
public double getLInfNorm()  return mLinfNorm;
private double getLInfNorm()  return -1;
private double getLInfNorm()
getLInfNorm() const  return 0;
public double getLInfNorm()  return getLInfNorm();
private double getLInfNorm()  return iter.value();
inline double getLInfNorm()  return double max;
public double getLInfNorm()  return (0);
void getLInfNorm()  return 0;
NS_IMETHOD getLInfNorm()  return NS_OK;
private double getLInfNorm()  return NS_OK;
getLInfNorm()  return mLInfNorm;
getLInfNorm() const  return mLInfNorm;
private double getLInfNorm()  return mLinfNorm;
virtual double getLInfNorm()
virtual double getLInfNorm()  return mLInfNorm;
virtual double getLInfNorm()  return -1;
public double getLInfNorm()  double max = 0;
NS_METHOD getLInfNorm()  return NS_OK;
private double getLInfNorm()  return (0);
public double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
inline double getLInfNorm()  return mLInfNorm;
virtual double getLInfNorm()  return iter.value();
public double getLInfNorm()  iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
private double getLInfNorm()  double max = 0;
getLInfNorm() const
virtual double getLInfNorm()  return (0);
public double getLInfNorm(void)  return NS_OK;
getLInfNorm(void)  return 0;
static double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm()  return NS_OK;
getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
inline double getLInfNorm() const  return 0;
static double getLInfNorm()  return double max;
inline double getLInfNorm()  return -1;
public double getLInfNorm (void)  return 0;
private double getLInfNorm(void)  return 0;
public double getLInfNorm()  return iter;
public double getLInfNorm()  return double max = 0;
getLInfNorm()  return getLInfNorm();
public double getLInfNorm()  return rv;
private double getLInfNorm()  return double max = 0;
public double getLInfNorm() const  return mLInfNorm;
virtual double getLInfNorm()  double max = 0;
public void getLInfNorm()  return 0;
public double getLInfNorm() const  return double max;
virtual double getLInfNorm() const  return 0;
public double getLInfNorm(void)  return double;
virtual double getLInfNorm()  return mLinfNorm;
public inline double getLInfNorm()  return 0;
NS_IMETHOD getLInfNorm(double max)  return NS_OK;
public double getLInfNorm()  return ret;
private double getLInfNorm()  return getLInfNorm();
public double getLInfNorm()  return iter.value();
inline double getLInfNorm()  return iter.value();
static double getLInfNorm()  return mLInfNorm;
public double getLInfNorm(void)  return -1;
public double getLInfNorm()  return entry.get();
static inline double getLInfNorm()  return 0;
inline double getLInfNorm()  return mLinfNorm;
virtual double getLInfNorm()  return double max = 0;
public double getLInfNorm(void)  return (0);
virtual double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm() const
NS_IMETHOD getLInfNorm(void)  return NS_OK;
NS_IMETHOD GetLInfNorm()  return NS_OK;
private inline double getLInfNorm()  return 0;
private double getLInfNorm() const  return 0;
getLInfNorm() const return mLInfNorm;
public double getLInfNorm(void)  return iter.value();
public double getLInfNorm(void)  return mLInfNorm;
public double getLInfNorm(double max)  return 0;
PRInt32 getLInfNorm()  return 0;
static const double getLInfNorm()  return 0;
getLInfNorm(void)
NS_IMETHOD double getLInfNorm(void)  return NS_OK;
getLInfNorm(void)  return getLInfNorm(void);
public double getLInfNorm()  return getLInfNorm(null);
NS_METHOD getLInfNorm(void)  return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm()  double max; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  return iter.get();
void getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public Double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
virtual double getLInfNorm()  return getLInfNorm();
public double getLInfNorm()  return GetLInfNorm();
public double getLInfNorm(double max = 0); Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
inline double getLInfNorm() const  return mLInfNorm;
return getLInfNorm();
NS_IMETHOD double getLInfNorm()  return 0;
public double getLInfNorm(void)  return getLInfNorm(void);
NS_IMETHOD GetLInfNorm(double max)  return NS_OK;
NS_IMETHOD getLInfNorm()  return 0;

void *getLInfNorm() const  return 0;
PRBool getLInfNorm() const  return mLInfNorm;
public double getLInfNorm()  double max = 0; iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
inline double getLInfNorm(void)  return 0;
PRBool getLInfNorm() const  return 0;
getLInfNorm() const  return mLinfNorm;
public double getLInfNorm(void)  double max = 0;
PRBool getLInfNorm()  return 0;
public double getLInfNorm()  return linfNorm;
private double getLInfNorm()  double max = 0; iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
PRInt32 getLInfNorm() const  return 0;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
inline double getLInfNorm()  return getLInfNorm();
private double getLInfNorm()  double max; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
getLInfNorm()  return getLInfNorm(null);
double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  double max = 0; Iterator iter; while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm::double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm()  return getLInfNorm(&iter);
public double getLInfNorm()  return getLinfNorm();
getLInfNorm(void)  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
private double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm() const  return mLinfNorm;
NS_IMETHOD getLInfNorm (void)  return NS_OK;
public double getLInfNorm()  Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm(void) const  return 0;
virtual double getLInfNorm() const  return mLInfNorm;
NS_IMETHOD double getLInfNorm (void)  return NS_OK;
private double getLInfNorm()  Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm(double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return iter;
private double getLInfNorm() const  return mLInfNorm;
public double getLInfNorm()  Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  return mInner.getLInfNorm();
PRBool getLInfNorm()  return mLInfNorm;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
return getLInfNorm()
public double getLInfNorm()  return getLInfNorm(null);
void *getLInfNorm() const  return mLInfNorm;
private double getLInfNorm()  double max = 0; Iterator iter; while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
NS_IMETHOD getLInfNorm(double max)  return 0;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value(); return max;
PRInt32 getLInfNorm() const  return mLInfNorm;
public double getLInfNorm()  return (double)getLInfNorm();
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm()  Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
getLInfNorm() const  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  return getLInfNorm(&list);
public double getLInfNorm(void)  return getLInfNorm(null);
public double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
virtual double getLInfNorm()  double max = 0; iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
virtual double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm()  double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();
public double getLInfNorm()  iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value(); return max;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value(); return max;
public double getLInfNorm()  return iter.value()  0;
public double getLInfNorm (void)  return getLInfNorm ();
private double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(nsIArena* aArena)  return NS_OK;
public double getLInfNorm()  return getLInfNorm(&entry);
public double getLInfNorm()  return getLInfNorm(&result);
public double getLInfNorm()  return getLInfNorm(0, 0);
private double getLInfNorm()  return getLInfNorm(&iter);
PRBool getLInfNorm() const return mLInfNorm;
PRBool getLInfNorm() const  return mLinfNorm;
public double getLInfNorm(void)  return getLInfNorm(null);
nsresult double getLInfNorm()  return null;
PRBool getLInfNorm()  return getLInfNorm();
public double getLInfNorm(void)  return getLInfNorm(*this);
NS_DEF_TEMPLATE_STRING_GETLInfNorm(double)  return NS_OK;
public double getLInfNorm()  return getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape)
nsXULElement::GetLInfNorm(nsIPresContext* aPresContext, nsIRDFResource* aResource, const nsIScriptRange* aResult, const nsIRDFResource* aProperty, const nsIScriptRange* aProperty, int aProperty, int aProperty, int aDebugVar) ::GetLinfNorm(aPresContext, aProperty) ::GetLinfNorm(aProperty) ::GetLinfNorm(aProperty) ::GetLinfNorm(aProperty) ::GetLinfNorm(aProperty) ::GetLinfNorm(aProperty) ::GetLinfNorm(aProperty) ::GetLinfNorm(aProperty) :
private double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
private double getLInfNorm()  return mLiteral;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue)  if (mRefs.mPseudoArena == aSubtree.mPseudoArena)  return NS_OK;  return NS_OK;
public double getLInfNorm()  return _linfNorm(*this, 0, &ri);
public double getLInfNorm()  return entry_idx;
getLInfNorm() const return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType)  if (aName)  nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv;  return rv;
NS_IMETHOD getLInfNorm(nsIAtom* aAtom)  return NS_OK;
public double getLInfNorm()  return entry[0];
private double getLInfNorm()  return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm()  return &(sizeof(*))  0;
PRInt32 getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
void getLInfNorm(double max = 0)  return res;
public double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm()  return  0;
getLInfNorm(double max)  return 0;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType)  if (aConstraintType == aType.get())  return (nsCRT::strdup(aConstraintType));  return (NS_OK);
virtual double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
NS_IMETHOD getLInfNorm()
public double getLInfNorm(double max, double max_idx)  return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode)  nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode)  return NS_OK;   else  return NS_OK;
NS_IMETHOD getLInfNorm(nsIAtom* aParentType)  return mStyleContext.GetStyleContent(aParentType);
virtual double getLInfNorm()  return &_ih;
private double getLInfNorm()  return entry.get();
nsIArena::GetLInfNorm(nsIArena* aArena)  if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; return NS_OK;
nsHTMLEncoding::GetLInfNorm(nsIStyleContext* aStyleContext, const nsStyleContext* aStyleContext, PRUint32 aValue, PRUint32 aValueType)  return mStyleContext.GetStyleContext(aStyleContext);
nsListener::GetLInfNorm(nsIContent* aContent)  if (mCurrentContent)  return mCurrentContent.GetLInfNorm();  return NS_OK;
public double getLInfNorm(void)  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
NS_METHOD nsLInfNorm::GetLInfNorm(double)  return nsLInfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLi
nsRect::GetLInfNorm(double max)  nsresult rv = nsGenericElement::GetLinfNorm(max); if (NS_FAILED(rv)) return rv; return NS_OK;
public double getLInfNorm(void)  struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++)  ioctl.ioctl = ioctl; ioctl++;  return ioctl(&ioctl);
getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
NS_IMETHOD double getLInfNorm(nsIStyleContext* aContext, PRUint32 aLength)  return mContext.mContext.mContext.mLength;
public double getLInfNorm(Iterator iter = entries.iterator())  while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
void getLInfNorm(void)  return _("double");
public double getLInfNorm()  return nsLinfNorm::nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_Lin
getLInfNorm()  return iter.value();
public double getLInfNorm(nsIInteger *aInteger, int len, const int len)  return mInteger.get();
public double getLInfNorm()  return entries[0];
void * getLInfNorm() const  return mLInfNorm;
public double getLInfNorm()  return XP_MAC((u_int32_t) 0);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result)  nsString* uid = aClass.GetUnicode(); for (result = null; res  uid; res++)  nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT)  nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT)  nsCOMPtrnsIXULTemplateInfo> xul; xul
NS_IMETHOD getLInfNorm(nsIFrame* aFrame, nsIFrame* aParent, const nsFrame* aOwner)  return nsSpecialDataSource::GetLInfNorm(aFrame);
private double getLInfNorm()  return mFrameManager.getLInfNorm(mFindTreeItem);
void *getLInfNorm(void)  struct proc *p; while (p  entries.size())  p = *p; p = p; if (p == '0')  p = p; return 0;
void *getLInfNorm()  return NS_OK;
public double getLInfNorm()  return entry;
public double getLInfNorm( void *aRealm)  aRealm = 0; for (int i=0; in; i++)  aRealm += aRealm;  return NS_OK;
public double getLInfNorm()  return entries[i];
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument)  if (aDocument)  nsIDOMNode* it = aDocument; while (it!= aDocument)  it.advance(); it.max += it.value();  return it;
public double getLInfNorm()  return getLInfNorm(mi) > 0;
getLInfNorm(nsIAtom* aAtom)  PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm( void)  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm()  return double  0;
NS_IMETHOD getLInfNorm(double max)  NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr)  return NS_OK;
public double getLInfNorm(void)  return linfNorm;
private double getLInfNorm()  return &size;
public double getLInfNorm(void)  struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next)  /* we need to add a */ while (ptr == null)  if (ptr.name == NS_LInf_LInf_next)  *ptr = ptr.next;   else return NS_OK;  /* not an null value */  return NS_OK;
nsresult double getLInfNorm()  nsIDOMCSSIID kNameSpaceID_None; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */   if (idx == -1)  if ((*idx == -1))  if (!*idx) return 0;  return 0;
virtual double getLInfNorm()  return entry.getLInfNorm();
public double getLInfNorm(int max, u_long)  return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, const nsXULTemplateBuilder& aContext)  nsresult rv = NS_OK; nsIDOMCSSRule* rv = NS_NewISupportsArray(aDocument); if (NS_FAILED(rv)) return rv; return NS_OK;
NS_IMETHOD getLInfNorm(void)  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
virtual double getLInfNorm()  return sanitize(sanitize(mtx_expects));
public double getLInfNorm(int retval)  if (! retval) return NS_ERROR_NULL_POINTER; return retval;
getLInfNorm() const  u_int32_t cnt; if (!m_int32_t)  return 0;
NS_IMETHOD getLInfNorm(PRUint32 aLength)  return NS_OK;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm(nsIXULAtom* aXULAtom, const double& aEnd)  nsIXULAtom* aXULAtom = (nsIXULAtom*)aXULAtom; if (!aXULAtom) return NS_ERROR_NULL_POINTER; return NS_OK;
getLInfNorm() const  return mLInfNorm? 0 : 0;
void *getLInfNorm(void)  return mLinfNorm;
void getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
NS_IMETHOD double getLInfNorm()  double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
PRInt32 getLInfNorm() const  PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext())  iter.advance(); max += iter.value();  return max;
public double getLInfNorm(const double max)  return iter.value();
public double getLInfNorm()  return entry.lis;
getLInfNorm(double max)  if (!list) return null; while (list)  for (; i  n; i++)  if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(void)  struct foreignore afore; PRInt32 count =  afore.length - afore.count; for (PRInt32 i = 0; i  count; ++i)  afore[i] = afore[i]; if (n  afore.length)  for (i = afore.length; i  afore.count; i++)  afore[i] = afore[i]; afore[i] = afore[i];     return afore;
public double getLInfNorm()  return (double) 0;
void *getLInfNorm()  if (idx  idx)  if (event.type == TINNEAD)  tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp);  return -1;
public double getLInfNorm()  return getLInfNorm(&t);
NS_IMETHOD GetLInfNorm()  void* aLinf = 0; if (null == aLinf)  return NS_OK;
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt)  nsresult result = NS_OK; if (mTarget)  result = NS_NewXPIDLCString(kNameSpaceID_None, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
void getLInfNorm()  return (0);
virtual double getLInfNorm()  return f(v);
getLInfNorm()  if (!m_runtime.m_reg.m_flags) return null; return 0;
private double getLInfNorm()  return getLInfNorm(&list);
getLInfNorm()  return double max;
private double getLInfNorm() return entry.get();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
virtual double getLInfNorm() <return mLInfNorm;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return iter;
public double getLInfNorm() <return (0);
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <&else return NS_OK;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() const &return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
getLInfNorm() return 0;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, const nsXULTemplateBuilder& aContext) &nsresult rv = NS_OK; nsIDOMCSSRule* rv = NS_NewISupportsArray(aDocument); if (NS_FAILED(rv)) return rv; return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); return NS_OK;
private double getLInfNorm() Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &&else return NS_OK;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() &return mLInfNorm;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
void *getLInfNorm() &if (idx &idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm() return double max;
public double getLInfNorm double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
NS_IMETHOD double getLInfNorm() <return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <else return NS_OK;
NS_METHOD nsLInfNorm::GetLInfNorm(double) &return nsLInfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLi
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
void *getLInfNorm(void) struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
inline double getLInfNorm() const return mLInfNorm;
public double getLInfNorm() Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() &return iter.value() 0;
void *getLInfNorm() &if (idx &idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); &return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); return NS_OK;
private double getLInfNorm() double max; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() return mLinfNorm;
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <return getLInfNorm(null);
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &<else return NS_OK;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
virtual double getLInfNorm() const <return mLInfNorm;
private double getLInfNorm() <double max = 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &else return NS_OK;
getLInfNorm() <return getLInfNorm();
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); <return NS_OK;
inline double getLInfNorm() <return getLInfNorm();
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
private double getLInfNorm() &Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
virtual double getLInfNorm() return (0);
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <else return NS_OK;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() &return getLInfNorm(&entry);
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); &return NS_OK;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) const &return 0;
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm() const return 0;
private double getLInfNorm() Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm (void) &return NS_OK;
public double getLInfNorm(void) <return getLInfNorm(*this);
void *getLInfNorm(void) struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
public double getLInfNorm() return double max = 0;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() <Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm() const &u_int32_t cnt; if (!m_int32_t) <return 0;
virtual double getLInfNorm() <return &_ih;
public double getLInfNorm(void) return NS_OK;
private double getLInfNorm() Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; &return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); return (NS_OK);
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(nsIArena* aArena) <return NS_OK;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <else return NS_OK;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() &return &(sizeof(*)) <0;
public double getLInfNorm() <return double 0;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; &return NS_OK;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; &return NS_OK;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
inline double getLInfNorm() &return 0;
public double getLInfNorm <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &<else return NS_OK;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return iter;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; return NS_OK;
virtual double getLInfNorm() const return mLInfNorm;
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) return mCurrentContent.GetLInfNorm(); <return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
static double getLInfNorm() <return double max;
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); return (NS_OK);
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
static double getLInfNorm() <return 0;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm(double max) if (!list) return null; while (list) <for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(double max, double max_idx) return 0;
getLInfNorm() if (!m_runtime.m_reg.m_flags) return null; return 0;
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
getLInfNorm(double max) if (!list) return null; while (list) <for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
PRBool getLInfNorm() return 0;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return iter;
getLInfNorm() const <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
NS_IMETHOD GetLInfNorm() &void* aLinf = 0; if (null == aLinf) &return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm() const return 0;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
void *getLInfNorm() &if (idx idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
static double getLInfNorm() &return mLInfNorm;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; &return NS_OK;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; return NS_OK;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm(double max) if (!list) return null; while (list) <for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
static const double getLInfNorm() &return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(double max) &if (!list) return null; while (list) for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() return GetLInfNorm();
virtual double getLInfNorm() <return entry.getLInfNorm();
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public Double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
private inline double getLInfNorm() &return 0;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
PRBool getLInfNorm() const <return mLinfNorm;
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
PRInt32 getLInfNorm() return 0;
void * getLInfNorm() const return mLInfNorm;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() &return entry[0];
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
void *getLInfNorm() &if (idx <idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
virtual double getLInfNorm() return &_ih;
getLInfNorm() const <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; &return NS_OK;
inline double getLInfNorm() <return mLInfNorm;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm() &double max = 0;
getLInfNorm(double max) if (!list) return null; while (list) &for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm() &if (idx &idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(double max) &if (!list) return null; while (list) for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &<else return NS_OK;
public double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
NS_IMETHOD getLInfNorm(nsIAtom* aAtom) <return NS_OK;
inline double getLInfNorm() &return mLinfNorm;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm(void) &return double;
getLInfNorm() <return 0;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; return NS_OK;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
void *getLInfNorm() if (idx idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
private double getLInfNorm() &return getLInfNorm(&iter);
inline double getLInfNorm(void) <return 0;
virtual double getLInfNorm() <return 0;
double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm(nsIXULAtom* aXULAtom, const double& aEnd) <nsIXULAtom* aXULAtom = (nsIXULAtom*)aXULAtom; if (!aXULAtom) return NS_ERROR_NULL_POINTER; return NS_OK;
NS_IMETHOD GetLInfNorm() &return NS_OK;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; &return NS_OK;
private double getLInfNorm() <return -1;
NS_IMETHOD getLInfNorm(double max) <return NS_OK;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() <return &0;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; &return NS_OK;
virtual double getLInfNorm() return double max;
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
NS_METHOD getLInfNorm() return NS_OK;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(double max) &return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <<else return NS_OK;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &<else return NS_OK;
void *getLInfNorm() &if (idx idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
virtual double getLInfNorm() double max = 0;
void *getLInfNorm() const return 0;
private double getLInfNorm() <return double max = 0;
void *getLInfNorm() <if (idx &idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &return ret;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
getLInfNorm() const &return mLinfNorm;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) &return iter.value();
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() &return iter;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() return getLInfNorm(&list);
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
private double getLInfNorm() <return NS_OK;
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public inline double getLInfNorm() return 0;
void *getLInfNorm() <if (idx <idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
public double getLInfNorm(const double max) return iter.value();
NS_IMETHOD GetLInfNorm() <void* aLinf = 0; if (null == aLinf) &return NS_OK;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() <return linfNorm;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; <return NS_OK;
nsresult double getLInfNorm() return null;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
NS_IMETHOD getLInfNorm() <return 0;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return iter;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <&else return NS_OK;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return iter;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; <return NS_OK;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; return NS_OK;
public double getLInfNorm() <return ret;
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
PRInt32 getLInfNorm() const &return mLInfNorm;
NS_IMETHOD getLInfNorm(nsIFrame* aFrame, nsIFrame* aParent, const nsFrame* aOwner) <return nsSpecialDataSource::GetLInfNorm(aFrame);
getLInfNorm() return getLInfNorm(null);
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm() return getLInfNorm(&t);
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; &return NS_OK;
virtual double getLInfNorm() return mLinfNorm;
public double getLInfNorm() return double 0;
void *getLInfNorm() if (idx <idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void *getLInfNorm() &if (idx <idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() return getLInfNorm(&iter);
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
void *getLInfNorm() if (idx <idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() <return -1;
PRBool getLInfNorm() const return mLinfNorm;
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
void *getLInfNorm(void) return mLinfNorm;
public double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
virtual double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm() <return iter.value();
virtual double getLInfNorm() <double max = 0;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
inline double getLInfNorm() return 0;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); <return NS_OK;
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
inline double getLInfNorm() <return iter.value();
private double getLInfNorm() return (0);
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) return getLInfNorm(null);
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
getLInfNorm() const return mLInfNorm;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
inline double getLInfNorm() &return double max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; else return NS_OK;
private double getLInfNorm() <Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return iter;
private double getLInfNorm() <double max; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
NS_IMETHOD getLInfNorm(double max) &NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) return NS_OK;
PRInt32 getLInfNorm() const <return 0;
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() &return double max = 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
void *getLInfNorm() const &return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
public double getLInfNorm() <double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
PRBool getLInfNorm() &return getLInfNorm();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; return NS_OK;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; return NS_OK;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
void *getLInfNorm() const &return mLInfNorm;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsRect::GetLInfNorm(double max) &nsresult rv = nsGenericElement::GetLinfNorm(max); if (NS_FAILED(rv)) return rv; return NS_OK;
NS_IMETHOD GetLInfNorm(double max) &return NS_OK;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; return NS_OK;
private double getLInfNorm() &return mFrameManager.getLInfNorm(mFindTreeItem);
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
inline double getLInfNorm() &return -1;
public double getLInfNorm() &return double &0;
public double getLInfNorm() &return XP_MAC((u_int32_t) 0);
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return iter;
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() return f(v);
public inline double getLInfNorm() &return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
void *getLInfNorm() <if (idx idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(void) &return getLInfNorm(void);
public double getLInfNorm(void) &return getLInfNorm(null);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; <return NS_OK;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; else return NS_OK;
public double getLInfNorm() <return entry_idx;
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() const return mLInfNorm;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
private double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() &return iter.value() &0;
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm() &Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm(double max) if (!list) return null; while (list) for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; &return NS_OK;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <&else return NS_OK;
public double getLInfNorm() return getLinfNorm();
private double getLInfNorm() <return double max;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
getLInfNorm(double max) if (!list) return null; while (list) for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(double max) if (!list) return null; while (list) for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
private double getLInfNorm() double max = 0;
getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm()
void *getLInfNorm() if (idx <idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm(void) <return 0;
void *getLInfNorm() &if (idx &idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() <return entry[0];
public double getLInfNorm(nsIArena* aArena) &return NS_OK;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm() &return getLInfNorm(&list);
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; return NS_OK;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return iter;
NS_IMETHOD double getLInfNorm (void) return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <&else return NS_OK;
public double getLInfNorm(void) return -1;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &&else return NS_OK;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(int retval) &if (! retval) return NS_ERROR_NULL_POINTER; return retval;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; <return NS_OK;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return iter;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(int max, u_long) return 0;
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; return NS_OK;
public double getLInfNorm() return 0;
getLInfNorm() const &u_int32_t cnt; if (!m_int32_t) &return 0;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
void *getLInfNorm() if (idx &idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm::double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
public double getLInfNorm() <return getLinfNorm();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
void *getLInfNorm() <if (idx idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; <return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
public double getLInfNorm(void) return mLInfNorm;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return iter;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; return NS_OK;
public double getLInfNorm() <return getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape)
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() &return nsLinfNorm::nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_Lin
NS_IMETHOD double getLInfNorm(nsIStyleContext* aContext, PRUint32 aLength) return mContext.mContext.mContext.mLength;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() <return iter.value() &0;
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return iter;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <else return NS_OK;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
PRInt32 getLInfNorm() const return mLInfNorm;
public double getLInfNorm() const &return double max;
private double getLInfNorm() &double max; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
static double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() <return double max;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; &return NS_OK;
getLInfNorm(void) <return getLInfNorm(void);
NS_IMETHOD GetLInfNorm(double max) return NS_OK;
public double getLInfNorm(nsIXULAtom* aXULAtom, const double& aEnd) &nsIXULAtom* aXULAtom = (nsIXULAtom*)aXULAtom; if (!aXULAtom) return NS_ERROR_NULL_POINTER; return NS_OK;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public Double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
void *getLInfNorm() <if (idx idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void *getLInfNorm() &if (idx <idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; &return NS_OK;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; &return NS_OK;
public double getLInfNorm() <return iter.get();
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm(double max) &return 0;
inline double getLInfNorm() return iter.value();
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm() &return double max;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; <return NS_OK;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &else return NS_OK;
getLInfNorm() const <u_int32_t cnt; if (!m_int32_t) &return 0;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
virtual double getLInfNorm() <return 0;
private double getLInfNorm() double max = 0;
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_IMETHOD getLInfNorm(PRUint32 aLength) &return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
static double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) &return getLInfNorm(*this);
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
NS_IMETHOD GetLInfNorm() <void* aLinf = 0; if (null == aLinf) return NS_OK;
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() &return (double)getLInfNorm();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; <return NS_OK;
public double getLInfNorm() &return double max = 0;
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void *getLInfNorm() <if (idx <idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(double max) if (!list) return null; while (list) for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_METHOD getLInfNorm() &return NS_OK;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) <return getLInfNorm(null);
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
void *getLInfNorm() if (idx &idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; <return NS_OK;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void *getLInfNorm() if (idx idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() return double <0;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
static const double getLInfNorm() <return 0;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <&else return NS_OK;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm() &return getLInfNorm(null);
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; &return NS_OK;
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &return mInner.getLInfNorm();
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm() const <return mLInfNorm;
public double getLInfNorm() <return (double) 0;
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
private double getLInfNorm() &return iter.value();
public double getLInfNorm(int retval) if (! retval) return NS_ERROR_NULL_POINTER; return retval;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) &nsresult result = NS_OK; if (mTarget) &result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
inline double getLInfNorm() return mLinfNorm;
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() <return _linfNorm(*this, 0, &ri);
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
void *getLInfNorm(void) struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm() const return double max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; <return NS_OK;
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
inline double getLInfNorm() <return -1;
PRBool getLInfNorm() <return 0;
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; <return NS_OK;
private double getLInfNorm() return 0;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return iter;
static double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() const u_int32_t cnt; if (!m_int32_t) <return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
void *getLInfNorm() if (idx <idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm() return NS_OK;
PRInt32 getLInfNorm() <return 0;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void *getLInfNorm() if (idx &idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
static double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; return NS_OK;
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() double max = 0;
inline double getLInfNorm() const <return 0;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
void *getLInfNorm() if (idx <idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) &nsresult result = NS_OK; if (mTarget) <result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, const nsXULTemplateBuilder& aContext) <nsresult rv = NS_OK; nsIDOMCSSRule* rv = NS_NewISupportsArray(aDocument); if (NS_FAILED(rv)) return rv; return NS_OK;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD double getLInfNorm(void) <return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm(double max) &if (!list) return null; while (list) for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm() if (idx &idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
void *getLInfNorm() &if (idx &idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void *getLInfNorm() if (idx idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_IMETHOD getLInfNorm(nsIAtom* aAtom) return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; <return NS_OK;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &return double max;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() const <return mLInfNorm;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
public double getLInfNorm() &return getLInfNorm(&t);
NS_IMETHOD getLInfNorm(nsIAtom* aAtom) &return NS_OK;
public double getLInfNorm &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); &return NS_OK;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; &return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) return mCurrentContent.GetLInfNorm(); <return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
void *getLInfNorm() &if (idx idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; return NS_OK;
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; return NS_OK;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; <return NS_OK;
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() <return -1;
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD getLInfNorm(nsIAtom* aParentType) <return mStyleContext.GetStyleContent(aParentType);
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; <return NS_OK;
void *getLInfNorm() if (idx &idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() return iter.value();
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
NS_IMETHOD double getLInfNorm() return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <return double max = 0;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; <return NS_OK;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; <return NS_OK;
public double getLInfNorm(void) <return double;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
void *getLInfNorm() <if (idx <idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsresult double getLInfNorm() <return null;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() return &0;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; <return NS_OK;
private double getLInfNorm() return getLInfNorm(&list);
private double getLInfNorm() return mLiteral;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &return GetLInfNorm();
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
static double getLInfNorm() <return mLInfNorm;
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) <return -1;
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return iter;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) nsresult result = NS_OK; if (mTarget) <result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_DEF_TEMPLATE_STRING_GETLInfNorm(double) return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &&else return NS_OK;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
virtual double getLInfNorm() return entry.getLInfNorm();
getLInfNorm(double max) if (!list) return null; while (list) for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public Double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
NS_IMETHOD GetLInfNorm() void* aLinf = 0; if (null == aLinf) return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <<else return NS_OK;
void *getLInfNorm() <if (idx <idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() <return &size;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
void *getLInfNorm() <if (idx &idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(void) &return getLInfNorm(void);
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm() &return iter.value();
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; return NS_OK;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
private double getLInfNorm() return &size;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; <return NS_OK;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm() const &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; return NS_OK;
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
PRBool getLInfNorm() const <return mLInfNorm;
static const double getLInfNorm() return 0;
inline double getLInfNorm() &return getLInfNorm();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
inline double getLInfNorm() &return mLInfNorm;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; <return NS_OK;
getLInfNorm(double max) if (!list) return null; while (list) <for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm() return <0;
void *getLInfNorm() &if (idx <idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm() const &return mLInfNorm;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public void getLInfNorm() <return 0;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
virtual double getLInfNorm() &return 0;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return iter;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) return mCurrentContent.GetLInfNorm(); return NS_OK;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsIArena::GetLInfNorm(nsIArena* aArena) &if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; &return NS_OK;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; <return NS_OK;
private double getLInfNorm() &return getLInfNorm();
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
void *getLInfNorm() &if (idx &idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm() <return getLInfNorm(&list);
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
private double getLInfNorm() &Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_IMETHOD getLInfNorm(nsIAtom* aParentType) return mStyleContext.GetStyleContent(aParentType);
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); <return NS_OK;
NS_IMETHOD GetLInfNorm() return NS_OK;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; return NS_OK;
PRBool getLInfNorm() <return getLInfNorm();
public double getLInfNorm() &return NS_OK;
public double getLInfNorm(void) return iter.value();
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; <return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() return (double) 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <<else return NS_OK;
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); &return NS_OK;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
NS_IMETHOD getLInfNorm(void) return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <<else return NS_OK;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm (void) <return 0;
public double getLInfNorm(double max) return 0;
nsRect::GetLInfNorm(double max) <nsresult rv = nsGenericElement::GetLinfNorm(max); if (NS_FAILED(rv)) return rv; return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm(void) &return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <&else return NS_OK;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; &return NS_OK;
private double getLInfNorm() &return 0;
void getLInfNorm(double max = 0) <return res;
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); return (NS_OK);
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
void getLInfNorm() return 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; &return NS_OK;
public double getLInfNorm() <return 0;
public double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
getLInfNorm() const &return 0;
public double getLInfNorm() <double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm()
public double getLInfNorm() <return mLinfNorm;
public double getLInfNorm (void) &return 0;
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() &return getLInfNorm(&result);
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
virtual double getLInfNorm() &return -1;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
getLInfNorm(double max) if (!list) return null; while (list) &for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
static inline double getLInfNorm() <return 0;
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <else return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <else return NS_OK;
public double getLInfNorm(void) <double max = 0;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
void *getLInfNorm() &if (idx <idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; else return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm(void) &return mLInfNorm;
private double getLInfNorm() <return 0;
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; else return NS_OK;
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
static double getLInfNorm() return double max;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm(double max) <NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) &return NS_OK;
getLInfNorm() const <u_int32_t cnt; if (!m_int32_t) <return 0;
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() return getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape)
public double getLInfNorm() return &(sizeof(*)) 0;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
getLInfNorm() const &u_int32_t cnt; if (!m_int32_t) return 0;
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm() &double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm() &return (double) 0;
public double getLInfNorm() &return entries[i];
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm() const &return mLInfNorm;
void getLInfNorm(void) return _("double");
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm() &return 0;
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() return mLInfNorm;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; return NS_OK;
public double getLInfNorm() return double max = 0;
public double getLInfNorm() return iter.get();
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return iter;
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
NS_IMETHOD getLInfNorm(double max) NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) &return NS_OK;
public double getLInfNorm() return getLInfNorm(&result);
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() return -1;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
void getLInfNorm() return (0);
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm (void) return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return iter;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &<else return NS_OK;
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
getLInfNorm() <return getLInfNorm(null);
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; return NS_OK;
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; <return NS_OK;
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() &return mLInfNorm;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return iter;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public Double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() return getLInfNorm(mi) > 0;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() return double &0;
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm() const &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
private double getLInfNorm() <Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() const &return mLinfNorm;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) return getLInfNorm(void);
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() &return getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape) || getLInfNorm(nsILescape)
virtual double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() return getLInfNorm();
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
void *getLInfNorm() <if (idx &idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void getLInfNorm() &return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <&else return NS_OK;
NS_IMETHOD getLInfNorm(double max) return NS_OK;
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public void getLInfNorm() return 0;
public double getLInfNorm() &return double <0;
public double getLInfNorm(void) return double;
private double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
private double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
NS_DEF_TEMPLATE_STRING_GETLInfNorm(double) <return NS_OK;
void *getLInfNorm() if (idx &idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; &return NS_OK;
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm() <return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; &return NS_OK;
public double getLInfNorm() return XP_MAC((u_int32_t) 0);
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
private double getLInfNorm() <return 0;
virtual double getLInfNorm() return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
void *getLInfNorm() if (idx &idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() const <return 0;
NS_IMETHOD double getLInfNorm(void) return NS_OK;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm() &return double 0;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
private double getLInfNorm(void) return 0;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm(double max) &if (!list) return null; while (list) for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
NS_METHOD getLInfNorm() <return NS_OK;
void *getLInfNorm(void) struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm() return mInner.getLInfNorm();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; <return NS_OK;
virtual double getLInfNorm() return double max = 0;
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
virtual double getLInfNorm() return -1;
public double getLInfNorm() <return double max = 0;
public double getLInfNorm(double max = 0); Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
virtual double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() <return entries[0];
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm() return _linfNorm(*this, 0, &ri);
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
virtual double getLInfNorm() &double max = 0;
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
private double getLInfNorm() double max; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
static inline double getLInfNorm() &return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; else return NS_OK;
private double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); return (NS_OK);
getLInfNorm(double max) &if (!list) return null; while (list) for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() <return entries[i];
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
void *getLInfNorm() return NS_OK;
inline double getLInfNorm(void) return 0;
private double getLInfNorm() <double max; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
virtual double getLInfNorm() <return sanitize(sanitize(mtx_expects));
private double getLInfNorm() <return mLinfNorm;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() &return mLinfNorm;
NS_IMETHOD getLInfNorm(nsIFrame* aFrame, nsIFrame* aParent, const nsFrame* aOwner) &return nsSpecialDataSource::GetLInfNorm(aFrame);
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; else return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
inline double getLInfNorm(void) &return 0;
void *getLInfNorm() <if (idx &idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_IMETHOD GetLInfNorm() void* aLinf = 0; if (null == aLinf) &return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); return NS_OK;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &return iter.value();
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); &return NS_OK;
void getLInfNorm(void) &return _("double");
public Double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return iter;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
PRInt32 getLInfNorm() const <return mLInfNorm;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
NS_IMETHOD double getLInfNorm(nsIStyleContext* aContext, PRUint32 aLength) &return mContext.mContext.mContext.mLength;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() &return getLInfNorm();
public double getLInfNorm() &return entry.lis;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm() &return -1;
public double getLInfNorm() &double max; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() <Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return iter;
private double getLInfNorm() <return mFrameManager.getLInfNorm(mFindTreeItem);
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
void *getLInfNorm() <if (idx <idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; return NS_OK;
public double getLInfNorm() &return getLInfNorm(&iter);
private double getLInfNorm() &return getLInfNorm(&list);
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
static double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <else return NS_OK;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <return iter.value() <0;
public double getLInfNorm() &return &(sizeof(*)) &0;
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return iter;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; &return NS_OK;
public double getLInfNorm() &return getLInfNorm(0, 0);
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm() &return 0;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
getLInfNorm() &if (!m_runtime.m_reg.m_flags) return null; return 0;
NS_IMETHOD getLInfNorm() &return NS_OK;
void *getLInfNorm() if (idx <idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
private double getLInfNorm() &return mLinfNorm;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() return double max;
void *getLInfNorm() const <return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); &return NS_OK;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) <return linfNorm;
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
inline double getLInfNorm() &return iter.value();
NS_IMETHOD GetLInfNorm() void* aLinf = 0; if (null == aLinf) <return NS_OK;
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() double max; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
virtual double getLInfNorm() &return getLInfNorm();
public double getLInfNorm() const &return mLInfNorm;
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
NS_METHOD nsLInfNorm::GetLInfNorm(double) return nsLInfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLi
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
virtual double getLInfNorm()
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() return iter.value();
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() const <return mLinfNorm;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() <return (0);
public double getLInfNorm(double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
NS_IMETHOD getLInfNorm(double max) &return NS_OK;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm() return iter.value() <0;
getLInfNorm() const &return 0;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; &return NS_OK;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &else return NS_OK;
private double getLInfNorm() &return 0;
getLInfNorm() const <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
private double getLInfNorm() &double max; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
inline double getLInfNorm() return mLInfNorm;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
public double getLInfNorm() return entry_idx;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; &return NS_OK;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm() &double max = 0;
getLInfNorm(double max) if (!list) return null; while (list) for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &&else return NS_OK;
public double getLInfNorm() return &(sizeof(*)) <0;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
PRBool getLInfNorm() const &return mLinfNorm;
public double getLInfNorm() return entry;
public double getLInfNorm() &return rv;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; <return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm(double max = 0); Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
inline double getLInfNorm() return double max;
public double getLInfNorm() <double max = 0;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
private double getLInfNorm() &double max = 0;
public double getLInfNorm() &return &0;
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
private double getLInfNorm() &return NS_OK;
virtual double getLInfNorm() <return mLinfNorm;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
NS_IMETHOD getLInfNorm() return 0;
public double getLInfNorm() return iter;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
virtual double getLInfNorm() &return double max;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
PRBool getLInfNorm() const return 0;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; <return NS_OK;
private double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
private double getLInfNorm() <Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &&else return NS_OK;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
NS_IMETHOD getLInfNorm() <return NS_OK;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
NS_IMETHOD GetLInfNorm() <void* aLinf = 0; if (null == aLinf) <return NS_OK;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
void *getLInfNorm() &if (idx <idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm(void) double max = 0;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
public double getLInfNorm(void) return linfNorm;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; &return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) &return -1;
getLInfNorm(double max) &if (!list) return null; while (list) for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
void *getLInfNorm() &if (idx <idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() &return getLInfNorm(mi) > 0;
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); <return NS_OK;
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
PRBool getLInfNorm() const return mLInfNorm;
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() return mFrameManager.getLInfNorm(mFindTreeItem);
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
public double getLInfNorm(void) &return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &&else return NS_OK;
public double getLInfNorm() &return getLinfNorm();
public double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) return mCurrentContent.GetLInfNorm(); return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &&else return NS_OK;
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <return XP_MAC((u_int32_t) 0);
PRBool getLInfNorm() return mLInfNorm;
virtual double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; <return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); return (NS_OK);
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &<else return NS_OK;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &else return NS_OK;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <else return NS_OK;
void *getLInfNorm() if (idx &idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
private double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
inline double getLInfNorm() const return 0;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
getLInfNorm(double max) if (!list) return null; while (list) for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD getLInfNorm(nsIFrame* aFrame, nsIFrame* aParent, const nsFrame* aOwner) return nsSpecialDataSource::GetLInfNorm(aFrame);
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; return NS_OK;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm() <return getLInfNorm(null);
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm(double max) &if (!list) return null; while (list) for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
NS_METHOD getLInfNorm(void) return NS_OK;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) <return getLInfNorm(void);
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
void *getLInfNorm() <if (idx &idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_IMETHOD getLInfNorm(double max) <NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) return NS_OK;
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return iter;
NS_IMETHOD getLInfNorm() &return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
virtual double getLInfNorm() &return mLInfNorm;
private double getLInfNorm() double max; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() <return entry;
public double getLInfNorm(void) <return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
private inline double getLInfNorm() return 0;
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <<else return NS_OK;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() &return sanitize(sanitize(mtx_expects));
void *getLInfNorm() &if (idx &idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() &return <0;
private double getLInfNorm() <return mLiteral;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
void getLInfNorm(double max = 0) return res;
getLInfNorm(double max) if (!list) return null; while (list) <for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
void *getLInfNorm() <if (idx <idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <return NS_OK;
void *getLInfNorm() if (idx idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
private double getLInfNorm() return double max = 0;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
PRBool getLInfNorm() const return mLInfNorm;
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
inline double getLInfNorm() <return double max;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() &return iter.value();
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; return NS_OK;
public double getLInfNorm(int max, u_long) &return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() &return mLinfNorm;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm() return iter.value() &0;
public double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
private double getLInfNorm() return iter.value();
void *getLInfNorm() if (idx <idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void *getLInfNorm() <if (idx idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() &Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm(double max) if (!list) return null; while (list) &for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) <return iter.value();
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
void *getLInfNorm() &if (idx <idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() double max; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; else return NS_OK;
PRInt32 getLInfNorm() const &return 0;
inline double getLInfNorm() const &return mLInfNorm;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
void *getLInfNorm() if (idx idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; &return NS_OK;
public double getLInfNorm() <return getLInfNorm(mi) > 0;
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm() const u_int32_t cnt; if (!m_int32_t) return 0;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
void *getLInfNorm() &if (idx &idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm(double max) if (!list) return null; while (list) for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
public double getLInfNorm() const <return double max;
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
private double getLInfNorm() double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD getLInfNorm(PRUint32 aLength) <return NS_OK;
getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm() const <return 0;
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) <aRealm += aRealm; return NS_OK;
NS_IMETHOD double getLInfNorm(void) &return NS_OK;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm(nsIAtom* aAtom) <PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() &return (0);
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(const double max) <return iter.value();
public double getLInfNorm() <double max; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
NS_METHOD getLInfNorm(void) &return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
static double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
inline double getLInfNorm() <return mLinfNorm;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() <return double max = 0;
void *getLInfNorm() const <return mLInfNorm;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &&else return NS_OK;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <else return NS_OK;
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm() <return iter;
public double getLInfNorm() <return double <0;
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); return (NS_OK);
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() <return getLInfNorm(0, 0);
public double getLInfNorm() return rv;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
NS_IMETHOD getLInfNorm(double max) &return 0;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return iter;
getLInfNorm(double max) if (!list) return null; while (list) &for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(double max, double max_idx) &return 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; <return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm() <return getLInfNorm(&t);
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
NS_IMETHOD GetLInfNorm(double max) <return NS_OK;
public double getLInfNorm() <return getLInfNorm(&result);
getLInfNorm() const double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
inline double getLInfNorm() const <return mLInfNorm;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <<else return NS_OK;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &else return NS_OK;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private inline double getLInfNorm() <return 0;
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; return NS_OK;
getLInfNorm() const return mLInfNorm? 0 : 0;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
inline double getLInfNorm() return getLInfNorm();
public void getLInfNorm() &return 0;
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
static double getLInfNorm() return mLInfNorm;
private double getLInfNorm() &return double max = 0;
getLInfNorm(double max) if (!list) return null; while (list) <for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm(void) struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() const return mLInfNorm;
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
getLInfNorm() &return mLInfNorm;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
getLInfNorm(double max) <if (!list) return null; while (list) for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm() const <return mLInfNorm? 0 : 0;
private double getLInfNorm() return getLInfNorm(&iter);
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; else return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; &return NS_OK;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; &return NS_OK;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm() const &return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
void *getLInfNorm(void) struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
public double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; return NS_OK;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() &return double max;
getLInfNorm(double max) if (!list) return null; while (list) &for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() &double max = 0;
void *getLInfNorm(void) struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) &nsresult result = NS_OK; if (mTarget) result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() <return nsLinfNorm::nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_Lin
inline double getLInfNorm() <return 0;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm( void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &return (0);
void *getLInfNorm() if (idx idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
inline double getLInfNorm() return -1;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
getLInfNorm() const return mLInfNorm;
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) return mCurrentContent.GetLInfNorm(); <return NS_OK;
private double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; <return NS_OK;
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
getLInfNorm() const &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
PRBool getLInfNorm() <return mLInfNorm;
virtual double getLInfNorm() const &return mLInfNorm;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() &double max; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() <return iter.value() 0;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
static double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm() return iter.value();
public double getLInfNorm() &double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
static inline double getLInfNorm() return 0;
nsHTMLEncoding::GetLInfNorm(nsIStyleContext* aStyleContext, const nsStyleContext* aStyleContext, PRUint32 aValue, PRUint32 aValueType) return mStyleContext.GetStyleContext(aStyleContext);
public double getLInfNorm(void) return 0;
private double getLInfNorm() &return entry.get();
void *getLInfNorm(void) struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
public double getLInfNorm() return getLInfNorm();
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
public double getLInfNorm() <return iter.value();
public double getLInfNorm() return mLInfNorm;
public double getLInfNorm::double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() <return entry.get();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(void) return 0;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm()
public double getLInfNorm() <return &(sizeof(*)) 0;
public double getLInfNorm &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; return NS_OK;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm(nsIStyleContext* aContext, PRUint32 aLength) <return mContext.mContext.mContext.mLength;
public double getLInfNorm(double max = 0); Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() return NS_OK;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() return (0);
public double getLInfNorm() return iter.value() 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; &return NS_OK;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
void getLInfNorm() &return (0);
void *getLInfNorm() <if (idx idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
NS_IMETHOD GetLInfNorm() <return NS_OK;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm(double max) &if (!list) return null; while (list) <for (; i n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) nsresult result = NS_OK; if (mTarget) result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
public double getLInfNorm(void) const <return 0;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
virtual double getLInfNorm() &return f(v);
private double getLInfNorm() &Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() const <return 0;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
virtual double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(double max) &if (!list) return null; while (list) for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm(double max) &NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) &return NS_OK;
getLInfNorm() const u_int32_t cnt; if (!m_int32_t) &return 0;
public double getLInfNorm() <return double max;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; return NS_OK;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm() return double max;
public double getLInfNorm(void) &return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
private double getLInfNorm() return -1;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm::double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() &double max; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &else return NS_OK;
public double getLInfNorm() <double max = 0;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
getLInfNorm() return mLInfNorm;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD getLInfNorm(double max) <return 0;
public double getLInfNorm(double max, double max_idx) <return 0;
private double getLInfNorm(void) <return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
NS_IMETHOD GetLInfNorm() &void* aLinf = 0; if (null == aLinf) <return NS_OK;
public double getLInfNorm(nsIArena* aArena) return NS_OK;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm(void) return getLInfNorm(null);
public Double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
private double getLInfNorm() <return getLInfNorm(&iter);
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() return getLInfNorm(&entry);
public double getLInfNorm(double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
void *getLInfNorm() <if (idx <idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) nsresult result = NS_OK; if (mTarget) &result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
private double getLInfNorm() return mLInfNorm;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(nsIXULAtom* aXULAtom, const double& aEnd) nsIXULAtom* aXULAtom = (nsIXULAtom*)aXULAtom; if (!aXULAtom) return NS_ERROR_NULL_POINTER; return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; return NS_OK;
public double getLInfNorm() &return iter.value();
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() return getLInfNorm();
public double getLInfNorm() return entries[i];
nsIArena::GetLInfNorm(nsIArena* aArena) <if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; return NS_OK;
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &return linfNorm;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &else return NS_OK;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
static double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(void) return (0);
NS_IMETHOD GetLInfNorm() &void* aLinf = 0; if (null == aLinf) return NS_OK;
virtual double getLInfNorm() &return 0;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) return mCurrentContent.GetLInfNorm(); return NS_OK;
public double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(nsIInteger *aInteger, int len, const int len) &return mInteger.get();
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() &return _linfNorm(*this, 0, &ri);
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
NS_IMETHOD getLInfNorm(double max) return 0;
static double getLInfNorm() &return 0;
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm(void) <return (0);
public double getLInfNorm() const return 0;
public double getLInfNorm() return mLinfNorm;
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; return NS_OK;
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm() <return <0;
private double getLInfNorm() const <return 0;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
getLInfNorm() const return mLinfNorm;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &return 0;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsIArena::GetLInfNorm(nsIArena* aArena) if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; if (aArena == nsIArena::LOOKUP) return NS_OK; return NS_OK;
getLInfNorm(double max) return 0;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
getLInfNorm() const &return mLInfNorm? 0 : 0;
public double getLInfNorm() <double max; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
NS_METHOD getLInfNorm(void) <return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
NS_IMETHOD getLInfNorm (void) &return NS_OK;
public double getLInfNorm(int retval) <if (! retval) return NS_ERROR_NULL_POINTER; return retval;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
NS_IMETHOD double getLInfNorm() &return NS_OK;
public double getLInfNorm() &return entry_idx;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; &else return NS_OK;
public double getLInfNorm() <return &(sizeof(*)) &0;
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
virtual double getLInfNorm() return 0;
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext())
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); return (NS_OK);
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; &return NS_OK;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) return getLInfNorm(*this);
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
void getLInfNorm(double max = 0) &return res;
public double getLInfNorm() double max = 0;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); return (NS_OK);
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() <return rv;
public double getLInfNorm() return getLInfNorm(0, 0);
virtual double getLInfNorm() &return entry.getLInfNorm();
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm() <return double &0;
getLInfNorm(double max) <if (!list) return null; while (list) for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() &return &(sizeof(*)) 0;
void *getLInfNorm() <if (idx &idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(double max) if (!list) return null; while (list) <for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) &double max = 0;
getLInfNorm(double max) if (!list) return null; while (list) <for (; i &n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD getLInfNorm (void) <return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
PRBool getLInfNorm() &return mLInfNorm;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
getLInfNorm(void) struct foreignore afore; PRInt32 count = &afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(void) <return getLInfNorm(null);
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm()
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <&else return NS_OK;
public double getLInfNorm() return nsLinfNorm::nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm):nsInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_LinfNorm(nsIInteger_Lin
public double getLInfNorm(int max, u_long) <return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() <return getLInfNorm();
getLInfNorm(double max) &if (!list) return null; while (list) for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() &return getLInfNorm(null);
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; <return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; else return NS_OK;
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD getLInfNorm(double max) &NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) <return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm() &return &size;
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
void *getLInfNorm() <if (idx <idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &return entry.get();
static double getLInfNorm() return 0;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) <return NS_OK; <return NS_OK;
private double getLInfNorm() <return mLInfNorm;
public double getLInfNorm() &return getLInfNorm(null);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
void *getLInfNorm() if (idx idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
void *getLInfNorm(void) struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '&0') p = p; return 0;
getLInfNorm(double max) <if (!list) return null; while (list) &for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm() if (idx &idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
private double getLInfNorm() &return (0);
public double getLInfNorm() return entry.get();
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, const nsXULTemplateBuilder& aContext) nsresult rv = NS_OK; nsIDOMCSSRule* rv = NS_NewISupportsArray(aDocument); if (NS_FAILED(rv)) return rv; return NS_OK;
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() <return iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(const double max) &return iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
void *getLInfNorm() <if (idx &idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_METHOD nsLInfNorm::GetLInfNorm(double) <return nsLInfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLinfNorm(nsIInt64).GetLi
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &<else return NS_OK;
public double getLInfNorm(iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_IMETHOD double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
nsHTMLEncoding::GetLInfNorm(nsIStyleContext* aStyleContext, const nsStyleContext* aStyleContext, PRUint32 aValue, PRUint32 aValueType) <return mStyleContext.GetStyleContext(aStyleContext);
virtual double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; &return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
private double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
PRBool getLInfNorm() const &return mLInfNorm;
PRBool getLInfNorm() return getLInfNorm();
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
inline double getLInfNorm() const &return 0;
getLInfNorm() return getLInfNorm();
getLInfNorm() const <return 0;
private double getLInfNorm() &double max; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public inline double getLInfNorm() <return 0;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
NS_DEF_TEMPLATE_STRING_GETLInfNorm(double) &return NS_OK;
void *getLInfNorm() if (idx <idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return iter;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() double max; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); <return NS_OK;
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) <nsresult result = NS_OK; if (mTarget) <result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &&else return NS_OK;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() &return &_ih;
public double getLInfNorm() return entry.lis;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsRect::GetLInfNorm(double max) nsresult rv = nsGenericElement::GetLinfNorm(max); if (NS_FAILED(rv)) return rv; return NS_OK;
NS_IMETHOD getLInfNorm(double max) <NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) <return NS_OK;
void *getLInfNorm() <return NS_OK;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
getLInfNorm(double max) if (!list) return null; while (list) <for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm() if (idx <idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
void *getLInfNorm(void) <struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() return entry[0];
public double getLInfNorm() &double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(nsIAtom* aAtom) &PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) <nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
virtual double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
nsHTMLEncoding::GetLInfNorm(nsIStyleContext* aStyleContext, const nsStyleContext* aStyleContext, PRUint32 aValue, PRUint32 aValueType) &return mStyleContext.GetStyleContext(aStyleContext);
public double getLInfNorm() const <return mLInfNorm;
virtual double getLInfNorm() return sanitize(sanitize(mtx_expects));
public double getLInfNorm() return getLInfNorm(null);
getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
private double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i<n; i++) <aRealm += aRealm; <return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) return NS_OK; <<else return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) &return mCurrentContent.GetLInfNorm(); <return NS_OK;
void *getLInfNorm() <if (idx &idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
private double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) <return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
public double getLInfNorm() <return entry.get();
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; return NS_OK;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) if (aConstraintType == aType.get()) &return (nsCRT::strdup(aConstraintType)); &return (NS_OK);
void getLInfNorm() <return 0;
public double getLInfNorm(void) &return (0);
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) &*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) <afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm(double max) &if (!list) return null; while (list) &for (; i &n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(double max) if (!list) return null; while (list) &for (; i &n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm() &return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
PRBool getLInfNorm() const &return 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i&n; i++) &aRealm += aRealm; &return NS_OK;
getLInfNorm() const <return mLinfNorm;
PRBool getLInfNorm() const <return 0;
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
private double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
virtual double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm() &return iter.value() <0;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) return mCurrentContent.GetLInfNorm(); &return NS_OK;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() <return entry.lis;
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
void *getLInfNorm() &if (idx idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; return NS_OK;
public double getLInfNorm(double max) <return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
static double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
NS_IMETHOD getLInfNorm(void) <return NS_OK;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() <return double max;
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
void *getLInfNorm() &if (idx <idx) &if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; i&n; i++) aRealm += aRealm; <return NS_OK;
public double getLInfNorm() return 0;
public double getLInfNorm(Iterator iter = entries.iterator()) <while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
NS_IMETHOD double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
void *getLInfNorm() &if (idx idx) <if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
getLInfNorm() <return iter.value();
double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; <return NS_OK;
void *getLInfNorm() <if (idx idx) if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
void getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
PRBool getLInfNorm() const <return mLInfNorm;
private double getLInfNorm() const &return mLInfNorm;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
PRInt32 getLInfNorm() const <PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
NS_IMETHOD double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
getLInfNorm() <return mLInfNorm;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; <return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) <nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
void getLInfNorm() <return (0);
public double getLInfNorm (void) &return getLInfNorm ();
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) <if (aName) &nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; <return NS_OK;
public double getLInfNorm() <double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
private double getLInfNorm() return NS_OK;
void *getLInfNorm() if (idx idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) if (mRefs.mPseudoArena == aSubtree.mPseudoArena) &return NS_OK; &return NS_OK;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() <return &(sizeof(*)) <0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
PRInt32 getLInfNorm() const return 0;
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
PRInt32 getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; return ioctl(&ioctl);
getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
NS_IMETHOD getLInfNorm(double max) NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) return NS_OK;
private double getLInfNorm() return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm (void) return getLInfNorm ();
public double getLInfNorm() return getLInfNorm(null);
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm() <Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
PRInt32 getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
void *getLInfNorm() if (idx idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void *getLInfNorm() &if (idx &idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void *getLInfNorm() <if (idx idx) <if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
void getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() &return -1;
public double getLInfNorm() <return GetLInfNorm();
public double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm() <if (!m_runtime.m_reg.m_flags) return null; return 0;
getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) aRealm += aRealm; return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); &return it;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); &return it;
void getLInfNorm(void) <return _("double");
public double getLInfNorm( void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm() const <u_int32_t cnt; if (!m_int32_t) return 0;
public double getLInfNorm() &iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return iter;
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
nsresult double getLInfNorm() &return null;
private double getLInfNorm() <return getLInfNorm(&list);
public double getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
NS_IMETHOD double getLInfNorm() &return 0;
NS_IMETHOD getLInfNorm(nsIAtom* aParentType) &return mStyleContext.GetStyleContent(aParentType);
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) <nsCOMPtr<nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; &return rv;
virtual double getLInfNorm() <return getLInfNorm();
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) <nsresult result = NS_OK; if (mTarget) &result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
getLInfNorm(void) &struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i <count; ++i) &afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() <double max; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
getLInfNorm(void) &return 0;
public double getLInfNorm(nsIInteger *aInteger, int len, const int len) <return mInteger.get();
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = &; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
getLInfNorm(nsIAtom* aAtom) PRInt32 max = 0; PRInt32 aAtom = aAtom; while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '0') p = p; return 0;
PRInt32 getLInfNorm() const &PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
void *getLInfNorm(void) <return mLinfNorm;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) <if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); <return (NS_OK);
public double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
PRBool getLInfNorm() &return 0;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i&n; i++) <aRealm += aRealm; &return NS_OK;
void *getLInfNorm(void) <struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm( void *aRealm) &aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; &return NS_OK;
public double getLInfNorm() <return (double)getLInfNorm();
public double getLInfNorm(void) &return getLInfNorm(null);
void *getLInfNorm() &if (idx idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
NS_IMETHOD double getLInfNorm() return NS_OK;
private double getLInfNorm() const return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) &nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); return it;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) &aRealm += aRealm; <return NS_OK;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() &return entry;
public double getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); <return it;
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
public Double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
void *getLInfNorm() <if (idx &idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() &Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
NS_METHOD getLInfNorm(nsIAtom* aParent, const char* aPrefix, const char* aConstraintType, const char* aConstraintType, const char* aType, const char* aDependentType) &if (aConstraintType == aType.get()) return (nsCRT::strdup(aConstraintType)); return (NS_OK);
private double getLInfNorm() <return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) &nsCOMPtrnsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
public double getLInfNorm() Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; <return NS_OK;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); &return it;
NS_IMETHOD getLInfNorm(void) &return NS_OK;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); &return iter;
NS_METHOD getLInfNorm(nsIPref* aPref, const char* aPref, nsIScriptObject* aContext, nsIScriptObject* aPrt) <nsresult result = NS_OK; if (mTarget) result = NS_NewXPIDLCString(kNameSpaceID_null, aPref, aPrt); NS_ENSURE_SUCCESS(result, result); return result;
public double getLInfNorm() &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
public double getLInfNorm( void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm(void) struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
PRBool getLInfNorm() const &return mLInfNorm;
public double getLInfNorm() <return mInner.getLInfNorm();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
void *getLInfNorm() &if (idx idx) if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
virtual double getLInfNorm() const return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) &it.advance(); it.max += it.value(); return it;
void *getLInfNorm(void) <struct proc *p; while (p entries.size()) <p = *p; p = p; if (p == '<0') p = p; return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) <if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
private double getLInfNorm() &return mLiteral;
void *getLInfNorm(void) &struct proc *p; while (p entries.size()) p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm() &double max = 0; iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
NS_IMETHOD getLInfNorm(PRUint32 aLength) return NS_OK;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) &struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) &/* we need to add a */ while (ptr == null) <if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm() return &(sizeof(*)) &0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &<else return NS_OK;
public double getLInfNorm() return (double)getLInfNorm();
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <<else return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
NS_IMETHOD double getLInfNorm (void) <return NS_OK;
public double getLInfNorm(void) <struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public double getLInfNorm() return entries[0];
public double getLInfNorm() <return getLInfNorm(&iter);
public double getLInfNorm() <iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public Double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; <&else return NS_OK;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
NS_IMETHOD getLInfNorm(void) &double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
virtual double getLInfNorm() <return iter.value();
getLInfNorm(void) struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
static double getLInfNorm() &return double max;
void *getLInfNorm() <if (idx idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(double max) if (!list) return null; while (list) for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
getLInfNorm(double max) <return 0;
NS_IMETHOD getLInfNorm(void) <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
public double getLInfNorm() <return getLInfNorm(&entry);
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
private double getLInfNorm() return 0;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); return it;
public double getLInfNorm() <return mLInfNorm;
private double getLInfNorm() <double max; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm() const return mLinfNorm;
public double getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) if (aDocument) nsIDOMNode* it = aDocument; while (it!= aDocument) it.advance(); it.max += it.value(); <return it;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) &nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) &return NS_OK; &else return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
getLInfNorm(double max) if (!list) return null; while (list) &for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
private double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) iter.advance(); max += iter.value(); &return max;
public double getLInfNorm(void) const return 0;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &&if (idx == -1) if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) &ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
getLInfNorm(double max) if (!list) return null; while (list) &for (; i <n; i++) &if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
NS_IMETHOD getLInfNorm (void) return NS_OK;
getLInfNorm(double max) <if (!list) return null; while (list) <for (; i <n; i++) if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm() return linfNorm;
virtual double getLInfNorm() <return f(v);
public double getLInfNorm() &return double max = 0;
public double getLInfNorm( void *aRealm) aRealm = 0; for (int i=0; i<n; i++) &aRealm += aRealm; &return NS_OK;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) nsString* uid = aClass.GetUnicode(); for (result = null; res &uid; res++) <nsCOMPtr<nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(void) &return linfNorm;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
getLInfNorm(double max) if (!list) return null; while (list) &for (; i <n; i++) <if (list.list.list.list.list.list.list.iterator.iterator.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.iterator.list.iterator.list.iterator.list.list.iterator.iterator.list.iterator.list.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.list.iterator.list.iterator.iterator.iterator.list.iterator.list.iterator
void *getLInfNorm() &if (idx idx) <if (event.type == TINNEAD) &tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
getLInfNorm(void) <return 0;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; <<else return NS_OK;
void *getLInfNorm() &if (idx idx) &if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
public double getLInfNorm() &return entries[0];
void *getLInfNorm(void) &struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '&0') p = p; return 0;
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = <; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; <return rv;
PRInt32 getLInfNorm() &return 0;
void getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() return ret;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) &nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm() double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm( void *aRealm) <aRealm = 0; for (int i=0; in; i++) aRealm += aRealm; &return NS_OK;
public double getLInfNorm(Iterator iter = entries.iterator()) &while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
nsXULTemplateBuilder::GetLInfNorm(nsIDocument* aDocument, nsIDocument* aDocument) &if (aDocument) <nsIDOMNode* it = aDocument; while (it!= aDocument) <it.advance(); it.max += it.value(); <return it;
private double getLInfNorm() const <return mLInfNorm;
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) <if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; &return NS_OK;
nsXULElement::GetLInfNorm(nsIDOMNode** aNode) <nsIDOMNode* aNode = (nsIDOMNode*) aNode; if (aNode == aNode) <return NS_OK; &<else return NS_OK;
public double getLInfNorm(void) struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) <ioctl.ioctl = ioctl; ioctl++; <return ioctl(&ioctl);
public Double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) <nsString* uid = aClass.GetUnicode(); for (result = null; res <uid; res++) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) if (aName) nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
virtual double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
public double getLInfNorm(nsIContent* aSubtree, const nsString& aValue) &if (mRefs.mPseudoArena == aSubtree.mPseudoArena) return NS_OK; return NS_OK;
void *getLInfNorm(void) struct proc *p; while (p entries.size()) &p = *p; p = p; if (p == '<0') p = p; return 0;
public double getLInfNorm() &return iter.get();
public double getLInfNorm(void) &struct uiio_ioctl *ioctl; struct ioctl *ioctl = ; for (ioctl = 0; ioctl; ioctl++) ioctl.ioctl = ioctl; ioctl++; &return ioctl(&ioctl);
private double getLInfNorm() <double max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
PRInt32 getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
NS_IMETHOD getLInfNorm(double max) NS_PRECONDITION((*max = 0;)!= 0); if (!mFindLinfNorm(&nbr)) return NS_OK; if (nbr) return NS_ERROR_OUT_OF_MEMORY; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr) NS_PRECONDITION(nbr!= 0; NS_PRECONDITION(nbr!= 0); NS_PRECONDITION(nbr, "bad nbr"); if (nbr) <return NS_OK;
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) p = *p; p = p; if (p == '<0') p = p; return 0;
void *getLInfNorm() <if (idx idx) &if (event.type == TINNEAD) tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
private double getLInfNorm() <double max = 0;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm() <Double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return iter;
void *getLInfNorm(void) &struct proc *p; while (p &entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) </* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) <*ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
public double getLInfNorm(nsIAtom* aName, const nsAReadableString& aType) &if (aName) <nsCOMPtr&nsIAtom> tag; nsresult rv; rv = NS_NewISupportsArray(getter_AddRefs(tag)); if (NS_FAILED(rv)) return rv; return rv;
void *getLInfNorm(void) &return mLinfNorm;
public double getLInfNorm(Iterator iter = entries.iterator()) while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value();
getLInfNorm(void) return getLInfNorm(void);
getLInfNorm() const double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return max;
nsListener::GetLInfNorm(nsIContent* aContent) if (mCurrentContent) return mCurrentContent.GetLInfNorm(); &return NS_OK;
public double getLInfNorm() &double max = 0; Iterator iter; while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
getLInfNorm(void) <struct foreignore afore; PRInt32 count = afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
virtual double getLInfNorm() return iter.value();
private double getLInfNorm() &return double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); <return max;
virtual double getLInfNorm() double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); &return max;
PRInt32 getLInfNorm() const PRInt32 max = 0; iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); <return max;
public double getLInfNorm() <double max = 1; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value();
void *getLInfNorm() <if (idx <idx) if (event.type == TINNEAD) <tcp_synchronous_synchronous_init(tcp_synchronous_synchronous_init, &tcp); return -1;
private double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); <return max;
public double getLInfNorm(void) <return mLInfNorm;
public double getLInfNorm() <return 0;
public double getLInfNorm(nsIInteger *aInteger, int len, const int len) return mInteger.get();
nsListener::GetLInfNorm(nsIContent* aContent) <if (mCurrentContent) return mCurrentContent.GetLInfNorm(); &return NS_OK;
public double getLInfNorm(void) <struct symbol_t sym; if (ptr == null) return NS_OK; for (ptr = ptr.next; ptr; ptr = ptr.next) /* we need to add a */ while (ptr == null) &if (ptr.name == NS_LInf_LInf_next) *ptr = ptr.next; else return NS_OK; /* not an null value */ return NS_OK;
void *getLInfNorm() const return mLInfNorm;
getLInfNorm() &return getLInfNorm();
private double getLInfNorm() <return getLInfNorm();
getLInfNorm(void) <struct foreignore afore; PRInt32 count = <afore.length - afore.count; for (PRInt32 i = 0; i &count; ++i) afore[i] = afore[i]; if (n afore.length) for (i = afore.length; i afore.count; i++) afore[i] = afore[i]; afore[i] = afore[i]; return afore;
public double getLInfNorm (void) <return getLInfNorm ();
virtual double getLInfNorm() <double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) <iter.advance(); max += iter.value(); return max;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <<if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
nsListener::GetLInfNorm(nsIContent* aContent) &if (mCurrentContent) <return mCurrentContent.GetLInfNorm(); return NS_OK;
nsresult double getLInfNorm() &nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ <&if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
private double getLInfNorm() const &return 0;
nsresult double getLInfNorm() <nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) &if ((*idx == -1)) if (!*idx) return 0; return 0;
nsresult double getLInfNorm() nsIDOMCSSIID kNameSpaceID_null; double val; nsISupports* val = (void *)&(*((*((*)&((*)&(((*)&(()&(((*)&((((*)&((()&(([((*)&(((*)&(((*)&((*))&((*)&((*))|(((*)*)||(*)||(*)))||(*))||*)||*)||*)||*)||*/*/*/ */ &<if (idx == -1) <if ((*idx == -1)) if (!*idx) return 0; return 0;
virtual double getLInfNorm() <return (0);
void * getLInfNorm() const &return mLInfNorm;
void *getLInfNorm(void) struct proc *p; while (p <entries.size()) &p = *p; p = p; if (p == '0') p = p; return 0;
nsDocLock::GetLInfNorm(nsIXULTemplateInfo *aClass, const char *result) &nsString* uid = aClass.GetUnicode(); for (result = null; res uid; res++) nsCOMPtr&nsIXULTemplateInfo> xul; res = suppressRes("cls", NS_GET_IID(nsIXULTemplateInfo)); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; res = suppressRes("clsTemplateInfo"); if (xul == NS_CONTENT_ATTR_INIT) nsCOMPtrnsIXULTemplateInfo> xul; xul
NS_IMETHOD getLInfNorm(void) double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value(); return max;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); return iter;
public double getLInfNorm() iter = entries.iterator(); while (iter.hasNext()) &iter.advance(); max += iter.value(); &return max;
void * getLInfNorm() const <return mLInfNorm;
public double getLInfNorm(Iterator iter = entries.iterator(); while (iter.hasNext()) iter.advance(); max += iter.value();
