golden:
stop = checker.converged(iter, previous, current);
inference:
stop = checker.converged(iter, previous);
stop = checker.converged(iter, previous, current, 0);
stop = checker.converged(iter, previous, current);
stop = checker.converged(iter, previous, current);
stop = checker.converged(iter, prev, current);
stop = checker.converged(iter, current);
stop = checker.converged(iter, previous, current, true);
stop = checker.converged(iter, previous, current, false);
stop = checker.converged(iter, previous);
stop = checker.converged(iter, previous, current, 0);

stop = checker.converged(iter, previous, current, 1);
stop = checker.converged(iter, previous, &current);
stop = checker.converged(iter, previous, current, -1);
stop = checker.converged (iter, previous, current);
stop = iter.converged(prev, current);
stop = checker = checker.converged(iter, previous, current);
stop = checker.converged( iter, previous, current );
stop = checker.converged(iter, previous, current, 0, 0);
stop = checker.converged(iter, previous, current, null);
stop = checker.converged(iter, previous, 0);
checker = checker.converged(iter, previous, current);
stop = checker.converged(iter);
stop = checker.converged(iter, current);
stop = checker.converged(iter, previous, current, i);
stop = checker.converged(iter, previous, current, n);
stop = Checker.converged(iter, previous, current);
stop = checker.converged(iter, previous, current, prev);
stop = checker_converged(iter, previous, current);
stop = checker.converged(iter, previous, current, flags);
stop = checker.converged(iter, current, 0);
stop = checker.converged(iter, previous, current, limit);
stop = checker.converged(iter, n, current);
stop = checker.converged(iter, previous, current, count);
checker.converged(iter, previous, current);
stop = checker.converged(&iter, previous, current);
stop = checker.converge(iter, previous, current, 0);
stop = checker.converged(iter, previous, current, true);
stop = checker.converge(iter, previous);
stop = checker.converged(i, previous, current);
stop = checker.converged(iter, previous, current - 1);
stop = checker.converged(iter, prev, current);
stop = checker.converged(prev, current);
start = checker.converged(iter, previous, current);
stop = checker(iter, previous, current);
stop = checker.converged(iter, previous, current, iter);
stop = iter.converged(prev, current);
stop = checker.converged(iter, previous, current, checker);
stop = checker.converged(iter, current, previous);
stop = checker.converged(iter, previous, current, false);
stop = checker.converged(iter, previous, current, status);
stop = checker.converged(iter, i, current);
stop = checker.converged(*iter, previous, current);
stop = checker.converged(iter, previous, current, this);
stop = checker.converged(iter, previous, current) - 1;
stop = checker.converged(iter, previous, current, range);
stop = checker.converged(iter, previous, current, result);
stop = checker.converged(iter, previous, current, direction);
stop = checker.converged(iter, previous, current, v);
stop = checker.converged(iter.get(), previous, current);
stop = checker.converged(iter, last, current);
stop = checker.converged(iter, previous, *current);
stop = checker.converged(its, previous, current);
stop = checker.converged(iter, previous, current, d);
stop = checker.converged(iter, *prev, current);
stop = checker.converged(iter, previous, current, level);
stop = checker.converge(iter, previous, current);
stop = checker.converged(iter, previous, current, previous);
stop = checker.converged(iter, previous, current, line);
stop = checker.converged(iter, previous, current, len);
stop = checker.converged(iter, previous, current, current);
stop = checker.converged();
stop = checker.converged(iter, previous, current, fVal);
stop = checker.converged(entry, previous, current);
stop = checker.converged(iter, previous, current, guess);
stop = checker.converged(iter, previous, v);
stop = checker.converged(iter, previous, current, zero);
stop = checker.converged(*checker, previous, current);
stop = checker.converged(iter, previous, i);
stop = checker.converged(iter, (int) previous, current);
stop = checker.converged(iter, previous, current, before);
stop = checker.converged(iter, previous, prev);
stop = checker.converged(iter, previous, current, max);
stop = checker.converged(iter, previous, 0, current);
stop = checker.converged(iter, previous, (int) current);
stop = checker.converged(iter, next, current);
stop = checker.converged(iter, previous, current, 2);
stop = checker.converged(iter, before, current);
stop = checker.converged(key, previous, current);
stop = checker.converged(iter, previous, current, 1);
stop = checker.converged(iter, previous, current, null);
stop(checker.converged(iter, previous, current));
stop = checker.converged(iter, path, previous, current);
stop = checker.converged(iter, previous, current, key);
stop = checker.converged(iter, previous, current, hint);
stop = checker.converged(iter, previous, n);
stop = checker.converged(iter, previous, current, error);
stop = checker.converged(n, previous, current);
stop = checker.converged(current);
stop = checker.converged(iter, previous, i, current);
stop = iter.converged(current);
stop = checker.converged(iter, parent, current);
stop = checker.converged(iter, previous, current, x);
stop = checker.converged(iter, current, true);
stop = *checker.converged(iter, previous, current);
stop = checker.converged(iter, other, current);
stop = checker.converged(iter, previous, current, null);
stop = checker.converged(iter, previous, current, -1);
stop = checker.converged(iter, d, current);
stop = checker.converged(iter, p, current);
stop = checker.converged(iter, previous, current, false);
stop = checker.converged(initer, previous, current);
stop = checker.converged(iter, previous, current, context);
stop = checker.converged(iter, previous, current, name);
stop = checker.converged(iter, previous, current, 0, 0);
stop = checker.converged(iter, previous, current, position);
stop = checker.converged(iter, &prev, current);
stop = checker.converged(iter, previous, current, &current);
stop = checker.converged(iter, previous, current, p);
iter = checker.converged(iter, previous, current);
stop = checker[current].converged(iter, previous, current);
stop = checker.converged(checker, previous, current, 0);
stop = checker.converged(iter, recent, current);
stop = checker.converge(iter, prev, current);
stop = checker.convergent(iter, previous, current);
stop = checker.converged(iter, &current);
stop = checker.converged(iter, previous, current, degree);
stop = checker.converged(iter, previous, current, scope);
stop = checker.converged(iter, previous, current, now);
stop = checker.converged(iter, previous, current, res);
stop = checker.converged(iter, previous, (int)current);
stop = checker = checker.converged(iter, previous, current);
stop = checker.converged(iter, preceding, current);
checker.converged(iter, previous, current);
stop = checker.converge(iter, current);
stop = checker.converged(iter, previous, optimum);
stop = checker.converged(iter, 0);
stop = checker .converged(iter, previous, current);
stop = checker.converged(iter, previous, current, state);
stop = checker.converged(iter, previous, current, n);
stop = checker.converged(iter, previous, current, rule);
stop = checker.converged(iter, previous, fVal);
stop = checker.converged(iter, previous, current, iter++);
stop = checker.converged(iter, previous, current.get());
stop = checker.converged(iter, previous, &current);
stop = checker.converged(iter, (long) previous, current);
stop = checker.converged(iter, previous, current, i);
stop = checker.converged(iter, previous, current, version);
stop = checker.converged(checker, previous);
stop = checker.converged(iter, previous;
stop = checker.converged(iter, previous, current, alphaMin);
stop = checker.converged(iter, previous, current, prev);
stop = checker.converged(iter, previous, current, true);
stop = checker.converged(iter, previous, current, +1);
stop = checker.converged(iter, previous, current, buf);
stop = checker.converged(iter, previous, current == 0);
stop = checker.converged(iter, previous, current, ep);
stop = checker.converged(iter, previous, current, pr);
stop = checker.converged(iter, previous, current, past);
stop = checker.converged(iter, previous, current) - previous;
stop = checker.converged(iter, previous, current, y);
stop = checker.converged(iter, previous, current - previous);
stop = checker.converge (iter, previous, current);
stop = checker.converged(iter, previous, current, t);
stop = checker.converged(iter, previous, current, current);
stop = checker.converged(iter, previous, current, ret);
Stop();
stop = checker.converged(iter, previous, current, path);
stop = checker.converged(iter, previous, current, point);
stop = checker.converged(iter, previous, current, next);
stop = checker.converged(iter, previous, current, rv);
stop = checker.converged(0);
stop = checker.converged(iter, previous, aCurrent);
stop = checker.converged(target, previous, current);
stop = checker.converged(iter, previous, current, match);
stop = checker.converged(iter, previous, current, l);
stop = checker.converged(iter, previous, current, alloc);
stop = checker.converged(iter, previous, current)  1;
stop = checker.converged(iter);
stop = checker.converged(*checker);
stop = checker.converged(iter, previous, current - current);
stop = checker.converged(iter, previous, current, fX);
stop = checker.converged(iter, previous, current, s);
stop = checker.converged(iter, previous, current.iter());
stop = checker.converged(iter, previous, current, 1, 0);
stop = checker.converged(iter, previous, current, iter);
stop = checker.converged(n, current);
stop = checker.converged( iter, previous, current, 0 );
stop = checker.converged(iter, previous, current, 0, -1);
stop = checker.converged(iter, previous, current, d);
stop = checker.converged(iter, previous, current, iter.getPointType());
stop = checker.converged(iter, current, previous, &current);
stop = checker.converged(iter, current, fX, fX2);
stop = checker.converged(iter, previous, current, checker.checker.result);
stop = checker.converged(iter, previous, current, getStartPoint());
stop = checker.converged(iter, current, iter.get());
stop = checker.converged(iter, previous, current, checker.type);
stop = checker.converged(iter, previous, current, line.find(m));
stop = checker.converged(iter, previous, current, &r);
stop = checker.converged(iter, previous, current, int(i));
stop = checker.converged(iter, previous, current, getLocale());
stop = checker.converged(iter, previous, current, &checker);
stop = checker.converged(iter, current, fX2);
stop = checker.converged(iter, previous, current, current.b)
stop = checker.converged(iter, previous, current, checker.class);
stop = checker.converged(iter, previous, current, lastModified);
stop = checker.converged(iter, current, last);
stop = checker.converged(iter, current, 0, 0);
stop = checker.converged(iter, previous, current, sizeof(checker));
stop = checker.converged(iter, previous, current, 0, 0, 0);
stop = checker.converged(iter, previous, current, &strlen(checker));
stop = checker.converged(iter, previous, current, aConverter);
stop = checker.converged(iter, previous, current, x2);
stop = checker.converged(iter, previous, current, 0, 0, 0, 0, 0, 0, 0);
stop = checker.converged(iter, previous, current, 0, 0, 0, 0);
stop = checker.converged(iter, previous, current, checker.maxValue);
stop = checker.converged(iter, previous, current, (int)i);
stop = checker.converged(iter, previous, current, sizeof(iter), sizeof(iter));
stop = checker.converged(iter, previous, current, &aVersion);
stop = checker.converged(iter, previous, current, x0, y0, y0);
stop = checker.converged(iter, previous, current, x) - 1;
stop = checker.converged(iter, previous, current, &exit);
stop = checker.converged(iter, previous, current, &real);
stop = checker.converged(iter, previous, current, (previous? previous : current));
stop = checker.converged(iter, previous, current, 0, null);
stop = checker.converged(iter, previous, current, &mCount);
stop = checker.converged(iter, previous, current, checker.previous);
stop = checker.converged(iter, previous, current, x.clone());
stop = checker.converged(iter, previous, current, true);
stop = checker.converged(iter, previous, current, previous, -1);
stop = checker.converged(iter, previous, current, theValue);
stop = checker.converged(iter, current);  else  /* XXX */ if (n == null)  return 0;
stop = checker.converged(iter, previous, current, checker.ptid, ptid);
stop = checker.converged(iter, previous, current, &expect);
stop = checker.converged(iter, current, before);
stop = checker.converged(iter, previous, current, checker.isEmpty());
stop = checker.converged(iter, previous, current, &iter);
stop = checker.converged(iter, previous, current, getExtraInfo());
stop = checker.converged(iter, current, previous, 0);
stop = checker.converged(iter, previous, current, current.get());
stop = checker.converged(iter, previous, current, previous.iterator());
stop = checker.converged(iter, previous, current, isBad? 0 : 1);
stop = checker.converged(iter, previous, current, isFlush);
stop = checker.converged(iter, previous, current, aConvType);
stop = checker.converged(iter, previous, current, max, max);
stop = checker.converged(iter, current, ((double)(prev));
stop = checker.converged(iter, previous, current, &end);
stop = checker.converged(iter, previous, current, i, f, fX, fX2, fX2, fVal);
stop = checker.converged(iter, previous, current, iter == 0);
stop = checker.converged(iter, previous, current, iter.prev.mNext);
stop = checker.converged(iter, previous, current, &stop);
stop = checker.converged(iter, previous, current, thePoint);
stop = checker.converged(iter, previous, current, x1, y1);
stop = checker.converged(iter, previous, current, (void *) 0);
stop = checker.converged(iter, previous, current, &tid);
stop = checker.converged(iter, previous, current, getFields());
stop = checker.converged(iter, previous, current, &s);
stop = checker.converged(iter, previous, current, snprintf(s));
stop = checker.converged(iter, previous, current, maxPair);
stop = checker.converged(iter, previous, current, iter.mOwner.mOwner.mOwner.mOwner.mOwner.mOwner.mOwner.mOwner);
stop = checker.converged(iter, previous, current, fCurrent);
stop = checker.converged(iter, previous, current, false);
stop = checker.converged(iter, previous, current, &maxLength);
stop = checker.converged(iter, previous, current, aValue);
stop = checker.converged(iter, previous, current, getMajorVertical());
stop = checker.converged(iter, previous, current, isFlag);
stop = checker.converged(iter, previous, current, aChild);
stop = checker.converged(iter, previous, current, checker.line.offset);
stop = checker.converged(iter, previous, current, &d);
stop = checker.converged(iter, previous, current, i, i; i--);
stop = checker.converged(iter, previous, current, &bEnum);
stop = checker.converged(iter, previous, current, iter.type);
stop = checker.converged(iter, previous, current, aMath);
stop = checker.converged(iter, current, i);
stop = checker.converged(iter, previous, current, &state);
stop = checker.converged(iter, previous, current, &bStop);
stop = checker.converged(iter, current); else /* XXX */ if (n == null) return 0;
stop = checker.converged(iter, previous, &current<);
stop = checker.converged(iter, previous, &current);
stop = checker.converged(iter, previous, current) &1;
stop = checker.converged(iter, current); else /* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); else </* XXX */ if (n == null) return 0;
stop = checker.converged(iter, previous, <current);
stop = checker.converged(iter, current); else &/* XXX */ if (n == null) <return 0;
<stop = checker.converged(iter, previous, current);
stop = checker.converged(iter, previous, current);
stop = checker.converged(iter, previous, current) 1;
stop = checker.converged(iter, current); <else &/* XXX */ if (n == null) return 0;
stop = checker.converged(iter, current);
stop = checker.converged(iter, previous, current);
stop = checker.converged(iter, current); &else </* XXX */ if (n == null) return 0;
stop = checker.converged(iter, current); &else </* XXX */ if (n == null) <return 0;
stop = checker.converged(iter, current); <else &/* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); &else &/* XXX */ if (n == null) return 0;
stop = checker.converged(iter, previous, current<);
stop = checker.converged(iter, current); else </* XXX */ if (n == null) <return 0;
stop = checker.converged(iter, previous);
stop = checker.converged(iter, current); <else &/* XXX */ if (n == null) <return 0;
stop = checker.converged(iter, previous, current&);
stop = checker.converged(iter, current); <else </* XXX */ if (n == null) return 0;
stop = checker.converged(iter, current); &else &/* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); <else </* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); &else /* XXX */ if (n == null) return 0;
stop = checker.converged(iter, current); &else </* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, previous, &current&);
stop = checker.converged(iter, current); &else /* XXX */ if (n == null) <return 0;
stop = checker.converged(iter, current); else </* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); <else /* XXX */ if (n == null) <return 0;
stop = checker.converged(iter, previous, <current&);
stop = checker.converged(iter, previous, current) <1;
stop = checker.converged(iter, previous, current);
stop = checker.converged(iter, previous, <current<);
stop = checker.converged(iter, current); else /* XXX */ if (n == null) <return 0;
&stop = checker.converged(iter, previous, current);
stop = checker.converged(iter, current); <else </* XXX */ if (n == null) <return 0;
stop = checker.converged(iter, current); <else /* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); &else &/* XXX */ if (n == null) <return 0;
stop = checker.converged(iter, current); else &/* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); &else /* XXX */ if (n == null) &return 0;
stop = checker.converged(iter, current); else &/* XXX */ if (n == null) return 0;
stop = checker.converged(iter, current); <else /* XXX */ if (n == null) return 0;
