return (result);
return res;
return NS_OK;
return doubleValue;

return (double)result;
return rv;
return doubleValue();
return result;
return 0;
return double value;
return (double) result;
return (*result);
return double result;
return denominator.doubleValue();
return ret;
return (0);
return value;
return double(result);
return *result;
return(result);
return (double)(result);
return val;
return &result;
return doubleValue(result);
return numerator.doubleValue();
return d;
return v;
return aValue;
return len;
return new doubleValue;
return retval;
return (value);
return rval;
return (int)result;
return ++result;
return ((double)result);
return doubleval;
return r;
return result? 0 : result;
return n;
return (int) result;
return -1;
return result == null;
return (int)(result);
return doublevalue;
return DoubleValue(result);
double result = 0; return result;
return Integer(result);
return (double)value;
return result.doubleValue();
return result == 0;
return super.doubleValue();
res = result; return res;
return result? doubleValue : result;
return double denom;
return NS_SIZE(result);
return integer.doubleValue();
return (1);
return (void) result;
return tmp;
return doubleVal;
return i;
return Double(result);
return '0';
return result!= null;
return denominator;
return Result;
return (++result);
return double denominator.doubleValue();
return 1;
return double val;
return (result)? result : result;
return (double) res;
return (const double)result;
return const doubleValue();
return Numerator.doubleValue();
return mValue;
ret = result; return ret;
return (rv);
return (null!= result);
return denominator.doubleValue();
return res = result;
return double denominator;
return resval;
return rd;
return numResult;
return result - 1;
return dummy;
return new doubleValue();
double res = result; return res;
return 0.0;
return doubleValue(&result);
return double;
return (void)result;
return this;
return NUMERATOR.doubleValue();
return result; return 0;
return (*(double)result);
return (ulong) result;
return int result;
return xValue;
return (strdup(result));
return double_value;
return result;  return 0;
return doubleValue(0);
return result  0;
return x;
return double.value;
return np;
return VALUE;
return data;
return (double)Result;
return floatValue;
return (ulong)result;
return rs;
return indx;
return result!= 0;
return double d;
return (double) (result);
return difference;
*result = result; return NS_OK;
return doubleValue(*result);
return doubleValue (result);
double result = doubleValue(); return result;
return numerator.doubleValue() / result;
return (strlen(result));
return (*value);
return (double)d;
return result? 0 : 0;
return (const doubleValue*) result;
return result - result;
return result? result : result;
return numerator.doubleValue();
return (double)((double)result);
return _doubleValue;
return NS_ERROR_FAILURE;
return DoubleValue(&result);
return (null == result);
return result; */
retval = result; return retval;
return _doubleValue(result);
return result? result : 0;
return (const double*)result;
return (doubleValue);
return ((double) result);
return (Result);
return (void *) result;
return (double)rv;
double result = numerator.doubleValue();
return (ulong)(result);
return ((double)(result));
return (do_doubleValue());
double result = 0;
rv = result; return rv;
return (const double*) result;
result = doubleValue(); return result;
return result;  return result;
return result;  return NS_OK;
return (const doubleValue *) result;
return (Result) result;
return double result = 0;
return (result == null);
return (result) result;
return (double)((int)result);
return result? doubleValue : 0;
return result; /* XXX */
return result == NUMERATOR;
return result? double : result;
double result = denominator.doubleValue();
return ((result));
return (doubleValue) result;
double result = 0; return res;
return (doubleValue());
return (result == 0);
double result = res; return result;
res = res; return res;
return (do_doubleValue);
return (result? result : 0);
return result || result == 0;
return result;  return doubleValue();
*result = doubleValue; return result;
return /* doubleValue */;
return (result!= null);
*result = 0; return result;
return result || result == NUMERATOR;
return result? doubleValue() : result;
return (const doubleValue) result;
*result = result; return 0;
return result? result : NUMERATOR;
return result; *result = 0;
return numerator.doubleValue() + result;
if (aDistance == 0)  /* double value */ return 0;  if (result)  if (aDistance == 0)  return 0;  else  result = 0;  return result;  return result;
if (*result == 0) return null; return result;
/* do we're not allowed to shift */ return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0)  *result = &strlen(*result);   return result;
*result = doubleValue();  else  *result = doubleValue();  return result;
return mData;
return result? result : NUMERATOR_NONE;
return (*this) result;
/* check for differences in the initial value. */ if (*(result) == 0)  double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result;   return result;
return nb.doubleValue();
if (aCurrentRefValue == null)  double result = (double)result; if (!((aCurrentRefValue  0) && (aCurrentRefValue  0)))  return NS_ERROR_OUT_OF_MEMORY;  return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue")))  *result = NS_OK; return NS_OK;  if (result == NS_ERROR_NULL_POINTER)  if ((result = result) && ((result = NS_ERROR_NULL_POINTER)))  *result = NUMERATOR(result);   return NS_OK;
if (null == result)  return doubleValue;  else  res = numerator.doubleValue() / denominator.doubleValue(); if (res  0)  if (res > 0)  *res = res;  else  *res = res;    return (*res);
if (result)  if (!strlen(result))  return (0);  else  return -1;
return result & 0;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc))  return NS_ERROR_FAILURE;  if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK;  return NS_OK;
if (result == -1)  if (!g_doubleValue)  g_doubleValue = doubleValue; return 0;  return 0;
return x, y;
if (!result)  return -1;  else  res = 0;  return result;
if (needPool)  nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc));  if (needPool)  doc.SetDocument(getter_AddRefs(doc));   if (do_QueryInterface(doc))  doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc));   return doc;
if (result == 0)  aValue = NUMERATOR; return aValue;  return NS_OK;
ret = doubleValue(); ret.float = -result; if (result) ret = doubleValue(); else ret = doubleValue(); return ret;
return result.get();
return (nsIDocument*) result;
if (result == -1) return (0); else return result;
return (const doubleValue*)result;
return result? nsHTMLAtoms::doubleValue() : -1;
return (do_load());
return result.trim();
return X_RDV;
return result.Equals(NUMERATOR_INTEGER_VALUE);
if (!do_doubleValue)  double result = NUMERATOR.doubleValue() / denominator.doubleValue();  else  if (*do_doubleValue)  double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue)  if (*do_doubleValue)  double value = value; return value;   return result;
if (! result) return -1; else return result;
return (nsInteger *) result;
if (!result)  return 0;   return result;
return result.s_adj;
return double!= result;
if (mDouble)  double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue()
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0)  double result = 0;  else  double denominator = 0;  return result;
ret = doubleValue(*cnt); if ((ret = result)!= 0)  /* * XXX */ result = cnt;  return ret;
if (number == 0)  double s = 0; if (number == 0)  double s = 0;  s = 0;  if (number == 0)  double s = 0; double s = 0; double s = 0;   return s;
double result = numerator.doubleValue() / denominator.doubleValue(); if (result) return result; else return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np)  *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np;  if (*np == np)  *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
return m_doubleValue;
return nr;
return X_P(result);
return result.next;
return (int) sc.doubleValue();
return result;  else  double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
return (double)((**this) result);
return xval;
return X_P((double)*(null));
if (result == -1)  *result = 0; return (0);  return result;
if (nnum)  double v; void *result = mTotalNum; return v;  else  if (nnum  0)  if (result == -1)  v = 0;  else  v = 0;     return result;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue;  else doubleValue = '0';  return doubleValue;
/* * The next two are the same *. */ return doubleValue();
if (result)   else  double result = &s;  return result;
return double _doubleValue;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1)  /* the value is zero. */  return res;
return (*(double) result);
if (nnum) double v; void *result = mTotalNum; return v; &else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (result) if (!strlen(result)) <return (0); else &return -1;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else double denominator = 0; &return result;
if (aDistance == 0) /* double value */ return 0; if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (aDistance == 0) &/* double value */ return 0; &if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
</* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
return result; return 0;
if (!result) &return -1; <else res = 0; &return result;
if (!result) &return -1; else &res = 0; &return result;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <<return result;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (null == result) &return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else <double denominator = 0; &return result;
if (null == result) <return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (number == 0) <double s = 0; if (number == 0) <double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else &double denominator = 0; <return result;
if (nnum) <double v; void *result = mTotalNum; return v; <else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
return result <0;
if (null == result) &return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
</* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (null == result) &return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) &if (!strlen(result)) &return (0); &else <return -1;
if (result) if (!strlen(result)) &return (0); else &return -1;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else double denominator = 0; &return result;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
if (nnum) double v; void *result = mTotalNum; return v; &else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
<return result;
if (!result) return -1; &else res = 0; <return result;
if (result) else double result = &s; &return result;
&if (result == -1) *result = 0; return (0); <return result;
if (result) &if (!strlen(result)) return (0); &else <return -1;
&*result = doubleValue(); &else <*result = doubleValue(); return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (nnum) <double v; void *result = mTotalNum; return v; <else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else <double denominator = 0; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (result) <if (!strlen(result)) &return (0); &else <return -1;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (result) <if (!strlen(result)) <return (0); <else &return -1;
if (number == 0) double s = 0; if (number == 0) <double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) &return -1; else res = 0; &return result;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result == -1) <if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; <return 0;
return result; <return result;
if (null == result) return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (null == result) return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (number == 0) &double s = 0; if (number == 0) &double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
<if (result == -1) <*result = 0; return (0); &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else &double denominator = 0; <return result;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
<return res;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) <&else &double result = &s; return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <&return result;
if (aDistance == 0) /* double value */ return 0; if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
&*result = doubleValue(); else *result = doubleValue(); &return result;
if (result == -1) &*result = 0; return (0); return result;
if (nnum) double v; void *result = mTotalNum; return v; &else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
return result & <0;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else &double denominator = 0; return result;
if (number == 0) double s = 0; if (number == 0) double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
&*result = doubleValue(); else <*result = doubleValue(); <return result;
if (result) if (!strlen(result)) return (0); &else <return -1;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
&/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
if (nnum) &double v; void *result = mTotalNum; return v; else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) <double v; void *result = mTotalNum; return v; <else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (result) <if (!strlen(result)) return (0); else return -1;
&*result = doubleValue(); <else *result = doubleValue(); return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (!result) return -1; &else res = 0; &return result;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (null == result) &return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (nnum) double v; void *result = mTotalNum; return v; &else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else double denominator = 0; <return result;
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) &<else double result = &s; &return result;
if (result) &&else <double result = &s; <return result;
*result = doubleValue(); &else *result = doubleValue(); <return result;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (null == result) &return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (nnum) &double v; void *result = mTotalNum; return v; else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (result == 0) <aValue = NUMERATOR; return aValue; <return NS_OK;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (aDistance == 0) /* double value */ return 0; <if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
<*result = doubleValue(); &else *result = doubleValue(); &return result;
if (null == result) <return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (nnum) <double v; void *result = mTotalNum; return v; &else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (!result) return 0; &&return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else double denominator = 0; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (aDistance == 0) &/* double value */ return 0; &if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (result) if (!strlen(result)) return (0); else <return -1;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (nnum) double v; void *result = mTotalNum; return v; &else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (null == result) return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
&*result = doubleValue(); <else <*result = doubleValue(); <return result;
if (aDistance == 0) /* double value */ return 0; &if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) &<else &double result = &s; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (aDistance == 0) &/* double value */ return 0; &if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else <double denominator = 0; return result;
*result = doubleValue(); &else <*result = doubleValue(); return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (!result) <return -1; else &res = 0; &return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <<return result;
<*result = doubleValue(); &else <*result = doubleValue(); &return result;
if (result) &&else &double result = &s; <return result;
if (!result) <return -1; &else res = 0; &return result;
&*result = doubleValue(); else <*result = doubleValue(); return result;
</* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
if (result) if (!strlen(result)) &return (0); else return -1;
if (result) <if (!strlen(result)) return (0); <else <return -1;
&if (result == -1) *result = 0; return (0); &return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (null == result) return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (number == 0) &double s = 0; if (number == 0) double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result) <if (!strlen(result)) <return (0); else <return -1;
if (result) <&else double result = &s; &return result;
if (number == 0) <double s = 0; if (number == 0) double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (result) <else <double result = &s; return result;
*result = doubleValue(); <else &*result = doubleValue(); <return result;
/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
if (aDistance == 0) </* double value */ return 0; &if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (nnum) <double v; void *result = mTotalNum; return v; <else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (result == -1) &if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; &return 0;
if (aDistance == 0) /* double value */ return 0; <if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (result) &if (!strlen(result)) return (0); else &return -1;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); return result;
if (null == result) &return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
<*result = doubleValue(); else <*result = doubleValue(); <return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (!result) <return -1; &else res = 0; <return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (nnum) &double v; void *result = mTotalNum; return v; <else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (aDistance == 0) &/* double value */ return 0; <if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (result) if (!strlen(result)) <return (0); else <return -1;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &&return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
&/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
if (result) <if (!strlen(result)) return (0); else <return -1;
if (!result) return -1; &else &res = 0; return result;
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) <if (!strlen(result)) <return (0); &else return -1;
if (null == result) &return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (!result) <return -1; &else <res = 0; <return result;
if (!result) <return -1; &else <res = 0; &return result;
if (aDistance == 0) </* double value */ return 0; if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (result) <if (!strlen(result)) return (0); else &return -1;
/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
if (aDistance == 0) /* double value */ return 0; if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (!result) &return -1; else <res = 0; &return result;
if (aDistance == 0) &/* double value */ return 0; <if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) &<else <double result = &s; &return result;
if (result) &if (!strlen(result)) &return (0); else &return -1;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <&return result;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) &if (!strlen(result)) <return (0); else return -1;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (null == result) &return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
ret = doubleValue(*cnt); if ((ret = result)!= 0) &/* * XXX */ result = cnt; &return ret;
if (aDistance == 0) &/* double value */ return 0; if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (result == 0) <aValue = NUMERATOR; return aValue; &return NS_OK;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else <double denominator = 0; return result;
</* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (!result) <return 0; <&return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &<return result;
<*result = doubleValue(); <else &*result = doubleValue(); &return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
*result = doubleValue(); else <*result = doubleValue(); return result;
&*result = doubleValue(); &else &*result = doubleValue(); return result;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!result) return -1; else &res = 0; &return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else <double denominator = 0; &return result;
if (aDistance == 0) &/* double value */ return 0; if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) &/* double value */ return 0; <if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
if (null == result) return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (aDistance == 0) &/* double value */ return 0; if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
return '0';
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else &double denominator = 0; <return result;
if (nnum) double v; void *result = mTotalNum; return v; else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
</* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &&return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result == -1) <if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; &return 0;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else <double denominator = 0; &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else &double denominator = 0; return result;
if (result) &if (!strlen(result)) &return (0); &else return -1;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (!result) <return -1; &else <res = 0; return result;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else <double denominator = 0; return result;
<*result = doubleValue(); else <*result = doubleValue(); &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else &double denominator = 0; return result;
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (!result) <return 0; <<return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result == -1) <*result = 0; return (0); &return result;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) &return -1; <else &res = 0; &return result;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (nnum) <double v; void *result = mTotalNum; return v; else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
</* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
if (null == result) &return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) return -1; &else res = 0; return result;
return result; &else &double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (null == result) <return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (number == 0) <double s = 0; if (number == 0) &double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (result == -1) <if (!g_doubleValue) g_doubleValue = doubleValue; return 0; return 0;
if (number == 0) &double s = 0; if (number == 0) double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
&/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (nnum) double v; void *result = mTotalNum; return v; <else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) <double v; void *result = mTotalNum; return v; else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
return result; <return NS_OK;
*result = doubleValue(); else *result = doubleValue(); return result;
if (aDistance == 0) /* double value */ return 0; if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
*result = doubleValue(); else &*result = doubleValue(); return result;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) </* the value is zero. */ <return res;
if (null == result) return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (aDistance == 0) /* double value */ return 0; if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <&return result;
if (aDistance == 0) &/* double value */ return 0; if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <&return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <return result;
if (result) <&else &double result = &s; &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else &double denominator = 0; &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else &double denominator = 0; return result;
if (nnum) &double v; void *result = mTotalNum; return v; &else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else double denominator = 0; return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (number == 0) &double s = 0; if (number == 0) <double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &return result;
&if (result == -1) &*result = 0; return (0); <return result;
if (nnum) <double v; void *result = mTotalNum; return v; &else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (result) else double result = &s; return result;
if (result) &else double result = &s; return result;
if (null == result) <return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
if (null == result) &return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else &double denominator = 0; &return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result) &&else <double result = &s; return result;
if (!result) return -1; <else &res = 0; &return result;
&/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
<*result = doubleValue(); &else &*result = doubleValue(); &return result;
if (null == result) <return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (result) &if (!strlen(result)) <return (0); <else &return -1;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
*result = doubleValue(); <else *result = doubleValue(); &return result;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (!result) <return -1; else &res = 0; <return result;
if (result) <<else double result = &s; &return result;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) </* the value is zero. */ return res;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (number == 0) double s = 0; if (number == 0) <double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (number == 0) <double s = 0; if (number == 0) &double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (null == result) return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (result) &<else &double result = &s; &return result;
/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
&if (result == -1) <*result = 0; return (0); <return result;
*result = doubleValue(); else <*result = doubleValue(); <return result;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (nnum) double v; void *result = mTotalNum; return v; else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (aDistance == 0) </* double value */ return 0; &if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
return result; &return result;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!result) return 0; &<return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else &double denominator = 0; return result;
if (number == 0) <double s = 0; if (number == 0) <double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) if (!strlen(result)) <return (0); &else <return -1;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) &return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (result) &if (!strlen(result)) <return (0); else <return -1;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&*result = doubleValue(); &else *result = doubleValue(); &return result;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) <return -1; <else <res = 0; <return result;
if (result) if (!strlen(result)) <return (0); &else &return -1;
<*result = doubleValue(); <else <*result = doubleValue(); return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else double denominator = 0; <return result;
return result; &else <double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (number == 0) <double s = 0; if (number == 0) &double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else <double denominator = 0; &return result;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
&*result = doubleValue(); else *result = doubleValue(); <return result;
if (nnum) double v; void *result = mTotalNum; return v; <else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (result) &if (!strlen(result)) &return (0); <else &return -1;
<if (result == -1) &*result = 0; return (0); <return result;
&/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
&*result = doubleValue(); &else *result = doubleValue(); <return result;
if (result) &&else double result = &s; &return result;
if (!result) &return -1; else &res = 0; <return result;
if (aDistance == 0) </* double value */ return 0; &if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); return result;
if (aDistance == 0) </* double value */ return 0; <if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
&return result;
&/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (null == result) return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (number == 0) &double s = 0; if (number == 0) double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else double denominator = 0; return result;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) /* the value is zero. */ &return res;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (!result) &return 0; <&return result;
if (number == 0) <double s = 0; if (number == 0) <double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (!result) <return -1; &else &res = 0; &return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
&/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
&*result = doubleValue(); else *result = doubleValue(); return result;
if (!result) <return -1; <else <res = 0; &return result;
if (!result) &return -1; else <res = 0; return result;
if (nnum) double v; void *result = mTotalNum; return v; else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &&return result;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (!result) return -1; else res = 0; &return result;
&if (result == -1) *result = 0; return (0); return result;
if (result) &if (!strlen(result)) return (0); else <return -1;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!result) <return -1; <else res = 0; &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else <double denominator = 0; return result;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
&*result = doubleValue(); <else *result = doubleValue(); &return result;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <return result;
return result; &return doubleValue();
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
<if (result == -1) *result = 0; return (0); &return result;
if (nnum) double v; void *result = mTotalNum; return v; <else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) <double v; void *result = mTotalNum; return v; <else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &return result;
if (nnum) &double v; void *result = mTotalNum; return v; else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) &if (!strlen(result)) return (0); <else <return -1;
if (result) <if (!strlen(result)) &return (0); <else return -1;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aDistance == 0) &/* double value */ return 0; &if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (result) else <double result = &s; &return result;
if (result) &if (!strlen(result)) return (0); <else &return -1;
ret = doubleValue(*cnt); if ((ret = result)!= 0) &/* * XXX */ result = cnt; <return ret;
<if (result == -1) <*result = 0; return (0); return result;
if (nnum) double v; void *result = mTotalNum; return v; <else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
if (!result) <return -1; &else &res = 0; return result;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) <<else <double result = &s; <return result;
if (!result) return -1; &else <res = 0; &return result;
if (null == result) &return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (number == 0) <double s = 0; if (number == 0) <double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (!result) <return -1; else <res = 0; &return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <<return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (nnum) <double v; void *result = mTotalNum; return v; &else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) double v; void *result = mTotalNum; return v; &else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (!result) return -1; &else &res = 0; <return result;
if (result) <else double result = &s; <return result;
ret = doubleValue(*cnt); if ((ret = result)!= 0) /* * XXX */ result = cnt; <return ret;
if (result) if (!strlen(result)) &return (0); <else &return -1;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) </* double value */ return 0; if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
*result = doubleValue(); else *result = doubleValue(); <return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else <double denominator = 0; <return result;
<*result = doubleValue(); else &*result = doubleValue(); &return result;
if (nnum) <double v; void *result = mTotalNum; return v; else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (result == 0) aValue = NUMERATOR; return aValue; <return NS_OK;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) </* double value */ return 0; &if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result == -1) if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; &return 0;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else &double denominator = 0; return result;
if (result == -1) &if (!g_doubleValue) g_doubleValue = doubleValue; return 0; return 0;
if (result) &if (!strlen(result)) <return (0); &else return -1;
if (null == result) <return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (result) else &double result = &s; <return result;
if (null == result) &return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (result) if (!strlen(result)) &return (0); <else <return -1;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (nnum) double v; void *result = mTotalNum; return v; else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (null == result) return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (result) if (!strlen(result)) <return (0); <else return -1;
if (null == result) return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
if (result) if (!strlen(result)) &return (0); &else return -1;
if (result == -1) <if (!g_doubleValue) g_doubleValue = doubleValue; return 0; &return 0;
return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else &double denominator = 0; &return result;
/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else &double denominator = 0; <return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (aDistance == 0) /* double value */ return 0; &if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else double denominator = 0; <return result;
if (null == result) return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else &double denominator = 0; &return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <return result;
if (!result) <return -1; else <res = 0; <return result;
</* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
&*result = doubleValue(); &else &*result = doubleValue(); &return result;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
</* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
<*result = doubleValue(); <else *result = doubleValue(); return result;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) <return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
ret = doubleValue(*cnt); if ((ret = result)!= 0) /* * XXX */ result = cnt; return ret;
if (aDistance == 0) </* double value */ return 0; <if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (nnum) &double v; void *result = mTotalNum; return v; &else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
<return doubleValue();
if (number == 0) double s = 0; if (number == 0) double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) &return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
return result & &0;
/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
if (nnum) double v; void *result = mTotalNum; return v; &else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else &double denominator = 0; &return result;
if (nnum) <double v; void *result = mTotalNum; return v; else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (!result) return -1; <else &res = 0; return result;
if (null == result) &return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
<*result = doubleValue(); else *result = doubleValue(); return result;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <&return result;
if (!result) return -1; <else &res = 0; <return result;
return result; <else double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (null == result) <return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (number == 0) <double s = 0; if (number == 0) double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (nnum) <double v; void *result = mTotalNum; return v; <else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (nnum) &double v; void *result = mTotalNum; return v; else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (!result) return -1; <else res = 0; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); return result;
if (aDistance == 0) &/* double value */ return 0; <if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) if (!strlen(result)) &return (0); else <return -1;
&return doubleValue();
if (aDistance == 0) </* double value */ return 0; <if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (nnum) double v; void *result = mTotalNum; return v; else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (number == 0) <double s = 0; if (number == 0) &double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else <double denominator = 0; &return result;
if (nnum) <double v; void *result = mTotalNum; return v; else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
&*result = doubleValue(); <else &*result = doubleValue(); return result;
<return result;
if (nnum) &double v; void *result = mTotalNum; return v; <else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &<return result;
<if (result == -1) <*result = 0; return (0); <return result;
if (aDistance == 0) /* double value */ return 0; <if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (number == 0) <double s = 0; if (number == 0) &double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (aDistance == 0) /* double value */ return 0; <if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
if (number == 0) double s = 0; if (number == 0) double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
<*result = doubleValue(); <else *result = doubleValue(); <return result;
if (!result) &return -1; <else res = 0; return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &&return result;
<if (result == -1) &*result = 0; return (0); &return result;
if (nnum) &double v; void *result = mTotalNum; return v; &else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) double v; void *result = mTotalNum; return v; <else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (result) if (!strlen(result)) <return (0); <else <return -1;
if (result) &if (!strlen(result)) &return (0); <else return -1;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else double denominator = 0; return result;
if (result == -1) <*result = 0; return (0); return result;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (nnum) double v; void *result = mTotalNum; return v; <else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else double denominator = 0; return result;
return result; return doubleValue();
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
*result = doubleValue(); <else <*result = doubleValue(); <return result;
if (!result) &return -1; else res = 0; <return result;
if (!result) &return 0; &&return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (!result) &return -1; <else <res = 0; &return result;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (aDistance == 0) &/* double value */ return 0; <if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (!result) &return -1; <else <res = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else <double denominator = 0; &return result;
if (result) <&else double result = &s; return result;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) &if (!strlen(result)) &return (0); else return -1;
if (aDistance == 0) </* double value */ return 0; if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
if (result == -1) if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; return 0;
if (nnum) <double v; void *result = mTotalNum; return v; else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (number == 0) &double s = 0; if (number == 0) double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (result) <if (!strlen(result)) &return (0); &else &return -1;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else &double denominator = 0; return result;
<*result = doubleValue(); &else *result = doubleValue(); return result;
ret = doubleValue(*cnt); if ((ret = result)!= 0) /* * XXX */ result = cnt; &return ret;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
if (result) <else &double result = &s; return result;
if (result) &else double result = &s; &return result;
if (result) else &double result = &s; return result;
if (null == result) <return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (null == result) <return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (number == 0) <double s = 0; if (number == 0) &double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
*result = doubleValue(); &else <*result = doubleValue(); &return result;
if (result) &else <double result = &s; <return result;
if (result) &if (!strlen(result)) <return (0); &else <return -1;
if (result) &if (!strlen(result)) return (0); &else return -1;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (result == -1) &if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; <return 0;
&/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (!result) return -1; <else res = 0; &return result;
ret = doubleValue(*cnt); if ((ret = result)!= 0) </* * XXX */ result = cnt; <return ret;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &&return result;
*result = doubleValue(); <else &*result = doubleValue(); &return result;
if (nnum) &double v; void *result = mTotalNum; return v; &else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (number == 0) <double s = 0; if (number == 0) double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (!result) <return -1; else res = 0; &return result;
if (!result) return 0; return result;
if (result) <if (!strlen(result)) <return (0); &else <return -1;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (null == result) &return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
&double result = numerator.doubleValue() / denominator.doubleValue(); if (result) return result; else return result;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) if (!strlen(result)) <return (0); <else &return -1;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
<if (result == -1) *result = 0; return (0); <return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else double denominator = 0; &return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (null == result) <return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (null == result) <return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (result == -1) &if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; &return 0;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &<return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else &double denominator = 0; <return result;
/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
return result; &else double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (aDistance == 0) &/* double value */ return 0; if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (result == -1) if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; <return 0;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (nnum) double v; void *result = mTotalNum; return v; else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (!result) <return -1; <else res = 0; <return result;
if (null == result) return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (result) &if (!strlen(result)) <return (0); <else return -1;
if (!result) <return -1; <else &res = 0; <return result;
if (result) <&else <double result = &s; <return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else double denominator = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else double denominator = 0; return result;
<*result = doubleValue(); &else <*result = doubleValue(); return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
<*result = doubleValue(); &else <*result = doubleValue(); <return result;
if (aDistance == 0) </* double value */ return 0; &if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <<return result;
*result = doubleValue(); &else <*result = doubleValue(); <return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <&return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &return result;
if (nnum) <double v; void *result = mTotalNum; return v; else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else <double denominator = 0; <return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &<return result;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) &/* the value is zero. */ return res;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) <if (!strlen(result)) return (0); <else &return -1;
if (result) <else <double result = &s; &return result;
if (null == result) <return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (!result) return -1; else &res = 0; <return result;
return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <return result;
if (aDistance == 0) </* double value */ return 0; if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (nnum) double v; void *result = mTotalNum; return v; <else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (aDistance == 0) /* double value */ return 0; if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (null == result) return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (null == result) &return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else double denominator = 0; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &&return result;
if (result) <&else <double result = &s; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else <double denominator = 0; &return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (number == 0) double s = 0; if (number == 0) <double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result) &else double result = &s; <return result;
return result; <return doubleValue();
if (result) <else &double result = &s; &return result;
/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (null == result) <return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else double denominator = 0; &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (!result) &return -1; &else &res = 0; <return result;
if (result) if (!strlen(result)) <return (0); &else return -1;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aDistance == 0) &/* double value */ return 0; <if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (aDistance == 0) </* double value */ return 0; <if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (number == 0) &double s = 0; if (number == 0) double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
&*result = doubleValue(); else <*result = doubleValue(); &return result;
if (!result) <return -1; &else &res = 0; <return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (!result) &return 0; &<return result;
if (!result) &return -1; &else <res = 0; return result;
if (aDistance == 0) </* double value */ return 0; &if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) &/* the value is zero. */ <return res;
*result = doubleValue(); else &*result = doubleValue(); &return result;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (number == 0) <double s = 0; if (number == 0) <double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (number == 0) double s = 0; if (number == 0) &double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (number == 0) <double s = 0; if (number == 0) double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (number == 0) double s = 0; if (number == 0) double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result) <if (!strlen(result)) return (0); &else &return -1;
if (!result) return -1; &else &res = 0; &return result;
&/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!result) <return -1; <else &res = 0; return result;
if (aDistance == 0) /* double value */ return 0; &if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
<*result = doubleValue(); <else <*result = doubleValue(); <return result;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (null == result) &return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (nnum) <double v; void *result = mTotalNum; return v; <else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
&*result = doubleValue(); <else *result = doubleValue(); <return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <return result;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&*result = doubleValue(); <else <*result = doubleValue(); return result;
return doubleValue();
if (number == 0) double s = 0; if (number == 0) <double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (result) <<else &double result = &s; &return result;
if (nnum) &double v; void *result = mTotalNum; return v; else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (aDistance == 0) &/* double value */ return 0; if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (null == result) &return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (result) &<else double result = &s; <return result;
if (nnum) double v; void *result = mTotalNum; return v; &else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
if (null == result) return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
return result; return result;
return '<0';
if (!result) &return -1; &else <res = 0; &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (number == 0) double s = 0; if (number == 0) double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (!result) return -1; else res = 0; return result;
if (!result) &return 0; return result;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
</* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
if (!result) &return -1; &else <res = 0; <return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <<return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &return result;
&return result;
if (!result) &return -1; else res = 0; return result;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) <<else &double result = &s; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else <double denominator = 0; &return result;
if (null == result) <return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else &double denominator = 0; <return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else double denominator = 0; &return result;
if (result) <<else <double result = &s; return result;
if (null == result) return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) /* the value is zero. */ <return res;
<if (result == -1) *result = 0; return (0); return result;
if (!result) <return 0; &<return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else <double denominator = 0; <return result;
if (aDistance == 0) </* double value */ return 0; <if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
if (aDistance == 0) /* double value */ return 0; if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (number == 0) double s = 0; if (number == 0) <double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result) <if (!strlen(result)) &return (0); else &return -1;
if (number == 0) double s = 0; if (number == 0) double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else &double denominator = 0; &return result;
if (null == result) &return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (aDistance == 0) /* double value */ return 0; if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
if (null == result) return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (null == result) return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else double denominator = 0; &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else <double denominator = 0; <return result;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (null == result) <return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
<*result = doubleValue(); &else *result = doubleValue(); <return result;
*result = doubleValue(); else *result = doubleValue(); &return result;
if (result) <<else double result = &s; return result;
*result = doubleValue(); <else *result = doubleValue(); <return result;
if (nnum) &double v; void *result = mTotalNum; return v; else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (!result) &return 0; <<return result;
if (!result) &return -1; &else &res = 0; return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (aDistance == 0) &/* double value */ return 0; &if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
return result; else <double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (nnum) &double v; void *result = mTotalNum; return v; &else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &return result;
if (aDistance == 0) /* double value */ return 0; <if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (nnum) double v; void *result = mTotalNum; return v; &else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (aDistance == 0) </* double value */ return 0; &if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (result == -1) *result = 0; return (0); &return result;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (null == result) &return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (result == -1) *result = 0; return (0); return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) <else double result = &s; return result;
if (result) &else <double result = &s; return result;
if (aDistance == 0) </* double value */ return 0; if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
</* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
if (!result) &return -1; else <res = 0; <return result;
if (nnum) &double v; void *result = mTotalNum; return v; <else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (result) &<else &double result = &s; <return result;
if (aDistance == 0) /* double value */ return 0; &if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (result) if (!strlen(result)) return (0); else return -1;
if (aDistance == 0) &/* double value */ return 0; <if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
&return res;
if (aDistance == 0) &/* double value */ return 0; <if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) <if (!strlen(result)) &return (0); <else &return -1;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (result) &else &double result = &s; <return result;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) &/* the value is zero. */ &return res;
if (aDistance == 0) /* double value */ return 0; &if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!result) return -1; &else <res = 0; return result;
if (result == -1) &if (!g_doubleValue) g_doubleValue = doubleValue; return 0; <return 0;
if (!result) <return -1; <else res = 0; return result;
if (number == 0) &double s = 0; if (number == 0) double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result) if (!strlen(result)) &return (0); &else <return -1;
return result; <else &double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (result) if (!strlen(result)) return (0); &else return -1;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) /* double value */ return 0; <if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
if (result) &&else double result = &s; <return result;
if (null == result) return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (result) <if (!strlen(result)) return (0); &else <return -1;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (!result) return -1; &else <res = 0; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
&/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
return result &0;
if (number == 0) double s = 0; if (number == 0) <double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (number == 0) <double s = 0; if (number == 0) &double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (aDistance == 0) &/* double value */ return 0; &if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); return result;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) &/* double value */ return 0; if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (result == -1) if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; return 0;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &<return result;
if (number == 0) <double s = 0; if (number == 0) <double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
</* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
if (result) &<else <double result = &s; <return result;
if (result) &if (!strlen(result)) <return (0); <else <return -1;
if (!result) &return -1; &else res = 0; return result;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
return result; <return 0;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (aDistance == 0) </* double value */ return 0; <if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) /* double value */ return 0; &if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (mDouble) &double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue()
ret = doubleValue(*cnt); if ((ret = result)!= 0) &/* * XXX */ result = cnt; return ret;
/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aDistance == 0) </* double value */ return 0; if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
</* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (aDistance == 0) </* double value */ return 0; &if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &&return result;
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &<return result;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) <return -1; &else res = 0; return result;
<*result = doubleValue(); <else <*result = doubleValue(); &return result;
&/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (result) &<else double result = &s; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else <double denominator = 0; <return result;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (!result) &return -1; <else &res = 0; return result;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (result) <if (!strlen(result)) &return (0); else <return -1;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <<return result;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
&/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (result == -1) <if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; &return 0;
if (nnum) <double v; void *result = mTotalNum; return v; &else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) &double v; void *result = mTotalNum; return v; else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (null == result) return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (nnum) &double v; void *result = mTotalNum; return v; &else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (!result) <return -1; else <res = 0; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else double denominator = 0; &return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (nnum) double v; void *result = mTotalNum; return v; else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else double denominator = 0; <return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else <double denominator = 0; <return result;
if (nnum) double v; void *result = mTotalNum; return v; else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) if (!strlen(result)) &return (0); &else &return -1;
if (!result) &return -1; else &res = 0; return result;
if (result == -1) &*result = 0; return (0); &return result;
/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) &return -1; <else &res = 0; <return result;
if (nnum) &double v; void *result = mTotalNum; return v; <else <if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
*result = doubleValue(); else <*result = doubleValue(); &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &&return result;
if (aDistance == 0) &/* double value */ return 0; if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) /* double value */ return 0; &if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else <double denominator = 0; return result;
if (null == result) <return doubleValue; &else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
&*result = doubleValue(); <else &*result = doubleValue(); &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (!result) return -1; else <res = 0; &return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (!result) &return 0; <return result;
if (!result) &return -1; <else <res = 0; <return result;
if (nnum) <double v; void *result = mTotalNum; return v; &else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (aDistance == 0) </* double value */ return 0; if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (aDistance == 0) /* double value */ return 0; if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
&*result = doubleValue(); else &*result = doubleValue(); <return result;
if (nnum) &double v; void *result = mTotalNum; return v; <else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); &<return result;
if (aDistance == 0) </* double value */ return 0; <if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (!result) &return -1; <else res = 0; <return result;
&/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &return result;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else &double denominator = 0; &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (result) if (!strlen(result)) &return (0); <else return -1;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (!result) return 0; &return result;
if (result) <else &double result = &s; <return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (!result) return -1; <else <res = 0; return result;
</* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
</* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (aDistance == 0) </* double value */ return 0; if (result) <if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (result) <if (!strlen(result)) &return (0); &else return -1;
&/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
return result 0;
if (aDistance == 0) &/* double value */ return 0; &if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (result) &if (!strlen(result)) return (0); &else &return -1;
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
if (result) &&else &double result = &s; return result;
if (result == -1) &if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; return 0;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (result == 0) <aValue = NUMERATOR; return aValue; return NS_OK;
*result = doubleValue(); <else <*result = doubleValue(); return result;
return result; <else <double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (nnum) double v; void *result = mTotalNum; return v; else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
*result = doubleValue(); &else *result = doubleValue(); &return result;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (number == 0) <double s = 0; if (number == 0) double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else double denominator = 0; return result;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
<double result = numerator.doubleValue() / denominator.doubleValue(); if (result) return result; else return result;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (result) <if (!strlen(result)) return (0); <else return -1;
<*result = doubleValue(); &else &*result = doubleValue(); return result;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else double denominator = 0; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (null == result) <return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (number == 0) &double s = 0; if (number == 0) double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &<return result;
if (number == 0) <double s = 0; if (number == 0) &double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (nnum) double v; void *result = mTotalNum; return v; <else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (result) <if (!strlen(result)) return (0); &else return -1;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <&return result;
if (result == 0) &aValue = NUMERATOR; return aValue; return NS_OK;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
if (!result) <return -1; <else <res = 0; return result;
if (!result) <return -1; else res = 0; <return result;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result == -1) <if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; return 0;
if (!result) return 0; <<return result;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) <if (!strlen(result)) &return (0); else return -1;
if (number == 0) double s = 0; if (number == 0) double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
if (!result) return 0; <return result;
&if (result == -1) &*result = 0; return (0); &return result;
if (result == -1) <if (!g_doubleValue) g_doubleValue = doubleValue; return 0; <return 0;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else double denominator = 0; return result;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result == -1) <if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; return 0;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) </* the value is zero. */ &return res;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result == -1) if (!g_doubleValue) g_doubleValue = doubleValue; return 0; <return 0;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
<*result = doubleValue(); else &*result = doubleValue(); return result;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) <&else &double result = &s; <return result;
*result = doubleValue(); <else <*result = doubleValue(); &return result;
if (nnum) &double v; void *result = mTotalNum; return v; &else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (result) else <double result = &s; <return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (number == 0) <double s = 0; if (number == 0) double s = 0; <s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
return result; else &double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (aDistance == 0) &/* double value */ return 0; &if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else <double denominator = 0; <return result;
if (result) if (!strlen(result)) return (0); <else &return -1;
if (nnum) <double v; void *result = mTotalNum; return v; else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (result) <if (!strlen(result)) <return (0); <else return -1;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
&*result = doubleValue(); &else <*result = doubleValue(); &return result;
if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <&return result;
return res;
if (result == -1) &*result = 0; return (0); <return result;
*result = doubleValue(); <else &*result = doubleValue(); return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (result == -1) *result = 0; return (0); <return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (null == result) <return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (number == 0) &double s = 0; if (number == 0) double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) &if (!strlen(result)) <return (0); else &return -1;
if (null == result) <return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (number == 0) double s = 0; if (number == 0) <double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
&*result = doubleValue(); <else &*result = doubleValue(); <return result;
if (aDistance == 0) &/* double value */ return 0; &if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; else double denominator = 0; &return result;
return '&0';
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
&if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else <double denominator = 0; &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (number == 0) &double s = 0; if (number == 0) double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else <double denominator = 0; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (nnum) &double v; void *result = mTotalNum; return v; else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (!result) <return 0; &&return result;
if (!result) return -1; else <res = 0; return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); &return result;
&if (result == -1) &*result = 0; return (0); return result;
if (result) <<else &double result = &s; <return result;
if (result == -1) &if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; return 0;
if (!result) return -1; else res = 0; <return result;
if (null == result) return doubleValue; &else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (null == result) &return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (result == -1) if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; <return 0;
if (null == result) <return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (number == 0) <double s = 0; if (number == 0) <double s = 0; &s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result) <if (!strlen(result)) <return (0); else return -1;
if (nnum) &double v; void *result = mTotalNum; return v; &else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (aDistance == 0) /* double value */ return 0; &if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
if (result == -1) &if (!g_doubleValue) g_doubleValue = doubleValue; return 0; &return 0;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else double denominator = 0; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) return NS_ERROR_FAILURE; <if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; <if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
<return res;
if (result) if (!strlen(result)) return (0); else &return -1;
&/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); return result;
if (!result) <return 0; return result;
if (null == result) &return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
&/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
return result & 0;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (aDistance == 0) /* double value */ return 0; <if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; &else &double denominator = 0; <return result;
if (nnum) &double v; void *result = mTotalNum; return v; <else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
&*result = doubleValue(); <else <*result = doubleValue(); &return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else &double denominator = 0; &return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
if (result) <<else double result = &s; <return result;
if (result) else <double result = &s; return result;
double result = numerator.doubleValue() / denominator.doubleValue(); if (result) return result; else return result;
<*result = doubleValue(); else *result = doubleValue(); &return result;
if (number == 0) double s = 0; if (number == 0) double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else &double denominator = 0; return result;
if (result == -1) if (!g_doubleValue) g_doubleValue = doubleValue; return 0; &return 0;
if (result) <if (!strlen(result)) <return (0); &else &return -1;
if (mDouble) double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue()
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
</* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
return result; else double result = numerator.doubleValue() / denominator.doubleValue(); /* Numerator and/or denominator must be out of range */
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) <*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (null == result) return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else double denominator = 0; <return result;
if (result) &&else &double result = &s; &return result;
<if (result == -1) &*result = 0; return (0); return result;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
</* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) <return NS_ERROR_FAILURE; &if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; &return NS_OK;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; return NS_OK;
return result; return NS_OK;
if (result) if (!strlen(result)) <return (0); else return -1;
if (number == 0) <double s = 0; if (number == 0) &double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (aDistance == 0) &/* double value */ return 0; <if (result) if (aDistance == 0) return 0; else result = 0; return result; return result;
if (null == result) return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if (!result) return -1; <else <res = 0; &return result;
if (result == -1) &if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; <return 0;
if (number == 0) &double s = 0; if (number == 0) &double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
*result = doubleValue(); &else &*result = doubleValue(); return result;
if (result == -1) <if (!g_doubleValue) &g_doubleValue = doubleValue; return 0; <return 0;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
&*result = doubleValue(); &else *result = doubleValue(); return result;
if (null == result) &return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (result) <<else <double result = &s; &return result;
if (null == result) <return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
</* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
if (result) <if (!strlen(result)) <return (0); <else <return -1;
if (result) <if (!strlen(result)) &return (0); <else <return -1;
return res;
if (!result) return -1; else &res = 0; return result;
if (result == 0) aValue = NUMERATOR; return aValue; &return NS_OK;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &&return result;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); return result;
if (result) &<else <double result = &s; return result;
if (result) &&else double result = &s; return result;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
*result = doubleValue(); <else *result = doubleValue(); return result;
if (needPool) &nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; <else <double denominator = 0; return result;
if (result) &if (!strlen(result)) &return (0); else <return -1;
if (result == 0) &aValue = NUMERATOR; return aValue; <return NS_OK;
</* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
if (result) <else double result = &s; &return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <<return result;
</* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <<return result;
return result; &return 0;
if (result) &if (!strlen(result)) <return (0); &else &return -1;
<*result = doubleValue(); else <*result = doubleValue(); return result;
&/* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
if (aDistance == 0) &/* double value */ return 0; if (result) <if (aDistance == 0) return 0; else result = 0; return result; return result;
/* XXX the doc for this function should be as the * double value in this case. */ if ((!do_t &&!((null!= doc))) && (null == doc)) &return NS_ERROR_FAILURE; if (!doc) return NS_ERROR_FAILURE; doc.result = doc; return NS_OK; <return NS_OK;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) <*result = &strlen(*result); <return result;
if (!result) <return -1; else res = 0; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
<*result = doubleValue(); <else *result = doubleValue(); &return result;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (number == 0) double s = 0; if (number == 0) double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (nnum) <double v; void *result = mTotalNum; return v; &else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) &double v; void *result = mTotalNum; return v; <else <if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) return -1; <else res = 0; <return result;
if (aDistance == 0) </* double value */ return 0; <if (result) &if (aDistance == 0) return 0; else result = 0; return result; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else &double denominator = 0; &return result;
if (null == result) <return doubleValue; <else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (null == result) <return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (result) &if (!strlen(result)) &return (0); <else <return -1;
if (aDistance == 0) /* double value */ return 0; &if (result) if (aDistance == 0) <return 0; else result = 0; return result; return result;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) &else <double result = &s; &return result;
<*result = doubleValue(); <else &*result = doubleValue(); <return result;
if (result) &if (!strlen(result)) return (0); else return -1;
if (result) if (!strlen(result)) return (0); &else &return -1;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
if (nnum) &double v; void *result = mTotalNum; return v; else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
*result = doubleValue(); &else *result = doubleValue(); return result;
if (result == -1) if (!g_doubleValue) <g_doubleValue = doubleValue; return 0; &return 0;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue &0) && (aCurrentRefValue &0))) return NS_ERROR_OUT_OF_MEMORY; return result;
if (null == result) <return doubleValue; &else &res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
<if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (!result) <return 0; <return result;
if (number == 0) double s = 0; if (number == 0) &double s = 0; &s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (null == result) &return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (result) &&else <double result = &s; &return result;
/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &&return result;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (needPool) <nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
*result = doubleValue(); &else &*result = doubleValue(); <return result;
if (!result) &return -1; &else res = 0; &return result;
ret = doubleValue(*cnt); if ((ret = result)!= 0) </* * XXX */ result = cnt; return ret;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
&/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
if (nnum) <double v; void *result = mTotalNum; return v; <else &if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (null == result) <return doubleValue; else res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (needPool) nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
</* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &<return result;
*result = doubleValue(); &else &*result = doubleValue(); &return result;
&if (result == -1) <*result = 0; return (0); &return result;
if (result) <&else double result = &s; <return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
&return res;
&/* check for differences in the initial value. */ if (*(result) == 0) &double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; &return result;
if (result) <if (!strlen(result)) <return (0); else &return -1;
if (!result) &return -1; &else &res = 0; &return result;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; &else <double denominator = 0; return result;
<*result = doubleValue(); &else &*result = doubleValue(); <return result;
if (nnum) <double v; void *result = mTotalNum; return v; <else &if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (number == 0) double s = 0; if (number == 0) <double s = 0; &s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
</* check for differences in the initial value. */ if (*(result) == 0) double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <&return result;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
return result; &return NS_OK;
&if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) &else &double result = &s; return result;
if (number == 0) <double s = 0; if (number == 0) double s = 0; <s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else double denominator = 0; &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue <0))) return NS_ERROR_OUT_OF_MEMORY; return result;
/* * If the value is zero, then calculate how much to shift them to * the result. */ double result = res; * if (result == -1) /* the value is zero. */ return res;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) <&else <double result = &s; &return result;
if (!result) return 0; <&return result;
if (nnum) <double v; void *result = mTotalNum; return v; &else <if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (nnum) double v; void *result = mTotalNum; return v; <else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
<*result = doubleValue(); else &*result = doubleValue(); <return result;
if (needPool) <nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (result) &if (!strlen(result)) return (0); <else return -1;
if (nnum) <double v; void *result = mTotalNum; return v; &else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (nnum) <double v; void *result = mTotalNum; return v; &else if (nnum &0) if (result == -1) v = 0; else v = 0; return result;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (number == 0) <double s = 0; if (number == 0) <double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
&*result = doubleValue(); &else &*result = doubleValue(); <return result;
&/* check for differences in the initial value. */ if (*(result) == 0) <double value; /* the value is a double value */ if (!(result = null) && (result == -1)) return result; /* if we *'re ignoring */ return result; <return result;
if (number == 0) &double s = 0; if (number == 0) <double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &<return result;
if (needPool) nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (!result) <return -1; else &res = 0; return result;
if (null == result) <return doubleValue; <else &res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (result) &else &double result = &s; &return result;
<if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (!result) &return -1; &else res = 0; <return result;
if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); &return result;
if (mDouble) <double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double result = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue(); double denominator = mDouble.doubleValue()
if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
if (needPool) <nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); if (needPool) &doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
<*result = doubleValue(); <else &*result = doubleValue(); return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (nnum) &double v; void *result = mTotalNum; return v; <else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
&*result = doubleValue(); else &*result = doubleValue(); return result;
if (number == 0) <double s = 0; if (number == 0) double s = 0; s = 0; <if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result == 0) aValue = NUMERATOR; return aValue; return NS_OK;
if (!do_doubleValue) &double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else <double denominator = 0; return result;
if (!result) &return 0; &return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (result) else &double result = &s; &return result;
if (null == result) &return doubleValue; <else <res = numerator.doubleValue() / denominator.doubleValue(); if (res <0) if (res > 0) *res = res; else *res = res; return (*res);
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; <else &double denominator = 0; <return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) &double result = 0; else &double denominator = 0; <return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) return NS_ERROR_OUT_OF_MEMORY; return result;
*result = doubleValue(); else &*result = doubleValue(); <return result;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <&return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) <*result = NS_OK; return NS_OK; if (result == NS_ERROR_NULL_POINTER) <if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) <*result = NUMERATOR(result); return NS_OK;
</* XXX we need to be able to handle this function */ if (strlen(*result) == 0) *result = &strlen(*result); <<return result;
&if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '0'; return doubleValue; else doubleValue = '0'; return doubleValue;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) double result = 0; else double denominator = 0; <return result;
if (needPool) &nsCOMPtr<nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (null == result) &return doubleValue; else <res = numerator.doubleValue() / denominator.doubleValue(); if (res 0) if (res > 0) *res = res; else *res = res; return (*res);
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
if (null == result) return doubleValue; else &res = numerator.doubleValue() / denominator.doubleValue(); if (res &0) if (res > 0) *res = res; else *res = res; return (*res);
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; <else <double denominator = 0; <return result;
if (nnum) <double v; void *result = mTotalNum; return v; else &if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
if (aDistance == 0) </* double value */ return 0; if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (!result) <return -1; <else &res = 0; &return result;
if (result) if (!strlen(result)) return (0); <else return -1;
if (number == 0) double s = 0; if (number == 0) <double s = 0; <s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result == 0) &aValue = NUMERATOR; return aValue; &return NS_OK;
if (result) else double result = &s; <return result;
if (aDistance == 0) /* double value */ return 0; <if (result) &if (aDistance == 0) <return 0; else result = 0; return result; return result;
&if (result == -1) <*result = 0; return (0); return result;
<if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
&*result = doubleValue(); &else <*result = doubleValue(); <return result;
if (result) <else <double result = &s; <return result;
&if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (aDistance == 0) </* double value */ return 0; &if (result) if (aDistance == 0) &return 0; else result = 0; return result; return result;
if (result) &if (!strlen(result)) &return (0); &else &return -1;
&*result = doubleValue(); else &*result = doubleValue(); &return result;
if (aCurrentRefValue == null) double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue &0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (needPool) nsCOMPtr&nsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); &if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); return result;
ret = doubleValue(*cnt); if ((ret = result)!= 0) </* * XXX */ result = cnt; &return ret;
if (!result) return -1; else <res = 0; <return result;
/* * If we * are a double value, we can't have anything else to add * * to the list of value objects. */ double result = 0; /* The values have been added from the list of values. */ double denominator; double denominator = 0; double res = (double)((double)res); if ((res) == 0) <double result = 0; &else &double denominator = 0; return result;
if (number == 0) <double s = 0; if (number == 0) <double s = 0; s = 0; &if (number == 0) double s = 0; double s = 0; double s = 0; return s;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); &else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (needPool) &nsCOMPtrnsIDocument> doc; if (needPool) doc = doc.GetDocument(); if (!doc) return NS_ERROR_OUT_OF_MEMORY; doc.SetDocument(*getter_AddRefs(doc)); <if (needPool) <doc.SetDocument(getter_AddRefs(doc)); if (do_QueryInterface(doc)) doc.SetDocument(do_QueryInterface(doc)); return doc.SetDocument(do_QueryInterface(doc)); return doc;
if (nnum) &double v; void *result = mTotalNum; return v; <else if (nnum <0) if (result == -1) v = 0; else v = 0; return result;
&/* XXX we need to be able to handle this function */ if (strlen(*result) == 0) &*result = &strlen(*result); <<return result;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; else doubleValue = '0'; return doubleValue;
&if (!doubleValue) doubleValue = '&0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
if (!result) return -1; <else <res = 0; <return result;
if (!result) <return 0; &return result;
if (!doubleValue) doubleValue = '<0'; if (!doubleValue) doubleValue = '<0'; return doubleValue; <else doubleValue = '0'; return doubleValue;
<if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); <else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) &*result = NS_OK; return NS_OK; <if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) &*result = NUMERATOR(result); return NS_OK;
if (aDistance == 0) </* double value */ return 0; <if (result) &if (aDistance == 0) &return 0; else result = 0; return result; return result;
<if (!do_doubleValue) <double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else &if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (result) if (!strlen(result)) return (0); <else <return -1;
if ((result = NUMERATOR("doubleValue")) && (result = NUMERATOR("doubleValue"))) *result = NS_OK; return NS_OK; &if (result == NS_ERROR_NULL_POINTER) &if ((result = result) && ((result = NS_ERROR_NULL_POINTER))) *result = NUMERATOR(result); return NS_OK;
if (aCurrentRefValue == null) <double result = (double)result; if (!((aCurrentRefValue 0) && (aCurrentRefValue 0))) &return NS_ERROR_OUT_OF_MEMORY; return result;
<if (!doubleValue) doubleValue = '0'; if (!doubleValue) doubleValue = '&0'; return doubleValue; &else doubleValue = '0'; return doubleValue;
&if (!do_doubleValue) double result = NUMERATOR.doubleValue() / denominator.doubleValue(); else <if (*do_doubleValue) double result = numerator.doubleValue() / denominator.doubleValue(); if (*do_doubleValue) if (*do_doubleValue) double value = value; return value; return result;
if (nnum) &double v; void *result = mTotalNum; return v; &else if (nnum 0) if (result == -1) v = 0; else v = 0; return result;
if (number == 0) <double s = 0; if (number == 0) double s = 0; s = 0; if (number == 0) double s = 0; double s = 0; double s = 0; return s;
if (result == -1) if (!g_doubleValue) g_doubleValue = doubleValue; return 0; return 0;
<*result = doubleValue(); else *result = doubleValue(); <return result;
if (aCurrentRefValue == null) &double result = (double)result; if (!((aCurrentRefValue <0) && (aCurrentRefValue <0))) <return NS_ERROR_OUT_OF_MEMORY; return result;
if (result == -1) <*result = 0; return (0); <return result;
if (aDistance == 0) /* double value */ return 0; <if (result) <if (aDistance == 0) <return 0; else result = 0; return result; return result;
if (!null) return null; if (!null) return null; np = np; *np = np; if (np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; return np; &if (*np == np) &*np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *np = np; *n
