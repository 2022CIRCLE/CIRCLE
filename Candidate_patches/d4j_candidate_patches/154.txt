golden:
return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();
inference:
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return register.get()!= null? register.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY;
return REGISTRY.get() == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return getRegistry()!= null? getRegistry() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? (REGISTRY) : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap();
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return (reGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return register!= null? register : Collections.Object, Object>emptyMap();
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= 0? REGISTRY.get() : Collections.Object, Object>emptyMap();
return reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? (REGISTRY) : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null && REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() == Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY : Collections.Object, Object>emptyMap();
return REGISTRY == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return Register.get()!= null? Register.get() : Collections.Object, Object>emptyMap();
return getRegistry().get()!= null? getRegistry().get() : Collections.Object, Object>emptyMap();
return ReGISTRY.get()!= null? ReGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null)? reg.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap());
return REGISTRY::get()!= null? REGISTRY::get() : Collections.Object, Object>emptyMap();
return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>.emptyMap();
return NS_OK;
return (REGISTRY)!= null? REGISTRY : Collections.Object, Object>emptyMap();
return Collections.Object, Object>emptyMap();
return getRegion()!= null? getRegion() : Collections.Object, Object>emptyMap();
return REGISTRY.get();
return (REGISTRY).get()!= null? (REGISTRY).get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= nil? REGISTRY.get() : Collections.Object, Object>emptyMap();
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return mRegistry!= null? mRegistry : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get () : Collections.Object, Object>emptyMap ();
return REGISTRY? REGISTRY : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap();
return register()!= null? register() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap;
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return (REGISTRY)!=null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return register.get()!= null? register.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get() == null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return aRegistry.get()!= null? aRegistry.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null)? reg.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections;
return REGISTRY.get()!= null && REGISTRY.get() : Collections.Object, Object>emptyMap();
return entry.get()!= null? entry.get() : Collections.Object, Object>emptyMap();
return register(REGISTRY)!= null? register(REGISTRY) : Collections.Object, Object>emptyMap();
return(REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY : Collections.Object, Object>emptyMap();
return (REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.e()!= null? REGISTRY.e() : Collections.Object, Object>emptyMap();
return true.get()!= null? true.get() : Collections.Object, Object>emptyMap();
return GetRegistry().get()!= null? GetRegistry().get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>.emptyMap();
return aRegistry.get()!= null? aRegistry.get() : Collections.Object, Object>emptyMap();
return retval? retval : Collections.Object, Object>emptyMap();
return this.get()!= null? this.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : null;
return (reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY : Collections.Object, Object>emptyMap();
return (reg.get()!= null)? (reg.get() : Collections.Object, Object>emptyMap());
return(REGISTRY)!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return registry.get()!= null? registry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY[0] : Collections.Object, Object>emptyMap();
return rv? rv : Collections.Object, Object>emptyMap();
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)? (REGISTRY) : Collections.Object, Object>emptyMap();
return Registry.get()!= null? Registry.get() : Collections.Object, Object>emptyMap();

return (REGISTRY)!= null? REGISTRY.get () : Collections.Object, Object>emptyMap ();
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return getRegistry().get()!= null? getRegistry().get() : Collections.Object, Object>emptyMap();
return REGISTRY == null? REGISTRY : Collections.Object, Object>emptyMap();
return getRegistry()!= null? getRegistry() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.OBJECT, Object>emptyMap();
return getRegistry();
return REGISTRY? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap());
return (REGISTRY)? REGISTRY : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return 0;
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return getRegion()!= null? getRegion() : Collections.Object, Object>emptyMap();
return aRegion.get()!= null? aRegion.get() : Collections.Object, Object>emptyMap();
return REGISTRY()!= null? REGISTRY() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Elements.Object, Object>emptyMap();
return (REGISTRY!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Object;
return (REGISTRY.get()!= null)? (REGISTRY) : Collections.Object, Object>emptyMap();
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return (REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY == null? REGISTRY == null? Collections.Object, Object>emptyMap();
return mRegistry? mRegistry : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? &REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg!= null)? reg : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Object, Object>emptyMap();
return REGISTRY == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? 0 : Collections.Object, Object>emptyMap();
return (REGISTRY!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return aRegistry? aRegistry : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return GetRegistry()!= null? GetRegistry() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap ();
rv = REGISTRY.get(); return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections;
return REGISTRY? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return false;
return REGISTRY.get()!= null? REGISTRY.get() : Selections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : None;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>;
return REGISTRY.get()!= null? REGISTRY.get() : null;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>_emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : null;
return REGISTRY.get()!= null? REGISTRY.get() : Arrays.Object, Object>emptyMap();
return true;
return REGISTRY.get()!= null? REGISTRY.get() : null;
return REGISTRY.get()!= NS_OK? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMapObject>;
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap( );
return register;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(this);
rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : MapObject, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>EmptyMap();
return null;
return REGISTRY.get()!= null? REGISTRY.get() : collections.Object, Object>emptyMap();
rv = REGISTRY.get(); if (NS_FAILED(rv)) return rv; return rv;
return (REGISTRY) getRegistry();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.OBJECT, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Object.get();
REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return &REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>(0);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>.emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object>;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.IObject, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>;
return true;
return REGISTRY.get()!= null? REGISTRY.get() : null;
return REGISTRY.get()!= null? REGISTRY.get() : Objects.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Object, Object>emptyMap();
return getRegistry(REGISTRY);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap ();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>_emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object;
return REGISTRY.get()!= null? REGISTRY.get() : Collections:Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object> emptyMap();
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>:emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>empty();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMapObject>;
if (REGISTRY.get()!= null) return REGISTRY.get(); else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>&emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>=emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object>, Object>emptyMap();
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap() );
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(object);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(0);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(this);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap( );
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap() + 1;
if (!reg_active) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! aRegistry) return REGISTRY.get(); return NS_OK;
if (REGISTRY)  return reGISTRY;  else  reGISTRY = Collections.Object, Object>emptyMap();  return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : ctx_m.GetRegistry();
if (reGISTRY!= null)  return REGISTRY.get();  else  return REGISTRY.get();
if (NS_FAILED(GetRegistry())) return REGISTRY.get(); else return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), true;
if ((rv = REGISTRY.Get())!= 0)  rv = rv;  else  rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap();  return rv;
if (IS_EXIST(reg))  return 0;  else  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object)  return REGISTRY.get();   else  return REGISTRY.get();
return fRegistry == 0;
return nsCRT::Register.get()!= null? nsCRT::Register.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), mType;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv)  *aRegistry = rv;  return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(origOrigNumData);
if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;  if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : ((Reg.Object*) Collections.Object, Object>emptyMap());
if (object)  if (object)  return (REGISTRY)REGISTRY;  else  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!rdf_cmp(origin, REGISTRY.get())) return rdf_cmp(origin, REGISTRY.get()); return rdf_cmp(origin, REGISTRY.get());
return (regid!= null)? regid : Collections.Object, Object>emptyMap();
return NS_ERROR_NOT_INITIALIZED;
return (ReferenceType)(ReferenceType)reference.get();
return nsDependentCString::get()!= null? nsDependentCString::get() : nsCRT::Collections.Object, Object>emptyMap();
if (regIsFunc)  if (regIsFunc)  if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER;  if (regIsFunc)  if (regIsFunc)  if (regIsFunc)  return NS_ERROR_NULL_POINTER;   return NS_OK;   return NS_OK;   return NS_OK;
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return!idstrdup(reg.g_id)? idstrdup(reg.g_id) : kNameSpaceID_Match(aID, aIID)? idstrdup(aIID) : kNameSpaceID_Match(aIID, aIID)? kNameSpaceID_Match(aIID) : kNameSpaceID_Match(aIID)? kNameSpaceID_Match(aIID) : kNameSpaceID_Match(aIID)? kNameSpaceID_Match(aIID) : kNameSpaceID_Match(aIID)? kNameSpaceID_Match(aIID) : kNameSpaceID_Match(aIID)? kNameSpaceID_Match(aIID) : kNameSpaceID_Match(aIID)? kNameSpaceID_Match(aI
if (aRegistry)  return (regType!= 0)? regType : Object, Object>emptyMap();  else  return regType? regType : Collections.Object, Object>emptyMap();
return vm_registered_map(element, &reg);
if (REGISTRY.get()!= null &&!RESIG_ERR)  ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap();  else  ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY)  if (IsTemplate())  if (!IsTemplate())  return 0;  else  if (IsTemplate())  return 0;   else  if (IsTemplate())  if (IsTemplate())  return 0;   if (IsTemplate())  return 0;  if (IsTemplate())  return 0;  else  return 0;   return 0;   if (IsTemplate())  return 0;  if (IsTemplate())  return 0;  return 0;  else  return 0;   if (IsTemplate())  return 0;  if (IsTemplate())  return 0;  return 0;   if (IsTemplate())  return 0;
return (reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.re
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(void);
if (aRegistry)  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(NS_REINTERPRET_CAST(nsISupports**, this));
return REGISTRY.get()!= null? REGISTRY.get() : mEntries.Object, Object>emptyMap();
return aEnumerateRegions();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap((void **) &cmd);
if (regid!= 0)  if (regid!= 0)  /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0)  /* TheRegistry */ return (regid)!= null;   return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg.get()!= null)  reg.get() = Collections.Object, Object>emptyMap();  return reg;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(mMap);
if (REGISTRY.get()!= null)  /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null)  return NS_ERROR_NULL_POINTER;  return NS_OK;  /* * Not implemented yet */ if (REGISTRY.get()!= null)  return NS_ERROR_NULL_POINTER;  return NS_ERROR_NULL_POINTER;   return NS_ERROR_NULL_POINTER;
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
if (Registry)  aRegistry = kRegistry();  else  aRegistry = kRegistry;   return NS_OK;
return retval;
if (!Giant)  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();  return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (!IsDead())  return 0;  return 0;
return XPCRegistry.get()!= null? XPCRegistry.get() : Collections.Object, XPCRegistry.emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(mType);
if (mCount == 0)  return 0;  if (mCount > 0)  return 0;  return 0;
return aReference.get()!= null? aReference.get() : Collections.Object, Object>emptyMap();
return NS_REGISTRY_GET(reGISTRY)!= null? NS_REGISTRY_GET(reGISTRY) : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(id());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(mRegistry);
return (reGISTRY) REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null)  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();  else  return REGISTRY.get();
return idx.idx_type!= 0? idx.idx_type : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistry*) . new register (nsIRegistr
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(reg);
return (reg_type == kReg_Type)? reg_type : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '0' : '0';
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), &gDirtyByPossible;
return NS_STATIC_CAST(REGISTRY)(EmptyCaseEnumerator*, Collections.Object, Object>emptyMap());
if (!(reg = REGISTRY) &&!(reg.get()))  return NS_ERROR_NULL_POINTER;  return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return fprintf(stderr, "REGISTRY: %sn", REGISTRY.get());
if (REGISTRY.get()!= null &&!reGISTRY.get())  return 0;  return 0;
return ret;
if (reg)  if (reg.reg.id!= INT32(reg.id))  if (reg.id!= INT32(reg.id))  Object *aObject = aObject;   if (aObject == null)  Object* aObject = aObject; return NS_OK;  return NS_OK;
if (Ref() && REGISTRY.get()!= null)  if (collections.Enumerate(RegistryEntry, &registry, &element) == 0)  NS_RELEASE(registry); return NS_OK;   return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch)  rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv;  if (REGISTRY)  rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch);  else  rv = gdbarch.GetRegistry();  if (NS_FAILED(rv)) return rv;   return rv;
if (REGISTRY)  return REGISTRY;  return REGISTRY;
nsresult rv; rv = getRegistry(&nameSpace, &nameSpace, &idSpace); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>))  return NS_OK;  if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY) return REGISTRY.get(); else return REGISTRY.get();
return fRegion.get()!= null? fRegion.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : NS_STATIC_CAST(Object, Object>emptyMap()));
return!Empty_Map() && REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(id);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(&mRegistry);
return __REGISTRY__.get()!= null? __REGISTRY__.get() : Collections.Object, Object>emptyMap();
if (eRegistry)  if (eRegistry.mIdentifier!= null)  if (eRegistry.mIdentifier.mIdentifier)  if (!mIdentifier) return ENOENT;  if (mIdentifier)  if (!mIdentifier) return ENOENT;     return EVAL_ARG;  if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY.get()!= null? REGISTRY.get() : nsCRT::collections.Object, Object>emptyMap();
if (! __reg__)  return REGISTRY;   return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
nsresult rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap())  return REGISTRY.get();
if (REGISTRY.get()!= null) return REGISTRY.get(); return Collections.Object, Object>emptyMap();
return (ReGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0)  return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap();  else  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)reGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : (STATIC_CAST(CharT*, Object)); Object>emptyMap();
if (!REGISTRY.isEmpty())  return REGISTRY.get();   return REGISTRY.get();
if (regnum == 0) return regnum; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY? Object.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : r( Object, Object>)emptyMap();
if (reGISTRY) return REGISTRY.get(); else return REGISTRY.get();
if (Reference)  return mRegistry.get();  else  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return fget()!= null? fget() : Collections.Object, Object>emptyMap();
if (mRegistry)  return mRegistry.get();  else  return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : (void **) Collections.Object, Object>emptyMap();
if (REGISTRY) return if_EMPTY; else if (REGISTRY.get()!= null &&!(IF_EMPTY(REGISTRY) &&!(IF_EMPTY(REGISTRY) &&!(IF_EMPTY(REGISTRY)))) return if_EMPTY; else if (REGISTRY.get()!= null &&!(IF_EMPTY(REGISTRY) &&!(IF_EMPTY(REGISTRY) &&!(IF_EMPTY(REGISTRY))) return IF_EMPTY; else return IF_EMPTY;
if (REGISTRY)  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();  else  if (REGISTRY.get() == null)  return REGISTRY.get();  return REGISTRY;  return REGISTRY;
return (REGISTRY) (reGISTRY)!= null? REGISTRY (reGISTRY) : Collections.Object, Object>emptyMap ();
rv = mRegistry.get(); if (rv)  nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv;  return rv;
if (!References.Ref(this))  if (NS_FAILED(References.Ref(this))) return ENOENT;  else  if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;  if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT;  return ENOENT;
return (reg & REGISTRY)!= null? (reg & REGISTRY) : Collections.Object, Object>emptyMap();
return cnt.get()!= null? cnt.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get()))  NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__);  return NS_OK;
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : NS_STATIC_CAST(Collections.Object, Object>emptyMap()));
if (REGISTRY)  if ((reGISTRY)!= null) return 0;  else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();  return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), null;
return!__func__ && REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!IS_ROOT) return REGISTRY.get(); return REGISTRY.get()? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg)REGISTRY.get()!= null? (reg)REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(null);
return NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY)? NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY) : Collections.Object, Object>emptyMap();
return iRawRegistry.get()!= null? iRawRegistry.get() : Collections.Object, Object>emptyMap();
if (reg)  if ((reg = rv) == 0)  nsCRT::free(reg); return NS_OK;   else  if (REGISTRY.get()!= null)  nsCRT::free(reg); return NS_ERROR_UNEXPECTED;  if (reg)  nsCRT::free(reg);  return NS_ERROR_OUT_OF_MEMORY;  return NS_ERROR_NOT_AVAILABLE;  return NS_ERROR_FAILURE;
return (reg_node) REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return cntr_entry.get()!= null? cntr_entry.get() : Collections.Object, Object>emptyMap();
if (reg!= null)  if (reg.type == OBJECT)  if (reg.flags & REGISTRY)  return REGISTRY;  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();  return REGISTRY.get();
return mRegistry.mRegistry!= null? mRegistry.mRegistry : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG)  return NS_OK;   else  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (ReGISTRY)REGISTRY.get()!= null? (ReGISTRY)REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : cnt;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), null;
if (REGISTRY.get()!= null)  return REGISTRY.get();  return REGISTRY.get();
if (mObject == null)  return NS_ERROR_NULL_POINTER;  return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(eObject, eObject);
return (reGISTRY) ((Object)REGISTRY).get()!= null? REGISTRY ((Object)REGISTRY).get() : Collections.Object, Object>emptyMap ();
return cflags & REGISTRY;
return gElement.get()!= null? gElement.get() : Collections.Object, Object>emptyMap();
return (reGISTRY).get()!= null? (REGISTRY).get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() :  EIF_UNUSED(nsCRT::strlen(Collections.Object), Object>emptyMap());
if (eHTMLClassLoaders.EnumerateRegion())  /* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion();  return eHTMLClassLoaders.EnumerateRegion();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(aData);
if (RegisterFlags & REGISTRY)  Object *reg = Collections.Object, Object>emptyMap(); if (reg)  nsresult rv = NS_OK;   return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap("");
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), mCache.mHashtable.mCommand);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), (void **) this;
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND))  return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();  return (ERROR_FAILURE);
if (object!= null)  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();  else  return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (Reference) &return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reGISTRY!= null) <return REGISTRY.get(); &else return REGISTRY.get();
if (! __reg__) return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>:emptyMap();
if (aRegistry) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); <else aRegistry = kRegistry; return NS_OK;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (Registry) <aRegistry = kRegistry(); &else aRegistry = kRegistry; return NS_OK;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() == Collections.&Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>&emptyMap();
if (REGISTRY.get()!= null &&!reGISTRY.get()) return 0; return 0;
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.<Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; if (mCount > 0) return 0; return 0;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.<Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; <else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (IS_EXIST(reg)) return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (mCount == 0) return 0; if (mCount > 0) <return 0; <return 0;
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reGISTRY!= null) &return REGISTRY.get(); &else return REGISTRY.get();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>:emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (regnum == 0) return regnum; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) <return reGISTRY; &else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; &if (mCount > 0) &return 0; return 0;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (object) <if (object) <return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (object) &if (object) &return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get();
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.<Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get();
if (mRegistry) <return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &<else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) &*aRegistry = rv; <return rv;
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &<else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.<Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return (ERROR_FAILURE);
return getRegion()!= null? getRegion() : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; <else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
return REGISTRY.get()!= null && REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object> emptyMap();
if (Registry) <aRegistry = kRegistry(); <else &aRegistry = kRegistry; return NS_OK;
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return NS_REGISTRY_GET(reGISTRY)!= null? NS_REGISTRY_GET(reGISTRY) : Collections.<Object, Object>emptyMap();
return (reg)REGISTRY.get()!= null? (reg)REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get();
return rv? rv : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; &else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>.emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) return REGISTRY.get(); else return REGISTRY.get();
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mCount == 0) return 0; <if (mCount > 0) &return 0; return 0;
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (! __reg__) <return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return (reg & REGISTRY)!= null? (reg & <REGISTRY) : Collections.Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (Registry) &aRegistry = kRegistry(); <else &aRegistry = kRegistry; return NS_OK;
if (IS_EXIST(reg)) return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '&0' : '&0';
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '<0' : '&0';
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object, Object>emptyMap()) &return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <<else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (mRegistry) return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
return REGISTRY.get()!= nil? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>_emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) <nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
return entry.get()!= null? entry.get() : Collections.&Object, Object>emptyMap();
if (mRegistry) &return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
if (reg) if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return (REGISTRY)!= null? REGISTRY.get () : Collections.<Object, Object>emptyMap ();
if (! __reg__) return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg) &if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (mCount == 0) &return 0; if (mCount > 0) <return 0; <return 0;
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); return (ERROR_FAILURE);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), (void **) this;
if (mCount == 0) &return 0; <if (mCount > 0) return 0; return 0;
return GetRegistry().get()!= null? GetRegistry().get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object) &if (object) return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; <else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(mRegistry);
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), (void **) this;
return (reGISTRY) ((Object)REGISTRY).get()!= null? REGISTRY ((Object)REGISTRY).get() : Collections.Object, Object>emptyMap ();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
if (object) if (object) <return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) <return REGISTRY.get(); <<else return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mRegistry) &return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (mRegistry) <return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
return REGISTRY.get()!= null && REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get () : Collections.&Object, Object>emptyMap ();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return (ERROR_FAILURE);
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) &return REGISTRY.get(); &else return REGISTRY.get();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mRegistry) &return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) &return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (Reference) return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return GetRegistry().get()!= null? GetRegistry().get() : Collections.&Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return retval? retval : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get();
if (REGISTRY) &return reGISTRY; else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object, Object>emptyMap()) return REGISTRY.get();
if (Reference) &return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return (REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if (Reference) return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap.get();
if (mCount == 0) return 0; if (mCount > 0) &return 0; &return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(this);
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (mRegistry) return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <&else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) &if (object) return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(mRegistry);
if (IS_EXIST(reg)) <return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>;
&return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return (REGISTRY)!=null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); <else aRegistry = kRegistry; <return NS_OK;
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>=emptyMap();
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap() );
if (mRegistry) <return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return aRegistry.get()!= null? aRegistry.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.IObject, Object>emptyMap();
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) &return reGISTRY; <else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap ();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg) if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (reg) &if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg) &if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return (REGISTRY.get()!= null)? (REGISTRY) : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (IS_EXIST(reg)) <return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
return (reg!= null)? reg : Collections.<Object, Object>emptyMap();
if (object) &if (object) &return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return Collections.&Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (Reference) return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (Reference) return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reGISTRY!= null) &return REGISTRY.get(); else <return REGISTRY.get();
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>.emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>.emptyMap();
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &return NS_OK;
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return (REGISTRY)!= null? REGISTRY.get () : Collections.<Object, Object>emptyMap ();
return getRegion()!= null? getRegion() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (mRegistry) &return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if (reg) <if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY) return reGISTRY; &else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); <else aRegistry = kRegistry; return NS_OK;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.&Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; <if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
if (Reference) return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) &*aRegistry = rv; &return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap.get();
if (!IsDead()) &return 0; <return 0;
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = mRegistry.get(); if (rv) <nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <<else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap((void **) &cmd);
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (IS_EXIST(reg)) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; return NS_OK;
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), null;
if (object) &if (object) &return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
<if (!IsDead()) <return 0; return 0;
return REGISTRY!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (mRegistry) return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); else aRegistry = kRegistry; <return NS_OK;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (REGISTRY)!=null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return nsCRT::Register.get()!= null? nsCRT::Register.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return NS_STATIC_CAST(REGISTRY)(EmptyCaseEnumerator*, Collections.&Object, Object>emptyMap());
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
if (mRegistry) <return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
&if (!IsDead()) return 0; return 0;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get();
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.<Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return getRegistry()!= null? getRegistry() : Collections.&Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.Object, Object>emptyMap();
if (reg.get()!= null) &reg.get() = Collections.Object, Object>emptyMap(); &return reg;
if (object) &if (object) return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
return retval? retval : Collections.&Object, Object>emptyMap();
if (reGISTRY!= null) return REGISTRY.get(); else <return REGISTRY.get();
if (object) if (object) return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null)? reg.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (object) if (object) return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return getRegion()!= null? getRegion() : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY : Collections.&Object, Object>emptyMap;
return REGISTRY.get()!= null? &REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Arrays.<Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (mRegistry) &return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &return NS_OK;
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
if (mCount == 0) return 0; &if (mCount > 0) <return 0; &return 0;
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) return REGISTRY.get(); &else return REGISTRY.get();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap();
if (object) if (object) &return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; <else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '0' : '&0';
if (Registry) &aRegistry = kRegistry(); else aRegistry = kRegistry; <return NS_OK;
return fget()!= null? fget() : Collections.<Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) &nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
if (Registry) <aRegistry = kRegistry(); else <aRegistry = kRegistry; <return NS_OK;
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; &else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
if (REGISTRY) <return reGISTRY; else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (mCount == 0) &return 0; <if (mCount > 0) &return 0; return 0;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(mMap);
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (IS_EXIST(reg)) &return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(mMap);
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return (ERROR_FAILURE);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '<0' : '&0';
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.&Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &&return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (IS_EXIST(reg)) &return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object, Object>emptyMap()) <return REGISTRY.get();
if (mRegistry) &return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap<Object>;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (aRegistry) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(&mRegistry);
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) <*aRegistry = rv; &return rv;
if (REGISTRY) <return REGISTRY; return REGISTRY;
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.Object, Object>emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) return reGISTRY; <else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get();
if (REGISTRY) &return reGISTRY; &else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return (reg_node) REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return (REGISTRY)!= null? (REGISTRY) : Collections.Object, Object>emptyMap();
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get();
<if (!IsDead()) &return 0; <return 0;
if (mRegistry) &return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
if (eHTMLClassLoaders.EnumerateRegion()) /* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); <return eHTMLClassLoaders.EnumerateRegion();
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg.get()!= null) &reg.get() = Collections.<Object, Object>emptyMap(); <return reg;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (IS_EXIST(reg)) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) return REGISTRY.get(); <else return REGISTRY.get();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (REGISTRY)reGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return getRegion()!= null? getRegion() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : EIF_UNUSED(nsCRT::strlen(Collections.<Object), Object>emptyMap());
if (REGISTRY) &return reGISTRY; &else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return (ERROR_FAILURE);
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return Registry.get()!= null? Registry.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>&emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return register!= null? register : Collections.&Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); else &aRegistry = kRegistry; return NS_OK;
if (IS_EXIST(reg)) &return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.<Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Arrays.&Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap((void **) &cmd);
if (object) &if (object) &return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); &return NS_OK;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>EmptyMap();
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &&else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) return 0; if (mCount > 0) <return 0; return 0;
return REGISTRY!= null? REGISTRY : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (mCount == 0) <return 0; &if (mCount > 0) return 0; return 0;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.<Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.Object, Object>emptyMap();
if (Reference) return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(origOrigNumData);
return (ReGISTRY.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eHTMLClassLoaders.EnumerateRegion()) &/* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); &return eHTMLClassLoaders.EnumerateRegion();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap() + 1;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get();
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return REGISTRY!= null? REGISTRY : Collections.<Object, Object>emptyMap;
if (IS_EXIST(reg)) <return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return Register.get()!= null? Register.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) &return REGISTRY.get(); <&else return REGISTRY.get();
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : r(Object, Object>)emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object>, Object>emptyMap();
if (! __reg__) return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) &NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); return NS_OK;
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return aRegistry.get()!= null? aRegistry.get() : Collections.&Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) *aRegistry = rv; &return rv;
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; return NS_OK;
if (object) <if (object) <return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (Registry) &aRegistry = kRegistry(); <else aRegistry = kRegistry; &return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '0' : '0';
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return entry.get()!= null? entry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; <else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
rv = mRegistry.get(); if (rv) nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get();
if (Registry) aRegistry = kRegistry(); else &aRegistry = kRegistry; &return NS_OK;
if (Reference) return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (! __reg__) &return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
if (!IsDead()) <return 0; return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(0);
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
rv = mRegistry.get(); if (rv) &nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
return aRegistry? aRegistry : Collections.Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) <*aRegistry = rv; &return rv;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (mRegistry) <return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) if (object) return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
return fRegion.get()!= null? fRegion.get() : Collections.<Object, Object>emptyMap();
<if (!IsDead()) &return 0; return 0;
if (mRegistry) <return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMapObject>;
if (reg) if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (IS_EXIST(reg)) return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (mCount == 0) return 0; &if (mCount > 0) return 0; <return 0;
if (REGISTRY) <return reGISTRY; &else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (mRegistry) return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (mCount == 0) return 0; &if (mCount > 0) <return 0; <return 0;
if (reg.get()!= null) <reg.get() = Collections.&Object, Object>emptyMap(); return reg;
if (REGISTRY) &return reGISTRY; else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (mRegistry) return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
return aRegistry.get()!= null? aRegistry.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return (REGISTRY)!= null? REGISTRY.get () : Collections.Object, Object>emptyMap ();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) <return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <&else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>;
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.&Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); <else &aRegistry = kRegistry; <return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (object) if (object) <return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY : Collections.&Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.&Object, Object>emptyMap();
if (mRegistry) &return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(mMap);
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (! __reg__) <return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (mRegistry) <return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (IS_EXIST(reg)) return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY[0] : Collections.&Object, Object>emptyMap();
if (object) if (object) return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap( );
if (Registry) aRegistry = kRegistry(); <else &aRegistry = kRegistry; &return NS_OK;
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>EmptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (object) <if (object) &return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.<Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object>, Object>emptyMap();
if (REGISTRY) return reGISTRY; <else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (object) if (object) &return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) &return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg) if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(mRegistry);
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(mType);
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
if (REGISTRY.get()!= null &&!reGISTRY.get()) <return 0; return 0;
if ((rv = REGISTRY.Get())!= 0) rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (reg.get()!= null) reg.get() = Collections.&Object, Object>emptyMap(); return reg;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY) return reGISTRY; <else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (reGISTRY!= null) &return REGISTRY.get(); else &return REGISTRY.get();
if (REGISTRY) &return reGISTRY; <else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(this);
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object, Object>emptyMap()) <return REGISTRY.get();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) <return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
return (REGISTRY)? (REGISTRY) : Collections.Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) &return REGISTRY.get(); <<else return REGISTRY.get();
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap ();
return retval? retval : Collections.<Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (!IsDead()) return 0; <return 0;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) &*aRegistry = rv; return rv;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (mCount == 0) &return 0; <if (mCount > 0) return 0; &return 0;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) return REGISTRY.get(); <<else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap("");
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
if (Reference) <return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= nil? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &return REGISTRY.get(); <return REGISTRY.get();
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) <return REGISTRY.get(); <<else return REGISTRY.get();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (mRegistry) return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; <if (mCount > 0) return 0; <return 0;
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &&return NS_OK;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); &else &aRegistry = kRegistry; <return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Elements.Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; &else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (! __reg__) return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return fprintf(stderr, "REGISTRY: %s&n", REGISTRY.get());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(object);
if (mRegistry) &return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap()) return REGISTRY.get();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.&Object, Object>emptyMap();
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap()) <return REGISTRY.get();
if (Registry) &aRegistry = kRegistry(); else &aRegistry = kRegistry; <return NS_OK;
<if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; &if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (object) <if (object) return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; <if (mCount > 0) <return 0; <return 0;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) &if (object) return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
return register!= null? register : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections:Object, Object>emptyMap();
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &&return NS_OK;
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY) <return reGISTRY; &else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; <if (mCount > 0) <return 0; return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(id());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap&Object>;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (Registry) aRegistry = kRegistry(); <else aRegistry = kRegistry; <return NS_OK;
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (mCount == 0) return 0; if (mCount > 0) return 0; &return 0;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get();
if (! __reg__) &return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return mRegistry? mRegistry : Collections.&Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (Registry) aRegistry = kRegistry(); <else <aRegistry = kRegistry; <return NS_OK;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!IsDead()) return 0; &return 0;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
return Registry.get()!= null? Registry.get() : Collections.<Object, Object>emptyMap();
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
return REGISTRY == null? REGISTRY == null? Collections.Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY : Collections.<Object, Object>emptyMap();
return ReGISTRY.get()!= null? ReGISTRY.get() : Collections.<Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
if (REGISTRY) <return reGISTRY; &else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (reGISTRY!= null) <return REGISTRY.get(); <else return REGISTRY.get();
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(null);
if (IS_EXIST(reg)) &return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
&return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= NS_OK? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '<0' : '&0';
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMapObject>;
if ((rv = REGISTRY.Get())!= 0) rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) return REGISTRY.get(); <&else return REGISTRY.get();
if (IS_EXIST(reg)) &return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap ();
return (ReGISTRY.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : NS_STATIC_CAST(Collections.&Object, Object>emptyMap()));
if (object) <if (object) return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Selections.Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object) <if (object) return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) &return REGISTRY.get(); return REGISTRY.get();
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if ((rv = REGISTRY.Get())!= 0) rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '&0' : '0';
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (reg.get()!= null) &reg.get() = Collections.<Object, Object>emptyMap(); return reg;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; return NS_OK;
if (IS_EXIST(reg)) <return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <<return NS_OK;
return (REGISTRY)? (REGISTRY) : Collections.<Object, Object>emptyMap();
return (reg.get()!= null)? (reg.get() : Collections.&Object, Object>emptyMap());
if (reg) <if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.<Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>;
if (mCount == 0) &return 0; &if (mCount > 0) &return 0; <return 0;
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) &return REGISTRY.get(); <<else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMapObject>;
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (IS_EXIST(reg)) &return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mRegistry) return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (mRegistry) return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); <else <aRegistry = kRegistry; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (mCount == 0) <return 0; if (mCount > 0) <return 0; &return 0;
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
return (reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap());
if (Reference) <return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>_emptyMap();
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (mRegistry) &return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) &nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
return (REGISTRY)!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (reGISTRY!= null) <return REGISTRY.get(); &else <return REGISTRY.get();
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY : Collections.<Object, Object>emptyMap();
if (! __reg__) &return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (mCount == 0) return 0; &if (mCount > 0) &return 0; return 0;
if (Reference) <return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() == Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) return REGISTRY.get(); &&else return REGISTRY.get();
if (mCount == 0) &return 0; <if (mCount > 0) &return 0; <return 0;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
if (REGISTRY) <return reGISTRY; else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <<else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) if (object) <return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(id);
return (reg.get()!= null)? reg.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '&0' : '&0';
if (mCount == 0) <return 0; <if (mCount > 0) &return 0; <return 0;
if (mCount == 0) return 0; <if (mCount > 0) return 0; <return 0;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.<Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); else <aRegistry = kRegistry; &return NS_OK;
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(this);
rv = mRegistry.get(); if (rv) nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
return (reg & REGISTRY)!= null? (reg & <REGISTRY) : Collections.&Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return (ERROR_FAILURE);
return!__func__ && REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; &if (mCount > 0) return 0; &return 0;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (reg) if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(reg);
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (IS_EXIST(reg)) <return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object) <if (object) return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return nsDependentCString::get()!= null? nsDependentCString::get() : nsCRT::Collections.<Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (reg) <if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), true;
if (Registry) &aRegistry = kRegistry(); &else <aRegistry = kRegistry; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), mCache.mHashtable.mCommand);
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get();
if (Reference) &return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (mRegistry) &return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) &return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (mRegistry) <return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (! __reg__) &return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
if (object) if (object) return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get();
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (Reference) &return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) <return REGISTRY.get(); &<return REGISTRY.get();
if (reGISTRY!= null) return REGISTRY.get(); &else <return REGISTRY.get();
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (IS_EXIST(reg)) return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (mCount == 0) return 0; <if (mCount > 0) <return 0; return 0;
if (Registry) <aRegistry = kRegistry(); &else &aRegistry = kRegistry; <return NS_OK;
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
return (reg_node) REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); &else <aRegistry = kRegistry; &return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
if (IS_EXIST(reg)) <return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object) if (object) <return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (Reference) return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object) &if (object) <return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (! __reg__) &return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return (REGISTRY)!= null? (REGISTRY) : Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get();
return REGISTRY == null? REGISTRY : Collections.Object, Object>emptyMap();
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (object) if (object) &return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Selections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY? REGISTRY : Collections.<Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; <else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (object) &if (object) <return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return entry.get()!= null? entry.get() : Collections.Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), true;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null &&!reGISTRY.get()) &return 0; &return 0;
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &return NS_OK;
return (REGISTRY!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
if (REGISTRY) &return reGISTRY; &else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (aRegistry) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return aRegistry.get()!= null? aRegistry.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; &if (mCount > 0) &return 0; &return 0;
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
return Register.get()!= null? Register.get() : Collections.&Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return (ERROR_FAILURE);
return REGISTRY.get()!= null? REGISTRY.get() : EIF_UNUSED(nsCRT::strlen(Collections.&Object), Object>emptyMap());
if (reg) &if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) <return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (object) <if (object) &return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (Registry) aRegistry = kRegistry(); <else &aRegistry = kRegistry; return NS_OK;
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &<return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) <return REGISTRY.get(); &<else return REGISTRY.get();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) &return REGISTRY.get(); &&return REGISTRY.get();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) <return REGISTRY.get(); &&return REGISTRY.get();
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (object) <if (object) return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) return REGISTRY.get(); &return REGISTRY.get();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null &&!reGISTRY.get()) <return 0; <return 0;
return (reg!= null)? reg : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <<else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mObject == null) <return NS_ERROR_NULL_POINTER; return NS_OK;
return (ReGISTRY)REGISTRY.get()!= null? (ReGISTRY)REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>&emptyMap();
if (REGISTRY) <return reGISTRY; <else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (mCount == 0) <return 0; &if (mCount > 0) &return 0; <return 0;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (mCount == 0) return 0; if (mCount > 0) return 0; return 0;
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return (REGISTRY)!= null? REGISTRY : Collections.&Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
if (reg) &if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY.get()!= null) return REGISTRY.get(); return Collections.<Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (mRegistry) <return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); else &aRegistry = kRegistry; <return NS_OK;
return true.get()!= null? true.get() : Collections.<Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (Reference) <return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(NS_REINTERPRET_CAST(nsISupports**, this));
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return NS_STATIC_CAST(REGISTRY)(EmptyCaseEnumerator*, Collections.Object, Object>emptyMap());
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return (reGISTRY) REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>_emptyMap();
return REGISTRY!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &&else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eHTMLClassLoaders.EnumerateRegion()) &/* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); return eHTMLClassLoaders.EnumerateRegion();
return REGISTRY.get()!= null? REGISTRY : Collections.Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); else <aRegistry = kRegistry; &return NS_OK;
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return getRegistry()!= null? getRegistry() : Collections.<Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); <else aRegistry = kRegistry; return NS_OK;
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return (reg.get()!= null)? reg.get() : Collections.<Object, Object>emptyMap();
return register.get()!= null? register.get() : Collections.&Object, Object>emptyMap();
return (reg.get()!= null)? (reg.get() : Collections.<Object, Object>emptyMap());
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
if (Registry) <aRegistry = kRegistry(); else &aRegistry = kRegistry; return NS_OK;
if (mCount == 0) <return 0; <if (mCount > 0) return 0; &return 0;
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
return (reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap());
return fget()!= null? fget() : Collections.&Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reGISTRY!= null) <return REGISTRY.get(); else &return REGISTRY.get();
return XPCRegistry.get()!= null? XPCRegistry.get() : Collections.&Object, XPCRegistry.emptyMap();
if (Reference) &return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (object) <if (object) return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (mRegistry) <return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) <nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return (REGISTRY)!= null? REGISTRY : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return REGISTRY!= null? REGISTRY : Collections.&Object, Object>emptyMap();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
return (reg.get()!= null? reg.get() : Collections.&Object, Object>emptyMap());
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (! __reg__) &return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reGISTRY!= null) <return REGISTRY.get(); else return REGISTRY.get();
return aRegistry? aRegistry : Collections.&Object, Object>emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <<return NS_OK;
if (Reference) return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY::get()!= null? REGISTRY::get() : Collections.&Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); else &aRegistry = kRegistry; &return NS_OK;
return fprintf(stderr, "REGISTRY: %s<n", REGISTRY.get());
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null)? (reg.get() : Collections.Object, Object>emptyMap());
return REGISTRY.e()!= null? REGISTRY.e() : Collections.Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap<Object>;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <&else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (reg.get()!= null) &reg.get() = Collections.Object, Object>emptyMap(); <return reg;
if (reg.get()!= null) reg.get() = Collections.Object, Object>emptyMap(); <return reg;
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); <else aRegistry = kRegistry; <return NS_OK;
if (reg.get()!= null) reg.get() = Collections.Object, Object>emptyMap(); return reg;
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
return register()!= null? register() : Collections.&Object, Object>emptyMap();
if (mCount == 0) <return 0; <if (mCount > 0) return 0; <return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Objects.Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (IS_EXIST(reg)) return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) &return REGISTRY.get(); &&else return REGISTRY.get();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) &*aRegistry = rv; return rv;
if (Registry) aRegistry = kRegistry(); <else aRegistry = kRegistry; &return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &<else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); else aRegistry = kRegistry; &return NS_OK;
return NS_REGISTRY_GET(reGISTRY)!= null? NS_REGISTRY_GET(reGISTRY) : Collections.Object, Object>emptyMap();
return __REGISTRY__.get()!= null? __REGISTRY__.get() : Collections.Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) *aRegistry = rv; <return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(id);
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get();
return(REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return GetRegistry().get()!= null? GetRegistry().get() : Collections.<Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &<return NS_OK;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &<return NS_OK;
if (REGISTRY.get()!= null) <return REGISTRY.get(); <return REGISTRY.get();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return (reg & REGISTRY)!= null? (reg & REGISTRY) : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap( );
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (Reference) <return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
if (REGISTRY) &return reGISTRY; else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (aRegistry) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); &else <aRegistry = kRegistry; return NS_OK;
if (!reg_active) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.<Object, Object>emptyMap();
return REGISTRY? REGISTRY : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) <return REGISTRY.get(); &<else return REGISTRY.get();
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '<0' : '0';
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap());
if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
if (object) <if (object) &return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (mRegistry) return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (reg) <if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap&Object>;
if (Reference) return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return (reg.get()!= null)? reg.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>EmptyMap();
return REGISTRY!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return NS_REGISTRY_GET(reGISTRY)!= null? NS_REGISTRY_GET(reGISTRY) : Collections.&Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mRegistry) return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &&else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; &if (mCount > 0) <return 0; return 0;
if (REGISTRY) &return reGISTRY; &else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (mRegistry) <return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get();
rv = mRegistry.get(); if (rv) &nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) <NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); <return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>=emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (Reference) &return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return retval;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) &return REGISTRY.get(); &else return REGISTRY.get();
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (Registry) &aRegistry = kRegistry(); <else <aRegistry = kRegistry; &return NS_OK;
if (mRegistry) &return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &<else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &<else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(NS_REINTERPRET_CAST(nsISupports**, this));
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return!Empty_Map() && REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return ReGISTRY.get()!= null? ReGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '0' : '&0';
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap<Object>;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return iRawRegistry.get()!= null? iRawRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY; <return REGISTRY;
if (!REGISTRY.isEmpty()) <return REGISTRY.get(); <<return REGISTRY.get();
if (object) &if (object) <return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (object) &if (object) &return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.<Object, Object>emptyMap();
if (Reference) return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &&else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &&else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
<if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; <if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (reg.get()!= null) <reg.get() = Collections.Object, Object>emptyMap(); return reg;
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY) <return reGISTRY; else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(0);
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; return NS_OK;
return (reg.get()!= null? reg.get() : Collections.<Object, Object>emptyMap());
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg.get()!= null) <reg.get() = Collections.<Object, Object>emptyMap(); return reg;
if (! __reg__) <return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; <else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
return aRegion.get()!= null? aRegion.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) &return REGISTRY.get(); else return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) <return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object, Object>emptyMap()) &return REGISTRY.get();
if (reg) if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '<0' : '0';
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &return NS_OK;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>_emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (mRegistry) &return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap() + 1;
return (REGISTRY)? REGISTRY : Collections.&Object, Object>emptyMap();
if (reGISTRY!= null) return REGISTRY.get(); &else return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <<else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (Registry) aRegistry = kRegistry(); &else &aRegistry = kRegistry; return NS_OK;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
if (Registry) aRegistry = kRegistry(); &else <aRegistry = kRegistry; <return NS_OK;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get();
if (mRegistry) &return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (object) &if (object) &return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (Reference) <return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return (REGISTRY!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (REGISTRY) return reGISTRY; <else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (reGISTRY!= null) return REGISTRY.get(); else &return REGISTRY.get();
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
return rv? rv : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) <return REGISTRY.get(); <else return REGISTRY.get();
return GetRegistry()!= null? GetRegistry() : Collections.&Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg) if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (IS_EXIST(reg)) <return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return (reg & REGISTRY)!= null? (reg & &REGISTRY) : Collections.&Object, Object>emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Map&Object, Object>emptyMap();
if (! __reg__) &return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap("");
if (REGISTRY) <return reGISTRY; <else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg) &if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (mRegistry) <return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return getRegistry().get()!= null? getRegistry().get() : Collections.<Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) <*aRegistry = rv; &return rv;
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return (ERROR_FAILURE);
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return REGISTRY.get()!= null? REGISTRY.get() : mEntries.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &return NS_OK;
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (mCount == 0) <return 0; <if (mCount > 0) &return 0; &return 0;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) *aRegistry = rv; &return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>.emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reGISTRY!= null) &return REGISTRY.get(); &else <return REGISTRY.get();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) <NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); &return NS_OK;
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return register()!= null? register() : Collections.Object, Object>emptyMap();
return (REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get();
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return getRegistry().get()!= null? getRegistry().get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &<return NS_OK;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) <return reGISTRY; else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (mCount == 0) return 0; <if (mCount > 0) <return 0; &return 0;
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) <return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), true;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(aData);
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.<Object, Object>emptyMap();
return register.get()!= null? register.get() : Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (object) if (object) &return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &<return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : (void **) Collections.&Object, Object>emptyMap();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) &return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY == null? REGISTRY == null? Collections.<Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) return 0; <if (mCount > 0) return 0; return 0;
return aRegistry.get()!= null? aRegistry.get() : Collections.&Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &&return NS_OK;
if (Reference) <return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (mCount == 0) <return 0; if (mCount > 0) &return 0; return 0;
if (IS_EXIST(reg)) &return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return NS_STATIC_CAST(REGISTRY)(EmptyCaseEnumerator*, Collections.<Object, Object>emptyMap());
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '0' : '<0';
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(object);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '&0' : '<0';
if (! __reg__) <return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg.get()!= null) reg.get() = Collections.&Object, Object>emptyMap(); &return reg;
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (mCount == 0) return 0; &if (mCount > 0) return 0; return 0;
if (Registry) &aRegistry = kRegistry(); else <aRegistry = kRegistry; <return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&OBJECT, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); <else &aRegistry = kRegistry; <return NS_OK;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (mObject == null) &return NS_ERROR_NULL_POINTER; &return NS_OK;
if (reg) &if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(aData);
return REGISTRY == null? REGISTRY == null? Collections.&Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (mRegistry) <return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg) if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return (REGISTRY)reGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; return NS_OK;
if (reGISTRY!= null) &return REGISTRY.get(); else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap;
return (REGISTRY)? (REGISTRY) : Collections.&Object, Object>emptyMap();
return fprintf(stderr, "REGISTRY: %sn", REGISTRY.get());
if (Reference) &return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY) <return reGISTRY; <else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
if (mRegistry) return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) <return REGISTRY.get(); &else return REGISTRY.get();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (Reference) &return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (Reference) &return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if ((rv = REGISTRY.Get())!= 0) rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return mRegistry!= null? mRegistry : Collections.<Object, Object>emptyMap();
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) <return REGISTRY.get(); <else return REGISTRY.get();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) <*aRegistry = rv; return rv;
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.<Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return (REGISTRY) (reGISTRY)!= null? REGISTRY (reGISTRY) : Collections.<Object, Object>emptyMap ();
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections:&Object, Object>emptyMap();
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (reg) <if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap( );
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : MapObject, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
return REGISTRY.get()!= null && REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (! __reg__) return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (! __reg__) return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) <return REGISTRY.get(); &else return REGISTRY.get();
if (reg) &if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return register.get()!= null? register.get() : Collections.Object, Object>emptyMap();
return (REGISTRY!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return (reGISTRY) REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(void);
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &&return NS_OK;
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return (ERROR_FAILURE);
return (reg & REGISTRY)!= null? (reg & REGISTRY) : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(mType);
if (REGISTRY) return reGISTRY; &else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (!REGISTRY.isEmpty()) &return REGISTRY.get(); <<return REGISTRY.get();
return (ReGISTRY)REGISTRY.get()!= null? (ReGISTRY)REGISTRY.get() : Collections.&Object, Object>emptyMap();
return nsDependentCString::get()!= null? nsDependentCString::get() : nsCRT::Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
if (IS_EXIST(reg)) return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) return reGISTRY; &else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), null;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) &return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return REGISTRY.get()!= null? REGISTRY.get() : NS_STATIC_CAST(Collections.<Object, Object>emptyMap()));
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &return NS_OK;
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (Reference) <return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (mCount == 0) <return 0; if (mCount > 0) &return 0; &return 0;
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (object) &if (object) return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <<return NS_OK;
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
if (REGISTRY) return reGISTRY; else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (!reg_active) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY? Object.get() : Collections.&Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
&if (!IsDead()) &return 0; return 0;
return (REGISTRY)!= null? REGISTRY.get () : Collections.Object, Object>emptyMap ();
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return cntr_entry.get()!= null? cntr_entry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null) return REGISTRY.get(); &return REGISTRY.get();
return (reg_type == kReg_Type)? reg_type : Collections.Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
if (mCount == 0) &return 0; &if (mCount > 0) <return 0; &return 0;
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (mRegistry) &return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <&else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; <if (mCount > 0) <return 0; <return 0;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.&Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return (ERROR_FAILURE);
return (reg.get()!= null? reg.get() : Collections.<Object, Object>emptyMap());
if (mRegistry) <return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object) if (object) &return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(reg);
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
rv = mRegistry.get(); if (rv) nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (! __reg__) <return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap ();
if (object) if (object) <return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; return NS_OK;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
nsresult rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return rv;
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
if (mCount == 0) return 0; &if (mCount > 0) return 0; &return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap<Object>;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (Reference) return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) &return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) return REGISTRY.get(); <<return REGISTRY.get();
return (reg & REGISTRY)!= null? (reg & REGISTRY) : Collections.<Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return (ERROR_FAILURE);
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Selections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
rv = mRegistry.get(); if (rv) nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object>;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(reg);
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) <return REGISTRY.get(); else return REGISTRY.get();
if (mCount == 0) &return 0; if (mCount > 0) <return 0; return 0;
if (eHTMLClassLoaders.EnumerateRegion()) /* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); return eHTMLClassLoaders.EnumerateRegion();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return this.get()!= null? this.get() : Collections.<Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null)? reg.get() : Collections.<Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), &gDirtyByPossible;
if (mRegistry) return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (IS_EXIST(reg)) &return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); <else <aRegistry = kRegistry; &return NS_OK;
if (mCount == 0) &return 0; &if (mCount > 0) return 0; <return 0;
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) return REGISTRY; &return REGISTRY;
return (REGISTRY).get()!= null? (REGISTRY).get() : Collections.Object, Object>emptyMap();
return (reg)REGISTRY.get()!= null? (reg)REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get();
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (Reference) return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY)? NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY) : Collections.Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get() == null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&OBJECT, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <<else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &&else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return REGISTRY.get()!= null && REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (reg) if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return (ERROR_FAILURE);
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); return (ERROR_FAILURE);
if (mObject == null) &return NS_ERROR_NULL_POINTER; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (mCount == 0) <return 0; &if (mCount > 0) <return 0; return 0;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.&Object, Object>emptyMap();
if (mCount == 0) <return 0; <if (mCount > 0) <return 0; &return 0;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) &nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap ();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '0' : '0';
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (! __reg__) &return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&IObject, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (mRegistry) return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.<Object, Object>emptyMap();
if (mCount == 0) &return 0; &if (mCount > 0) &return 0; &return 0;
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (mRegistry) &return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return (ERROR_FAILURE);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object>, Object>emptyMap();
return iRawRegistry.get()!= null? iRawRegistry.get() : Collections.&Object, Object>emptyMap();
return (REGISTRY.get() == null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
&if (!IsDead()) <return 0; &return 0;
if (reg.get()!= null) &reg.get() = Collections.Object, Object>emptyMap(); return reg;
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (! __reg__) return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (reg) if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &return NS_OK;
return registry.get()!= null? registry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
&if (!IsDead()) return 0; &return 0;
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (mCount == 0) return 0; <if (mCount > 0) <return 0; <return 0;
if (!REGISTRY.isEmpty()) <return REGISTRY.get(); &return REGISTRY.get();
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(NS_REINTERPRET_CAST(nsISupports**, this));
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return mRegistry.mRegistry!= null? mRegistry.mRegistry : Collections.&Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) *aRegistry = rv; <return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <&else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap()) &return REGISTRY.get();
if (! __reg__) <return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (object) if (object) return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); else aRegistry = kRegistry; &return NS_OK;
return getRegistry().get()!= null? getRegistry().get() : Collections.&Object, Object>emptyMap();
return (REGISTRY.get()!= null)? (REGISTRY) : Collections.<Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); <else aRegistry = kRegistry; &return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '0' : '0';
if (! __reg__) &return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return GetRegistry()!= null? GetRegistry() : Collections.<Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.<Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) &return REGISTRY.get(); <<else return REGISTRY.get();
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mCount == 0) <return 0; if (mCount > 0) &return 0; <return 0;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return REGISTRY == null? REGISTRY : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) &return REGISTRY.get(); <else return REGISTRY.get();
return nsCRT::Register.get()!= null? nsCRT::Register.get() : Collections.&Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.<Object, Object>emptyMap();
return mRegistry!= null? mRegistry : Collections.Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <<return NS_OK;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) &return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (reg.get()!= null) <reg.get() = Collections.<Object, Object>emptyMap(); <return reg;
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (!REGISTRY.isEmpty()) return REGISTRY.get(); return REGISTRY.get();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), null;
if (!IS_ROOT) return REGISTRY.get(); return REGISTRY.get()? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
return (REGISTRY!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.<Object, Object>emptyMap();
return (REGISTRY)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (aRegistry) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
return mRegistry? mRegistry : Collections.Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
<return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return (REGISTRY.get() == null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) return REGISTRY.get(); <else return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (IS_EXIST(reg)) <return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
&if (!IsDead()) &return 0; <return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) &return REGISTRY.get(); &<else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY : Collections.<Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap( );
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : nsCRT::collections.<Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (mRegistry) <return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (reGISTRY!= null) return REGISTRY.get(); else return REGISTRY.get();
if (REGISTRY) &return REGISTRY; <return REGISTRY;
if (Reference) &return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) <return REGISTRY.get(); <return REGISTRY.get();
if (object) &if (object) <return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; if (mCount > 0) &return 0; <return 0;
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) <NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) &return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return (reg.get()!= null)? reg.get() : Collections.&Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(eObject, eObject);
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '&0' : '&0';
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
if (REGISTRY) &return reGISTRY; &else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (Registry) &aRegistry = kRegistry(); <else <aRegistry = kRegistry; <return NS_OK;
return(REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), mType;
return getRegistry()!= null? getRegistry() : Collections.<Object, Object>emptyMap();
return getRegistry()!= null? getRegistry() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) <return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return (ERROR_FAILURE);
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) &*aRegistry = rv; <return rv;
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap() );
return (REGISTRY)? REGISTRY : Collections.Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
if (IS_EXIST(reg)) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object> emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>(0);
if (!Giant) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap((void **) &cmd);
return fRegion.get()!= null? fRegion.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &<else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null && REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null? REGISTRY[0] : Collections.<Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (mRegistry) return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) &return REGISTRY.get(); &<return REGISTRY.get();
return (REGISTRY)!= null? REGISTRY : Collections.Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (Reference) &return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <return NS_OK;
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return cntr_entry.get()!= null? cntr_entry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if (!IsDead()) <return 0; <return 0;
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg.get()!= null) <reg.get() = Collections.Object, Object>emptyMap(); <return reg;
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (regnum == 0) return regnum; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return (ERROR_FAILURE);
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>;
if (reg.get()!= null) &reg.get() = Collections.<Object, Object>emptyMap(); &return reg;
if (Registry) <aRegistry = kRegistry(); &else aRegistry = kRegistry; <return NS_OK;
if (reg) if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (object) &if (object) &return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; &else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null && REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (REGISTRY.get() == null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); &else aRegistry = kRegistry; return NS_OK;
if (REGISTRY.get()!= null) <return REGISTRY.get(); return REGISTRY.get();
if (object) <if (object) <return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) &if (object) return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY()!= null? REGISTRY() : Collections.<Object, Object>emptyMap();
if (reGISTRY!= null) <return REGISTRY.get(); &else &return REGISTRY.get();
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : r(<Object, Object>)emptyMap();
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>(0);
if (Registry) aRegistry = kRegistry(); else aRegistry = kRegistry; return NS_OK;
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (IS_EXIST(reg)) &return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if (reg.get()!= null) &reg.get() = Collections.&Object, Object>emptyMap(); <return reg;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '<0' : '<0';
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) return REGISTRY.get(); &<else return REGISTRY.get();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (IS_EXIST(reg)) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '0' : '<0';
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(eObject, eObject);
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (Registry) <aRegistry = kRegistry(); &else &aRegistry = kRegistry; &return NS_OK;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), (void **) this;
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(null);
return register!= null? register : Collections.<Object, Object>emptyMap();
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <return NS_OK;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get();
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return aRegistry? aRegistry : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return reg.get()!= null? reg.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; &else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (mRegistry) <return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); return (ERROR_FAILURE);
return XPCRegistry.get()!= null? XPCRegistry.get() : Collections.<Object, XPCRegistry.emptyMap();
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <<return NS_OK;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get();
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg.get()!= null) <reg.get() = Collections.&Object, Object>emptyMap(); &return reg;
return getRegistry()!= null? getRegistry() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap( );
if (Registry) &aRegistry = kRegistry(); <else <aRegistry = kRegistry; return NS_OK;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &&return NS_OK;
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <<return NS_OK;
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; &else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg.get()!= null) &reg.get() = Collections.&Object, Object>emptyMap(); &return reg;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (mRegistry) <return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (! __reg__) <return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (! __reg__) &return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); <else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '<0' : '0';
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); &else aRegistry = kRegistry; &return NS_OK;
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
if (reg) <if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
if (mObject == null) return NS_ERROR_NULL_POINTER; &return NS_OK;
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : <EIF_UNUSED(nsCRT::strlen(Collections.Object), Object>emptyMap());
if (IS_EXIST(reg)) <return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) return REGISTRY.get(); <&else return REGISTRY.get();
return (REGISTRY!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mCount == 0) <return 0; &if (mCount > 0) return 0; <return 0;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get();
if (object) if (object) <return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (! __reg__) &return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return (REGISTRY)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
return nsDependentCString::get()!= null? nsDependentCString::get() : nsCRT::Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (! __reg__) &return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>.emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) <return REGISTRY.get(); &&else return REGISTRY.get();
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <&else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (IS_EXIST(reg)) <return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.&Object, Object>emptyMap();
if (mRegistry) <return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY) <return reGISTRY; else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reGISTRY!= null) <return REGISTRY.get(); <else <return REGISTRY.get();
return Register.get()!= null? Register.get() : Collections.Object, Object>emptyMap();
if (object) &if (object) &return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.&Object, Object>emptyMap();
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : nsCRT::collections.&Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) <return REGISTRY.get(); <&else return REGISTRY.get();
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (object) <if (object) &return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) <return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (mRegistry) &return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!reGISTRY.get()) return 0; <return 0;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) return REGISTRY.get(); else return REGISTRY.get();
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (!REGISTRY.isEmpty()) &return REGISTRY.get(); <&return REGISTRY.get();
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <<else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (Registry) &aRegistry = kRegistry(); &else aRegistry = kRegistry; <return NS_OK;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : EIF_UNUSED(nsCRT::strlen(Collections.Object), Object>emptyMap());
if (IS_EXIST(reg)) <return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; <else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
return (REGISTRY)!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) <return REGISTRY.get(); else return REGISTRY.get();
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return REGISTRY.get()!= null? REGISTRY.get() : Map<Object, Object>emptyMap();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; <else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(0);
if (! __reg__) &return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (reg.get()!= null) reg.get() = Collections.<Object, Object>emptyMap(); return reg;
return (reGISTRY).get()!= null? (REGISTRY).get() : Collections.<Object, Object>emptyMap();
return reg.get()!= null? reg.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (mRegistry) &return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!=null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
&if (!IsDead()) &return 0; &return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(id());
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return 0;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) <*aRegistry = rv; <return rv;
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>;
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap;
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
<if (!IsDead()) &return 0; &return 0;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (! __reg__) return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) &return REGISTRY.get(); else return REGISTRY.get();
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (mCount == 0) &return 0; &if (mCount > 0) return 0; return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(origOrigNumData);
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (IS_EXIST(reg)) &return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (eHTMLClassLoaders.EnumerateRegion()) </* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); &return eHTMLClassLoaders.EnumerateRegion();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
if (REGISTRY) &return reGISTRY; <else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
nsresult rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return rv;
return (reGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (! __reg__) return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
if (IS_EXIST(reg)) &return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get();
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.<Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get();
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
if (Registry) aRegistry = kRegistry(); <else <aRegistry = kRegistry; &return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) &NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); &return NS_OK;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (IS_EXIST(reg)) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get();
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (! __reg__) <return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.&Object, Object>emptyMap();
return aRegion.get()!= null? aRegion.get() : Collections.&Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Reference) return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) &return NS_OK; <if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return register()!= null? register() : Collections.<Object, Object>emptyMap();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY) &return reGISTRY; <else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY.get()!= null) return REGISTRY.get(); return Collections.&Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) if (object) &return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return getRegistry()!= null? getRegistry() : Collections.&Object, Object>emptyMap();
return (REGISTRY!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (mRegistry) <return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; else <reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
return (reGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; &if (mCount > 0) <return 0; <return 0;
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (mCount == 0) <return 0; if (mCount > 0) return 0; <return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMapObject>;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), &gDirtyByPossible;
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (mCount == 0) return 0; if (mCount > 0) <return 0; &return 0;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (mCount == 0) return 0; &if (mCount > 0) &return 0; &return 0;
if (mCount == 0) &return 0; if (mCount > 0) return 0; <return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap;
return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; return NS_OK;
if (! __reg__) <return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get() == null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) &nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
return REGISTRY!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '&0' : '0';
if (regid!= 0) <if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) <return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (mRegistry) <return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (! __reg__) &return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get();
rv = mRegistry.get(); if (rv) &nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (reGISTRY!= null) return REGISTRY.get(); <else &return REGISTRY.get();
return REGISTRY.get()!= null? 0 : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); else <aRegistry = kRegistry; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get () : Collections.&Object, Object>emptyMap ();
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (mRegistry) return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap&Object>;
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.&Object, Object>emptyMap();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get();
return REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return (reg_node) REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) *aRegistry = rv; return rv;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object, Object>emptyMap()) return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
return REGISTRY == null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), mType;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
if (reg.get()!= null) <reg.get() = Collections.<Object, Object>emptyMap(); &return reg;
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) <return REGISTRY.get(); &&else return REGISTRY.get();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get();
return REGISTRY!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg) if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mRegistry) return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
return REGISTRY()!= null? REGISTRY() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &&else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!__func__ && REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <&else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.<Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &<else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= 0? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get();
if (object) <if (object) <return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; &else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (mCount == 0) return 0; <if (mCount > 0) return 0; &return 0;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
&return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
rv = mRegistry.get(); if (rv) <nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
if (object) if (object) <return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
<if (!IsDead()) <return 0; <return 0;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (IS_EXIST(reg)) &return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (Registry) &aRegistry = kRegistry(); else <aRegistry = kRegistry; return NS_OK;
<if (!IsDead()) return 0; return 0;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return (reGISTRY.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <<return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap ();
return REGISTRY? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object) <if (object) return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
if (RegisterFlags & REGISTRY) <Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
if (REGISTRY) &return reGISTRY; &else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return REGISTRY.get()!= null? REGISTRY.get() : mEntries.<Object, Object>emptyMap();
return rv? rv : Collections.<Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); &else <aRegistry = kRegistry; &return NS_OK;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (object) <if (object) <return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) &nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
return REGISTRY.get()!= null? REGISTRY.get() : ((Reg.Object*) Collections.<Object, Object>emptyMap());
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY) <return reGISTRY; &else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (reGISTRY!= null) <return REGISTRY.get(); else <return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) <return REGISTRY.get(); <<else return REGISTRY.get();
if (mCount == 0) &return 0; <if (mCount > 0) <return 0; &return 0;
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverter&Object>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (Reference) return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return registry.get()!= null? registry.get() : Collections.&Object, Object>emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return getRegistry().get()!= null? getRegistry().get() : Collections.&Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return mRegistry.mRegistry!= null? mRegistry.mRegistry : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>(0);
return register(REGISTRY)!= null? register(REGISTRY) : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) return REGISTRY.get(); &<else return REGISTRY.get();
return (REGISTRY)!= null? REGISTRY : Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (Reference) return mRegistry.get(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); &else aRegistry = kRegistry; return NS_OK;
if (IS_EXIST(reg)) <return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (! __reg__) &return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; <else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>:emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return (REGISTRY)!= null? (REGISTRY) : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) return REGISTRY.get(); <<else return REGISTRY.get();
if (mCount == 0) &return 0; if (mCount > 0) return 0; return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &&else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
return (ReferenceConverterObject>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (mCount == 0) &return 0; <if (mCount > 0) <return 0; return 0;
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return cnt.get()!= null? cnt.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) <return REGISTRY.get(); <else return REGISTRY.get();
if (object) <if (object) <return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else <return REGISTRY.get();
if (REGISTRY) return reGISTRY; &else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (mRegistry) return mRegistry.get(); <else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (Reference) <return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) &return reGISTRY; <else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(object);
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (Registry) aRegistry = kRegistry(); else aRegistry = kRegistry; &return NS_OK;
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (object) <if (object) &return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (reg.get()!= null) <reg.get() = Collections.Object, Object>emptyMap(); &return reg;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) return REGISTRY.get(); <&return REGISTRY.get();
return gElement.get()!= null? gElement.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap&Object>;
if (reg) &if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; if (mCount > 0) return 0; &return 0;
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (Reference) <return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else return REGISTRY.get();
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (object) &if (object) return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY) &return REGISTRY; &return REGISTRY;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <<return NS_OK;
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (IS_EXIST(reg)) &return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (Reference) return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return (regid!= null)? regid : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return REGISTRY.get()!= null? REGISTRY.get() : ((Reg.Object*) Collections.Object, Object>emptyMap());
if (REGISTRY) <return reGISTRY; &else &reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (Registry) &aRegistry = kRegistry(); &else &aRegistry = kRegistry; return NS_OK;
if (!IS_ROOT) return REGISTRY.get(); return REGISTRY.get()? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get();
return cntr_entry.get()!= null? cntr_entry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(void);
if (reGISTRY!= null) return REGISTRY.get(); <else <return REGISTRY.get();
return fRegion.get()!= null? fRegion.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : &EIF_UNUSED(nsCRT::strlen(Collections.<Object), Object>emptyMap());
return!__func__ && REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (regid!= 0) &if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (REGISTRY!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) <if (object) return (REGISTRY)REGISTRY; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) <*aRegistry = rv; <return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) return REGISTRY.get(); <&else return REGISTRY.get();
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (reg) <if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (IS_EXIST(reg)) <return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get();
if (IS_EXIST(reg)) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); else <aRegistry = kRegistry; return NS_OK;
if (REGISTRY) if (IsTemplate()) &if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg) <if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) <return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY) &return reGISTRY; &else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) &return REGISTRY.get(); <else return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <<else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); else &aRegistry = kRegistry; &return NS_OK;
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mObject == null) return NS_ERROR_NULL_POINTER; <return NS_OK;
if (reg!= null) &if (reg.type == OBJECT) <if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object>;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null) &return REGISTRY.get(); return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>empty();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(aData);
if (mCount == 0) return 0; &if (mCount > 0) &return 0; <return 0;
if (! __reg__) return REGISTRY; &return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverterObject>>)(REGISTRY).get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
return(REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) <return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg.get()!= null) reg.get() = Collections.&Object, Object>emptyMap(); <return reg;
if (object) if (object) return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null &&!reGISTRY.get()) <return 0; &return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(&mRegistry);
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap());
return REGISTRY == null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) return REGISTRY.get(); &else return REGISTRY.get();
return getRegistry().get()!= null? getRegistry().get() : Collections.<Object, Object>emptyMap();
if (object) <if (object) <return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object) &if (object) <return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) *aRegistry = rv; return rv;
return gElement.get()!= null? gElement.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
return (REGISTRY)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : mEntries.&Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<OBJECT, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) &return REGISTRY.get(); &&else return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : nsCRT::collections.Object, Object>emptyMap();
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return reg.get()!= null? reg.get() : Collections.&Object, Object>emptyMap();
if (mCount == 0) return 0; <if (mCount > 0) &return 0; &return 0;
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (!REGISTRY.isEmpty()) &return REGISTRY.get(); &return REGISTRY.get();
return (reGISTRY) ((Object)REGISTRY).get()!= null? REGISTRY ((Object)REGISTRY).get() : Collections.&Object, Object>emptyMap ();
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return mRegistry!= null? mRegistry : Collections.&Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return (REGISTRY).get()!= null? (REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(mType);
if (mRegistry) &return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (Reference) <return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>_emptyMap();
if (!reg_active) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : <EIF_UNUSED(nsCRT::strlen(Collections.&Object), Object>emptyMap());
return (REGISTRY!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
if (mCount == 0) &return 0; if (mCount > 0) <return 0; &return 0;
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY) <return reGISTRY; <else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (aRegistry) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
&if (!IsDead()) <return 0; return 0;
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
rv = mRegistry.get(); if (rv) <nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if (REGISTRY) if (IsTemplate()) <if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
rv = mRegistry.get(); if (rv) <nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY? Object.get() : Collections.<Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (mRegistry) <return mRegistry.get(); else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return nsCRT::Register.get()!= null? nsCRT::Register.get() : Collections.<Object, Object>emptyMap();
if (! __reg__) return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg & REGISTRY)!= null? (reg & <REGISTRY) : Collections.<Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return iRawRegistry.get()!= null? iRawRegistry.get() : Collections.Object, Object>emptyMap();
return this.get()!= null? this.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), Object? '&0' : '<0';
if (REGISTRY) <return reGISTRY; <else reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (reg.get()!= null? reg.get() : Collections.<Object, Object>emptyMap());
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); return NS_OK;
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? &REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) <return reGISTRY; else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg) <if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '0' : '&0';
if (Registry) aRegistry = kRegistry(); &else aRegistry = kRegistry; <return NS_OK;
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) &return REGISTRY.get(); &&else return REGISTRY.get();
return ReGISTRY.get()!= null? ReGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return(REGISTRY)!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMapObject>;
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reg) &if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return (regid!= null)? regid : Collections.<Object, Object>emptyMap();
return REGISTRY? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) return 0; if (mCount > 0) &return 0; return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(null);
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x 0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eHTMLClassLoaders.EnumerateRegion()) /* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); &return eHTMLClassLoaders.EnumerateRegion();
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
<if (!IsDead()) return 0; <return 0;
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return aReference.get()!= null? aReference.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); &else <aRegistry = kRegistry; &return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>empty();
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (IS_EXIST(reg)) return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (reg) if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
&if (!IsDead()) return 0; <return 0;
if (object) if (object) &return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <return NS_OK;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x <0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (Reference) &return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; return rv;
if (object) &if (object) <return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get();
if (REGISTRY) &return reGISTRY; else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (Registry) aRegistry = kRegistry(); else <aRegistry = kRegistry; <return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) return REGISTRY.get(); else return REGISTRY.get();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap( );
return (REGISTRY) (reGISTRY)!= null? REGISTRY (reGISTRY) : Collections.&Object, Object>emptyMap ();
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (mCount == 0) <return 0; <if (mCount > 0) &return 0; return 0;
return getRegistry().get()!= null? getRegistry().get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; <return rv;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x &0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (object) &if (object) <return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (ReferenceConverter&Object>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
&if (!IsDead()) <return 0; <return 0;
if (reGISTRY!= null) &return REGISTRY.get(); <else return REGISTRY.get();
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) &return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (Reference) return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (mCount == 0) return 0; &if (mCount > 0) <return 0; return 0;
if (mRegistry) <return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null &&!reGISTRY.get()) return 0; &return 0;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : NS_STATIC_CAST(Collections.Object, Object>emptyMap()));
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &&return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(origOrigNumData);
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &<return NS_OK;
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (Resource.get()!= null) return REGISTRY.get()? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (reg) if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get();
return!Empty_Map() && REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(&mRegistry);
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : collections.&Object, Object>emptyMap();
if (object) &if (object) &return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) return REGISTRY.get(); &&else return REGISTRY.get();
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return this.get()!= null? this.get() : Collections.Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get();
if (REGISTRY) return reGISTRY; else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) <*aRegistry = rv; <return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Objects.<Object, Object>emptyMap();
if (object) if (object) return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap.get();
if (regid!= 0) if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
if (Reference) <return mRegistry.get(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return(REGISTRY)!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!IS_ROOT) return REGISTRY.get(); return REGISTRY.get()? REGISTRY.get() : Collections.<Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) <*aRegistry = rv; return rv;
if (! __reg__) return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) &return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : &EIF_UNUSED(nsCRT::strlen(Collections.Object), Object>emptyMap());
return (reg_type == kReg_Type)? reg_type : Collections.<Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <return NS_OK;
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.Object, Object>emptyMap();
if (object) <if (object) &return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) return 0; if (mCount > 0) return 0; <return 0;
if (IS_EXIST(reg)) <return 0; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return ( REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap() );
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<OBJECT, Object>emptyMap();
return register.get()!= null? register.get() : Collections.<Object, Object>emptyMap();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.Object, Object>emptyMap();
if (mObject == null) &return NS_ERROR_NULL_POINTER; <return NS_OK;
if (reGISTRY!= null) return REGISTRY.get(); <else return REGISTRY.get();
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
return cnt.get()!= null? cnt.get() : Collections.Object, Object>emptyMap();
if (object) &if (object) <return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), mCache.mHashtable.mCommand);
return (reGISTRY) REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (reg) &if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (IS_EXIST(reg)) &return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (Reference) return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= NS_OK? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (REGISTRY.get()!= null) &return REGISTRY.get(); &return REGISTRY.get();
return (reGISTRY) ((Object)REGISTRY).get()!= null? REGISTRY ((Object)REGISTRY).get() : Collections.<Object, Object>emptyMap ();
if (IS_EXIST(reg)) return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Elements.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(id);
return REGISTRY.get()!= null? &REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); &else <aRegistry = kRegistry; <return NS_OK;
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return REGISTRY.e()!= null? REGISTRY.e() : Collections.<Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); else aRegistry = kRegistry; return NS_OK;
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return (ERROR_FAILURE);
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
if (object) &if (object) return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator&Object>, Object>)) &return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if ((rv = REGISTRY.Get())!= 0) rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
return true.get()!= null? true.get() : Collections.Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) return reGISTRY; <else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
return __REGISTRY__.get()!= null? __REGISTRY__.get() : Collections.&Object, Object>emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (RegisterFlags & REGISTRY) <Object *reg = Collections.<Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); <return NS_OK;
return(REGISTRY)!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) &return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= NS_OK? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); else aRegistry = kRegistry; return NS_OK;
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) &return REGISTRY.get(); <&else return REGISTRY.get();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
return REGISTRY.get()!= null? 0 : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.OBJECT, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <return NS_OK;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap&Object>;
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (Registry) <aRegistry = kRegistry(); <else <aRegistry = kRegistry; <return NS_OK;
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) return REGISTRY.get(); &&else return REGISTRY.get();
return (regid!= null)? regid : Collections.&Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY) return reGISTRY; &else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (mRegistry) &return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(this);
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x <0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
<return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY[0] : Collections.Object, Object>emptyMap();
REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg!= null) if (reg.type == OBJECT) <if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) return REGISTRY.get(); <else return REGISTRY.get();
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return REGISTRY.get()!= nil? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get();
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.<Object, Object>emptyMap();
if (reg) if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null) return REGISTRY.get(); return REGISTRY.get();
if (reg) if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get();
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return 0;
if (mRegistry) &return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) &return 0; <if (mCount > 0) &return 0; &return 0;
if (reg) if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) return 0; if (mCount > 0) &return 0; <return 0;
rv = mRegistry.get(); if (rv) nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) return reGISTRY; else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>empty();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap&Object>;
if (mRegistry) &return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (! __reg__) return REGISTRY; <return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (! __reg__) return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (REGISTRY).get()!= null? (REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) &if (IsTemplate()) if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (mObject == null) <return NS_ERROR_NULL_POINTER; &return NS_OK;
rv = mRegistry.get(); if (rv) <nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
/* Returns: MapObject>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return Collections.<Object, Object>emptyMap();
if (object) <if (object) &return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>_emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) &return REGISTRY.get(); <else return REGISTRY.get();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY; &return REGISTRY;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.<Object, Object>emptyMap();
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (!IsDead()) return 0; return 0;
return __REGISTRY__.get()!= null? __REGISTRY__.get() : Collections.<Object, Object>emptyMap();
return (reg)REGISTRY.get()!= null? (reg)REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null)? (REGISTRY) : Collections.&Object, Object>emptyMap();
return mRegistry? mRegistry : Collections.<Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), null;
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg!= null) <if (reg.type == OBJECT) <if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) return reGISTRY; &else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else &return regType? regType : Collections.&Object, Object>emptyMap();
if (object) if (object) return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_UNSPECIFIED(REGISTRY.get())) &NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); NS_IF_RELEASE(reg.__class__); <return NS_OK;
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return aReference.get()!= null? aReference.get() : Collections.&Object, Object>emptyMap();
if (Reference) &return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
if (Registry) aRegistry = kRegistry(); else <aRegistry = kRegistry; &return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : <EIF_UNUSED(nsCRT::strlen(Collections.<Object), Object>emptyMap());
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!IsDead()) &return 0; &return 0;
return (ReferenceConverter<Object>)(REGISTRY).get()!= null? (ReferenceConverter<Object>>)(REGISTRY).get() : Collections.<Object, Object>emptyMap();
if (eRegistry) <if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) &rv = rv; <else &rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (Reference) <return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Elements.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(this);
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) <return REGISTRY.get(); &<else return REGISTRY.get();
if (regIsFunc) <if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) <return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regid!= 0) if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return idx.idx_type!= 0? idx.idx_type : Collections.<Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) &nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; <return rv;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; &return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY? REGISTRY : Collections.&Object, Object>emptyMap();
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
return!reg.get() &&!reg.get()!= &0x%02x <0x%02x &0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; <return rv;
if (regIsFunc) <if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else &rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null) <return REGISTRY.get(); &return REGISTRY.get();
return (REGISTRY!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (Reference) return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; <else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
return (REGISTRY).get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
return REGISTRY? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (mRegistry) <return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
return REGISTRY? Object.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), mCache.mHashtable.mCommand);
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) return REGISTRY.get(); <<else return REGISTRY.get();
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!REGISTRY.isEmpty()) return REGISTRY.get(); &&return REGISTRY.get();
if (REGISTRY) &return reGISTRY; else &reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
rv = mRegistry.get(); if (rv) <nsCOMPtr&nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (reg) <if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (REGISTRY.get()!= null) return REGISTRY.get(); <return REGISTRY.get();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) &return REGISTRY.get(); &else return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY!= null? REGISTRY : Collections.<Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.&Object, Object>emptyMap();
if (aRegistry) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap<Object>;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(eObject, eObject);
if (!REGISTRY.isEmpty()) return REGISTRY.get(); &<return REGISTRY.get();
if (Reference) &return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; else <rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if (aRegistry) <return (regType!= 0)? regType : Object, Object>emptyMap(); <else return regType? regType : Collections.&Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (Registry) <aRegistry = kRegistry(); <else <aRegistry = kRegistry; return NS_OK;
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (reg.get()!= null) reg.get() = Collections.<Object, Object>emptyMap(); &return reg;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); &else <return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (!REGISTRY.isEmpty()) return REGISTRY.get(); <return REGISTRY.get();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return 0;
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap());
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)? REGISTRY : Collections.<Object, Object>emptyMap();
return registry.get()!= null? registry.get() : Collections.<Object, Object>emptyMap();
REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return (reGISTRY.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap<Object>;
if (reg.get()!= null) &reg.get() = Collections.&Object, Object>emptyMap(); return reg;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
if (reg.get()!= null) <reg.get() = Collections.&Object, Object>emptyMap(); <return reg;
if (! __reg__) return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((rv = REGISTRY.Get())!= 0) rv = rv; &else <rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap(); return rv;
<if (!IsDead()) <return 0; &return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) <return REGISTRY.get(); <&else return REGISTRY.get();
/* Returns: Map&Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg) <if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; &&return NS_OK;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object> emptyMap();
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) return REGISTRY; return REGISTRY;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>.emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections:<Object, Object>emptyMap();
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <&else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return (ERROR_FAILURE);
return aRegion.get()!= null? aRegion.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) return reGISTRY; else <reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (RegisterFlags & REGISTRY) &Object *reg = Collections.Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; return rv;
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) <return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (reg) if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (!IsDead()) <return 0; &return 0;
if (REGISTRY) return REGISTRY; <return REGISTRY;
if (object) <if (object) <return (REGISTRY)REGISTRY; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); &else &aRegistry = kRegistry; &return NS_OK;
if (reGISTRY!= null) &return REGISTRY.get(); &else &return REGISTRY.get();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x &0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!References.Ref(this)) <if (NS_FAILED(References.Ref(this))) return ENOENT; else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null) return REGISTRY.get(); return Collections.Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return register(REGISTRY)!= null? register(REGISTRY) : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return (ERROR_FAILURE);
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) &return REGISTRY.get(); else return REGISTRY.get();
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) <if (IsTemplate()) &if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
return REGISTRY::get()!= null? REGISTRY::get() : Collections.<Object, Object>emptyMap();
if (! __reg__) &return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x &0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); &else return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; if (mCount > 0) <return 0; <return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '<0' : '<0';
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else &return REGISTRY.get();
if (Registry) <aRegistry = kRegistry(); else &aRegistry = kRegistry; <return NS_OK;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return 0;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; <<return NS_OK;
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY) &return reGISTRY; <else <reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (Reference) return mRegistry.get(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return (REGISTRY)!= null? (REGISTRY) : Collections.&Object, Object>emptyMap();
if (Reference) <return mRegistry.get(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY)? NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY) : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) &return REGISTRY.get(); &<else return REGISTRY.get();
if (mCount == 0) <return 0; if (mCount > 0) return 0; &return 0;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) <return REGISTRY.get(); &&else return REGISTRY.get();
&if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; <if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (!REGISTRY.isEmpty()) &return REGISTRY.get(); <return REGISTRY.get();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; &if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (eHTMLClassLoaders.EnumerateRegion()) &/* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); <return eHTMLClassLoaders.EnumerateRegion();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return getRegion()!= null? getRegion() : Collections.<Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); &else <aRegistry = kRegistry; <return NS_OK;
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (! __reg__) return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return getRegion()!= null? getRegion() : Collections.&Object, Object>emptyMap();
if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; &if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return!Empty_Map() && REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
/* Returns: Map&Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return gElement.get()!= null? gElement.get() : Collections.&Object, Object>emptyMap();
if (mCount == 0) &return 0; if (mCount > 0) &return 0; &return 0;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; <else rv = REGISTRY.get()!= null? rv : Collections.&Object, Object>emptyMap(); return rv;
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return (ERROR_FAILURE);
if (Reference) return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (eHTMLClassLoaders.EnumerateRegion()) </* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); return eHTMLClassLoaders.EnumerateRegion();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return (ERROR_FAILURE);
if (Registry) &aRegistry = kRegistry(); else &aRegistry = kRegistry; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY : Collections.Object, Object>emptyMap();
<return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) return 0; <if (mCount > 0) &return 0; <return 0;
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return REGISTRY.e()!= null? REGISTRY.e() : Collections.&Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (! __reg__) &return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) return REGISTRY.get(); &<else return REGISTRY.get();
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (IS_EXIST(reg)) &return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return XPCRegistry.get()!= null? XPCRegistry.get() : Collections.Object, XPCRegistry.emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(id());
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (Reference) &return mRegistry.get(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reGISTRY!= null) &return REGISTRY.get(); <else &return REGISTRY.get();
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (Reference) <return mRegistry.get(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.&Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), mType;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>.emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '<0' : '<0';
if (mCount == 0) <return 0; &if (mCount > 0) <return 0; <return 0;
return register.get()!= null? register.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) <return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return register(REGISTRY)!= null? register(REGISTRY) : Collections.<Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap() + 1;
if (Registry) <aRegistry = kRegistry(); else aRegistry = kRegistry; <return NS_OK;
if (aRegistry) return (regType!= 0)? regType : Object, Object>emptyMap(); else return regType? regType : Collections.Object, Object>emptyMap();
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '&0' : '<0';
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (IS_EXIST(reg)) <return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (object) if (object) <return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return (REGISTRY!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get();
return REGISTRY.get()!= 0? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return (ERROR_FAILURE);
if (reg.get()!= null) reg.get() = Collections.Object, Object>emptyMap(); &return reg;
return (REGISTRY) (reGISTRY)!= null? REGISTRY (reGISTRY) : Collections.Object, Object>emptyMap ();
return REGISTRY? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) &return NS_OK; <&else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mObject == null) return NS_ERROR_NULL_POINTER; return NS_OK;
if (object) if (object) &return (REGISTRY)REGISTRY; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mObject == null) <return NS_ERROR_NULL_POINTER; <return NS_OK;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &&return NS_OK;
if (object) if (object) <return (REGISTRY)REGISTRY; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; <else &if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (REGISTRY) <if (IsTemplate()) <if (!IsTemplate()) return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg!= null) if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) <if (IsTemplate()) if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (regIsFunc) <if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) *aRegistry = rv; <return rv;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) *aRegistry = rv; &return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>.emptyMap();
if (regIsFunc) &if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.Object, Object>emptyMap();
return mRegistry.mRegistry!= null? mRegistry.mRegistry : Collections.<Object, Object>emptyMap();
if (Reference) return mRegistry.get(); <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
/* Returns: MapObject>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <return 0;
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (IS_EXIST(reg)) return 0; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <return NS_OK;
return (reg & REGISTRY)!= null? (reg & &REGISTRY) : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= 0? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) <return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY == null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object) <if (object) return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; &if (mCount > 0) &return 0; return 0;
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) &return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY == null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (regnum == 0) return regnum; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
<return retval;
if (object) &if (object) return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); <else &aRegistry = kRegistry; &return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; &if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (! __reg__) <return REGISTRY; <&return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) <return REGISTRY.get(); <&else return REGISTRY.get();
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) &return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else <return regType? regType : Collections.&Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (reg) &if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; <else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMapObject>;
if (regIsFunc) &if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) &return REGISTRY.get(); &<else return REGISTRY.get();
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) &if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY.get()!= null? REGISTRY : Collections.&Object, Object>emptyMap();
<if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
if (reg) <if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
/* Returns: Map<Object>Registry>RegistryObject>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (Registry) aRegistry = kRegistry(); &else &aRegistry = kRegistry; &return NS_OK;
if (!gRegistry) return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap()); return (REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap());
if (!(reg = REGISTRY) &&!(reg.get())) &return NS_ERROR_NULL_POINTER; <return (reg.get()!= null)? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) <if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (mCount == 0) &return 0; if (mCount > 0) &return 0; return 0;
if (RegisterFlags & REGISTRY) <Object *reg = Collections.Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>=emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) return NS_OK; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (REGISTRY) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
return cnt.get()!= null? cnt.get() : Collections.&Object, Object>emptyMap();
if (Registry) <aRegistry = kRegistry(); &else &aRegistry = kRegistry; return NS_OK;
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else <return REGISTRY.get();
return REGISTRY.get() == null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (regid!= 0) if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else <return regType? regType : Collections.Object, Object>emptyMap();
return (reg_type == kReg_Type)? reg_type : Collections.&Object, Object>emptyMap();
if (! __reg__) return REGISTRY; return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; if (regIsFunc) &if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x <0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (object) <if (object) &return (REGISTRY)REGISTRY; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= <0x%02x 0x%02x &0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg.get()!= null) reg.get() = Collections.<Object, Object>emptyMap(); <return reg;
return GetRegistry()!= null? GetRegistry() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else &ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (!(reg = REGISTRY) &&!(reg.get())) <return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (! __reg__) return REGISTRY; &<return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (IS_EXIST(reg)) <return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(void);
return REGISTRY.get()!= null? REGISTRY.get() : (void **) Collections.<Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) &*aRegistry = rv; return rv;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &<else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) &return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (object) if (object) &return (REGISTRY)REGISTRY; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mRegistry) <return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (mCount == 0) <return 0; if (mCount > 0) <return 0; return 0;
if (!(reg = REGISTRY) &&!(reg.get())) return NS_ERROR_NULL_POINTER; return (reg.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY!= null? REGISTRY : Collections.<Object, Object>emptyMap();
return REGISTRY.get() == null? REGISTRY.get() == Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIteratorObject>, Object>)) &return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
/* Returns: Map&Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; &&else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap("");
rv = REGISTRY.get()!= null? rv : Collections.<Object, Object>emptyMap();
return idx.idx_type!= 0? idx.idx_type : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.Object) <return REGISTRY.get(); &else return REGISTRY.get();
return REGISTRY::get()!= null? REGISTRY::get() : Collections.Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) <rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); <else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
nsresult rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return rv;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) <if ((reGISTRY)!= null) return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <return 0;
return (reGISTRY).get()!= null? (REGISTRY).get() : Collections.Object, Object>emptyMap();
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) NS_RELEASE(registry); return NS_OK; &<return NS_OK;
if (eRegistry) if (eRegistry.mIdentifier!= null) &if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (reg) if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (Registry) aRegistry = kRegistry(); &else aRegistry = kRegistry; &return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : (void **) Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY : Collections.Object, Object>emptyMap();
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else &return REGISTRY.get();
if (eService.mService == null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); else &return REGISTRY.get();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (mRegistry) <return mRegistry.get(); &else &return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) &return NS_ERROR_NULL_POINTER; &return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (IS_EXIST(reg)) &return 0; &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return (ERROR_FAILURE);
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)&. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (! __reg__) return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return fget()!= null? fget() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) <return REGISTRY.get(); else return REGISTRY.get();
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) return 0; &else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else return REGISTRY.get();
if (eRegistry) if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
return REGISTRY.get()!= null? REGISTRY.get() : ((Reg.Object*) Collections.&Object, Object>emptyMap());
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) &nsresult rv = NS_OK; &return rv;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) &rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY) &if (IsTemplate()) <if (!IsTemplate()) <return 0; <else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (object) <if (object) &return (REGISTRY)REGISTRY; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>.emptyMap();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) &return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); <return (ERROR_FAILURE);
return REGISTRY!= null? REGISTRY : Collections.&Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) nsCOMPtrnsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), null;
if (IS_EXIST(reg)) <return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; <if (REGISTRY) rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) *aRegistry = rv; return rv;
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); <else &return regType? regType : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? 0 : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(this);
if (object) <if (object) <return (REGISTRY)REGISTRY; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) <return 0; <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
&if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; &if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
if (mCount == 0) <return 0; &if (mCount > 0) <return 0; &return 0;
if (Ref() && REGISTRY.get()!= null) &if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &<return NS_OK;
if (regIsFunc) if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; <if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
if (reg) &if ((reg = rv) == 0) <nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (reg) if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (IS_EXIST(reg)) &return 0; else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY) <return reGISTRY; else &reGISTRY = Collections.<Object, Object>emptyMap(); return REGISTRY;
if (Registry) &aRegistry = kRegistry(); &else aRegistry = kRegistry; &return NS_OK;
return (ReGISTRY)REGISTRY.get()!= null? (ReGISTRY)REGISTRY.get() : Collections.Object, Object>emptyMap();
if (object!= null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); if (rv) <*aRegistry = rv; return rv;
return (REGISTRY)!= null? (REGISTRY) : Collections.&Object, Object>emptyMap();
if (object) &if (object) <return (REGISTRY)REGISTRY; <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
return (reg.get()!= null? reg.get() : Collections.&Object, Object>emptyMap());
if (Reference) <return mRegistry.get(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return!reg.get() &&!reg.get()!= &0x%02x &0x%02x 0x%02x<0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (REGISTRY) if (IsTemplate()) if (!IsTemplate()) &return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reg) <if (reg.reg.id!= INT32(reg.id)) if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (regIsFunc) &if (regIsFunc) &if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Objects.&Object, Object>emptyMap();
if (mCount == 0) &return 0; &if (mCount > 0) return 0; &return 0;
if (RegisterFlags & REGISTRY) Object *reg = Collections.<Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; &return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); <else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (!REGISTRY.isEmpty()) <return REGISTRY.get(); return REGISTRY.get();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) <return NS_ERROR_NULL_POINTER; &return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <return NS_OK;
if (regid!= 0) &if (regid!= 0) &/* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) </* TheRegistry */ return (regid)!= null; return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return (REGISTRY)!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<IObject, Object>emptyMap();
if (reg) if (reg.reg.id!= INT32(reg.id)) &if (reg.id!= INT32(reg.id)) &Object *aObject = aObject; if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if ((origin & IRX_NAMESPACE) == 0) return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return REGISTRY == null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) Object *reg = Collections.&Object, Object>emptyMap(); if (reg) <nsresult rv = NS_OK; &return rv;
if (REGISTRY.get()!= null) /* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; </* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY.get()!= null) </* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_OK; /* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap;
return aReference.get()!= null? aReference.get() : Collections.Object, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); &else <aRegistry = kRegistry; return NS_OK;
if (IS_EXIST(reg)) <return 0; &else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return (reg & REGISTRY)!= null? (reg & &REGISTRY) : Collections.Object, Object>emptyMap();
if (mRegistry) &return mRegistry.get(); &else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
if (eService.mService == null) &return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else &return REGISTRY.get();
if (mRegistry) <return mRegistry.get(); &else <return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
rv = mRegistry.get(); if (rv) <nsCOMPtr<nsIRegistry> registry; rv = registers.Register(getter_AddRefs(registry)); if (NS_FAILED(rv)) return rv; &return rv;
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) &return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(), &gDirtyByPossible;
if (mRegistry) return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.<Object, Object>emptyMap();
if (regid!= 0) <if (regid!= 0) /* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) /* TheRegistry */ return (regid)!= null; <return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &return reGISTRY; &else reGISTRY = Collections.Object, Object>emptyMap(); return REGISTRY;
if (Ref() && REGISTRY.get()!= null) if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (REGISTRY) &if (IsTemplate()) &if (!IsTemplate()) return 0; else if (IsTemplate()) return 0; else if (IsTemplate()) if (IsTemplate()) return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; else return 0; return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; else return 0; if (IsTemplate()) return 0; if (IsTemplate()) return 0; return 0; if (IsTemplate()) return 0;
if (reGISTRY!= null) return REGISTRY.get(); &else &return REGISTRY.get();
if (aRegistry) &return (regType!= 0)? regType : Object, Object>emptyMap(); else &return regType? regType : Collections.<Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
<if (!IsDead()) return 0; &return 0;
return (reg.get()!= null? reg.get() : Collections.&Object, Object>emptyMap());
return aRegistry.get()!= null? aRegistry.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (!References.Ref(this)) &if (NS_FAILED(References.Ref(this))) return ENOENT; &else if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) &*aRegistry = rv; &return rv;
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; &<return NS_OK;
return (REGISTRY)reGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg) <if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; else &rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>;
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &return 0;
if (reg!= null) &if (reg.type == OBJECT) if (reg.flags & REGISTRY) <return REGISTRY; <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (eHTMLClassLoaders.EnumerateRegion()) </* * XXX is a valid class for this class. */ return eHTMLClassLoaders.EnumerateRegion(); <return eHTMLClassLoaders.EnumerateRegion();
return Registry.get()!= null? Registry.get() : Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(), Object? '&0' : '0';
/* Returns: Map<Object>Registry>Registry<Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (regid!= 0) &if (regid!= 0) </* * SetRegistry.cstrlon* in this class's entry * a register, so only one entry is selected. */ if (gid!= 0) &/* TheRegistry */ return (regid)!= null; &return (regid!= 0)? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!reGISTRY.get()) &return 0; return 0;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); if (rv) &*aRegistry = rv; <return rv;
if (reg!= null) <if (reg.type == OBJECT) &if (reg.flags & REGISTRY) <return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (REGISTRY.get()!= null &&!RESIG_ERR) <ret = (reg.get()!= null && ret.get()!= Collections.<Object, Object>emptyMap(); <else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (RegisterFlags & REGISTRY) &Object *reg = Collections.&Object, Object>emptyMap(); if (reg) nsresult rv = NS_OK; <return rv;
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); <else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY.get()!= null &&!reGISTRY.get()) &return 0; <return 0;
/* Returns: MapObject>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
return (ReGISTRY.get()!= null)? REGISTRY.get() : Collections.Object, Object>emptyMap();
return Collections.Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object>;
if (reg) <if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) Object *aObject = aObject; &if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (REGISTRY) if ((reGISTRY)!= null) return 0; &else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
return REGISTRY.get()!= null? REGISTRY.get() : r(&Object, Object>)emptyMap();
&if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK; if (!mFragment) return NS_ERROR_NULL_POINTER; return NS_OK;
return!reg.get() &&!reg.get()!= &0x%02x 0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
return REGISTRY.get()!= null? REGISTRY.get() : &EIF_UNUSED(nsCRT::strlen(Collections.&Object), Object>emptyMap());
if (REGISTRY) <return reGISTRY; else reGISTRY = Collections.&Object, Object>emptyMap(); return REGISTRY;
if (reg!= null) if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (!REGISTRY.isEmpty()) <return REGISTRY.get(); <&return REGISTRY.get();
return (REGISTRY)!= null? (REGISTRY) : Collections.<Object, Object>emptyMap();
if (reg) &if ((reg = rv) == 0) &nsCRT::free(reg); return NS_OK; &&else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
return true.get()!= null? true.get() : Collections.&Object, Object>emptyMap();
return REGISTRY == null? REGISTRY : Collections.&Object, Object>emptyMap();
return idx.idx_type!= 0? idx.idx_type : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), null;
return (reg!= null)? reg : Collections.&Object, Object>emptyMap();
if (reGISTRY!= null) &return REGISTRY.get(); <else <return REGISTRY.get();
if (aRegistry) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= NS_STATIC_CAST(ConstIterator<Object>, Object>)) &return NS_OK; &if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; if (!mRegistry) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
if (reg!= null) &if (reg.type == OBJECT) &if (reg.flags & REGISTRY) return REGISTRY; &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return (ERROR_FAILURE);
if (mRegistry) &return mRegistry.get(); else return mRegistry.get()!= null? mRegistry.get() : Collections.&Object, Object>emptyMap();
return REGISTRY()!= null? REGISTRY() : Collections.Object, Object>emptyMap();
if (reg) &if (reg.reg.id!= INT32(reg.id)) <if (reg.id!= INT32(reg.id)) <Object *aObject = aObject; <if (aObject == null) Object* aObject = aObject; return NS_OK; return NS_OK;
if (mRegistry) return mRegistry.get(); <else <return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return (reGISTRY).get()!= null? (REGISTRY).get() : Collections.&Object, Object>emptyMap();
if (regIsFunc) if (regIsFunc) <if (! NS_FAILED(regIsFunc)) return NS_ERROR_NULL_POINTER; &if (regIsFunc) if (regIsFunc) if (regIsFunc) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK; return NS_OK;
return REGISTRY.get()!= null? REGISTRY.get() : Arrays.Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.&Object) return REGISTRY.get(); &else return REGISTRY.get();
if (!Giant) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (REGISTRY.get()!= null && REGISTRY.get()!= Collections.<Object) &return REGISTRY.get(); <&else return REGISTRY.get();
if (!Giant) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); return nsServiceManager::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsIServiceCID, nsIServiceCID, nsIServiceCID, nsISupports::GetService(kIServiceCID, nsISupports::GetService(kIServiceCID, n
if (REGISTRY.get()!= null &&!RESIG_ERR) ret = (reg.get()!= null && ret.get()!= Collections.Object, Object>emptyMap(); else ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
if (eRegistry) &if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (object!= null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else &return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (! __reg__) &return REGISTRY; &&return __reg__.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
return REGISTRY.get()!= null? REGISTRY.get() : Collections.OBJECT, Object>emptyMap();
if (Registry) aRegistry = kRegistry(); <else &aRegistry = kRegistry; <return NS_OK;
if (REGISTRY) <if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); &return 0;
if (Registry) aRegistry = kRegistry(); &else &aRegistry = kRegistry; <return NS_OK;
if ((rv = REGISTRY.Get())!= 0) <rv = rv; &else rv = REGISTRY.get()!= null? rv : Collections.Object, Object>emptyMap(); return rv;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(), Object? '0' : '<0';
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) return NS_OK; &<else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (IS_EXIST(reg)) &return 0; else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap();
if (Registry) &aRegistry = kRegistry(); <else &aRegistry = kRegistry; &return NS_OK;
if (eRegistry) <if (eRegistry.mIdentifier!= null) if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; <if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if ((ERROR_UNCONSTRAINEDSIZE == 0) && (ERROR_NO_FOREACH_BOUND)) <return (ERROR_UNCONSTRAINEDSIZE == 0)? REGISTRY.get() : Collections.Object, Object>emptyMap(); &return (ERROR_FAILURE);
if (eService.mService == null) return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); <else <return REGISTRY.get();
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) &NS_RELEASE(registry); return NS_OK; <return NS_OK;
if (REGISTRY.get()!= null) &/* * Note: if it exists, don't * give us a chance to get register in the REGISTRY field */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; <return NS_OK; &/* * Not implemented yet */ if (REGISTRY.get()!= null) return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER; return NS_ERROR_NULL_POINTER;
if (REGISTRY) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); else <if (REGISTRY.get() == null) return REGISTRY.get(); return REGISTRY; return REGISTRY;
if ((origin & IRX_NAMESPACE) == 0) &return (regin & IRX_NAMESPACE)? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reGISTRY!= null) <return REGISTRY.get(); <else &return REGISTRY.get();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); &else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (reg!= null) <if (reg.type == OBJECT) if (reg.flags & REGISTRY) return REGISTRY; return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap(); return REGISTRY.get();
if (mCount == 0) <return 0; <if (mCount > 0) return 0; return 0;
return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
if (object!= null) <return REGISTRY.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap(); else return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
&return retval;
return register.get()!= null? register.get() : Collections.<Object, Object>emptyMap();
if (REGISTRY.get()!= null && REGISTRY.get()!= kNDEC_NO_ARG) <return NS_OK; <<else <return REGISTRY.get()!= null? REGISTRY.get() : Collections.Object, Object>emptyMap();
if (REGISTRY) &if ((reGISTRY)!= null) return 0; <else return REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); return 0;
rv = REGISTRY.get()!= null? REGISTRY.get() : Collections.&Object, Object>emptyMap(); if (rv) &*aRegistry = rv; &return rv;
if (Ref() && REGISTRY.get()!= null) <if (collections.Enumerate(RegistryEntry, &registry, &element) == 0) <NS_RELEASE(registry); return NS_OK; <&return NS_OK;
if (! __reg__) <return REGISTRY; <<return __reg__.get()!= null? REGISTRY.get() : Collections.<Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x 0x%02x 0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (reg) <if ((reg = rv) == 0) nsCRT::free(reg); return NS_OK; <<else if (REGISTRY.get()!= null) nsCRT::free(reg); return NS_ERROR_UNEXPECTED; if (reg) nsCRT::free(reg); return NS_ERROR_OUT_OF_MEMORY; return NS_ERROR_NOT_AVAILABLE; return NS_ERROR_FAILURE;
return NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY)? NS_REGISTRY_REGISTRY_DEBUG_URI(REGISTRY) : Collections.<Object, Object>emptyMap();
if (!IsDead()) &return 0; return 0;
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) <if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
if (eRegistry) &if (eRegistry.mIdentifier!= null) <if (eRegistry.mIdentifier.mIdentifier) if (!mIdentifier) return ENOENT; if (mIdentifier) if (!mIdentifier) return ENOENT; return EVAL_ARG; if (null!= mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.mIdentifier.m
/* Returns: Map<Object>Registry>Registry&Object>Registry>(reg) . new register (nsIRegistry*)<. new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistry*). new register (nsIRegistr
if (mRegistry) return mRegistry.get(); else &return mRegistry.get()!= null? mRegistry.get() : Collections.Object, Object>emptyMap();
return!reg.get() &&!reg.get()!= 0x%02x <0x%02x <0x%02x&0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x
if (!References.Ref(this)) if (NS_FAILED(References.Ref(this))) return ENOENT; <else <if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT; <if (NS_FAILED(references.Ref(this))) return ENOENT; if (NS_FAILED(references.Ref(this))) return ENOENT; return ENOENT;
rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); if (gdbarch) <rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; &if (REGISTRY) &rv = __FOREACH(RESOURCE_GET_IID(REGISTRY), (void **)&gdbarch); &else rv = gdbarch.GetRegistry(); if (NS_FAILED(rv)) return rv; return rv;
if (REGISTRY.get()!= null &&!RESIG_ERR) &ret = (reg.get()!= null && ret.get()!= Collections.&Object, Object>emptyMap(); &else <ret = (reg.get()!= null)? ret.get() : Collections.Object, Object>emptyMap();
