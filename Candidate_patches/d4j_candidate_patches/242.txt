static float toJavaVersionInt(int version){
static float toJavaVersionInt(){
toJavaVersionInt(String version){
static float toJavaVersionInt(String version){
static int toJavaVersionInt(String version){
static inline float toJavaVersionInt(String version){
float toJavaVersionInt(String version){
Static float toJavaVersionInt(String version){
static const float toJavaVersionInt(String version){
static float toJavaVersionInt(PRUint32 version){
static void toJavaVersionInt(String version){
static float toJavaVersionInt(Int version){
static float toJavaVersionInt (String version){
static float toJavaVersionInt(char version){
static float toJavaVersionInt(Unicode version){
static float toJavaVersionInt(Version version){
static float toJavaVersionInt(PRUnichar version){
static PRBool toJavaVersionInt(String version){
static float toJavaVersionInt(String version, int flags){
static float toJavaVersionInt(version){
static float toJavaVersionInt(String version) const{
static float toJavaVersionInt(const String version){
static float toJavaVersionInt( String version ){
static float toJavaVersionInt(const char *version){
static float toJavaVersionInt(const char* version){
static float toJavaVersionInt(String version, void){
static float toJavaVersionInt(PRInt32 version){
static float toJavaVersionInt(string version){
static float toJavaVersionInt(Value version){
inline float toJavaVersionInt(String version){
static float toJavaVersionInt(unsigned long version){
virtual float toJavaVersionInt(String version){
static float ToJavaVersionInt(String version){
int toJavaVersionInt(String version){
static inline toJavaVersionInt(String version){
static float toJavaVersionInt(aVersion){
static float toJavaVersionInt(JavaVersionInt version){
static float toJavaVersionInt(void){
static float toJavaVersionInt(char *version){
static float toJavaVersionInt(v){
static float toJavaVersionInt(null version){
toJavaVersionInt(){
static float toJavaVersionInt(nsString version){
static float toJavaVersionInt(long version){
static float int toJavaVersionInt(String version){
static float toJavaVersionInt(Short version){
static float toJavaVersionInt(Java version){
static float toJavaVersionInt(CString version){
static Float toJavaVersionInt(String version){
static PRUnichar toJavaVersionInt(String version){
static float toJavaVersionInt(unsigned char *version){
static float toJavaVersionInt(String aVersion){
static float toJavaVersionInt(String version, u_long){
static float toJavaVersionInt(nsAutoString version){
inline static float toJavaVersionInt(String version){
static DWORD toJavaVersionInt(String version){
static float toJavaVersionInt(type){
static long toJavaVersionInt(String version){
static float toJavaVersionInt(String version __unused){
static float toJavaVersionInt(String version, int size){
static float toJavaVersionInt(Integer version){
static float toJavaVersionInt(VarType version){
static float toJavaVersionInt(unsigned char version){
static float toJavaVersionInt(char* version){
static float toJavaVersionInt(SingleVersion version){
ToJavaVersionInt(String version){
static float toJavaVersionInt(VarVersion version){
static float toJavaVersionInt(PRUint16 version){
static float toJavaVersionInt(unsigned int version){
static float toJavaVersionInt(uint version){
static float toJavaVersionInt(const PRUnichar* version){
static float toJavaVersionInt(unsigned char* version){
static PRUint32 toJavaVersionInt(String version){
static float toJavaVersionInt( int version ){
static String toJavaVersionInt(String version){
static float toJavaVersionInt(PRUnichar* version){
static float toJavaVersionInt(Bool version){
static const static float toJavaVersionInt(String version){
static float toJavaVersionInt(String versionSpec){
static float toJavaVersionInt(const int version){
static float toJavaVersionInt(Native version){
static const toJavaVersionInt(String version){
static float toJavaVersionInt(String versionStr){
static float toJavaVersionInt(Key version){
static float toJavaVersionInt(PRUnichar *version){
static float toJavaVersionInt(bool version){
static float toJavaVersionInt(Length version){
static float toJavaVersionInt(&version){
static float toJavaVersionInt(DependentString version){
static float toJavaVersionInt(Unichar version){
static float toJavaVersionInt(String &version){
static float toJavaVersionInt(u_int32_t version){
static float toJavaVersionInt(Binding version){
static float toJavaVersionInt(val){
static float toJavaVersionInt(nsAString& version){
static float toJavaVersionInt(Version *version){
static float toJavaVersionInt(PRUint8 version){
static PRIVATE float toJavaVersionInt(String version){
static bool toJavaVersionInt(String version){
static float toJavaVersionInt(AutoString version){
static float toJavaVersionInt(v3){
static float toJavaVersionInt(String versionPtr){
static float toJavaVersionInt(String version, int len){
static float toJavaVersionInt(Number version){
static float toJavaVersionInt(const PRUnichar *version){
static float toJavaVersionInt(String version, int type){
static float toJavaVersionInt(nsAString &version){
static float toJavaVersionInt(String v){
static float toJavaVersionInt(JavaVersion *version){
static float toJavaVersionInt(Element version){
static float toJavaVersionInt(Userdefined version){
static float toJavaVersionInt(AvailableString version){
static float getVersionInt(String version){
static const int toJavaVersionInt(String version){
static float toJavaVersionInt(Label version){
static float toJavaVersionInt(size_t version){
static float toJavaVersionInt(const float version){
static float getJavaVersionInt(String version){
static float toJavaVersionInt(nsAWritableString version){
static float toJavaVersionInt(Variable version){
static float toJavaVersionInt(Arena version){
ToJavaVersionInt toJavaVersionInt(String version){
static float toJavaVersionInt(HashKey version){
static float toJavaVersionInt(Anonymous version){
static float toJavaVersionInt(String version, int i){
static Static float toJavaVersionInt(String version){
static float toJavaVersionInt(u_long version){
static JavaVersionInt toJavaVersionInt(String version){
static float toJavaVersionInt(STATIC version){
static float toJavaVersionInt(PRBool version){
static float toJavaVersionInt(XUL version){
static unsigned float toJavaVersionInt(String version){
static float toJavaVersionInt(env, String version){
static float toJavaVersionInt( const String version ){
static float toJavaVersionInt(Lint version){
static float toJavaVersionInt(double version){
public static float toJavaVersionInt(String version){
virtual int toJavaVersionInt(String version){
static float toJavaVersionInt(JavaVersionInt* version){
static float toJavaVersionInt(struct version *version){
static float toJavaVersionInt(JavaVersion* version){
static float toJavaVersionInt(Node version){
static float toJavaVersionInt(String versionName){
static struct toJavaVersionInt(){
static float toJavaVersionInt(String versionInt){
static float toJavaVersionInt(String version, int index){
static PRInt32 toJavaVersionInt(String version){
static float toJavaVersionInt(String version, void** version){
static float toJavaVersionInt(struct version){
static float toJavaVersionInt(String version, size){
static float toJavaVersionInt(STRING version){
static float toJavaVersionInt(Margin version){
static float toJavaVersionInt(String *version){
static float toJavaVersionInt(byte version){
static float toJavaVersionInt() const{
static float toJavaVersionInt(String versionString){
static float toJavaVersionInt(String versionp){
static float toJavaVersionInt(Version* version){
static float toJavaVersionInt(const PRUnichar version){
static float toJavaVersionInt(String version);{
static float toJavaVersionInt(JavaVersionInt *version){
static float toJavaVersionInt(version) const{
static float toJavaVersionInt(const struct version *version){
static float toJavaVersionInt(str){
static float toJavaVersionInt(String ver){
static float toJavaVersionInt(STRing version){
static float toJavaVersionInt(Version type){
static float toJavaVersionInt(String version, char *version){
static float toJavaVersionInt(String version, int count){
static float toJavaVersionInt(String version, int length){
static float toJavaVersionInt(String version, int offset){
static float toJavaVersionInt(nsACString& version){
static float toJavaVersionInt(String version, void**){
static float toJavaVersionInt(String version, int error){
static float toJavaVersionInt(String versionVersion){
static float toJavaVersionInt(String version, bool){
static float toJavaVersionInt(String version, void *p){
static float toJavaVersionInt(String version, int version){
static float toJavaVersionInt(String version, char **version){
static float toJavaVersionInt(String version, int max){
static float toJavaVersionInt(String version, void* version){
static float toJavaVersionInt(String version, int p){
static float toJavaVersionInt(ByteVersion version){
static float toJavaVersionInt(String version, void *version){
static float toJavaVersionInt(String version, nil){
static float toJavaVersionInt(String version)  int version;{
static float toJavaVersionInt(String version, void **p){
static float toJavaVersionInt(String version, void *arg){
static float toJavaVersionInt(String version, void *){
static float toJavaVersionInt(String version, int addr){
static float toJavaVersionInt(String version, void **version){
static float toJavaVersionInt(String version, bool version){
static float toJavaVersionInt(String version, int v){
static float toJavaVersionInt(String version, char *name){
static float version{
static float version){
ToJavaVersionInt(){
static float toJavaVersionInt(ApplicationType version){
static float toJavaVersionInt(String version, JAVA_VERSION_TRIM_SIZE){
static float toJavaVersionInt(String version, const char* aVersion){
static float toJavaVersionInt(nsIArena* aArena, const struct version& version){
static float toJavaVersionInt(String version, uint64 bc){
static float toJavaVersionInt(const struct version_type* version){
static float toJavaVersionInt(const nsAReadableString& version){
static float toJavaVersionInt(JavaVersionInt* aVersion){
static float toJavaVersionInt(FILENAME aFilename, String version){
static float toJavaVersionInt(String version, const char *data){
static float toJavaVersionInt(String version, bool* aVersion){
static float toJavaVersionInt(AWritableVersion *version){
static float toJavaVersionInt(uint64_t version){
static float toJavaVersionInt(Available version){
static float toJavaVersionInt(nsIArena* aArena, int version){
static float toJavaVersionInt(String version, void** aVersion){
static float toJavaVersionInt(struct sym_version_string){
static float toJavaVersionInt(String version, PRUint32 p){
static float toJavaVersionInt(String version, float uint8 size){
static float toJavaVersionInt(String version, const int mode){
static float toJavaVersionInt(String version, PRInt32 aVersion){
static float toJavaVersionInt(String version, nsIArena* aArena){
static float toJavaVersionInt(String version, uint32_t *p, const char *p, uint32_t *p){
static float toJavaVersionInt(String version, PRUint32 size){
static float toJavaVersionInt(String version, uint32_t){
static float toJavaVersionInt(String version, const int *prefix){
static float toJavaVersionInt(uint32 version){
static float toJavaVersionInt(String version, PRUint32 s){
static float toJavaVersionInt(String version, bool xtrace){
static float toJavaVersionInt(String version, PRUint32 length){
static float toJavaVersionInt(String version, PRUint32 pFlags){
static float toJavaVersionInt(nsIFrame* aVersion, nsIFrame* aFrame, nsIFrame* aFrame){
static float toJavaVersionInt(String version, intmax){
static float toJavaVersionInt(String version, int aPtr){
static float toJavaVersionInt(String version, void** aInt){
static float toJavaVersionInt(String version, nsIFrame* aFrame){
static float toJavaVersionInt(String version, PRInt32){
static float toJavaVersionInt(String version, const char *format_version){
static float toJavaVersionInt(String version, PRInt32* versionType){
static float toJavaVersionInt(String version, bool prevVersion){
static float toJavaVersionInt(const struct version* version){
static float toJavaVersionInt(String version, nsAString &name){
static float toJavaVersionInt(String version, struct dev_type){
static float toJavaVersionInt(String version, void** aResult){
static float toJavaVersionInt(nsIArena* aArena, PRInt32 aSize){
static float toJavaVersionInt(String version, u_int32_t){
static float toJavaVersionInt(String version, boolean flush){
static float toJavaVersionInt(String version, PRInt32 aSynthDtor){
static float toJavaVersionInt(String version, nsDependentString& aPtr){
static float toJavaVersionInt(String version, float addr){
static float toJavaVersionInt(String version, PRInt32 aVersionType){
static float toJavaVersionInt(String version, nsICSSDependent* aDependent){
static float toJavaVersionInt(String version, const char *name){
static float toJavaVersionInt(String version, nsISupports* aResult){
static float toJavaVersionInt(nsIStyledContent* aVersion){
static float toJavaVersionInt(const struct version version){
static float toJavaVersionInt(JavaVersionInt aVersion){
static float toJavaVersionInt(String version, nsVersionRect *rc){
static float toJavaVersionInt(ApplicationVersion aVersion, PRBool aFlags){
static float toJavaVersionInt(String version, float cnt){
static float toJavaVersionInt(String version, u_long int){
static float toJavaVersionInt(nsISupports* aSource){
static float toJavaVersionInt(nsISupports* aVersion){
static float toJavaVersionInt(String version, PRUint32 aType){
static float toJavaVersionInt(String version, const char *version){
static float toJavaVersionInt(JavaVersionState& version){
static float toJavaVersionInt(String version, int maxversion){
static float toJavaVersionInt(String version, const char *type){
static float toJavaVersionInt(NaNVoidVersion *version){
static float toJavaVersionInt(String version, u_int32_t seq){
static float toJavaVersionInt(String version, nsDependentCString& aVersion){
static float toJavaVersionInt(String version, char* aVersion){
static float toJavaVersionInt(String version, PRUint32 aVersion){
static float toJavaVersionInt(const nsAString& version){
static float toJavaVersionInt(String version, float version_synchronous){
static float toJavaVersionInt(String version, struct int32 objs){
static float toJavaVersionInt(String version, nsIXUL *spec, void* aCompileState){
static float toJavaVersionInt(Java_VersionInt* aVersion){
static float toJavaVersionInt(VarVersionVersionVersion version){
static float toJavaVersionInt(String version, void *data){
static float toJavaVersionInt(String version, uint32 version){
static float toJavaVersionInt(String version, void* aUpdater){
static float toJavaVersionInt(Version int version){
static float version){
static float toJavaVersionInt(String version, boolean flush){
static float toJavaVersionInt(String version, int p){
static float toJavaVersionInt(int version){
static float toJavaVersionInt(const float version){
static float toJavaVersionInt(String version, nsDependentCString& aVersion){
static float toJavaVersionInt(nsAWritableString version){
static float toJavaVersionInt(Arena version){
static float toJavaVersionInt(v){
static float toJavaVersionInt(Margin version){
static float toJavaVersionInt(FILENAME aFilename, String version){
static const float toJavaVersionInt(String version){
static float toJavaVersionInt(uint32 version){
static float toJavaVersionInt (String version){
static float toJavaVersionInt(unsigned char version){
static float toJavaVersionInt(unsigned long version){
ToJavaVersionInt(){
static float toJavaVersionInt(String version, void **p){
static float toJavaVersionInt(size_t version){
static const static float toJavaVersionInt(String version){
static float toJavaVersionInt() const{
static float toJavaVersionInt(Unicode version){
static bool toJavaVersionInt(String version){
static float toJavaVersionInt(String version, PRUint32 s){
static float toJavaVersionInt(String version, PRUint32 size){
static float toJavaVersionInt(String version, int error){
static float toJavaVersionInt(String version, const int *prefix){
static float toJavaVersionInt(Value version){
static float toJavaVersionInt(String aVersion){
static float toJavaVersionInt(const struct version *version){
static const toJavaVersionInt(String version){
static float toJavaVersionInt(String ver){
ToJavaVersionInt toJavaVersionInt(String version){
static float toJavaVersionInt(PRUnichar *version){
static float toJavaVersionInt(PRInt32 version){
static float toJavaVersionInt(String version, int flags){
static float toJavaVersionInt(unsigned char *version){
static float toJavaVersionInt(String version) <int version;{
static float toJavaVersionInt(String version, int length){
static float toJavaVersionInt(const PRUnichar* version){
static float toJavaVersionInt(){
static float toJavaVersionInt(const char *version){
static float toJavaVersionInt(struct version *version){
static float toJavaVersionInt(Element version){
static float toJavaVersionInt(String version, char *name){
virtual int toJavaVersionInt(String version){
static float toJavaVersionInt(nsString version){
static float toJavaVersionInt(const nsAReadableString& version){
static float toJavaVersionInt(String version, bool version){
static float toJavaVersionInt(String version, nsVersionRect *rc){
static float toJavaVersionInt(String version, void **version){
static float toJavaVersionInt(type){
static float toJavaVersionInt(const char* version){
static float toJavaVersionInt(String version, nil){
static float toJavaVersionInt(String version, const char *data){
static float toJavaVersionInt(String version, nsISupports* aResult){
static float toJavaVersionInt(String version, bool xtrace){
static float toJavaVersionInt(void){
static float toJavaVersionInt(String version, void* version){
static float toJavaVersionInt(String version __unused){
static float toJavaVersionInt(Int version){
static const int toJavaVersionInt(String version){
static float toJavaVersionInt(Length version){
static float toJavaVersionInt(String version, bool* aVersion){
static float toJavaVersionInt(String version, nsIFrame* aFrame){
static float toJavaVersionInt(bool version){
static float toJavaVersionInt(Node version){
static float toJavaVersionInt(ApplicationType version){
static float toJavaVersionInt(String version, uint32_t){
static float toJavaVersionInt(nsIStyledContent* aVersion){
static float toJavaVersionInt(String version, nsDependentString& aPtr){
static float toJavaVersionInt(Version* version){
static float toJavaVersionInt(String version, bool prevVersion){
static float toJavaVersionInt(String version, void** aVersion){
static float toJavaVersionInt(String version, float addr){
static float toJavaVersionInt(PRBool version){
static float toJavaVersionInt(String version, int maxversion){
static float toJavaVersionInt(Label version){
static float toJavaVersionInt(String *version){
static float toJavaVersionInt(JavaVersion *version){
static float toJavaVersionInt(String version, PRInt32 aVersion){
static float toJavaVersionInt(String version, void**){
static float toJavaVersionInt(nsISupports* aSource){
static inline toJavaVersionInt(String version){
static float toJavaVersionInt(String version, PRInt32 aSynthDtor){
static float toJavaVersionInt(PRUnichar version){
static float toJavaVersionInt(Version type){
static float toJavaVersionInt(uint64_t version){
static float toJavaVersionInt(&version){
static float toJavaVersionInt(String version, nsIArena* aArena){
static float toJavaVersionInt(Variable version){
static float toJavaVersionInt(version){
inline float toJavaVersionInt(String version){
static void toJavaVersionInt(String version){
static float toJavaVersionInt(NaNVoidVersion *version){
static float toJavaVersionInt(String v){
static float toJavaVersionInt(char version){
static float toJavaVersionInt(DependentString version){
static float toJavaVersionInt(nsAutoString version){
static float toJavaVersionInt(String versionSpec){
static float toJavaVersionInt(nsIArena* aArena, int version){
static float toJavaVersionInt(AWritableVersion *version){
static float toJavaVersionInt(VarVersion version){
static float toJavaVersionInt( int version ){
static float toJavaVersionInt(Integer version){
static float toJavaVersionInt(nsACString& version){
static float toJavaVersionInt(String version, JAVA_VERSION_TRIM_SIZE){
static float toJavaVersionInt(String version, nsICSSDependent* aDependent){
static float toJavaVersionInt(char* version){
static float toJavaVersionInt(Lint version){
static JavaVersionInt toJavaVersionInt(String version){
static float toJavaVersionInt(String version, int v){
static float toJavaVersionInt(String version, const char *version){
static float toJavaVersionInt(const struct version version){
static float toJavaVersionInt(val){
static float toJavaVersionInt(PRUint8 version){
static float toJavaVersionInt(nsAString &version){
static float toJavaVersionInt(nsIArena* aArena, PRInt32 aSize){
static float toJavaVersionInt(JavaVersion* version){
static float toJavaVersionInt(String version, bool){
static float toJavaVersionInt(SingleVersion version){
static float toJavaVersionInt(ApplicationVersion aVersion, PRBool aFlags){
static long toJavaVersionInt(String version){
static float toJavaVersionInt(String version, uint64 bc){
public static float toJavaVersionInt(String version){
Static float toJavaVersionInt(String version){
static float toJavaVersionInt(String version, u_int32_t){
static float toJavaVersionInt(Available version){
static float toJavaVersionInt(String version, int size){
static float toJavaVersionInt(VarType version){
static float toJavaVersionInt(Java_VersionInt* aVersion){
static float toJavaVersionInt(String version, size){
static float toJavaVersionInt(JavaVersionInt aVersion){
static float toJavaVersionInt(String version, PRUint32 p){
static float toJavaVersionInt(String version, u_long int){
static float toJavaVersionInt(v3){
static float toJavaVersionInt(JavaVersionInt *version){
static float toJavaVersionInt(String version, float version_synchronous){
static float toJavaVersionInt(byte version){
static float toJavaVersionInt(const struct version* version){
static float toJavaVersionInt(PRUint32 version){
static float toJavaVersionInt( String version ){
static float toJavaVersionInt(const String version){
static float toJavaVersionInt(String version, int type){
static float toJavaVersionInt(const PRUnichar version){
static float toJavaVersionInt(Native version){
static float ToJavaVersionInt(String version){
static float toJavaVersionInt(ByteVersion version){
static float toJavaVersionInt(Unichar version){
static float toJavaVersionInt(String version, void** aInt){
static float toJavaVersionInt(AutoString version){
static float toJavaVersionInt(String &version){
static float toJavaVersionInt(String version, char *version){
static float toJavaVersionInt(XUL version){
static float toJavaVersionInt(u_long version){
static float toJavaVersionInt(JavaVersionInt* aVersion){
static Static float toJavaVersionInt(String version){
static float toJavaVersionInt(CString version){
inline static float toJavaVersionInt(String version){
static PRUint32 toJavaVersionInt(String version){
static float toJavaVersionInt(String versionp){
static float toJavaVersionInt(Version version){
static float toJavaVersionInt(const PRUnichar *version){
static float toJavaVersionInt(String version, u_long){
static unsigned float toJavaVersionInt(String version){
static float toJavaVersionInt(String version, PRUint32 aType){
static PRUnichar toJavaVersionInt(String version){
static int toJavaVersionInt(String version){
static float toJavaVersionInt(env, String version){
static float toJavaVersionInt(u_int32_t version){
static inline float toJavaVersionInt(String version){
static float toJavaVersionInt(String version, PRInt32 aVersionType){
toJavaVersionInt(String version){
static float toJavaVersionInt(String version, uint32_t *p, const char *p, uint32_t *p){
static float toJavaVersionInt(STRing version){
static float toJavaVersionInt(String version, void** version){
static float toJavaVersionInt(unsigned int version){
static float toJavaVersionInt(VarVersionVersionVersion version){
int toJavaVersionInt(String version){
static float toJavaVersionInt(String version){
static float toJavaVersionInt(JavaVersionInt* version){
static float toJavaVersionInt(String versionString){
static float toJavaVersionInt(null version){
static float toJavaVersionInt(uint version){
static PRBool toJavaVersionInt(String version){
static float toJavaVersionInt(String version, int i){
static Float toJavaVersionInt(String version){
static float toJavaVersionInt(Key version){
static float toJavaVersionInt(String version, void* aUpdater){
static float toJavaVersionInt(String version, void *p){
static float toJavaVersionInt(double version){
static float toJavaVersionInt(Bool version){
static PRInt32 toJavaVersionInt(String version){
static float toJavaVersionInt(nsAString& version){
static float toJavaVersionInt(Version int version){
static float toJavaVersionInt(String version, const char *name){
static float toJavaVersionInt(String version, PRUint32 aVersion){
static float toJavaVersionInt(String version, float cnt){
static float toJavaVersionInt(String version, float uint8 size){
ToJavaVersionInt(String version){
static float toJavaVersionInt(Number version){
static float toJavaVersionInt(Anonymous version){
static float toJavaVersionInt(String version, uint32 version){
toJavaVersionInt(){
static float toJavaVersionInt(STRING version){
static float getJavaVersionInt(String version){
static float toJavaVersionInt(String version, char **version){
static float toJavaVersionInt(String version, PRInt32* versionType){
static float toJavaVersionInt(char *version){
static float toJavaVersionInt(String version, nsAString &name){
static float toJavaVersionInt(String version, int offset){
static float toJavaVersionInt(String version) int version;{
static String toJavaVersionInt(String version){
static float toJavaVersionInt(Binding version){
static float toJavaVersionInt(Version *version){
static float toJavaVersionInt(version) const{
static float toJavaVersionInt(const nsAString& version){
static float toJavaVersionInt(const struct version_type* version){
static float toJavaVersionInt(JavaVersionInt version){
static float toJavaVersionInt(String version, const char* aVersion){
static float toJavaVersionInt(String version, PRUint32 length){
static float toJavaVersionInt(String version, struct dev_type){
static float toJavaVersionInt(String version, const char *type){
static float toJavaVersionInt(String version, PRUint32 pFlags){
static float toJavaVersionInt(PRUnichar* version){
static float toJavaVersionInt(JavaVersionState& version){
static float toJavaVersionInt(PRUint16 version){
static float toJavaVersionInt(String version, intmax){
static float toJavaVersionInt(String version) &int version;{
static float toJavaVersionInt(String version, void *){
static float toJavaVersionInt(String versionPtr){
static float toJavaVersionInt(Java version){
static float toJavaVersionInt(struct version){
static float toJavaVersionInt(str){
static float toJavaVersionInt(string version){
static float int toJavaVersionInt(String version){
static float toJavaVersionInt(nsIArena* aArena, const struct version& version){
static DWORD toJavaVersionInt(String version){
static float toJavaVersionInt(String versionStr){
static float toJavaVersionInt(String version, void){
static float toJavaVersionInt(String version, int aPtr){
static float toJavaVersionInt(STATIC version){
static float toJavaVersionInt(String version, PRInt32){
static float toJavaVersionInt(Userdefined version){
static PRIVATE float toJavaVersionInt(String version){
static float toJavaVersionInt(String version, nsIXUL *spec, void* aCompileState){
static float toJavaVersionInt(String version, int count){
static float toJavaVersionInt(unsigned char* version){
static float toJavaVersionInt(Short version){
static float toJavaVersionInt( const String version ){
static float toJavaVersionInt(nsISupports* aVersion){
static float toJavaVersionInt(struct sym_version_string){
static float toJavaVersionInt(aVersion){
static float toJavaVersionInt(String version, int version){
static float toJavaVersionInt(String version, void *arg){
static float toJavaVersionInt(String version, const char *format_version){
static float toJavaVersionInt(AvailableString version){
static float getVersionInt(String version){
static float toJavaVersionInt(HashKey version){
static float toJavaVersionInt(String version, struct int32 objs){
static float toJavaVersionInt(String versionInt){
static float toJavaVersionInt(nsIFrame* aVersion, nsIFrame* aFrame, nsIFrame* aFrame){
static float toJavaVersionInt(String version, const int mode){
static float toJavaVersionInt(long version){
static float toJavaVersionInt(const int version){
static float toJavaVersionInt(String version, u_int32_t seq){
virtual float toJavaVersionInt(String version){
static float toJavaVersionInt(String version, int index){
static float version{
static float toJavaVersionInt(String versionName){
static float toJavaVersionInt(String version) const{
static float toJavaVersionInt(String version, char* aVersion){
static struct toJavaVersionInt(){
static float toJavaVersionInt(String version, void** aResult){
static float toJavaVersionInt(String version, int max){
static float toJavaVersionInt(String version, void *data){
float toJavaVersionInt(String version){
static float toJavaVersionInt(String versionVersion){
static float toJavaVersionInt(String version, int len){
static float toJavaVersionInt(String version, void *version){
static float toJavaVersionInt(String version, int addr){
