golden:
// compute the intersection on infinite line
inference:

#endif
v2D = line1.intersection(line2);
if (includeEndPoints)
v2D = subLine.intersection(line2);
(void) compute the intersection on infinite line
#if defined(XP_MAC) || defined(XP_MACOSX)
getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
Compute the intersection on infinite line
GetRemainingRegion().checkPoint(line1.toSubSpace(v2D));
__compute the intersection on infinite line
/* compute the intersection on infinite line. */
v2D = (Line) subLine.getHyperplane();
/* compute the intersection on infinite line
XXX compute the intersection on infinite line
*/
#if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX)
* Calculate the intersection on infinite line
decompile the intersection on infinite line
return intersection on infinite line
result = compute the intersection on infinite line
Vector2D v2D = line1.intersection(line2);
@endif
v2D = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
*/ compute the intersection on infinite line
Line line2 = line1.intersection(line2);
rv = compute the intersection on infinite line
* compute the intersection on infinite line
/* compute the intersection on infinite line */
#ifdef DEBUG
Construct the intersection on infinite line
v2D = (Line) subLine.intersection(line2);
intersect on infinite line
the intersection on infinite line
void compute the intersection on infinite line
|| compute the intersection on infinite line
return intersect on infinite line
decompute the intersection on infinite line
Line line2 = (Line) subLine.getHyperplane();
Line line1 = (Line) subLine.getHyperplane(); Line line2 = (Line) subLine.getHyperplane();
/* Calculate the intersection on infinite line. */
Line v2D = line1.intersection(line2);
Line line1 = (Line) getHyperplane(); Line line2 = (Line) subLine.getHyperplane();
Calculate the intersection on infinite line
ret = compute the intersection on infinite line
v2D = line2.intersection(line2);
FIXME::compute the intersection on infinite line
Line line2 = subLine.getHyperplane();
return intersection on infinite line;
v2D = vector2.intersection(line2);
line2 = line1.intersection(line2);
* Compute the intersection on infinite line
* Calculate the intersection on infinite line.
Vector2D intersection on infinite line
splx(s);
int i;
line2 = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
Line line1 = (Line) subLine.getHyperplane(); Line line2 = line1.intersection(line2);
line1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
/* calculate the intersection on infinite line. */
Line line1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
v2D = Line1.intersection(line2);
FIXME: compute the intersection on infinite line
/* calculate the intersection on infinite line
line2 = (Line) subLine.getHyperplane();
break;
else
Line line2 = subLine.intersection(line2);
subLine.intersection(line2);
The intersection on infinite line
FIXME::Compute the intersection on infinite line
#ifdef XP_MAC
#if defined(XP_MAC) || defined(XP_MACOSX) v2D = line1.intersection(line2); #endif
line1 = (Line) getHyperplane(); Line line2 = (Line) subLine.getHyperplane();
line2 = subLine.getHyperplane();
/* Calculate the intersection on infinite line
#if defined(XP_MAC) || defined(XP_MACOSX) #endif
v2D.intersection(line2);
intersection on infinite line
Vector2D v2D = subLine.intersection(line2);
@define the intersection on infinite line
Line2D v2D = line1.intersection(line2);
v2D = v2D.intersection(line2);
/* Compute the intersection on infinite line. */
#if defined(XP_MAC) || defined(XP_MACOSX) v2D = line1.intersection(line2);
FIXME::Create the intersection on infinite line
Line line1 = getHyperplane(); Line line2 = line1.intersection(line2);
/* Calculate the intersection on infinite line */
FIXME: Calculate the intersection on infinite line
* The intersection on infinite line
v2D = SubLine.intersection(line2);
v2D = line1.intersection(line2); v2D = line1.intersection(line2);
compute the intersection on infinite line.
#if defined(XP_MAC) && defined(XP_MACOSX)
v2D = v2.intersection(line2);
return intersect on infinite line;
line2 = subLine.intersection(line2);
v2D = Vector2D.intersection(line2);
the intersection on infinite line.
(void) compute the intersection on infinite line.
nsresult rv;
v2D = subLine.intersection(line1);
Line v2D;
boolean includeEndPoints;
Line line2 = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
#if defined(XP_MAC) || defined(XP_MACOSX) */
Line line1 = subLine.getHyperplane(); Line line2 = line1.intersection(line2);
nsresult rv = compute the intersection on infinite line
Stop();
# endif
if (includeEndPoints)  return v2D;
v2D = vector.intersection(line2);
Line line1 = (Line) subLine.getHyperplane(); Line line2 = (Line) line1.intersection(line2);
res = compute the intersection on infinite line
Line line1 = getHyperplane(); Line line2 = subLine.getHyperplane();
if(includeEndPoints)
/* calculate the intersection on infinite line */
*/ v2D = line1.intersection(line2);
* compute the intersection on infinite line.
v2D = subLine.getHyperplane();
#if defined(XP_MAC) &&!defined(XP_MACOSX)
Line line2 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
*/ compute the intersection on infinite line;
// compute the intersection on infinite line.
Vector2D v2D;
#if defined(XP_MAC) || defined(XP_MAC)
v2D = line1.intersection(line1);
compute the intersection on infinite line
line1 = (Line) subLine.getHyperplane(); Line line2 = (Line) subLine.getHyperplane();
if (includeEndPoints)  v2D = line1.intersection(line2);
Line line1 = getHyperplane(); Line line2 = (Line) subLine.getHyperplane();
SubLine subLine;
v2D.intersection(line2);
/* Compute the intersection on infinite line
return (includeEndPoints)? v2D : null;
#if defined(XP_MAC) ||!defined(XP_MACOSX)
#endif /* XXX */
if (includeEndPoints)  return null;
if (includeEndPoints && includeEndPoints)
/* compute the intersection on infinite line.
#if defined(XP_MAC) || defined(XP_MAC) || defined(XP_MACOSX)
+= includeEndPoints;
/* Calculate the intersection on infinite line.
v2D = (Line) line1.intersection(line2);
compute the intersection on infinite line;
v2D = line1.intersection(line2);
v2D = intersection.intersection(line2);
v2D = line1.intersection(Line2);
line1 = getHyperplane(); Line line2 = subLine.getHyperplane();
v2D = intersection(subLine, includeEndPoints);
#if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) #endif
line1 = getHyperplane(); Line line2 = line1.intersection(line2);
V2D v2D;
v2D = null;
@if defined(XP_MAC) || defined(XP_MACOSX)
if (includeEndPoints)  v2D = subLine.intersection(line2);
line1 = getHyperplane(); Line line2 = (Line) subLine.getHyperplane();
*/ v2D = subLine.intersection(line2);
line1 = subLine.getHyperplane();
GetRemainingRegion().CheckPoint(line1.toSubSpace(v2D));
v2D = v1.intersection(line2);
Vector2D v2D = (Line) subLine.getHyperplane();
v2D = vector2D.intersection(line2);
v1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
v2D = vector2d.intersection(line2);
// compute the intersection on infinite line */
#if defined(XP_MAC) || defined(XP_MACOSX) v2D = subLine.intersection(line2);
v2D = subLine.intersection(v2D);
#ifdef NS_DEBUG
v1 = (Line) subLine.getHyperplane(); v2D = line1.intersection(line2);
v2D = (Line) subLine.getHyperplane(); v2D = line1.intersection(line2);
#ifdef __GNUC__
if (includeEndPoints) return v2D;
#if defined(XP_MAC) && defined(XP_MACOSX) && defined(XP_MACOSX)
v2D = line1.intersection(line2); v2D = line2.intersection(line2);
Line v2D = subLine.intersection(line2);
if (includeEndPoints == 0) return null;
#if defined(XP_MAC) || defined(XP_MACOSX) && defined(XP_MACOSX)
#if defined(XP_MAC) && defined(XP_MACOSX) || defined(XP_MACOSX)
v1 = (Line) subLine.getHyperplane();
#if defined(XP_MAC) || defined(XP_OS2)
getRemainingRegion().checkPoint(line1.toSubSpace(v2D), line2.toSubSpace(v2D));
GetRemainingRegion().checkPoint(line1.toSubSpace(v2D), line2.toSubSpace(v2D));
v2D = subLine.intersection(line2); v2D = line1.intersection(line2);
#if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) */
#if defined(XP_MAC) || defined(XP_MACOSX)|| defined(XP_MACOSX)
#if defined(XP_MAC) || defined(XP_MACOSX) XP_MACOSX compute the intersection on infinite line
@if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX)
line2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#if defined(XP_MAC) || defined(XP_MACOSX) &&!defined(XP_MACOSX)
Line line1 = (Line) subLine.getHyperplane(); Line line2 = (Line) subLine.intersection(line2);
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i  0) return null; if (i  0) return null; if (i  0) return null; #endif if (i  0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX)  if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;   else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (line1 == '0') v2D = line1.get(Line1); else v2D = line2.get(Line2);
#if defined(XP_MAC) || defined(XP_MACOSX) && defined(XP_MACOSX) || defined(XP_MACOSX) v2D = subLine.intersection(line2);
/* Create the intersection on infinite line. */
if (line1 == subLine.getHyperplane())  v2D = line1.intersection(line2);  else  v2D = line1.intersection(line2);
#ifdef XP_MAC if (line1)  return (line1).intersection(line2);  else  return (line2).intersection(line2);
#if defined(DEBUG) printf("Vector2D intersectionn");
#endif /*the intersection on infinite line */
if ((line1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) == 0) return (null);
FIXME: this() was created to resize the line, but it still has to be adjusted (e.g., in the inner curve) but it's been changed.
if (includeEndPoints && includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
#if defined(DEBUG_LINE) || defined(DEBUG_LINE) if ((DEBUG_LINE_TRACE_SECURITY) &&!defined(DEBUG_LINE_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_SECURITY_TRACE_S
#ifdef USE_THROTTY_LEFT v2D = line1.intersection(line2); #endif
v2D = line1.intersection(line2); if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null)  if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints)  return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
else  if (includeEndPoints)  if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#endif /* XXX the intersection on infinite line */
if (includeEndPoints && includeEndPoints)  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef HAVE_INTERVAL v2D = line1.intersection(line2); #endif
if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints)  if (remNumLines)  remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));  else  remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints)  v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x;  else  v2D.y = v2D.y;
RTEMS_COUNT_EXIT(LINE1, &v2);
if (includeEndPoints)  v2D = 0;  else  v2D = -1;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
if (includeEndPoints)  if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints)  if (eNode == subLine)  return null;  else  return (eNode == subLine)? v2D : null;
v2D = subLine.intersection(line2); if (v2D)  v2D.flags |= V2D_NONE; v2D.line2 = v2D.line2;
XPCResolved_dot.dot.eobj_lock.reference(this);
#ifdef DEBUG_LINE_V2D *v2D = line1.intersection(line2);
if (includeEndPoints)  if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)))  loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints)  return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;  else  return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (!(loc1 == Location.INST) && (loc2 == Location.INST)) v2D = null; #endif /* XP_MACOSX */
struct line1 v2D;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2)  return (includeEndPoints);  else  return (includeEndPoints);
#ifdef USE_INTO_LINE_NODE
struct subLine_includes *includeEndPoints;
RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.findLine2D(); RTEMSECTION_TEXT  subLine.get
#ifdef XP_MAC if (!includeEndPoints)  return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;  else  return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef DEBUG_LINE_2D v2D = line1.intersection(line2);
struct iov_result iov2 = (struct iov_result *) subLine.getRemainingRegion(); iov2 = subLine.getRemainingRegion().checkPoint(iov2);

/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); else <v2D = line1.intersection(line2);
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) <return null; &else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); else <return (includeEndPoints);
<&else if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (eNode == subLine) <return null; &else return (eNode == subLine)? v2D : null;
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i &0) return null; #endif if (i <0) return i;
if (includeEndPoints) <if (eNode == subLine) &return null; <else &return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (line1) return (line1).intersection(line2); else return (line2).intersection(line2);
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) return null; else &return (eNode == subLine)? v2D : null;
<&else &if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) <return null; &else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<&else if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i 0) return null; #endif if (i <0) return i;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints)
<<else &if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = subLine.intersection(line2);
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); <else return (includeEndPoints);
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) return (line1).intersection(line2); else &return (line2).intersection(line2);
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i <0) return null; #endif if (i 0) return i;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i <0) return null; #endif if (i 0) return i;
if (includeEndPoints) &if (eNode == subLine) return null; &else <return (eNode == subLine)? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<&else &if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &v2D = 0; else v2D = -1;
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); else v2D = line1.intersection(line2);
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i 0) return null; #endif if (i <0) return i;
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); &else &v2D = line1.intersection(line2);
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); &else v2D = line1.intersection(line2);
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) return null; <else <return (eNode == subLine)? v2D : null;
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); &else &v2D = line1.intersection(line2);
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (eNode == subLine) <return null; <else &return (eNode == subLine)? v2D : null;
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = 0; &else <v2D = -1;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (eNode == subLine) return null; <else &return (eNode == subLine)? v2D : null;
<<else if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); &else &return (includeEndPoints);
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) return v2D;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); &else <return (line2).intersection(line2);
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); <else return (line2).intersection(line2);
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i 0) return null; #endif if (i 0) return i;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; &else return (eNode == subLine)? v2D : null;
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); else <v2D = line1.intersection(line2);
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); <else &return (line2).intersection(line2);
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<&else <if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); else <v2D = line1.intersection(line2);
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
<&else if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (eNode == subLine) &return null; &else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) return null;
if (includeEndPoints) if (eNode == subLine) return null; else <return (eNode == subLine)? v2D : null;
&else &if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) &return null; &else return (eNode == subLine)? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); &else return (line2).intersection(line2);
#ifdef XP_MAC if (line1) return (line1).intersection(line2); <else <return (line2).intersection(line2);
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i 0) return null; #endif if (i <0) return i;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
if (includeEndPoints) if (eNode == subLine) &return null; <else <return (eNode == subLine)? v2D : null;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
if (includeEndPoints) if (eNode == subLine) <return null; <else return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); &else return (includeEndPoints);
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); &else <v2D = line1.intersection(line2);
<<else if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&&else <if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; else return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i <0) return null; #endif if (i <0) return i;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
if (includeEndPoints) <if (eNode == subLine) <return null; &else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = 0; <else &v2D = -1;
if (includeEndPoints) <v2D = 0; else v2D = -1;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i &0) return null; #endif if (i &0) return i;
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); &else <v2D = line1.intersection(line2);
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) &v2D = 0; else &v2D = -1;
&else if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i 0) return null; #endif if (i &0) return i;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); &else return (line2).intersection(line2);
if (includeEndPoints) &if (eNode == subLine) return null; <else return (eNode == subLine)? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); else <return (includeEndPoints);
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
else &if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); else &v2D = line1.intersection(line2);
&else <if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#if defined(DEBUG) printf("Vector2D intersectionn");
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i 0) return null; #endif if (i &0) return i;
&<else <if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) return null; <else &return (eNode == subLine)? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = 0; &else v2D = -1;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); &else return (includeEndPoints);
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i <0) return null; #endif if (i <0) return i;
if (includeEndPoints) <if (eNode == subLine) return null; <else return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); &else return (includeEndPoints);
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
<else &if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i 0) return null; #endif if (i 0) return i;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
if (includeEndPoints) <if (eNode == subLine) &return null; else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
if (includeEndPoints) &v2D = subLine.intersection(line2);
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (line1) return (line1).intersection(line2); <else &return (line2).intersection(line2);
&<else <if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
if (includeEndPoints) if (eNode == subLine) return null; &else <return (eNode == subLine)? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<else <if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = 0; <else v2D = -1;
<else &if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&else if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = line1.intersection(line2);
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); &else &return (line2).intersection(line2);
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = 0; <else <v2D = -1;
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; else <return (eNode == subLine)? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
else &if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) &return null; &else &return (eNode == subLine)? v2D : null;
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); &else &v2D = line1.intersection(line2);
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); <else return (line2).intersection(line2);
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
if (includeEndPoints) <if (eNode == subLine) &return null; <else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&&else &if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); <else &v2D = line1.intersection(line2);
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i <0) return null; #endif if (i <0) return i;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i <0) return null; #endif if (i 0) return i;
if (includeEndPoints) <v2D = subLine.intersection(line2);
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); <else &v2D = line1.intersection(line2);
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) <if (eNode == subLine) <return null; else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (eNode == subLine) return null; <else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <if (eNode == subLine) return null; else return (eNode == subLine)? v2D : null;
&<else &if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i &0) return null; #endif if (i <0) return i;
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (eNode == subLine) <return null; &else return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); <else v2D = line1.intersection(line2);
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i &0) return null; #endif if (i <0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
&&else &if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); <else <return (line2).intersection(line2);
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) return (line1).intersection(line2); &else return (line2).intersection(line2);
if (includeEndPoints) if (eNode == subLine) &return null; &else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) v2D = 0; &else <v2D = -1;
if (includeEndPoints) &if (eNode == subLine) return null; else <return (eNode == subLine)? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i 0) return null; #endif if (i &0) return i;
if (includeEndPoints) &v2D = 0; &else &v2D = -1;
if (includeEndPoints) <if (eNode == subLine) return null; &else &return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
&<else if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) <return null; else return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i &0) return null; #endif if (i &0) return i;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i &0) return null; #endif if (i <0) return i;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i &0) return null; #endif if (i <0) return i;
if (includeEndPoints) &if (eNode == subLine) <return null; <else <return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i <0) return null; #endif if (i 0) return i;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
if (includeEndPoints) if (eNode == subLine) return null; &else &return (eNode == subLine)? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); else return (includeEndPoints);
if (includeEndPoints) <if (eNode == subLine) return null; &else return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i 0) return null; #endif if (i &0) return i;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = 0; &else <v2D = -1;
if (includeEndPoints) &if (eNode == subLine) return null; else return (eNode == subLine)? v2D : null;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i &0) return null; #endif if (i <0) return i;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); &else v2D = line1.intersection(line2);
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i &0) return null; #endif if (i &0) return i;
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) <return null; else return (eNode == subLine)? v2D : null;
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
if (includeEndPoints) <v2D = line1.intersection(line2);
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i <0) return null; #endif if (i &0) return i;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = 0; <else v2D = -1;
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
<<else <if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <if (eNode == subLine) <return null; <else <return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) v2D = subLine.intersection(line2);
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
<v2D = line1.intersection(line2);
if (includeEndPoints) <v2D = 0; &else &v2D = -1;
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <if (eNode == subLine) <return null; <else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) return null; &else return (eNode == subLine)? v2D : null;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) <return null; <else return (eNode == subLine)? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i &0) return null; #endif if (i 0) return i;
else <if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (eNode == subLine) <return null; <else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i <0) return null; #endif if (i <0) return i;
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); &else <v2D = line1.intersection(line2);
if (includeEndPoints) &return null;
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints && includeEndPoints)
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) v2D = subLine.intersection(line2);
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) v2D = line1.intersection(line2);
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); &else <return (includeEndPoints);
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i &0) return null; #endif if (i <0) return i;
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i 0) return null; #endif if (i 0) return i;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) <if (eNode == subLine) &return null; <else return (eNode == subLine)? v2D : null;
if (includeEndPoints) if (eNode == subLine) <return null; else &return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) <return null; else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = line1.intersection(line2);
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i <0) return null; #endif if (i <0) return i;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) &return null; else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) return null; <else <return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i <0) return null; #endif if (i 0) return i;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); <else &return (includeEndPoints);
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
<else <if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&<else <if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
v2D = line1.intersection(line2); if (line1 == '&0') v2D = line1.get(Line1); else v2D = line2.get(Line2);
if (includeEndPoints) <v2D = 0; &else v2D = -1;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) <return null; &else <return (eNode == subLine)? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i 0) return null; #endif if (i 0) return i;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = 0; <else <v2D = -1;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); else return (includeEndPoints);
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); <else &return (line2).intersection(line2);
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
else <if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (eNode == subLine) return null; <else return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (eNode == subLine) <return null; else <return (eNode == subLine)? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); else v2D = line1.intersection(line2);
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i <0) return null; #endif if (i &0) return i;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); <else <return (includeEndPoints);
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); else v2D = line1.intersection(line2);
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (eNode == subLine) <return null; else <return (eNode == subLine)? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); <else <return (includeEndPoints);
v2D = subLine.intersection(line2); if (v2D) &v2D.flags |= V2D_NONE; v2D.line2 = v2D.line2;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) <return null; &else return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i <0) return null; #endif if (i 0) return i;
if (includeEndPoints) &v2D = 0; else <v2D = -1;
if (includeEndPoints) v2D = 0; else &v2D = -1;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = 0; <else <v2D = -1;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (eNode == subLine) return null; else return (eNode == subLine)? v2D : null;
if (includeEndPoints) v2D = 0; &else &v2D = -1;
if (includeEndPoints) v2D = line1.intersection(line2);
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i <0) return null; #endif if (i <0) return i;
#if defined(DEBUG) printf("Vector2D intersection&n");
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i &0) return null; #endif if (i 0) return i;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&else &if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i <0) return null; #endif if (i &0) return i;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); else &return (includeEndPoints);
<else &if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = 0; else <v2D = -1;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return null;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i &0) return null; #endif if (i 0) return i;
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) <if (eNode == subLine) &return null; &else <return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i <0) return null; #endif if (i 0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; <else return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i <0) return null; #endif if (i <0) return i;
if (includeEndPoints) &if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) <if (eNode == subLine) return null; &else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
&&else if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) <return null; else return (eNode == subLine)? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) <return null; <else return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); else return (includeEndPoints);
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i 0) return null; #endif if (i 0) return i;
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i 0) return null; #endif if (i &0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) &return null; else &return (eNode == subLine)? v2D : null;
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); else &v2D = line1.intersection(line2);
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i &0) return null; #endif if (i 0) return i;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); <else <v2D = line1.intersection(line2);
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); else &return (includeEndPoints);
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); &else <return (includeEndPoints);
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) <return null; &else &return (eNode == subLine)? v2D : null;
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); <else return (includeEndPoints);
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i 0) return null; #endif if (i 0) return i;
if (includeEndPoints) &if (eNode == subLine) return null; else &return (eNode == subLine)? v2D : null;
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
&else <if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) &return null; else return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i 0) return null; #endif if (i <0) return i;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); <else <return (includeEndPoints);
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i &0) return null; #endif if (i &0) return i;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
if (includeEndPoints) if (eNode == subLine) &return null; <else &return (eNode == subLine)? v2D : null;
v2D = line1.intersection(line2); if (line1 == '<0') v2D = line1.get(Line1); else v2D = line2.get(Line2);
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i 0) return null; #endif if (i &0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i &0) return null; #endif if (i &0) return i;
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); <else <v2D = line1.intersection(line2);
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); else &return (line2).intersection(line2);
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i &0) return null; #endif if (i &0) return i;
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i 0) return null; #endif if (i <0) return i;
#ifdef XP_MAC if (line1) return (line1).intersection(line2); &else &return (line2).intersection(line2);
&v2D = line1.intersection(line2);
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
if (includeEndPoints) &v2D = 0; <else &v2D = -1;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i <0) return null; #endif if (i &0) return i;
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
<<else <if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&else if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; <else &return (eNode == subLine)? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) <if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) &return null; else <return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) <return null; else &return (eNode == subLine)? v2D : null;
v2D = subLine.intersection(line2); if (v2D) v2D.flags |= V2D_NONE; v2D.line2 = v2D.line2;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i <0) return null; #endif if (i 0) return i;
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
if (includeEndPoints) &if (eNode == subLine) <return null; &else &return (eNode == subLine)? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = 0; else &v2D = -1;
if (includeEndPoints) if (eNode == subLine) &return null; &else <return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i 0) return null; #endif if (i <0) return i;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i &0) return null; #endif if (i 0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
&<else &if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i &0) return null; #endif if (i &0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; <else <return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); &else <return (line2).intersection(line2);
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i 0) return null; #endif if (i &0) return i;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<else if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) <return null; <else &return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i 0) return null; #endif if (i 0) return i;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
if (includeEndPoints) <if (eNode == subLine) return null; <else &return (eNode == subLine)? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
else if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
if (includeEndPoints) v2D = 0; <else v2D = -1;
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); else return (line2).intersection(line2);
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) &return (includeEndPoints); <else &return (includeEndPoints);
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); <else <return (line2).intersection(line2);
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
else <if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (line1) return (line1).intersection(line2); <else return (line2).intersection(line2);
&&else <if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) return null; else <return (eNode == subLine)? v2D : null;
<else <if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); else <return (line2).intersection(line2);
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
&&else &if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); <else &return (includeEndPoints);
if (includeEndPoints) v2D = 0; &else v2D = -1;
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i 0) return null; #endif if (i 0) return i;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i &0) return null; #endif if (i 0) return i;
else if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else &v2D.y = v2D.y;
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i &0) return null; #endif if (i <0) return i;
if (includeEndPoints) <if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i 0) return null; #endif if (i &0) return i;
&else <if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i 0) return null; #endif if (i <0) return i;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) &return null; &else return (eNode == subLine)? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i &0) return null; if (i &0) return null; #endif if (i <0) return i;
if (includeEndPoints) &if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); <else &v2D = line1.intersection(line2);
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i <0) return null; #endif if (i &0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); &else &return (line2).intersection(line2);
#ifdef XP_MAC if (i && i 0) return null; if (i <0) return null; if (i &0) return null; #endif if (i 0) return i;
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
else if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<else if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) return null; else &return (eNode == subLine)? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&<else if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (eNode == subLine) &return null; <else return (eNode == subLine)? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
&if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else &v2D.y = v2D.y;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) &return null; &else <return (eNode == subLine)? v2D : null;
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i <0) return null; #endif if (i <0) return i;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
&&else if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = 0; else v2D = -1;
v2D = line1.intersection(line2); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i 0) return null; #endif if (i <0) return i;
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i <0) return null; #endif if (i <0) return i;
else &if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<<else &if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) <return (line1).intersection(line2); else return (line2).intersection(line2);
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2);
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i 0) return null; #endif if (i 0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = line1.intersection(line2);
<<else if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<&else <if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) v2D = 0; <else &v2D = -1;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<<else <if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = line1.intersection(line2);
if (includeEndPoints) &if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else v2D.y = v2D.y;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (eNode == subLine) return null; &else return (eNode == subLine)? v2D : null;
<&else <if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i <0) return null; if (i &0) return null; #endif if (i &0) return i;
if (includeEndPoints) <if (remNumLines) &remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); <else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i 0) return null; if (i &0) return null; if (i <0) return null; #endif if (i &0) return i;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<else if (includeEndPoints) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (remNumLines) remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (eNode == subLine) &return null; else return (eNode == subLine)? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &return v2D;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); else &v2D = line1.intersection(line2);
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i <0) return null; #endif if (i &0) return i;
if (includeEndPoints) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); else &return (line2).intersection(line2);
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); <else return (includeEndPoints);
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i <0) return null; #endif if (i &0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i &0) return null; #endif if (i 0) return i;
&if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else v2D.y = v2D.y;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<&else &if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i &0) return null; #endif if (i 0) return i;
#ifdef XP_MAC if (i && i <0) return null; if (i 0) return null; if (i &0) return null; #endif if (i &0) return i;
if (includeEndPoints) &if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); else &remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); else &return (includeEndPoints);
if (includeEndPoints) if (remNumLines) <remNumLines = subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D)); &else <remNumLines = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (subLine.getRemainingRegion() == null) if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); &else v2D = line1.intersection(line2);
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) <return (includeEndPoints); &else &return (includeEndPoints);
if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; <else <v2D.y = v2D.y;
if (includeEndPoints) v2D = 0; else <v2D = -1;
RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) &loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); &else &return (includeEndPoints);
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (includeEndPoints && includeEndPoints) return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == subLine.getHyperplane()) &v2D = line1.intersection(line2); <else <v2D = line1.intersection(line2);
#ifdef XP_MAC if (line1) return (line1).intersection(line2); else <return (line2).intersection(line2);
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); &else <return (includeEndPoints);
#ifdef XP_MAC if (i && i 0) return null; if (i 0) return null; if (i <0) return null; #endif if (i &0) return i;
v2D = line1.intersection(line2); if (line1 == '0') v2D = line1.get(Line1); else v2D = line2.get(Line2);
if (line1 == subLine.getHyperplane()) <v2D = line1.intersection(line2); <else v2D = line1.intersection(line2);
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else <v2D.y = v2D.y;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
#ifdef XP_MAC if (line1) &return (line1).intersection(line2); else <return (line2).intersection(line2);
&<else if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (!includeEndPoints) &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; else &v2D.y = v2D.y;
#ifdef XP_MAC if (i && i &0) return null; if (i 0) return null; if (i 0) return null; #endif if (i &0) return i;
#ifdef XP_MAC if (i && i &0) return null; if (i &0) return null; if (i <0) return null; #endif if (i 0) return i;
<<else &if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (subLine.getRemainingRegion() == null) &if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return v2D;
#if defined(DEBUG) printf("Vector2D intersection<n");
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&<else &if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&&else <if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) <loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints && includeEndPoints) &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D))) loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)); if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (eNode == subLine) return null; &else &return (eNode == subLine)? v2D : null;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else <v2D.y = v2D.y;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
#ifdef XP_MAC if (line1) return (line1).intersection(line2); &else <return (line2).intersection(line2);
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
<if (includeEndPoints) <v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
<if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &v2D = subLine.intersection(line2); v2D.x = v2D.y = v2D.x; &else v2D.y = v2D.y;
if (subLine.getRemainingRegion() == null) <if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
/* * Calculate the intersection on infinite line. */ if (!includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else <return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
&if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
v2D = subLine.intersection(line2); if (v2D) <v2D.flags |= V2D_NONE; v2D.line2 = v2D.line2;
if (includeEndPoints) <return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null;
#ifdef XP_MAC if (i && i &0) return null; if (i <0) return null; if (i 0) return null; #endif if (i <0) return i;
#ifdef __WINDOW__ #if defined(XP_MAC) || defined(XP_MACOSX) || defined(XP_MACOSX) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; &else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
&else &if (includeEndPoints) <if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (includeEndPoints) &if (includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; <else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
if (line1 == nsLineLine::line2 && line2 == nsLine::line2) return (includeEndPoints); else <return (includeEndPoints);
#ifdef XP_MAC if (!includeEndPoints) <return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null; &else &return ((loc1 == Location.OUTSIDE) && (loc2 == Location.OUTSIDE))? v2D : null;
#ifdef INET6 if (includeEndPoints && includeEndPoints && includeEndPoints) &return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else &return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT &subLine.findLine2D(); RTEMSECTION_TEXT <subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.findLine2D(); RTEMSECTION_TEXT subLine.get
if (line1 == subLine.getHyperplane()) v2D = line1.intersection(line2); <else v2D = line1.intersection(line2);
&&else if (includeEndPoints) if (includeEndPoints) return ((loc1!= Location.OUTSIDE) && (loc2!= Location.OUTSIDE))? v2D : null; else return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE))? v2D : null;
