golden:
addValue((Comparable<?>) v);
inference:
addValue(v);
return addValue((Comparable?>) v);
addValue((Comparable?>) v);
addValue((Comparable?>)v);
v = addValue((Comparable?>) v);
AddValue((Comparable?>) v);
addValue((comparable?>) v);
(void) addValue((Comparable?>) v);
void addValue((Comparable?>) v);

addValue((Comparable?>) v, 0);
addValue((Comparable) v);
AddValue(v);
return addValue(v);
addValue((Comparable?>) v, null);
result = addValue((Comparable?>) v);
NS_ADDREF(*v);
addValue(&v);
aValue = (Comparable?>) v;
addValue((Comparable?>) v, v);
addValue((IComparable?>) v);
addValue((nsComparable?>) v);
addValue((Comparable)v);
if (v) addValue(v);
v.addValue((Comparable?>) v);
addValue((PRUint32?>) v);
this.addValue((Comparable?>) v);
return v;
addValue(((Comparable?>) v));
mValue = (Comparable?>) v;
addValue((Comparable?>)v, v);
*aValue = (Comparable?>) v;
aValue = v;
NS_ADDREF(v);
::addValue((Comparable?>) v);
v = (Comparable?>) v;
addValue((Comparable?>) &v);
mValue = v;
int addValue((Comparable?>) v);
_addValue((Comparable?>) v);
*aValue = v;
addValue((Comparable?>) v, 1);
(void)addValue((Comparable?>) v);
addValue((Comparator?>) v);
addValue((PRUint32) v);
value = (Comparable?>) v;
addValue((Comparable?>) (void *)v);
addValue((Comparable?>) v.get());
addValue(aValue);
val = addValue((Comparable?>) v);
return AddValue((Comparable?>) v);
addValue((PRUint32*) v);
return AddValue(v);
addValue((comparable) v);
addValue(VarTerm, v);
addValue((nsIComparable?>) v);
addValue( (Comparable?>) v );
addValue((Object?>) v);
addValue((Comparable?>)v, 0);
addValue( v );
addValue((Comparable *) v);
addValue(*v);
addValue((Comparable?>)&v);
addValue((Comparable?>) v + 1);
NS_ADDREF_THIS();
v = v;
addValue((Comparable?>) (void **)v);
addValue((Comparable? >>>) v);
setValue((Comparable?>) v);
addValue((Comparable?>) *v);
nsresult rv;
addValue((COMPARISON?>) v);
addValue((PRUint32)v);
addValue((Comparable?>) v, value);
addValue((ComparableObject?>) v);
addValue((Comparable?>) v.value);
bool addValue((Comparable?>) v);
addValue((Comparable?>) s);
addValue((Comparable?>) v, -1);
addValue((CComparable?>) v);
if (v)  addValue(v);
addValue((ConstComparable?>) v);
addValue((compatibility?>) v);
addValue((comparable?>)v);
addValue(((Comparable?>)v));
addValue((Comparable?>)(v));
addValue(VarTerm);
addValue((Node?>) v);
addValue((nsIComparator?>) v);
addValue(v, 0);
addValue((Comparable?>) v, this);
compareValue(v);
addValue((Comparable?>)v, null);
addValue((Comparable?>), v);
aValue.Append(v);
addValue((Comparable?>)s);
addValue((void*) v);
val = (Comparable?>) v;
addValue((Comparable?>) v, p);
addValue((VoidArray?>) v);
addValue((compatibility) v);
addValue((Comparable?>) u);
addValue((unsigned char*) v);
v = addValue(v);
addValue(v, (Comparable?>) v);
addValue((Comparable?>)*v);
addValue((comparator?>) v);
addValue((Comparable?>) (void**)v);
addValue((ComparableComparable?>) v);
addValue(null);
compare(v);
addValue((Comparable&) v);
(void) addValue(v);
addValue((Comparable>) v);
addValue((comparison?>) v);
addValue((Comparable?>)u);
addValue((String?>) v);
addValue((Comparable?>) (void*)v);
comp = addValue((Comparable?>) v);
return NS_OK;
nsCRT::free(v);
if(v) addValue(v);
addValue((NodeList?>) v);
addValue((ComparablePtr?>) v);
value = v;
addValue((Comparable[]) v);
addValue((Comparable?>&) v);
addValue((compat?>) v);
addValue((Comparable?>) v));
s = addValue((Comparable?>) v);
addValue((Comparable*) v);
addValue((Comparable?:>) v);
addValue((COMPtr?>) v);
return addValue((Comparable?>)v);
addValue((Comparable?>) v, s);
addValue((Comparablev>) v);
addValue((Comparable ) v);
addValue((Comparable?>) vp);
this.addValue(v);
addValue((Comparable?>) aValue);
i = addValue((Comparable?>) v);
addValue((Comparable?>)m);
addValue(v, v);
addValue(v, true);
addValue((comp) v);
addValue((ComparableValue?>) v);
addValue((PRUint32*)v);
addValue((Comparablen>) v);
addValue( (Comparable?>) v);
addValue((void *) v);
addValue((Comparable?>n") v);
addValue((void**) v);
int i;
addValue((Comparable?>) v, i);
addValue((Comparable?>)c);
addValue((ComparableComparator?>) v);
newValue = (Comparable?>) v;
addValue((Comparable?>) value);
addValue(((Comparable) v);
addValue((Comparable?>) v[0]);
addValue((Comparable?>)v, &v);
NS_ENSURE_ARG_POINTER(v);
deprecated_addValue(v);
addValue((Comparable?>) v, u);
addValue((Comparable?>?>) v);
mValues.add(v);
addValue((Comparable?>) v, type);
addValue((Comparable?>)dv);
addValue((Comparable?>) v, l);
addValue((Comparable?>) v.next);
v = v; addValue(v);
addValue((Comparable?>>) v);
addValue((Comparable?>) vv);
addValue((nsIAtom*) v);
mValue = addValue(v);
if (v == null) return;
addValue((Comparable?>)a);
addValue((Comparable?>)) v;
addValue((Comparable?>) v.get());
addValue((Comparable?>)v, 1);
v = addValue((Comparable?>)v);
NS_ADDREF(*(v));
NS_IF_ADDREF(*v);
addValue((Comparable?>) v, c);
addValue((Comparable?>) v, r);
addValue((Comparable?>) v, size);
addValue((Comparable?>) v.v);
if (aValue) addValue(aValue);
addValue((Comparable?>) v, val);
addValue((Comparable?>) v, buf);
if (! v)  return 0;
v = v.mVariants;
v = (Comparable?>) v; addValue(v);
if (!aValue)  return 0;
if ((v == null) || (v == null))  if (v)  *v = null;  if (v == null) return; *v = null;
if (aValue)  mCurrent = aValue;  else  if ((aValue) == -1)  addValue(aValue);
addValue((Comparable?>) v, (IStyleStruct *) v);
v.mValue = v;
if (v)  addValue((Comparable?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent)  PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1)  if (*v)  mValue = v.mValue;   else  if (*v)  mValue = v.mValue; mValue = v.mValue;  else  mValue = v.mValue;
if ((v = v.GetContainingPtr()) == 0)  if (v.GetContainingPtr())  v.GetContainingPtr().AppendValue((Comparable?>) v);  else  v.AppendValue((Comparable?>) v);
if ((s = v)!= 0) addValue((Comparable?>) s);
if (!(v))  addValue((Comparable?>) v);
if (v) addValue((Comparable?>) v); else addValue((Comparable?>) v);
if (v) addValue((Comparable?>) v);
mValue.addValue(v);
/* * The msg is not yet in the future. */ if (msg)  nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener)  mpListener.AddValue((Comparable?>) v);
if (v)  nsComparator::addValue(v);  else  nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref)  nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref));  pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable?>) v, mType);
addValue((Comparable?>) v, null);
rv = rv; if (v == null)  rv = addValue((Comparable?>) v);  else  rv = addValue((Comparable?>) v);
if (v == null)  /* Remove b> value, in this case */ if (v!= null)   else  addValue((Comparable?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell)  nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell)  aValue((SimpleValue?>) v);    else  presShell.GetPresShell(getter_AddRefs
if (m.m_type == m_type)  m.m_type = m_type;  else  m.m_type = m_type;
if (aType!= t)  addValue((Comparable?>) v);
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0)  i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL))  i++;
addValue((Comparable?>) v, aValue);
addValue((Comparable?>) v, &mArray);
if ((v == null) || (!v))  addValue((Comparable?>) v);  else  /* Don't add this to the v value */ if ((v == null) || (v == null))  /* The new value should be in this case */  if (v!= null)  addValue((Comparable?>) v);
if ((v == NS_XUL) && (v!= NS_NEW_XUL)) addValue((Comparable?>) v);
rv = addValue((Comparable?>) v);
/* XXX */ addValue((Comparable?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog))  splx(s); return NS_OK;  if ((v.dialog == null) || (v.dialog.isPaginated))  /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated))  if ((v.dialog.isPaginated) || (v.dialog.isPaginated))  /* XXX */ return result;   else  /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == null)  nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv))  return rv;
if (v == null)  addValue((Comparable?>) v);
if (IsSpecial(v))  if (!v)  v = v;
addValue((Comparable?>) v, (void**)&v);
addValue((Comparable?>) v, false);
if (!IsRef())  addValue((Comparable?>) v);
if (! v)  return;
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable)  rv = addValue((Comparable?>) v);
NS_ADDREF(*v); NS_ADDREF(*v);
if (m_context)  m_context.saveValue = (Atom?>) v;
if (v == NS_OK)  struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv;  else  rv = addValue(v);
rv = v; if (v == null)  return;
v.value = v;
mCopy.addValue((Comparable?>) v);
if (((VarTerm)v) == null)  rv = v; return rv;  else  rv = addValue((Comparable?>) v); if (rv == null)  rv = addValue((Comparable?>) v);  return rv;
if (((v = (Comparable?>) v))!= 0)  /* XXX */ if (v)  /* XXX */ v = v;  else  /* XXX */ v = v;
if (!(v = v.v_next))  addValue((Comparable?>) v);
if (aValue)  addValue((Comparable?>) v);  else  v = null;
if (!v)  return;  v = v;
if (n)  addValue((Comparable?>) v);  else  addValue((Comparable?>) v);
addValue((Comparable?>) v, &lp);
if (mValue)  addValue((Comparable?>) v);
if (!(v) || (v.hashTable))  v.hashTable = v; return;   else  if (v.hashTable!= v.hashTable)  v.hashTable = v.hashTable; return;   if (v.hashList == v.hashTable)  v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
v.setAttributes(nsAttributes::attributes, ((Comparable?>) v));
if (!(v))  return 0;
if ((v == null) || (v == null))  LOG(L_ERR, "AddValue: %sn", v);
if (null!= v)  addValue((Comparable?>) v);
v.mValue.Append((Comparable?>) v);
addValue((compare?>) v);
if (!*(v = ((Comparable?>))) && v == null)  return;  if (v)  rv = addValue(v, v);
if ((v = v.dialog)!= 0) addValue((Comparable?>) v); else addValue((Comparable?>) v);
addValue(((PRUint32)v));
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v)))  if ((null == v) && (null!= v))  addValue((Comparable?>) v);
if (v == mEmpty)  addValue((Comparable?>) v);
nsresult rv; nsresult rv = NS_OK; rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv;
addValue((Comparable?>) v, id);
if (v == null)  return NS_ERROR_NULL_POINTER;  else  v = null;
nsIComparator* comp = (nsIComparator*) v; addValue(comp);
/* The object that does not have a value in the attribute list. */ addValue((Comparable?>) v);
mAvailable = v; if (mProperties)  mProperties.AppendValue(mProperties);  mProperties.AppendValue(mProperties);  if (mProperties.AppendVar)  mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable?>)v, v.mValue);
if (! v)  return NS_ERROR_NULL_POINTER;  v.mComparator = v; if (!(v.mComparator == v.mComparator))  /* If no v, */  else  v.mComparator = v;  v.mComparator = v.mComparator;  v.mParams = v.mComparator; v.mResult = v.mResult;
if ((*v)!= null)  addValue((Comparable?>) v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv;
addValue((Comparable?>) v, v.mValue);
if (!mValue)  aValue = v;
nsresult rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv;
addValue((Comparable?>) v, v.get());
addValue((Comparable?>) v, v.mProp);
addValue((Comparable?>) v, &si);
if (mType == ISV_ISV_ISV_NOT_INIT) addValue((Comparable?>) v);
addValue((Comparable?>) v, (void *) v);
if (v)  aResult = null;  else  aResult = (null == aResult)? aResult: aResult;
if (v == mObject)  mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER;  if (mObject.GetFlags() == NS_EXT)  nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK;  else  if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (!m_next)  addValue((Comparable?>) v);
NS_ASSERTION(!v, "bad param"); NS_ADDREF(*v);
nsComparator::addValue((Comparable?>) v);
addValue((Comparable?>) v, v.type);
if (v)  mValue = ((comparable?>) v);
if (nv)  rv = addValue(v); if (rv == 0)  /* NOTREACHED */   if (v.op == s)  rv = addValue(v);
if ((v!= tmp) && (v.nodeType == T_STYLE_TIMER)) addValue(v);
v.asm_type = aValue; if (v.asm_type == aValue.type)  addValue((Comparable?>) v);  else  if (v.asm_type == aValue.type)  mResult = aValue.type;  else  if (v.asm_type == aValue.type)  addValue((Comparable?>) v);
addValue((Comparable?>) v, v.address);
addValue((Comparable?>)v, 0, true);
if (!v)  return;
/* XXX need to add a value in a non-XUL container. */ if (nel.addValue(v) == null)  *v = v;
v.inst = v; v.sel = v.sel; v.sel = v.sel; v.sel = v.sel;
addValue((nsCOMPtr?>) v);
if (((Comparable?>) v) &&!((mAvailable?>).mValue))  fprintf(stderr, "AppendValue: %sn", v); return;
addValue((Comparable?>) v, (compact nil) v);
if ((v = mValues) || (v == null))  addValue((Comparable?>) v);
if (nonVoidArray == 0)  addValue((Comparable?>) v);  else  v = v;
nsCOMPtrnsIAtom> tag;
nsAutoString value; value.AppendValue(v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType)  mType = mType;  else  mType = mType;  addValue(mOwner, v);
if (v == null)  void *p = v; p.v = *v; p.v = *p;  else  p.v = v;
addValue((Comparable?>) v, &rv);
nsresult rv; if (v)  rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
addValue((Comparable?>) v, mArena);
if ((comp = v) && (v.mFlags & APPENDED))  if ((comp = v.mComparator) && (v.mResources & APPENDED))  addValue((Comparable?>) v);   else  addValue((Comparable?>) v);
nsAutoString val; if ((VarTerm) && val == '0')  /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v)  /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v)  /* Don't return VAL_OF_BASE(v);   else  /* Do not do this to get value as well */ v = VAL_BASE(v);
aValue = addValue((Comparable?>) v);
addValue((nsCRT::strlen(v)));
if ((!v)) addValue((Comparable?>) v); else  *v = v;

if (v) <nsComparator::addValue(v); &else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == null) <return NS_ERROR_NULL_POINTER; &else v = null;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (aValue) mCurrent = aValue; <else &if ((aValue) == -1) <addValue(aValue);
if (!(v = v.v_next)) <addValue((Comparable?>) v);
if (v) aResult = null; &else <aResult = (null == aResult)? aResult: aResult;
if (nv) <rv = addValue(v); if (rv == 0) </* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %s&n", v); return;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (aValue) <mCurrent = aValue; <else if ((aValue) == -1) &addValue(aValue);
addValue((Comparable &?>) v);
addValue((Comparable&?>) v, mType);
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %s<n", v); return;
if (v) &aResult = null; <else aResult = (null == aResult)? aResult: aResult;
addValue((ComparableValue&?>) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
AddValue((Comparable<?>) v);
if (!(v = v.v_next)) <addValue((Comparable&?>) v);
if (v) &nsComparator::addValue(v); <else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; <else </* XXX */ v = v;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) <return; <if (v) rv = addValue(v, v);
if (aValue) &addValue((Comparable?>) v); &else <v = null;
addValue((ComparableValue<?>) v);
if (IsSpecial(v)) if (!v) v = v;
if (!(v) || (v.hashTable)) &v.hashTable = v; return; else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else <mType = mType; addValue(mOwner, v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (nv) rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue( (Comparable?>) v);
addValue((Comparable<?>)a);
if ((v == null) || (v == null)) &if (v) *v = null; &if (v == null) return; *v = null;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else mType = mType; addValue(mOwner, v);
if (!(v)) <return 0;
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
addValue( (Comparable&?>) v);
if (mValue) &addValue((Comparable<?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v = mValues) || (v == null)) <addValue((Comparable?>) v);
&if (v) &mValue = ((comparable?>) v);
if (v) addValue((Comparable?>) v); else addValue((Comparable<?>) v);
if (v) nsComparator::addValue(v); <else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable<?>) v);
if (v) addValue((Comparable&?>) v); else addValue((Comparable<?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
return addValue((Comparable?>) v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable&?>) v);
if (aValue) <addValue((Comparable?>) v); &else v = null;
if (m.m_type == m_type) m.m_type = m_type; else m.m_type = m_type;
if (!(v) || (v.hashTable)) v.hashTable = v; return; <&else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
AddValue((Comparable?>) v);
addValue((IComparable&?>) v);
if (v == null) <nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
addValue((Comparable&?>) u);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
<addValue((Comparable?>) v);
if (nv) &rv = addValue(v); if (rv == 0) /* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if (v) addValue((Comparable&?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == null) </* Remove <b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) <rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (! v) &return 0;
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsresult rv; if (v) rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
aValue = addValue((Comparable?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else <mType = mType; <addValue(mOwner, v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
rv = rv; if (v == null) rv = addValue((Comparable?>) v); else <rv = addValue((Comparable?>) v);
if (v) &aResult = null; <else <aResult = (null == aResult)? aResult: aResult;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; else </* XXX */ v = v;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (n) &addValue((Comparable?>) v); <else addValue((Comparable?>) v);
if (v == null) <addValue((Comparable?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (n) <addValue((Comparable?>) v); <else &addValue((Comparable?>) v);
comp = addValue((Comparable<?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v) &nsComparator::addValue(v); <else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable<?>)s);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
v = addValue((Comparable&?>)v);
if (null!= v) &addValue((Comparable&?>) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else mType = mType; &addValue(mOwner, v);
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
&if (v) mValue = ((comparable&?>) v);
addValue((Comparable&) v);
addValue((Node<?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; else &/* XXX */ v = v;
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
return AddValue((Comparable?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &<else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (mValue) addValue((Comparable&?>) v);
if (v == null) <return NS_ERROR_NULL_POINTER; else &v = null;
addValue((compatibility?>) v);
if (aValue) <mCurrent = aValue; <else <if ((aValue) == -1) <addValue(aValue);
addValue((Comparable?>) v, i);
if (aValue) mCurrent = aValue; else if ((aValue) == -1) <addValue(aValue);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; else </* XXX */ v = v;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else &mType = mType; addValue(mOwner, v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((Comparable?>)v, v.mValue);
addValue((ComparableComparable?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v) mValue = ((comparable?>) v);
if (v == null) return NS_ERROR_NULL_POINTER; else v = null;
rv = v; if (v == null) &return;
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
addValue((nsIComparator<?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (((VarTerm)v) == null) &rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (aValue) &addValue((Comparable?>) v); &else &v = null;
addValue((Comparable&?>n") v);
if (aValue) <mCurrent = aValue; <else &if ((aValue) == -1) <addValue(aValue);
if (n) <addValue((Comparable?>) v); else addValue((Comparable?>) v);
addValue(((Comparable&?>)v));
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (nonVoidArray == 0) &addValue((Comparable?>) v); <else &v = v;
addValue((Comparable&?>) v[0]);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; &else /* XXX */ v = v;
if (!(v) || (v.hashTable)) v.hashTable = v; return; else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (!(v) || (v.hashTable)) &v.hashTable = v; return; else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable?>) v, null);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>&n") v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) return; <if (v) &rv = addValue(v, v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <<else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
nsresult rv; if (v) <rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <<else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparator&?>) v);
addValue((Comparable?>)a);
if (n) <addValue((Comparable?>) v); &else addValue((Comparable?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; &else &/* XXX */ v = v;
if (v == null) &/* Remove b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
if (nv) <rv = addValue(v); if (rv == 0) &/* NOTREACHED */ if (v.op == s) rv = addValue(v);
if (v == null) /* Remove &b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
if (m.m_type == m_type) &m.m_type = m_type; <else <m.m_type = m_type;
if (v == null) nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsresult rv; if (v) <rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
this.addValue((Comparable<?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else &mType = mType; <addValue(mOwner, v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else <mType = mType; <addValue(mOwner, v);
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %sn", v); return;
addValue((Comparable <?>) v);
if (aType!= t) &addValue((Comparable<?>) v);
if (v == mEmpty) addValue((Comparable?>) v);
if (nv) <rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &if (v.op == s) rv = addValue(v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else <mType = mType; &addValue(mOwner, v);
if (null!= v) addValue((Comparable&?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
if (v == null) </* Remove b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (n) <addValue((Comparable?>) v); else &addValue((Comparable?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable<?>) v, -1);
if (!IsRef()) addValue((Comparable?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (mType == ISV_ISV_ISV_NOT_INIT) addValue((Comparable<?>) v);
addValue((Comparable&?>) v, v.type);
if (aValue) addValue((Comparable?>) v); else <v = null;
if (m.m_type == m_type) <m.m_type = m_type; <else m.m_type = m_type;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else <mType = mType; addValue(mOwner, v);
if (v) addValue((Comparable&?>) v); else addValue((Comparable&?>) v);
return addValue((Comparable&?>) v);
if (v == null) &void *p = v; p.v = *v; p.v = *p; else &p.v = v;
addValue((Comparable<?>) v[0]);
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v) addValue((Comparable?>) v); else addValue((Comparable&?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable<?>)*v);
if (null!= v) addValue((Comparable?>) v);
if ((*v)!= null) addValue((Comparable&?>) v);
addValue((Comparable?>)c);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v) &nsComparator::addValue(v); else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
<addValue((Comparable?>) v);
addValue((Comparable?>) v, 1);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else &mType = mType; &addValue(mOwner, v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
if (v) &mValue = ((comparable?>) v);
if (v == null) &/* Remove <b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
if (nv) &rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v == null) <nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if ((v == null) || (v == null)) if (v) &*v = null; if (v == null) return; *v = null;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (aValue) mCurrent = aValue; <else <if ((aValue) == -1) addValue(aValue);
if (((VarTerm)v) == null) &rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (v == null)) <if (v) &*v = null; <if (v == null) return; *v = null;
if (v == mEmpty) &addValue((Comparable<?>) v);
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv;
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
if (v == null) /* Remove b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
if (v) nsComparator::addValue(v); else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; else /* XXX */ v = v;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (aValue) <mCurrent = aValue; <else if ((aValue) == -1) addValue(aValue);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (aValue) <mCurrent = aValue; else <if ((aValue) == -1) &addValue(aValue);
if (aValue) mCurrent = aValue; else <if ((aValue) == -1) <addValue(aValue);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (m.m_type == m_type) &m.m_type = m_type; &else &m.m_type = m_type;
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
(void) addValue((Comparable?>) v);
addValue((Comparable<?>) v, v.type);
if (aType!= t) &addValue((Comparable&?>) v);
return addValue((Comparable?>)v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v = mValues) || (v == null)) addValue((Comparable?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (aValue) &mCurrent = aValue; else if ((aValue) == -1) &addValue(aValue);
if (v) <nsComparator::addValue(v); <else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
addValue((Comparable?>) v, 0);
comp = addValue((Comparable?>) v);
if (nv) rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
if (v == null) </* Remove b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
nsresult rv; if (v) <rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else <mType = mType; &addValue(mOwner, v);
if (aValue) <addValue((Comparable?>) v); <else &v = null;
result = addValue((Comparable<?>) v);
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v) &addValue((Comparable?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((Comparable&?>) s);
if (v == null) /* Remove b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (nv) <rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
addValue((Comparable&?>)s);
if (v) &nsComparator::addValue(v); else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (aValue) &addValue((Comparable?>) v); <else <v = null;
addValue((Comparable<?>) v, i);
if (nv) <rv = addValue(v); if (rv == 0) </* NOTREACHED */ &if (v.op == s) rv = addValue(v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((Comparable?>), v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
if (v == null) &nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if (!m_next) <addValue((Comparable?>) v);
if (aValue) <addValue((Comparable?>) v); <else v = null;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; &else /* XXX */ v = v;
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (IsSpecial(v)) &if (!v) v = v;
if (((VarTerm)v) == null) rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (v == null) </* Remove b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (nonVoidArray == 0) &addValue((Comparable?>) v); else &v = v;
if (v) <nsComparator::addValue(v); <else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((Comparable?>)v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((VarTerm)v) == null) rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (aValue) mCurrent = aValue; &else if ((aValue) == -1) &addValue(aValue);
if (aValue) addValue((Comparable?>) v); else v = null;
addValue((ConstComparable<?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((Comparable?>) v, &si);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable&?>?>) v);
if ((v = mValues) || (v == null)) &addValue((Comparable&?>) v);
if (v == null) &nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if (nv) rv = addValue(v); if (rv == 0) </* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
if (v) <nsComparator::addValue(v); &else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (((VarTerm)v) == null) rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; else /* XXX */ v = v;
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) if ((null == v) && (null!= v)) &addValue((Comparable?>) v);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable&?>) v);
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %s<n", v); return;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <&else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v == null) || (v == null)) <if (v) <*v = null; if (v == null) return; *v = null;
if (aValue) <mCurrent = aValue; &else &if ((aValue) == -1) <addValue(aValue);
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v == null) || (v == null)) <if (v) &*v = null; &if (v == null) return; *v = null;
if (aValue) &mCurrent = aValue; <else if ((aValue) == -1) addValue(aValue);
&if (v) <mValue = ((comparable&?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == null) /* Remove <b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; &else /* XXX */ v = v;
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else &mType = mType; addValue(mOwner, v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v) nsComparator::addValue(v); &else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable<?><n") v);
addValue(((Comparable<?>) v));
if (!(v) || (v.hashTable)) v.hashTable = v; return; &<else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue(v, (Comparable&?>) v);
if (m_context) &m_context.saveValue = (Atom<?>) v;
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
return addValue((Comparable?>) v);
addValue((nsComparable?>) v);
/* * The msg is not yet in the future. */ if (msg) nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
if (v == null) nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; else /* XXX */ v = v;
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (nonVoidArray == 0) <addValue((Comparable?>) v); else v = v;
addValue((Comparable<?>) v, v.address);
if (!m_next) addValue((Comparable&?>) v);
this.addValue((Comparable?>) v);
addValue((Comparable?>) s);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else &mType = mType; addValue(mOwner, v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>) (void *)v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (mValue) &addValue((Comparable?>) v);
if (aValue) mCurrent = aValue; else if ((aValue) == -1) addValue(aValue);
if (n) &addValue((Comparable?>) v); <else <addValue((Comparable?>) v);
if (v) &aResult = null; &else &aResult = (null == aResult)? aResult: aResult;
addValue((Comparable&?>) (void **)v);
if (m.m_type == m_type) &m.m_type = m_type; &else m.m_type = m_type;
if (aType!= t) addValue((Comparable<?>) v);
nsresult rv; if (v) &rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == null) void *p = v; p.v = *v; p.v = *p; <else <p.v = v;
addValue((Comparable?>) v, false);
addValue((Comparable<?>) v.v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
if (aValue) &mCurrent = aValue; <else &if ((aValue) == -1) addValue(aValue);
if (!m_next) &addValue((Comparable?>) v);
if (v) <mValue = ((comparable&?>) v);
addValue((Comparable&?>)v);
v.setAttributes(nsAttributes::attributes, ((Comparable?>) v));
s = addValue((Comparable<?>) v);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %sn", v); return;
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) i++;
if (((VarTerm)v) == null) &rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue( (Comparable<?>) v );
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; else </* XXX */ v = v;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <&else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
nsresult rv; if (v) <rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) <i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) &i++;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v == null) return NS_ERROR_NULL_POINTER; <else <v = null;
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (!*(v = ((Comparable?>))) && v == null) <return; if (v) &rv = addValue(v, v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; else </* XXX */ v = v;
if (v == null) /* Remove <b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (m_context) m_context.saveValue = (Atom<?>) v;
if (nv) <rv = addValue(v); if (rv == 0) /* NOTREACHED */ &if (v.op == s) rv = addValue(v);
&addValue((Comparable?>) v);
if (v == null) <nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
addValue((Comparable&?>), v);
if (((VarTerm)v) == null) rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (v == null) &return NS_ERROR_NULL_POINTER; else v = null;
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (nv) &rv = addValue(v); if (rv == 0) </* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable&?>) v);
(void) addValue((Comparable<?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else <mType = mType; <addValue(mOwner, v);
if (v == null) </* Remove &b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); &else <rv = addValue((Comparable?>) v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable&?>) v);
addValue((comparison&?>) v);
addValue((Comparable?>) v, mArena);
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((ConstComparable?>) v);
addValue((Comparable&?>) v, &lp);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <<else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (!m_next) addValue((Comparable?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v == null) nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
if (nv) <rv = addValue(v); if (rv == 0) /* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
if (v) <nsComparator::addValue(v); &else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v == null) &void *p = v; p.v = *v; p.v = *p; <else &p.v = v;
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (nonVoidArray == 0) &addValue((Comparable?>) v); <else v = v;
addValue((Comparable&?>) v, this);
if (m.m_type == m_type) m.m_type = m_type; &else &m.m_type = m_type;
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); &else &rv = addValue((Comparable?>) v);
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %sn", v); return;
if (aValue) <mCurrent = aValue; &else if ((aValue) == -1) <addValue(aValue);
if (nonVoidArray == 0) addValue((Comparable?>) v); else &v = v;
if (v) addValue((Comparable?>) v);
if (v) nsComparator::addValue(v); else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((comparable&?>) v);
if (v) addValue((Comparable?>) v);
if (v) <nsComparator::addValue(v); <else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (mValue) addValue((Comparable?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; <else </* XXX */ v = v;
if (nv) rv = addValue(v); if (rv == 0) /* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; else </* XXX */ v = v;
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; <else /* XXX */ v = v;
if (v == null) return NS_ERROR_NULL_POINTER; <else &v = null;
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
v = (Comparable&?>) v;
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (aValue) &mCurrent = aValue; else &if ((aValue) == -1) addValue(aValue);
addValue((Comparable<?>) vv);
if (n) <addValue((Comparable?>) v); <else <addValue((Comparable?>) v);
if (nv) &rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if (aValue) <mCurrent = aValue; <else &if ((aValue) == -1) addValue(aValue);
if (!IsRef()) &addValue((Comparable&?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v == NS_XUL) && (v!= NS_NEW_XUL)) addValue((Comparable?>) v);
if ((v == null) || (v == null)) <if (v) *v = null; <if (v == null) return; *v = null;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); <else &rv = addValue((Comparable?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
<if (v) &mValue = ((comparable?>) v);
v = (Comparable&?>) v; addValue(v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v == null) return NS_ERROR_NULL_POINTER; &else <v = null;
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((CComparable<?>) v);
if ((v == null) || (v == null)) if (v) *v = null; &if (v == null) return; *v = null;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable&?>) v + 1);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (((VarTerm)v) == null) <rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (aValue) &mCurrent = aValue; &else &if ((aValue) == -1) <addValue(aValue);
if ((*v)!= null) <addValue((Comparable?>) v);
addValue((Comparable?>) v, aValue);
aValue = (Comparable<?>) v;
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
result = addValue((Comparable&?>) v);
nsresult rv; if (v) rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
addValue((comparable<?>)v);
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else &rv = addValue(v);
if (!(v = v.v_next)) addValue((Comparable<?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v) &addValue(v);
if (aValue) &mCurrent = aValue; &else <if ((aValue) == -1) addValue(aValue);
rv = rv; if (v == null) rv = addValue((Comparable?>) v); <else rv = addValue((Comparable?>) v);
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable<?>&n") v);
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparable&?>) v, v.address);
<nsComparator::addValue((Comparable&?>) v);
if (v) <nsComparator::addValue(v); <else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable<?><?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue( (Comparable?>) v );
if (v) <nsComparator::addValue(v); &else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsresult rv; nsresult rv = NS_OK; rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (nv) <rv = addValue(v); if (rv == 0) </* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
if (nonVoidArray == 0) <addValue((Comparable?>) v); <else &v = v;
addValue((Comparable<?>) v, mArena);
if (m_context) &m_context.saveValue = (Atom&?>) v;
if (aValue) <mCurrent = aValue; &else <if ((aValue) == -1) &addValue(aValue);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; else &/* XXX */ v = v;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); &else &rv = addValue((Comparable?>) v);
if (v) &nsComparator::addValue(v); else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (!(v) || (v.hashTable)) v.hashTable = v; return; <else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (((VarTerm)v) == null) rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (v == null)) LOG(L_ERR, "AddValue: %s<n", v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
if ((v = v.dialog)!= 0) addValue((Comparable?>) v); else addValue((Comparable?>) v);
addValue((Comparable<?>), v);
addValue((Comparable?>) v.get());
addValue((ComparableObject?>) v);
_addValue((Comparable<?>) v);
if (aValue) &mCurrent = aValue; &else &if ((aValue) == -1) &addValue(aValue);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Object?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (!*(v = ((Comparable?>))) && v == null) &return; if (v) <rv = addValue(v, v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((Comparable?>) v, &rv);
addValue((Comparable&?>) v, v);
if (((VarTerm)v) == null) &rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (aValue) mCurrent = aValue; &else &if ((aValue) == -1) <addValue(aValue);
addValue((Comparable<?>) v, v.get());
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); <else rv = addValue((Comparable?>) v);
if (null!= v) addValue((Comparable<?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); &else rv = addValue((Comparable?>) v);
addValue((compare?>) v);
if (v) <nsComparator::addValue(v); &else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else mType = mType; <addValue(mOwner, v);
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparable&?>) v));
addValue((Comparable?>) aValue);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else &rv = addValue(v);
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
*aValue = (Comparable?>) v;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; <else </* XXX */ v = v;
addValue((Comparable? >>>) v);
addValue((Comparable?>)m);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; <else /* XXX */ v = v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
v.mValue.Append((Comparable&?>) v);
if (v) <aResult = null; <else <aResult = (null == aResult)? aResult: aResult;
if (v) &nsComparator::addValue(v); &else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %sn", v); return;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (aValue) &mCurrent = aValue; else &if ((aValue) == -1) <addValue(aValue);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v = v.dialog)!= 0) addValue((Comparable?>) v); else addValue((Comparable&?>) v);
if (nv) <rv = addValue(v); if (rv == 0) /* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else rv = addValue(v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (aValue) mCurrent = aValue; <else &if ((aValue) == -1) addValue(aValue);
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (!IsRef()) <addValue((Comparable<?>) v);
/* XXX need to add a value in a non-XUL container. */ if (nel.addValue(v) == null) *v = v;
addValue((COMPARISON&?>) v);
addValue((Comparable<?>) v, type);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; <else &/* XXX */ v = v;
addValue((VoidArray?>) v);
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) &i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) i++;
if (n) <addValue((Comparable?>) v); &else &addValue((Comparable?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else &mType = mType; <addValue(mOwner, v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>)dv);
if (v) addValue((Comparable<?>) v); else addValue((Comparable&?>) v);
if (aValue) addValue((Comparable?>) v); <else v = null;
if (v == null) <return NS_ERROR_NULL_POINTER; <else v = null;
addValue((Comparable<?>) v, this);
addValue((Comparable&?><?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable<?:>) v);
if (!*(v = ((Comparable?>))) && v == null) return; if (v) <rv = addValue(v, v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else mType = mType; addValue(mOwner, v);
addValue((Comparable&?>) v, id);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (m.m_type == m_type) <m.m_type = m_type; else &m.m_type = m_type;
if (n) addValue((Comparable?>) v); else <addValue((Comparable?>) v);
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable<?>) v, 0);
addValue((compat&?>) v);
if (v == null) /* Remove &b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else <mType = mType; <addValue(mOwner, v);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else &rv = addValue(v);
addValue((Comparable<?>) (void *)v);
comp = addValue((Comparable&?>) v);
if (m.m_type == m_type) m.m_type = m_type; &else <m.m_type = m_type;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable?>) v, v.address);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; else /* XXX */ v = v;
addValue((Comparable<n>) v);
addValue((Comparable<?>) v, id);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else mType = mType; addValue(mOwner, v);
if (n) &addValue((Comparable?>) v); &else addValue((Comparable?>) v);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable&?>) v, value);
if (n) <addValue((Comparable?>) v); else <addValue((Comparable?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (nonVoidArray == 0) &addValue((Comparable?>) v); <else <v = v;
if ((v == null) || (v == null)) if (v) &*v = null; <if (v == null) return; *v = null;
if (!(v)) &addValue((Comparable&?>) v);
if (nonVoidArray == 0) addValue((Comparable?>) v); &else v = v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable<?>) v);
if (v == null) /* Remove <b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable?>) v, type);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); else &rv = addValue((Comparable?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else &mType = mType; <addValue(mOwner, v);
if (!(v)) return 0;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else mType = mType; addValue(mOwner, v);
<addValue((Comparable<?>) v);
if (v == null) /* Remove b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (v == null) </* Remove <b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
addValue((Comparable<?>&) v);
if (aValue) &addValue((Comparable?>) v); else v = null;
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else rv = addValue(v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else &mType = mType; addValue(mOwner, v);
addValue( (Comparable<?>) v);
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) if ((null == v) && (null!= v)) <addValue((Comparable?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == null) </* Remove &b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
if (mType == ISV_ISV_ISV_NOT_INIT) addValue((Comparable?>) v);
addValue((Comparable?>) v, -1);
mCopy.addValue((Comparable&?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((nsIComparable<?>) v);
addValue((comparator&?>) v);
if (n) addValue((Comparable?>) v); &else addValue((Comparable?>) v);
if (v == null) /* Remove &b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
nsresult rv; if (v) rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (v == null) void *p = v; p.v = *v; p.v = *p; else &p.v = v;
if (v) nsComparator::addValue(v); else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((CComparable?>) v);
return addValue((Comparable<?>) v);
addValue((ComparableValue?>) v);
if (v) addValue((Comparable&?>) v); else addValue((Comparable?>) v);
if (!(v = v.v_next)) &addValue((Comparable?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v) aResult = null; else aResult = (null == aResult)? aResult: aResult;
if (aValue) mCurrent = aValue; &else &if ((aValue) == -1) &addValue(aValue);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else <rv = addValue(v);
if (v) <aResult = null; <else &aResult = (null == aResult)? aResult: aResult;
addValue((Comparable?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
if (n) <addValue((Comparable?>) v); <else addValue((Comparable?>) v);
if (v) nsComparator::addValue(v); &else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == null) addValue((Comparable?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == null) void *p = v; p.v = *v; p.v = *p; else <p.v = v;
if (((VarTerm)v) == null) <rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
rv = rv; if (v == null) rv = addValue((Comparable?>) v); &else rv = addValue((Comparable?>) v);
&nsComparator::addValue((Comparable<?>) v);
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (aValue) <mCurrent = aValue; else if ((aValue) == -1) &addValue(aValue);
if (!*(v = ((Comparable?>))) && v == null) <return; &if (v) rv = addValue(v, v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else rv = addValue(v);
if (v) nsComparator::addValue(v); else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (((VarTerm)v) == null) <rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v) nsComparator::addValue(v); <else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (nv) rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
if (v) &nsComparator::addValue(v); &else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (!*(v = ((Comparable?>))) && v == null) <return; if (v) rv = addValue(v, v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>) aValue);
<if (v) mValue = ((comparable?>) v);
if (aType!= t) addValue((Comparable&?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; <else /* XXX */ v = v;
if (nv) &rv = addValue(v); if (rv == 0) &/* NOTREACHED */ if (v.op == s) rv = addValue(v);
if ((v = v.dialog)!= 0) addValue((Comparable&?>) v); else addValue((Comparable&?>) v);
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); <else <rv = addValue((Comparable?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((Comparable&?><) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (!(v = v.v_next)) <addValue((Comparable<?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (((VarTerm)v) == null) <rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else rv = addValue(v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v) <nsComparator::addValue(v); else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v == null) || (v == null)) LOG(L_ERR, "AddValue: %s&n", v);
if (n) addValue((Comparable?>) v); <else &addValue((Comparable?>) v);
addValue(((Comparable&?>) v));
if (((VarTerm)v) == null) rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v = v.dialog)!= 0) addValue((Comparable&?>) v); else addValue((Comparable?>) v);
if (((VarTerm)v) == null) <rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
aValue = addValue((Comparable<?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
<if (v) <mValue = ((comparable&?>) v);
if (aValue) addValue((Comparable?>) v); &else <v = null;
addValue((Comparable<?>) v, aValue);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v) &aResult = null; else &aResult = (null == aResult)? aResult: aResult;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
int addValue((Comparable&?>) v);
if (v == null) nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
if (v) &addValue((Comparable<?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &&else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (nv) <rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
value = (Comparable&?>) v;
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else &mType = mType; &addValue(mOwner, v);
v.setAttributes(nsAttributes::attributes, ((Comparable<?>) v));
if (!IsRef()) <addValue((Comparable&?>) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (nv) &rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable&?>) v, v.get());
if (!(v) || (v.hashTable)) v.hashTable = v; return; <<else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable&?>&) v);
if (m.m_type == m_type) <m.m_type = m_type; else <m.m_type = m_type;
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else &rv = addValue(v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
bool addValue((Comparable?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v) <aResult = null; else aResult = (null == aResult)? aResult: aResult;
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable<?>) v);
v = (Comparable<?>) v; addValue(v);
if (((VarTerm)v) == null) rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (!(v) || (v.hashTable)) v.hashTable = v; return; <<else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
return addValue((Comparable<?>)v);
if (v == null) </* Remove <b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; else </* XXX */ v = v;
addValue((Comparable?>) v, u);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
addValue((Comparable<?>) v, r);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((Comparable ?>) v);
if (v == null) &/* Remove &b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
if (v) &nsComparator::addValue(v); &else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
s = addValue((Comparable&?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v == null) || (v == null)) <LOG(L_ERR, "AddValue: %sn", v);
if (n) &addValue((Comparable?>) v); else <addValue((Comparable?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (v == null) <nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %s&n", v); return;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
setValue((Comparable<?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == null) </* Remove <b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
if (v) &nsComparator::addValue(v); else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v) addValue((Comparable<?>) v); else addValue((Comparable?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; &else </* XXX */ v = v;
if (v) nsComparator::addValue(v); &else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable<?>) v, (void**)&v);
addValue((Comparable&?>) value);
nsresult rv; nsresult rv = NS_OK; rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv;
if ((v == null) || (v == null)) if (v) &*v = null; &if (v == null) return; *v = null;
if (aValue) addValue((Comparable?>) v); &else &v = null;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == null) /* Remove b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
if (v == null) nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if (v == null) </* Remove &b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (!IsRef()) addValue((Comparable&?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; <else &/* XXX */ v = v;
addValue((Comparable?>) (void*)v);
if (! v) return 0;
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable<?>) v, c);
if (v == null) addValue((Comparable&?>) v);
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); else <rv = addValue((Comparable?>) v);
addValue((compare<?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (aValue) <mCurrent = aValue; else if ((aValue) == -1) addValue(aValue);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else &mType = mType; &addValue(mOwner, v);
if (!IsRef()) &addValue((Comparable<?>) v);
nsresult rv; if (v) rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (nv) &rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &if (v.op == s) rv = addValue(v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
if (aValue) &mCurrent = aValue; else <if ((aValue) == -1) <addValue(aValue);
addValue((Comparable?>) v);
void addValue((Comparable<?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable?>) v);
if (v == null) void *p = v; p.v = *v; p.v = *p; &else <p.v = v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable&?>) v);
addValue((Comparable<?>) v, &lp);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %s<n", v); return;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else <mType = mType; &addValue(mOwner, v);
addValue((COMPARISON<?>) v);
if (!(v)) addValue((Comparable?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((Comparable?>)v, 0);
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %s<n", v); return;
if (((VarTerm)v) == null) <rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (m.m_type == m_type) &m.m_type = m_type; <else m.m_type = m_type;
addValue((Comparable<?>) v, size);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((COMPtr&?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (IsSpecial(v)) <if (!v) v = v;
addValue((Comparable<) v);
if (aValue) mCurrent = aValue; <else <if ((aValue) == -1) <addValue(aValue);
if (v == null) </* Remove b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v) mValue = ((comparable&?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (nonVoidArray == 0) <addValue((Comparable?>) v); <else <v = v;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable<?>)v, 0, true);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
rv = addValue((Comparable?>) v);
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) if ((null == v) && (null!= v)) addValue((Comparable?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else <mType = mType; addValue(mOwner, v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == null) /* Remove &b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) &i++;
addValue((NodeList&?>) v);
if (!*(v = ((Comparable?>))) && v == null) return; &if (v) <rv = addValue(v, v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; &else /* XXX */ v = v;
<if (v) <mValue = ((comparable?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((Comparable?>) u);
if (v == null) <void *p = v; p.v = *v; p.v = *p; <else <p.v = v;
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (((VarTerm)v) == null) <rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (!mValue) <aValue = v;
addValue((Comparable&?>)v, null);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
aValue = (Comparable&?>) v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((VarTerm)v) == null) <rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (!(v = v.v_next)) &addValue((Comparable<?>) v);
if (v == null) void *p = v; p.v = *v; p.v = *p; <else p.v = v;
addValue((Comparable?>) v, value);
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsresult rv; if (v) rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else &rv = addValue(v);
if (!*(v = ((Comparable?>))) && v == null) &return; <if (v) &rv = addValue(v, v);
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else mType = mType; <addValue(mOwner, v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
if ((v = v.dialog)!= 0) addValue((Comparable?>) v); else addValue((Comparable<?>) v);
if (v) <addValue((Comparable<?>) v);
if (aValue) mCurrent = aValue; &else if ((aValue) == -1) addValue(aValue);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; <else /* XXX */ v = v;
if (!m_next) &addValue((Comparable<?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == null) </* Remove &b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
int addValue((Comparable<?>) v);
newValue = (Comparable<?>) v;
if ((v == null) || (v == null)) &LOG(L_ERR, "AddValue: %s&n", v);
if (aValue) <mCurrent = aValue; else &if ((aValue) == -1) &addValue(aValue);
if (v == null) /* Remove &b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>) v.next);
if (v) nsComparator::addValue(v); else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (((VarTerm)v) == null) &rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (!(v) || (v.hashTable)) v.hashTable = v; return; &<else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (aValue) &mCurrent = aValue; <else if ((aValue) == -1) <addValue(aValue);
<if (v) &mValue = ((comparable&?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
v.addValue((Comparable<?>) v);
if (null!= v) <addValue((Comparable<?>) v);
if (aValue) <addValue((Comparable?>) v); else v = null;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v) aResult = null; &else &aResult = (null == aResult)? aResult: aResult;
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable&?>) v, l);
if ((v == null) || (v == null)) <if (v) &*v = null; if (v == null) return; *v = null;
if (n) &addValue((Comparable?>) v); &else &addValue((Comparable?>) v);
setValue((Comparable?>) v);
if (v) nsComparator::addValue(v); <else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v) &mValue = ((comparable&?>) v);
if (nv) &rv = addValue(v); if (rv == 0) </* NOTREACHED */ if (v.op == s) rv = addValue(v);
addValue((comparator<?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; <else </* XXX */ v = v;
addValue((comparable?>)v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
if (nv) &rv = addValue(v); if (rv == 0) /* NOTREACHED */ &if (v.op == s) rv = addValue(v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (! v) &return;
if (!(v = v.v_next)) addValue((Comparable&?>) v);
if (v == null) return NS_ERROR_NULL_POINTER; else &v = null;
addValue((Comparable&?>) v, (compact nil) v);
value = (Comparable?>) v;
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (aValue) mCurrent = aValue; &else <if ((aValue) == -1) addValue(aValue);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else <mType = mType; addValue(mOwner, v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v) <aResult = null; &else &aResult = (null == aResult)? aResult: aResult;
if (v == null) &/* Remove &b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
addValue((Comparable?>) vv);
if (v == null) /* Remove <b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; <else &/* XXX */ v = v;
if ((s = v)!= 0) addValue((Comparable?>) s);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (nv) rv = addValue(v); if (rv == 0) /* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
if (v == null) <addValue((Comparable&?>) v);
&addValue((Comparable<?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
*aValue = (Comparable<?>) v;
addValue((Comparable?>&?>) v);
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); else &rv = addValue((Comparable?>) v);
rv = v; if (v == null) return;
v = (Comparable?>) v;
if ((v == null) || (v == null)) &if (v) &*v = null; &if (v == null) return; *v = null;
if (nv) &rv = addValue(v); if (rv == 0) </* NOTREACHED */ &if (v.op == s) rv = addValue(v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; &else </* XXX */ v = v;
this.addValue((Comparable&?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v = mValues) || (v == null)) addValue((Comparable&?>) v);
addValue(v, (Comparable<?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else mType = mType; &addValue(mOwner, v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else mType = mType; <addValue(mOwner, v);
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %s&n", v); return;
if (!mValue) &aValue = v;
nsresult rv; if (v) <rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
addValue((Comparable?>n") v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((Comparable<?>) v.get());
if (v == null) &nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if (aValue) mCurrent = aValue; &else <if ((aValue) == -1) &addValue(aValue);
addValue((Comparable&?>) v, val);
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparable<?>) v, &mArray);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else rv = addValue(v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (((VarTerm)v) == null) rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; <else &/* XXX */ v = v;
if (v) addValue(v);
if (aValue) <mCurrent = aValue; &else &if ((aValue) == -1) &addValue(aValue);
addValue((Comparable&?>) v, buf);
addValue((Comparable<?>) v, p);
if (nv) <rv = addValue(v); if (rv == 0) </* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
if (v == null) &void *p = v; p.v = *v; p.v = *p; else <p.v = v;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; &else /* XXX */ v = v;
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); else rv = addValue((Comparable?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else mType = mType; addValue(mOwner, v);
if (v == null) &/* Remove <b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
nsresult rv; if (v) <rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
mValue = (Comparable<?>) v;
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v) <addValue((Comparable?>) v);
if (v) nsComparator::addValue(v); else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (m_context) <m_context.saveValue = (Atom?>) v;
&addValue((Comparable&?>) v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
addValue((Comparable?>) v, &mArray);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((nsComparable&?>) v);
if (v == null) nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (m_context) m_context.saveValue = (Atom&?>) v;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == null) &nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
if ((!v)) addValue((Comparable&?>) v); else &*v = v;
if (!m_next) <addValue((Comparable<?>) v);
nsresult rv; if (v) rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
addValue((Comparable<?>) *v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable&?>) v, (void**)&v);
addValue((Comparable<?>) v, (void *) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable&?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) <rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; else /* XXX */ v = v;
if (!(v) || (v.hashTable)) v.hashTable = v; return; &&else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
v.mValue.Append((Comparable?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; <else &/* XXX */ v = v;
addValue((Comparable<?>) v, (IStyleStruct *) v);
if (nv) &rv = addValue(v); if (rv == 0) </* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
if (mValue) <addValue((Comparable<?>) v);
if (IsSpecial(v)) if (!v) &v = v;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
if (!v) &return; &v = v;
addValue((Comparable<v>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (m.m_type == m_type) m.m_type = m_type; else &m.m_type = m_type;
if ((v == null) || (v == null)) if (v) *v = null; <if (v == null) return; *v = null;
if ((*v)!= null) &addValue((Comparable&?>) v);
addValue((COMPtr<?>) v);
if (nv) rv = addValue(v); if (rv == 0) &/* NOTREACHED */ if (v.op == s) rv = addValue(v);
mCopy.addValue((Comparable<?>) v);
addValue((Comparable?>) vp);
if (v) nsComparator::addValue(v); &else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (n) <addValue((Comparable?>) v); &else <addValue((Comparable?>) v);
nsresult rv; if (v) &rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((compat?>) v);
if (((VarTerm)v) == null) rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (aValue) &addValue((Comparable?>) v); else &v = null;
addValue((ComparableObject&?>) v);
addValue((Comparable<?>) v, false);
if ((!v)) addValue((Comparable<?>) v); else *v = v;
if (v) mValue = ((comparable<?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v) nsComparator::addValue(v); else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
<addValue((Comparable<?>) v);
addValue((Comparable&?>) v, size);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &&else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (!v) return; &v = v;
if (aValue) <mCurrent = aValue; else <if ((aValue) == -1) <addValue(aValue);
if (null!= v) <addValue((Comparable?>) v);
addValue((Comparator?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else &mType = mType; &addValue(mOwner, v);
v.addValue((Comparable&?>) v);
if (v) &nsComparator::addValue(v); <else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
if ((v == NS_XUL) && (v!= NS_NEW_XUL)) addValue((Comparable<?>) v);
addValue((ComparablePtr&?>) v);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else &rv = addValue(v);
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v == null) || (v == null)) &if (v) &*v = null; <if (v == null) return; *v = null;
if (v) &nsComparator::addValue(v); <else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
v = (Comparable<?>) v;
if (v == mEmpty) <addValue((Comparable?>) v);
addValue((compatibility&?>) v);
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; <else </* XXX */ v = v;
if (v == null) </* Remove <b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable&?>) v);
if (v == null) &void *p = v; p.v = *v; p.v = *p; <else p.v = v;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else &mType = mType; &addValue(mOwner, v);
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable&?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((Comparable?>)v);
if (((VarTerm)v) == null) <rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
if ((v = mValues) || (v == null)) <addValue((Comparable&?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable<?>) v + 1);
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %s<n", v); return;
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((VarTerm)v) == null) rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
addValue((Comparable?>) v, mType);
if (!IsRef()) addValue((Comparable<?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((Comparable<?>)v, null);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else &rv = addValue(v);
if (nv) rv = addValue(v); if (rv == 0) </* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; &else &/* XXX */ v = v;
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (nonVoidArray == 0) &addValue((Comparable?>) v); &else <v = v;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); &else <rv = addValue((Comparable?>) v);
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((CComparable&?>) v);
if (aValue) &mCurrent = aValue; <else <if ((aValue) == -1) <addValue(aValue);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; &else /* XXX */ v = v;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
if (v) &aResult = null; else aResult = (null == aResult)? aResult: aResult;
addValue((Comparable&?>)v, &v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (n) &addValue((Comparable?>) v); else &addValue((Comparable?>) v);
&nsComparator::addValue((Comparable?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((s = v)!= 0) addValue((Comparable<?>) s);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
rv = rv; if (v == null) rv = addValue((Comparable?>) v); <else &rv = addValue((Comparable?>) v);
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((VarTerm)v) == null) &rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv;
if (aValue) &mCurrent = aValue; <else <if ((aValue) == -1) addValue(aValue);
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else mType = mType; addValue(mOwner, v);
if (aType!= t) <addValue((Comparable?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
rv = addValue((Comparable<?>) v);
if (v) <nsComparator::addValue(v); <else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else mType = mType; <addValue(mOwner, v);
rv = addValue((Comparable&?>) v);
if (aValue) mCurrent = aValue; <else <if ((aValue) == -1) &addValue(aValue);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable<?>)v, 1);
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; else </* XXX */ v = v;
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v) nsComparator::addValue(v); &else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
s = addValue((Comparable?>) v);
if (!(v) || (v.hashTable)) v.hashTable = v; return; &else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparable<?>) (void **)v);
addValue((Comparable<?><) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v == null) || (v == null)) &LOG(L_ERR, "AddValue: %sn", v);
if (!*(v = ((Comparable?>))) && v == null) <return; &if (v) &rv = addValue(v, v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable<?>)v, v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &<else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v == null) /* Remove b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
if (aValue) addValue((Comparable?>) v); else &v = null;
if (aValue) mCurrent = aValue; <else if ((aValue) == -1) addValue(aValue);
if (!(v) || (v.hashTable)) v.hashTable = v; return; &&else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
nsresult rv; if (v) &rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
addValue((Comparable&?>) *v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((VarTerm)v) == null) <rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v == null) || (v == null)) <LOG(L_ERR, "AddValue: %s<n", v);
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
if (v == null) <nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
if (nv) <rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
if (v == null) &void *p = v; p.v = *v; p.v = *p; else p.v = v;
addValue((nsCOMPtr?>) v);
if (v) nsComparator::addValue(v); <else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsresult rv; if (v) <rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable&?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == null) &/* Remove b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
if (v == null) &/* Remove &b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
addValue((comparable&?>)v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &<else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparable&?>)v, v.mValue);
addValue((Comparable&?>) v, null);
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v == null) &/* Remove &b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
if (v == null) /* Remove <b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsresult rv; if (v) &rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (mValue) <addValue((Comparable&?>) v);
v = addValue((Comparable?>) v);
if (v == null) void *p = v; p.v = *v; p.v = *p; else p.v = v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v) nsComparator::addValue(v); else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
return addValue((Comparable&?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((compat<?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <&else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparable?>)v, v);
if (v == null) return NS_ERROR_NULL_POINTER; &else &v = null;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; <else /* XXX */ v = v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %s<n", v); return;
addValue((comparison?>) v);
addValue((Comparable&?>) v, 1);
if (m.m_type == m_type) &m.m_type = m_type; else m.m_type = m_type;
addValue((IComparable<?>) v);
if (!(v) || (v.hashTable)) v.hashTable = v; return; &<else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparable<?>)v);
if (v) <addValue(v);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else mType = mType; <addValue(mOwner, v);
addValue((Comparable&?>) v, type);
if (((VarTerm)v) == null) rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
addValue((Comparable<?>) v, null);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &<else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (((VarTerm)v) == null) <rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == null) </* Remove &b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %s&n", v); return;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
result = addValue((Comparable?>) v);
addValue((Comparable<?>) v, mType);
if (((VarTerm)v) == null) <rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v) <aResult = null; &else aResult = (null == aResult)? aResult: aResult;
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (nv) rv = addValue(v); if (rv == 0) </* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if (nv) <rv = addValue(v); if (rv == 0) /* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
if (v == null) &/* Remove &b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %s<n", v); return;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (!*(v = ((Comparable?>))) && v == null) return; if (v) rv = addValue(v, v);
if (!(v)) &return 0;
if (v) &nsComparator::addValue(v); <else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
if (nonVoidArray == 0) addValue((Comparable?>) v); else v = v;
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
v = addValue((Comparable&?>) v);
nsresult rv; if (v) rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v) <nsComparator::addValue(v); else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Object<?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable&n>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; &else /* XXX */ v = v;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v) <mValue = ((comparable<?>) v);
if (nonVoidArray == 0) &addValue((Comparable?>) v); &else &v = v;
addValue((NodeList<?>) v);
if (n) &addValue((Comparable?>) v); &else <addValue((Comparable?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable<?>) v, null);
addValue((Comparable<?>) v, &rv);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (! v) return;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == null) <return NS_ERROR_NULL_POINTER; &else <v = null;
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v == null) &addValue((Comparable<?>) v);
return AddValue((Comparable<?>) v);
addValue((Comparable&?>)u);
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
addValue((Comparable<? >>>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable&v>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (nonVoidArray == 0) addValue((Comparable?>) v); <else v = v;
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; &else </* XXX */ v = v;
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsresult rv; if (v) rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
void addValue((Comparable?>) v);
if (v == null) <nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
nsresult rv; if (v) &rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; <else /* XXX */ v = v;
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (aValue) &mCurrent = aValue; <else &if ((aValue) == -1) &addValue(aValue);
if (v == null) &nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; else &/* XXX */ v = v;
if (v == null) </* Remove b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) &return; if (v) &rv = addValue(v, v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else &mType = mType; <addValue(mOwner, v);
if (v == null) &/* Remove <b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
if (aValue) &mCurrent = aValue; &else <if ((aValue) == -1) &addValue(aValue);
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); <else rv = addValue((Comparable?>) v);
&if (v) &mValue = ((comparable&?>) v);
addValue((Comparable<?>)v, &v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
addValue((Comparable?>)(v));
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
addValue((Comparable?><n") v);
nsCOMPtrnsIAtom> tag;
addValue((Comparable?>&n") v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else mType = mType; <addValue(mOwner, v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (!v) <return; <v = v;
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((VarTerm)v) == null) &rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
addValue((Comparable&?>) v, (void *) v);
if (v) nsComparator::addValue(v); <else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsresult rv; if (v) &rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (aValue) mCurrent = aValue; else <if ((aValue) == -1) &addValue(aValue);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) <i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) <i++;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (nonVoidArray == 0) <addValue((Comparable?>) v); else <v = v;
if (m.m_type == m_type) <m.m_type = m_type; &else m.m_type = m_type;
addValue((Comparable?>) v, (void *) v);
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) <i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) i++;
addValue((ComparableComparable&?>) v);
rv = rv; if (v == null) rv = addValue((Comparable?>) v); &else <rv = addValue((Comparable?>) v);
if (nonVoidArray == 0) addValue((Comparable?>) v); else <v = v;
if (! v) <return;
addValue((Comparable&?>) v, p);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <&else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparable?>) v, r);
if (nv) &rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
if (v == null) &return NS_ERROR_NULL_POINTER; &else &v = null;
addValue((ConstComparable&?>) v);
/* * The msg is not yet in the future. */ if (msg) nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else <rv = addValue(v);
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v) nsComparator::addValue(v); <else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
if (v) <aResult = null; &else <aResult = (null == aResult)? aResult: aResult;
if (aValue) &mCurrent = aValue; else if ((aValue) == -1) addValue(aValue);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (nonVoidArray == 0) &addValue((Comparable?>) v); &else v = v;
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; &else &/* XXX */ v = v;
nsresult rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv;
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else <rv = addValue(v);
addValue((Comparable<?>n") v);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (((VarTerm)v) == null) &rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else &mType = mType; addValue(mOwner, v);
if (m.m_type == m_type) m.m_type = m_type; else <m.m_type = m_type;
if (((VarTerm)v) == null) <rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else <mType = mType; <addValue(mOwner, v);
val = addValue((Comparable&?>) v);
if (v) <nsComparator::addValue(v); else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
(void)addValue((Comparable?>) v);
addValue((Object&?>) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable&?>)&v);
addValue((Comparable&?>) (void*)v);
rv = rv; if (v == null) rv = addValue((Comparable?>) v); else &rv = addValue((Comparable?>) v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (v) aResult = null; else &aResult = (null == aResult)? aResult: aResult;
if (nonVoidArray == 0) <addValue((Comparable?>) v); &else v = v;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; &else </* XXX */ v = v;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (aValue) mCurrent = aValue; &else if ((aValue) == -1) <addValue(aValue);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) v.hashTable = v; return; else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (n) &addValue((Comparable?>) v); else addValue((Comparable?>) v);
if (m.m_type == m_type) m.m_type = m_type; <else &m.m_type = m_type;
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else mType = mType; <addValue(mOwner, v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) &if ((null == v) && (null!= v)) addValue((Comparable?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (((VarTerm)v) == null) <rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((Comparable?>) v, (compact nil) v);
addValue((Comparable&?>)v, 0);
&if (v) <mValue = ((comparable<?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (v == null) return NS_ERROR_NULL_POINTER; else <v = null;
if (null!= v) &addValue((Comparable?>) v);
if (v) nsComparator::addValue(v); &else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (m_context) m_context.saveValue = (Atom?>) v;
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (aValue) mCurrent = aValue; else &if ((aValue) == -1) <addValue(aValue);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((ComparableComparator&?>) v);
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (nonVoidArray == 0) addValue((Comparable?>) v); &else &v = v;
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (!*(v = ((Comparable?>))) && v == null) <return; <if (v) &rv = addValue(v, v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; &else &/* XXX */ v = v;
if (!v) <return; v = v;
if (n) addValue((Comparable?>) v); <else addValue((Comparable?>) v);
addValue((Comparable&?>) v, (IStyleStruct *) v);
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %s&n", v); return;
rv = rv; if (v == null) rv = addValue((Comparable?>) v); &else &rv = addValue((Comparable?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (aType!= t) addValue((Comparable?>) v);
addValue((Comparable?>) v, p);
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?>) v.get());
if ((!v)) addValue((Comparable?>) v); else <*v = v;
addValue((Comparable&?>)) v;
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable?>) v);
if (((VarTerm)v) == null) rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
v.addValue((Comparable?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v) aResult = null; <else &aResult = (null == aResult)? aResult: aResult;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (!m_next) &addValue((Comparable&?>) v);
if (m.m_type == m_type) <m.m_type = m_type; <else &m.m_type = m_type;
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); else <rv = addValue((Comparable?>) v);
addValue((nsCOMPtr&?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((String&?>) v);
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; else &/* XXX */ v = v;
if (v == null) /* Remove <b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v == null) <return NS_ERROR_NULL_POINTER; <else <v = null;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
addValue((COMPtr?>) v);
if (m.m_type == m_type) <m.m_type = m_type; else m.m_type = m_type;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((Comparable<?>) v.value);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (!v) return; <v = v;
if (v) nsComparator::addValue(v); <else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable<?>) u);
if (aValue) mCurrent = aValue; <else if ((aValue) == -1) <addValue(aValue);
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v == null) || (v == null)) <if (v) *v = null; &if (v == null) return; *v = null;
if (aValue) mCurrent = aValue; &else &if ((aValue) == -1) addValue(aValue);
if (v) &nsComparator::addValue(v); else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((VarTerm)v) == null) rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (IsSpecial(v)) <if (!v) <v = v;
addValue((Comparable&?>) v, -1);
aValue = (Comparable?>) v;
if (v == null) <void *p = v; p.v = *v; p.v = *p; <else p.v = v;
addValue((nsIComparator&?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; else /* XXX */ v = v;
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
i = addValue((Comparable<?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v == null) /* Remove b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) return; &if (v) rv = addValue(v, v);
if ((!v)) addValue((Comparable&?>) v); else *v = v;
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else <mType = mType; addValue(mOwner, v);
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v = mValues) || (v == null)) &addValue((Comparable<?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (aValue) &mCurrent = aValue; else <if ((aValue) == -1) addValue(aValue);
addValue((Comparable?><?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; <else </* XXX */ v = v;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
_addValue((Comparable?>) v);
if (v) <nsComparator::addValue(v); &else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((Node&?>) v);
addValue((Comparator<?>) v);
mValue = (Comparable?>) v;
if ((*v)!= null) addValue((Comparable<?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (((VarTerm)v) == null) &rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (nv) rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable&?>) v, 0);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (nv) &rv = addValue(v); if (rv == 0) </* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else &mType = mType; &addValue(mOwner, v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (m.m_type == m_type) <m.m_type = m_type; <else <m.m_type = m_type;
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v = v.dialog)!= 0) addValue((Comparable<?>) v); else addValue((Comparable?>) v);
addValue((Comparable?>) v, null);
if (!(v = v.v_next)) addValue((Comparable?>) v);
addValue((Comparable?>) v, &lp);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (nonVoidArray == 0) <addValue((Comparable?>) v); &else &v = v;
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (aValue) <mCurrent = aValue; else if ((aValue) == -1) <addValue(aValue);
addValue((Comparable&?>)v, v);
if (!(v = v.v_next)) &addValue((Comparable&?>) v);
if (v) &nsComparator::addValue(v); &else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable<?>) v, (compact nil) v);
addValue((Comparable?>) v));
addValue((String<?>) v);
*aValue = (Comparable&?>) v;
nsComparator::addValue((Comparable&?>) v);
val = (Comparable?>) v;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else mType = mType; &addValue(mOwner, v);
if (m.m_type == m_type) <m.m_type = m_type; &else &m.m_type = m_type;
addValue((Comparable&?>) v, mArena);
if (aValue) <mCurrent = aValue; &else if ((aValue) == -1) &addValue(aValue);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
if (nonVoidArray == 0) <addValue((Comparable?>) v); else &v = v;
if (!*(v = ((Comparable?>))) && v == null) &return; &if (v) <rv = addValue(v, v);
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else <rv = addValue(v);
nsresult rv; if (v) <rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr&nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (! v) return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) &if ((null == v) && (null!= v)) &addValue((Comparable?>) v);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
/* XXX need to add a value in a non-XUL container. */ if (nel.addValue(v) == null) <*v = v;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else &mType = mType; &addValue(mOwner, v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (nonVoidArray == 0) <addValue((Comparable?>) v); &else <v = v;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable<?>) v, v.mProp);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
val = (Comparable<?>) v;
addValue((nsComparable<?>) v);
addValue((Comparable&?>)m);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (nv) &rv = addValue(v); if (rv == 0) </* NOTREACHED */ <if (v.op == s) rv = addValue(v);
nsresult rv; if (v) &rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
addValue((Comparable&?>) v, u);
/* The object that does not have a value in the attribute list. */ addValue((Comparable<?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == null) &nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
addValue((PRUint32?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (IsSpecial(v)) <if (!v) &v = v;
(void)addValue((Comparable&?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (aValue) &mCurrent = aValue; else <if ((aValue) == -1) &addValue(aValue);
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
addValue(((Comparable?>) v));
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
nsresult rv; if (v) rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if ((v == null) || (v == null)) &if (v) *v = null; if (v == null) return; *v = null;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; <else &/* XXX */ v = v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((Comparable<?>) &v);
if (aType!= t) <addValue((Comparable<?>) v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (aValue) <mCurrent = aValue; else <if ((aValue) == -1) addValue(aValue);
if (!aValue) return 0;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
if (nv) &rv = addValue(v); if (rv == 0) /* NOTREACHED */ if (v.op == s) rv = addValue(v);
bool addValue((Comparable<?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return;
addValue((Comparable<?>) value);
if (((VarTerm)v) == null) rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (nonVoidArray == 0) <addValue((Comparable?>) v); <else v = v;
addValue((Comparable<?>) (void*)v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((compatibility<?>) v);
if (v == null) &/* Remove &b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &<else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
if (v) <nsComparator::addValue(v); <else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (((VarTerm)v) == null) rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (v == null) void *p = v; p.v = *v; p.v = *p; <else &p.v = v;
if (nv) <rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if (v) addValue((Comparable?>) v); else addValue((Comparable?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v) &nsComparator::addValue(v); &else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else rv = addValue(v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else &mType = mType; addValue(mOwner, v);
addValue((Comparable?>) v, c);
if (!(v) || (v.hashTable)) v.hashTable = v; return; &&else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else &mType = mType; <addValue(mOwner, v);
if (nv) rv = addValue(v); if (rv == 0) /* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
aValue = addValue((Comparable&?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else <mType = mType; &addValue(mOwner, v);
if (!(v)) addValue((Comparable&?>) v);
nsresult rv; nsresult rv = NS_OK; rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv;
addValue((Comparable<?>)c);
if (v == null) <nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %sn", v); return;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (aValue) <mCurrent = aValue; &else &if ((aValue) == -1) addValue(aValue);
addValue((VoidArray<?>) v);
if (aValue) &mCurrent = aValue; else if ((aValue) == -1) <addValue(aValue);
if (aValue) &mCurrent = aValue; <else <if ((aValue) == -1) &addValue(aValue);
addValue((Comparable&?>>) v);
if (v == null) &void *p = v; p.v = *v; p.v = *p; &else &p.v = v;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else &mType = mType; &addValue(mOwner, v);
if (v == null) &return NS_ERROR_NULL_POINTER; <else <v = null;
/* XXX need to add a value in a non-XUL container. */ if (nel.addValue(v) == null) &*v = v;
if ((v == null) || (v == null)) LOG(L_ERR, "AddValue: %sn", v);
if (((VarTerm)v) == null) <rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (!IsRef()) <addValue((Comparable?>) v);
if (v == null) <return NS_ERROR_NULL_POINTER; else v = null;
bool addValue((Comparable&?>) v);
/* * The msg is not yet in the future. */ if (msg) nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
v = addValue((Comparable?>)v);
addValue((PRUint32&?>) v);
if (v == null) <return NS_ERROR_NULL_POINTER; <else &v = null;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; else </* XXX */ v = v;
if (v) &nsComparator::addValue(v); <else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %sn", v); return;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else mType = mType; addValue(mOwner, v);
if (v == null) &void *p = v; p.v = *v; p.v = *p; &else p.v = v;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
mCopy.addValue((Comparable?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; &else </* XXX */ v = v;
addValue((Comparable<?>) v, s);
addValue((Comparable?>) v, id);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; <&else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v) <nsComparator::addValue(v); <else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else mType = mType; <addValue(mOwner, v);
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %s&n", v); return;
if (!(v) || (v.hashTable)) v.hashTable = v; return; <<else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; &else &/* XXX */ v = v;
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
if (aValue) mCurrent = aValue; else &if ((aValue) == -1) &addValue(aValue);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (n) addValue((Comparable?>) v); <else <addValue((Comparable?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v) nsComparator::addValue(v); <else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else <mType = mType; &addValue(mOwner, v);
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable<?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else mType = mType; &addValue(mOwner, v);
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v == mEmpty) <addValue((Comparable<?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (m.m_type == m_type) &m.m_type = m_type; else <m.m_type = m_type;
if (v) nsComparator::addValue(v); else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable&?>) vp);
addValue((Comparable<?>) v, val);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (nonVoidArray == 0) &addValue((Comparable?>) v); else v = v;
addValue((Comparable?>) v, v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
if (aValue) mCurrent = aValue; <else &if ((aValue) == -1) &addValue(aValue);
<if (v) mValue = ((comparable<?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else <mType = mType; &addValue(mOwner, v);
newValue = (Comparable&?>) v;
addValue((Comparable&?><n") v);
addValue((Comparable?>>) v);
addValue((Comparable<?>)v, 0);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable<?>) v, v.mValue);
if (!v) return;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; else /* XXX */ v = v;
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable&?>) v, r);
if ((v == null) || (v == null)) if (v) <*v = null; if (v == null) return; *v = null;
addValue(((Comparable?>)v));
addValue((Comparable&?:>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else <mType = mType; &addValue(mOwner, v);
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?>) (void**)v);
if (v == null) <return NS_ERROR_NULL_POINTER; else <v = null;
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %s&n", v); return;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsAutoString val; if ((VarTerm) && val == '0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v == null) <return NS_ERROR_NULL_POINTER; &else &v = null;
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((!v)) addValue((Comparable<?>) v); else &*v = v;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((ComparableComparator<?>) v);
if (v) <nsComparator::addValue(v); &else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable?>) v, (IStyleStruct *) v);
if (aValue) &mCurrent = aValue; &else if ((aValue) == -1) <addValue(aValue);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; &else &/* XXX */ v = v;
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable<?>) v);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else <rv = addValue(v);
if (v == null) &/* Remove <b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
if (!(v)) addValue((Comparable<?>) v);
nsresult rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv;
if (v) aResult = null; <else aResult = (null == aResult)? aResult: aResult;
if (v == null) &/* Remove <b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((Comparable?>) v, this);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparable&?>)c);
if (v == null) <void *p = v; p.v = *v; p.v = *p; &else &p.v = v;
addValue((Comparable<?>) v, buf);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?>)dv);
if (nv) rv = addValue(v); if (rv == 0) /* NOTREACHED */ &if (v.op == s) rv = addValue(v);
addValue(((Comparable<?>)v));
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; else &/* XXX */ v = v;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v) &aResult = null; &else <aResult = (null == aResult)? aResult: aResult;
addValue((Comparable&?>)v, 0, true);
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (aValue) <mCurrent = aValue; &else <if ((aValue) == -1) addValue(aValue);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &&else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (mValue) &addValue((Comparable&?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else <rv = addValue(v);
if (v) &mValue = ((comparable<?>) v);
addValue((Comparable<?>) v, 1);
if (aValue) <mCurrent = aValue; else &if ((aValue) == -1) <addValue(aValue);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (nv) rv = addValue(v); if (rv == 0) </* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((Comparable&?>)*v);
::addValue((Comparable&?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (((VarTerm)v) == null) <rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (v == null) &return NS_ERROR_NULL_POINTER; else &v = null;
&if (v) mValue = ((comparable?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (!*(v = ((Comparable?>))) && v == null) return; &if (v) &rv = addValue(v, v);
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((*v)!= null) addValue((Comparable?>) v);
addValue((Comparable<?>) v, &si);
if (!IsRef()) &addValue((Comparable?>) v);
if (v == null) nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; else &/* XXX */ v = v;
<if (v) mValue = ((comparable&?>) v);
if (v) <nsComparator::addValue(v); <else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable?>?>) v);
if (nonVoidArray == 0) addValue((Comparable?>) v); <else <v = v;
if (v == null) &return NS_ERROR_NULL_POINTER; &else <v = null;
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) <if ((null == v) && (null!= v)) &addValue((Comparable?>) v);
addValue((ComparableObject<?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
/* * The msg is not yet in the future. */ if (msg) nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
nsresult rv; if (v) &rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtrnsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
if (((VarTerm)v) == null) <rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %s&n", v); return;
addValue((Comparable&?>) vv);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &&else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; &else &/* XXX */ v = v;
if (v) &nsComparator::addValue(v); &else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &<else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; <else /* XXX */ v = v;
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == null) <void *p = v; p.v = *v; p.v = *p; <else &p.v = v;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; <else /* XXX */ v = v;
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) <v.hashTable = v; return; &&else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (m_context) <m_context.saveValue = (Atom<?>) v;
if ((v == null) || (v == null)) <if (v) <*v = null; <if (v == null) return; *v = null;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
addValue((Comparable?>) (void **)v);
if ((v = v.dialog)!= 0) addValue((Comparable&?>) v); else addValue((Comparable<?>) v);
if (aValue) mCurrent = aValue; <else if ((aValue) == -1) &addValue(aValue);
if (v == NS_OK) &struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else &rv = addValue(v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) &/* XXX */ v = v; <else </* XXX */ v = v;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; &else /* XXX */ v = v;
addValue((Comparable?>)) v;
if (!mValue) aValue = v;
if (v == null) &return NS_ERROR_NULL_POINTER; <else v = null;
addValue((Comparable?>)v, 1);
if ((v == null) || (v == null)) &if (v) <*v = null; if (v == null) return; *v = null;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else mType = mType; <addValue(mOwner, v);
if (aValue) &mCurrent = aValue; &else &if ((aValue) == -1) addValue(aValue);
addValue((Comparable&?>) v, false);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; &else /* XXX */ v = v;
addValue((Comparable<?>) aValue);
addValue((Comparable<?>) v, l);
if (nv) &rv = addValue(v); if (rv == 0) /* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if (nv) <rv = addValue(v); if (rv == 0) /* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if (v) &nsComparator::addValue(v); else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (aValue) <mCurrent = aValue; &else <if ((aValue) == -1) <addValue(aValue);
if (nv) rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else <rv = addValue(v);
addValue((Comparable) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else <mType = mType; addValue(mOwner, v);
if (IsSpecial(v)) &if (!v) <v = v;
if (m.m_type == m_type) <m.m_type = m_type; &else <m.m_type = m_type;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((comparison<?>) v);
addValue((nsCOMPtr<?>) v);
if (v == null) &/* Remove b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>) (void**)v);
if (v) <nsComparator::addValue(v); &else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (!aValue) <return 0;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; &else </* XXX */ v = v;
addValue((Comparable&?>) v.get());
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable&?>) v, &si);
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) </* XXX */ v = v; &else </* XXX */ v = v;
if ((v == null) || (v == null)) if (v) <*v = null; <if (v == null) return; *v = null;
if (v) addValue((Comparable<?>) v); else addValue((Comparable<?>) v);
if (v) &nsComparator::addValue(v); else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; &else &/* XXX */ v = v;
if (v) &aResult = null; &else aResult = (null == aResult)? aResult: aResult;
<addValue((Comparable&?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (aType!= t) <addValue((Comparable&?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; <else /* XXX */ v = v;
addValue((comparable<?>) v);
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) <i++;
if (((VarTerm)v) == null) rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
val = addValue((Comparable?>) v);
if (aValue) addValue((Comparable?>) v); &else v = null;
if (mValue) <addValue((Comparable?>) v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (aValue) &mCurrent = aValue; <else &if ((aValue) == -1) <addValue(aValue);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) return; <if (v) <rv = addValue(v, v);
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (aValue) mCurrent = aValue; else &if ((aValue) == -1) addValue(aValue);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (nv) &rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
if (v) <nsComparator::addValue(v); <else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((comparator?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (((VarTerm)v) == null) &rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (v == null) &/* Remove b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
addValue((nsIComparator?>) v);
&addValue((Comparable?>) v);
if (v) &nsComparator::addValue(v); else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v == null) /* Remove &b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
addValue((Comparable?>&) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else mType = mType; &addValue(mOwner, v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else <mType = mType; addValue(mOwner, v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <<else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
addValue((Comparable<?>)m);
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
/* * The msg is not yet in the future. */ if (msg) nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>) v, &mArray);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; else /* XXX */ v = v;
if (v) <aResult = null; else &aResult = (null == aResult)? aResult: aResult;
if (nv) <rv = addValue(v); if (rv == 0) </* NOTREACHED */ if (v.op == s) rv = addValue(v);
if (aValue) addValue((Comparable?>) v); <else <v = null;
if (v) <nsComparator::addValue(v); else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (aValue) <mCurrent = aValue; <else <if ((aValue) == -1) addValue(aValue);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?>) v + 1);
if (((VarTerm)v) == null) rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
addValue((Comparablev>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparable<?>) v));
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparablen>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; else &/* XXX */ v = v;
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((Comparable?>) v[0]);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
/* The object that does not have a value in the attribute list. */ addValue((Comparable&?>) v);
if (nv) &rv = addValue(v); if (rv == 0) /* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
nsresult rv; if (v) <rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable<?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
if (v) &nsComparator::addValue(v); &else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == null) /* Remove b> value, in this case */ if (v!= null) <<else addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) <if ((null == v) && (null!= v)) addValue((Comparable?>) v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
<if (v) <mValue = ((comparable<?>) v);
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %sn", v); return;
if (v) aResult = null; else <aResult = (null == aResult)? aResult: aResult;
if (nonVoidArray == 0) addValue((Comparable?>) v); &else <v = v;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else mType = mType; &addValue(mOwner, v);
if (v) &nsComparator::addValue(v); <else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else &mType = mType; <addValue(mOwner, v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((NodeList?>) v);
<if (v) &mValue = ((comparable<?>) v);
if (v == null) </* Remove &b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable?>) v);
&if (v) &mValue = ((comparable<?>) v);
if (v == null) </* Remove b> value, in this case */ if (v!= null) else addValue((Comparable<unk>?>) v);
if (mType == ISV_ISV_ISV_NOT_INIT) addValue((Comparable&?>) v);
if (((VarTerm)v) == null) <rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (((VarTerm)v) == null) &rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <&else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else <mType = mType; <addValue(mOwner, v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else &mType = mType; addValue(mOwner, v);
if (v) &nsComparator::addValue(v); <else <nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((comparable?>) v);
if (nv) <rv = addValue(v); if (rv == 0) &/* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <<else addValue((Comparable<unk>?>) v);
if (m.m_type == m_type) &m.m_type = m_type; <else &m.m_type = m_type;
if (nv) rv = addValue(v); if (rv == 0) </* NOTREACHED */ if (v.op == s) rv = addValue(v);
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable?>) v);
if (nv) <rv = addValue(v); if (rv == 0) </* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if (v == null) &/* Remove &b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; <else &/* XXX */ v = v;
if (!(v) || (v.hashTable)) v.hashTable = v; return; <else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?>) &v);
addValue((Comparable?>) value);
if (nv) rv = addValue(v); if (rv == 0) /* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if (aValue) &mCurrent = aValue; &else if ((aValue) == -1) &addValue(aValue);
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else <v.AppendValue((Comparable<unk>?>) v);
nsCOMPtr&nsIAtom> tag;
addValue(v);
if (v == null) &addValue((Comparable?>) v);
if (! v) <return 0;
if (null!= v) &addValue((Comparable<?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else mType = mType; &addValue(mOwner, v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else &mType = mType; <addValue(mOwner, v);
if ((!v)) addValue((Comparable<?>) v); else <*v = v;
addValue((nsIComparable?>) v);
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable&?>) v);
if (nv) rv = addValue(v); if (rv == 0) /* NOTREACHED */ if (v.op == s) rv = addValue(v);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else rv = addValue(v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (((VarTerm)v) == null) <rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) /* XXX */ v = v; else </* XXX */ v = v;
if (v) &nsComparator::addValue(v); <else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
addValue((Comparable&?>)a);
if (aValue) mCurrent = aValue; else <if ((aValue) == -1) addValue(aValue);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if ((v == null) || (v == null)) &if (v) <*v = null; <if (v == null) return; *v = null;
if (!*(v = ((Comparable?>))) && v == null) &return; &if (v) &rv = addValue(v, v);
addValue((Comparable<?>)v);
if (!aValue) &return 0;
addValue((Comparable<?>)v, v.mValue);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (aValue) <mCurrent = aValue; <else &if ((aValue) == -1) &addValue(aValue);
addValue((Comparable<?>) v.next);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsresult rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv;
if (v == null) &void *p = v; p.v = *v; p.v = *p; &else <p.v = v;
i = addValue((Comparable?>) v);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
return addValue((Comparable&?>)v);
addValue((PRUint32<?>) v);
addValue((Comparable?>) v, v.get());
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
v = (Comparable?>) v; addValue(v);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v) nsComparator::addValue(v); &else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (n) &addValue((Comparable?>) v); <else &addValue((Comparable?>) v);
if (aValue) &mCurrent = aValue; &else <if ((aValue) == -1) <addValue(aValue);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
rv = rv; if (v == null) rv = addValue((Comparable?>) v); <else <rv = addValue((Comparable?>) v);
_addValue((Comparable&?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) </* XXX */ v = v; <else &/* XXX */ v = v;
addValue((Comparable<?>) v.get());
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (nv) rv = addValue(v); if (rv == 0) </* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
if (aValue) &addValue((Comparable?>) v); &else v = null;
if (!v) &return; v = v;
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %sn", v); return;
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else <mType = mType; &addValue(mOwner, v);
addValue((Comparable?>) (void *)v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else <mType = mType; &addValue(mOwner, v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else mType = mType; &addValue(mOwner, v);
if (mValue) addValue((Comparable<?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else &if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (((Comparable&?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %sn", v); return;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((Comparable?>)*v);
if (v == null) nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (m.m_type == m_type) &m.m_type = m_type; else &m.m_type = m_type;
if ((!v)) addValue((Comparable&?>) v); else <*v = v;
if (!*(v = ((Comparable?>))) && v == null) &return; if (v) rv = addValue(v, v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; <else &mType = mType; addValue(mOwner, v);
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable?>) v);
if ((v == null) || (v == null)) &LOG(L_ERR, "AddValue: %s<n", v);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; <else <rv = addValue(v);
if ((v = v.dialog)!= 0) addValue((Comparable<?>) v); else addValue((Comparable&?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v) nsComparator::addValue(v); <else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v = mValues) || (v == null)) &addValue((Comparable?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
if (v) <nsComparator::addValue(v); else &nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable&?>) &v);
/* * The msg is not yet in the future. */ if (msg) nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
if (!(v)) &addValue((Comparable?>) v);
if (((VarTerm)v) == null) rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
(void) addValue((Comparable&?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
addValue((Comparable<?>) v, u);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else rv = addValue(v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) /* XXX */ v = v; <else </* XXX */ v = v;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
if (nv) <rv = addValue(v); if (rv == 0) /* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
addValue((Comparable<?>) vp);
if (aValue) <addValue((Comparable?>) v); &else &v = null;
addValue((Comparable<?>) v);
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) <return; &if (v) <rv = addValue(v, v);
if (((VarTerm)v) == null) &rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
addValue((Comparable?>) v, v.mProp);
if (!(v) || (v.hashTable)) v.hashTable = v; return; <else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (!(v)) <addValue((Comparable&?>) v);
addValue((ComparablePtr<?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((VarTerm)v) == null) &rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
addValue((Comparable&?>) v, s);
if (aValue) &addValue((Comparable?>) v); <else v = null;
if (v == null) <nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) return rv;
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable?>) v);
if (v == null) &nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
void addValue((Comparable&?>) v);
addValue((Comparable<?>)(v));
value = (Comparable<?>) v;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else mType = mType; addValue(mOwner, v);
if (v == null) &return NS_ERROR_NULL_POINTER; &else v = null;
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) v.hashTable = v; return; <&else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &&else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v == null) </* Remove <b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
i = addValue((Comparable&?>) v);
if (aValue) &addValue((Comparable?>) v); else <v = null;
<nsComparator::addValue((Comparable<?>) v);
if (((VarTerm)v) == null) rv = v; return rv; else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (v) <nsComparator::addValue(v); else nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else rv = addValue(v);
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) mpListener.AddValue((Comparable<unk>?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable&?>) v, i);
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) &i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) <i++;
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable<?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
if (v) addValue((Comparable&?>) v);
nsresult rv; if (v) &rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv; nsCOMPtr<nsIContent> content; rv = addValue(aCX, content); if (NS_FAILED(rv)) return rv; rv = addValue(aCX, content, v); if (NS_FAILED(rv)) return rv;
addValue( (Comparable&?>) v );
addValue((Comparable&?>) v.v);
if (v == null) &/* Remove <b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
addValue((Comparable?>)v, null);
if (v) &addValue((Comparable&?>) v);
if (v == null) &/* Remove b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else v.AppendValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (m.m_type == m_type) m.m_type = m_type; <else m.m_type = m_type;
if ((v = v.dialog)!= 0) addValue((Comparable<?>) v); else addValue((Comparable<?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); else addValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else mType = mType; &addValue(mOwner, v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; &else </* XXX */ v = v;
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) <if ((null == v) && (null!= v)) <addValue((Comparable?>) v);
v = addValue((Comparable<?>)v);
if ((v == null) || (v == null)) <if (v) <*v = null; &if (v == null) return; *v = null;
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; else /* XXX */ v = v;
if (v == null) <void *p = v; p.v = *v; p.v = *p; else p.v = v;
if (!(v)) <addValue((Comparable?>) v);
if (v) &aResult = null; <else &aResult = (null == aResult)? aResult: aResult;
addValue((Comparable<?>)) v;
if ((v == null) || (v == null)) if (v) *v = null; if (v == null) return; *v = null;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (((VarTerm)v) == null) <rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (nv) rv = addValue(v); if (rv == 0) </* NOTREACHED */ &if (v.op == s) rv = addValue(v);
addValue((compare&?>) v);
/* * The msg is not yet in the future. */ if (msg) &nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (v == null) <nsCOMPtrnsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
if (nv) &rv = addValue(v); if (rv == 0) /* NOTREACHED */ <<if (v.op == s) rv = addValue(v);
if (!*(v = ((Comparable?>))) && v == null) return; if (v) &rv = addValue(v, v);
addValue((Node?>) v);
addValue((Comparable<?>?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &<else addValue((Comparable<unk>?>) v);
addValue((Comparable&?>) v.value);
if ((v == null) || (v == null)) if (v) <*v = null; &if (v == null) return; *v = null;
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (m.m_type == m_type) &m.m_type = m_type; &else <m.m_type = m_type;
if (!*(v = ((Comparable?>))) && v == null) return; <if (v) rv = addValue(v, v);
if (!v) <return;
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (aValue) mCurrent = aValue; &else <if ((aValue) == -1) <addValue(aValue);
addValue((String?>) v);
if (v) <nsComparator::addValue(v); else nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (nv) <rv = addValue(v); if (rv == 0) /* NOTREACHED */ if (v.op == s) rv = addValue(v);
addValue((Comparable<?>)&v);
addValue((Comparable<?>)u);
addValue((Comparable&?>) v.get());
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); &else rv = addValue((Comparable?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; &else <mType = mType; <addValue(mOwner, v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == NS_OK) <struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; else &rv = addValue(v);
/* * The msg is not yet in the future. */ if (msg) nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((!v)) addValue((Comparable?>) v); else &*v = v;
addValue((Comparable?>)u);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; &else <mType = mType; addValue(mOwner, v);
addValue((Comparable?>) v, v.type);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; <else &/* XXX */ v = v;
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else &v.AppendValue((Comparable<unk>?>) v);
if (v) <addValue((Comparable&?>) v);
if ((*v)!= null) &addValue((Comparable?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?>) v, size);
if (aValue) <mCurrent = aValue; else &if ((aValue) == -1) addValue(aValue);
if (((VarTerm)v) == null) &rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (IsSpecial(v)) &if (!v) &v = v;
if (nonVoidArray == 0) addValue((Comparable?>) v); <else &v = v;
if (!m_next) <addValue((Comparable&?>) v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == null) &addValue((Comparable&?>) v);
if (n) addValue((Comparable?>) v); &else &addValue((Comparable?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((VarTerm)v) == null) rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
addValue((Comparable?><) v);
if (aValue) <mCurrent = aValue; &else if ((aValue) == -1) addValue(aValue);
v.mValue.Append((Comparable<?>) v);
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; &else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((v == null) || (v == null)) &if (v) <*v = null; &if (v == null) return; *v = null;
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else &v.AppendValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((Comparable&?>)v);
if (((VarTerm)v) == null) rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
nsAutoString val; if ((VarTerm) && val == '<0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
setValue((Comparable&?>) v);
addValue((Comparable&?>) v, v.mValue);
<nsComparator::addValue((Comparable?>) v);
if (v) aResult = null; &else aResult = (null == aResult)? aResult: aResult;
if (!(v) || (v.hashTable)) v.hashTable = v; return; <&else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (((v = (Comparable<unk>?>) v))!= 0) /* XXX */ if (v) &/* XXX */ v = v; <else </* XXX */ v = v;
/* The object that does not have a value in the attribute list. */ addValue((Comparable?>) v);
addValue((ComparableComparator?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (aValue) addValue((Comparable?>) v); <else &v = null;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; <else <mType = mType; addValue(mOwner, v);
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((v == NS_XUL) && (v!= NS_NEW_XUL)) addValue((Comparable&?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; <else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v) nsComparator::addValue(v); &else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == null) <void *p = v; p.v = *v; p.v = *p; else <p.v = v;
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((s = v)!= 0) addValue((Comparable&?>) s);
nsComparator::addValue((Comparable?>) v);
addValue((Comparable&?>) v, null);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v == null) && ((null == v) && ((v == null)) && (((null == v)) && (null!= v))) &if ((null == v) && (null!= v)) <addValue((Comparable?>) v);
if (v == null) <void *p = v; p.v = *v; p.v = *p; else &p.v = v;
if (((VarTerm)v) == null) <rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (v == null) void *p = v; p.v = *v; p.v = *p; &else &p.v = v;
if (v == null) &/* Remove <b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
rv = rv; if (v == null) rv = addValue((Comparable?>) v); else rv = addValue((Comparable?>) v);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (aValue) <mCurrent = aValue; <else <if ((aValue) == -1) &addValue(aValue);
addValue((Comparable&?>)v, 1);
if (!*(v = ((Comparable?>))) && v == null) &return; &if (v) rv = addValue(v, v);
if ((v == null) || (v == null)) <if (v) *v = null; if (v == null) return; *v = null;
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else &v.AppendValue((Comparable<unk>?>) v);
if (!v) return; v = v;
if (nonVoidArray == 0) &addValue((Comparable?>) v); else <v = v;
if (v == mEmpty) addValue((Comparable<?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
addValue((Comparable?>)v, 0, true);
if (v == null) nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) &return rv;
if (v) addValue((Comparable<?>) v);
if (v == null) <addValue((Comparable<?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; &else rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (!v) &return; <v = v;
if (!(v) || (v.hashTable)) v.hashTable = v; return; &else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (!*(v = ((Comparable?>))) && v == null) &return; <if (v) rv = addValue(v, v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
/* * The msg is not yet in the future. */ if (msg) nsCOMPtr<nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else <mType = mType; <addValue(mOwner, v);
if ((v == null) || (v == null)) <LOG(L_ERR, "AddValue: %s&n", v);
nsAutoString val; if ((VarTerm) && val == '<0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (v) <aResult = null; else <aResult = (null == aResult)? aResult: aResult;
mValue = (Comparable&?>) v;
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparable?>) v.v);
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable?>)s);
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
rv = addValue((Comparable?>) v); if (NS_FAILED(rv)) return rv;
addValue((Comparable&?>) v, &rv);
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) <fprintf(stderr, "AppendValue: %s&n", v); return;
if (v == null) /* Remove &b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
if (m_context) &m_context.saveValue = (Atom?>) v;
if (((VarTerm)v) == null) rv = v; return rv; &else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
nsComparator::addValue((Comparable<?>) v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else <mType = mType; <addValue(mOwner, v);
addValue((Comparable<?>>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v) <mValue = ((comparable?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((Comparable<?>) (void**)v);
addValue((ComparablePtr?>) v);
if (((VarTerm)v) == null) rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (((VarTerm)v) == null) <rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((v == null) || (v == null)) &if (v) &*v = null; if (v == null) return; *v = null;
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (v == null) </* Remove <b> value, in this case */ if (v!= null) &&else addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) <return; <if (v) <rv = addValue(v, v);
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return;
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; else &mType = mType; <addValue(mOwner, v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) &nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (aValue) <addValue((Comparable?>) v); &else <v = null;
if (aValue) <mCurrent = aValue; <else if ((aValue) == -1) <addValue(aValue);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (nv) <rv = addValue(v); if (rv == 0) </* NOTREACHED */ &<if (v.op == s) rv = addValue(v);
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) &addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
return addValue((Comparable<?>) v);
addValue((nsIComparable&?>) v);
if (((VarTerm)v) == null) &rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); else &if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) <rv = addValue((Comparable?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((IComparable?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if ((v = mValues) || (v == null)) <addValue((Comparable<?>) v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v == null) <void *p = v; p.v = *v; p.v = *p; &else p.v = v;
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
/* * The msg is not yet in the future. */ if (msg) <nsCOMPtr&nsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) <mpListener.AddValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (IsSpecial(v)) if (!v) <v = v;
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((*v)!= null) &addValue((Comparable<?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; &else &/* XXX */ v = v;
if (m.m_type == m_type) m.m_type = m_type; <else <m.m_type = m_type;
if (aType!= t) &addValue((Comparable?>) v);
nsAutoString val; if ((VarTerm) && val == '&0') </* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v = v.GetContainingPtr()) == 0) if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
addValue((Comparable&?>) v, c);
&if (v) <mValue = ((comparable?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <else addValue((Comparable<unk>?>) v);
if (!*(v = ((Comparable?>))) && v == null) <return; if (v) <rv = addValue(v, v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else <v.AppendValue((Comparable<unk>?>) v);
v.setAttributes(nsAttributes::attributes, ((Comparable&?>) v));
if (v == null) &return NS_ERROR_NULL_POINTER; else <v = null;
rv = rv; if (v == null) <rv = addValue((Comparable?>) v); <else <rv = addValue((Comparable?>) v);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == null) addValue((Comparable<?>) v);
nsAutoString val; if ((VarTerm) && val == '0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; &else mType = mType; addValue(mOwner, v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
<addValue((Comparable&?>) v);
if (((VarTerm)v) == null) rv = v; return rv; else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (v == mEmpty) &addValue((Comparable&?>) v);
addValue((Comparable&?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (null!= v) <addValue((Comparable&?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) /* XXX */ v = v; else &/* XXX */ v = v;
if (n) addValue((Comparable?>) v); else &addValue((Comparable?>) v);
if (!(v) || (v.hashTable)) v.hashTable = v; return; else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
mAvailable = v; if (mProperties) &mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable?>)v, &v);
if (!(v)) &addValue((Comparable<?>) v);
if (!(v)) <addValue((Comparable<?>) v);
if (v) &aResult = null; else <aResult = (null == aResult)? aResult: aResult;
if (!v) &return;
if ((*v)!= null) <addValue((Comparable<?>) v);
newValue = (Comparable?>) v;
if (v == null) return NS_ERROR_NULL_POINTER; &else v = null;
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) &v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); &else <v.AppendValue((Comparable<unk>?>) v);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v == null) &nsCOMPtr&nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
nsCOMPtr&nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
AddValue((Comparable&?>) v);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) &mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((Comparable<?>) v, v);
if (((VarTerm)v) == null) <rv = v; return rv; else &rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (aValue) <addValue((Comparable?>) v); else &v = null;
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (!v) <return; &v = v;
::addValue((Comparable<?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
if (n) addValue((Comparable?>) v); else addValue((Comparable?>) v);
if ((*v)!= null) <addValue((Comparable&?>) v);
if (v) <nsComparator::addValue(v); else <nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
::addValue((Comparable?>) v);
if (!m_next) addValue((Comparable<?>) v);
if (aValue) &mCurrent = aValue; <else if ((aValue) == -1) &addValue(aValue);
nsAutoString val; if ((VarTerm) && val == '&0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable<?>&?>) v);
if (v == null) &nsCOMPtr<nsIComparable> com = do_GetService(NS_COMPARISON_CONTRACTID, &rv); if (NS_FAILED(rv)) <return rv;
nsCOMPtrnsIPresShell> presShell; nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
nsCOMPtr<nsIAtom> tag;
if ((v == null) || (v == null)) &if (v) *v = null; <if (v == null) return; *v = null;
addValue((Comparable&?>&?>) v);
addValue((Comparable?>)&v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
v = addValue((Comparable<?>) v);
if (aValue) mCurrent = aValue; else if ((aValue) == -1) &addValue(aValue);
if (!(v) || (v.hashTable)) v.hashTable = v; return; &else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (! v) &return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
int addValue((Comparable?>) v);
/* * The msg is not yet in the future. */ if (msg) nsCOMPtrnsIStreamListener> mpListener; msg.GetStreamListener(getter_AddRefs(mpListener)); if (mpListener) &mpListener.AddValue((Comparable<unk>?>) v);
if (((Comparable<?>) v) &&!((mAvailable?>).mValue)) &fprintf(stderr, "AppendValue: %s<n", v); return;
if (! v) &return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
nsAutoString val; if ((VarTerm) && val == '<0') /* Don't return '<0' on top! */ v = VAL_OF_BASE(v); if (v) /* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
addValue((Comparable?>) v.next);
addValue((Comparable<?>) s);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) <mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
rv = v; if (v == null) <return;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) &mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
addValue((Comparable?>) v, (void**)&v);
if (v) &nsComparator::addValue(v); &else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
addValue((Comparable<?>)dv);
if ((v = mValues) || (v == null)) addValue((Comparable<?>) v);
if (v == mObject) <mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; <if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (v == null) </* Remove &b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
if (! v) <return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); <else &rv = addValue((Comparable?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (((v = (Comparable<unk>?>) v))!= 0) </* XXX */ if (v) </* XXX */ v = v; &else </* XXX */ v = v;
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable?>) v, buf);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v == mEmpty) addValue((Comparable&?>) v);
if (v == NS_OK) struct tmp_v = null; nsresult rv = NS_OK; rv = addValue(v); if (NS_FAILED(rv)) return rv; &else <rv = addValue(v);
if (n) addValue((Comparable?>) v); &else <addValue((Comparable?>) v);
NS_ADDREF(*v); NS_ADDREF(*v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == null) </* Remove b> value, in this case */ if (v!= null) <&else addValue((Comparable<unk>?>) v);
if ((!v)) addValue((Comparable?>) v); else *v = v;
if (nv) &rv = addValue(v); if (rv == 0) /* NOTREACHED */ &&if (v.op == s) rv = addValue(v);
if (v) &nsComparator::addValue(v); else nsCOMPtr&nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsCOMPtrnsIPresShell> presShell; nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtr&nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
val = addValue((Comparable<?>) v);
addValue((ComparableComparable<?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) &nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; &else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?:>) v);
if (v) aResult = null; <else <aResult = (null == aResult)? aResult: aResult;
if (m_context) <m_context.saveValue = (Atom&?>) v;
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) &mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v == mObject) &mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; &if (mObject.GetFlags() == NS_EXT) nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
if (aValue) &addValue((Comparable?>) v); <else &v = null;
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
(void)addValue((Comparable<?>) v);
addValue((Comparable?>) *v);
rv = addValue((Comparable<?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) &rv = addValue((Comparable<?>) v);
addValue((COMPARISON?>) v);
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v) <aResult = null; <else aResult = (null == aResult)? aResult: aResult;
addValue((Comparable?>) v, val);
if (((Comparable?>) v) &&!((mAvailable?>).mValue)) fprintf(stderr, "AppendValue: %s<n", v); return;
if (!*(v = ((Comparable?>))) && v == null) &return; <if (v) <rv = addValue(v, v);
if (((VarTerm)v) == null) <rv = v; return rv; <else &rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
if (v) nsComparator::addValue(v); &else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
/* * Add value to the value that was added to the * prefix. */ if ((v = v.get())!= 0) &i = (I--)((int)v.size()) / i; if ((i = v.saveDirty) || (i > v.numOfFlags & OP_FAIL)) &i++;
if (((VarTerm)v) == null) rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) &rv = addValue((Comparable<unk>?>) v); return rv;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) <if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) &PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) <mValue = v.mValue; else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) if (*v) mValue = v.mValue; <else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) <mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (aValue) <addValue((Comparable?>) v); <else <v = null;
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); <if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v == null) <void *p = v; p.v = *v; p.v = *p; &else <p.v = v;
if (! v) return NS_ERROR_NULL_POINTER; <v.mComparator = v; if (!(v.mComparator == v.mComparator)) &/* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparable&? >>>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) &mType = mType; else &mType = mType; <addValue(mOwner, v);
if (m.m_type == m_type) m.m_type = m_type; &else m.m_type = m_type;
if (((VarTerm)v) == null) rv = v; return rv; <else rv = addValue((Comparable<unk>?>) v); if (rv == null) <rv = addValue((Comparable<unk>?>) v); return rv;
if (nv) rv = addValue(v); if (rv == 0) /* NOTREACHED */ <if (v.op == s) rv = addValue(v);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) <mType = mType; <else &mType = mType; &addValue(mOwner, v);
addValue(v, (Comparable?>) v);
rv = rv; if (v == null) &rv = addValue((Comparable?>) v); else rv = addValue((Comparable?>) v);
if (aValue) <addValue((Comparable?>) v); else <v = null;
v.asm_type = aValue; if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (aValue) &mCurrent = aValue; else &if ((aValue) == -1) &addValue(aValue);
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if ((v == mObject) || (v == mType)) return NS_OK; /* * Get the value for the interface. */ if (v == mType) mType = mType; else &mType = mType; addValue(mOwner, v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <<else if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if (v == null) /* Remove <b> value, in this case */ if (v!= null) &<else addValue((Comparable<unk>?>) v);
if (v == null) &/* Remove b> value, in this case */ if (v!= null) &else addValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else &/* Don't add this to the v value */ if ((v == null) || (v == null)) &/* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
nsCOMPtr<nsIPresShell> presShell; nsCOMPtr<nsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) <nsCOMPtrnsIPresShell> presShell; presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) presShell.GetPresShell(getter_AddRefs(presShell)); presShell.GetPresShell(getter_AddRefs(presShell)); if (presShell) aValue((SimpleValue<unk>?>) v); else presShell.GetPresShell(getter_AddRefs
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); <else if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if (v == null) void *p = v; p.v = *v; p.v = *p; &else p.v = v;
addValue((Comparable&?>) v, v.mProp);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable?>) v, l);
if (v == null) return NS_ERROR_NULL_POINTER; <else v = null;
if (v == mEmpty) &addValue((Comparable?>) v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); &mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
&nsComparator::addValue((Comparable&?>) v);
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
addValue((Comparable<?>) v, value);
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v = v.GetContainingPtr()) == 0) &if (v.GetContainingPtr()) v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); <else v.AppendValue((Comparable<unk>?>) v);
if (((VarTerm)v) == null) <rv = v; return rv; &else &rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if (!(v) || (v.hashTable)) <v.hashTable = v; return; else &if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
mAvailable = v; if (mProperties) mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
if (v == mObject) mObject.GetPrefixLength(&mObject.GetPrefixLength()); if (!mObject) return NS_ERROR_NULL_POINTER; if (mObject.GetFlags() == NS_EXT) <nsAutoString uStr; mObject.GetPath(&uStr); if (uStr.IsEmpty()) return NS_OK; else if (!uStr.IsEmpty()) return NS_ERROR_NULL_POINTER;
addValue((Comparable?>) v, v.mValue);
if (v) <nsComparator::addValue(v); &else &nsCOMPtr<nsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if (v == null) &/* Remove b> value, in this case */ if (v!= null) <else addValue((Comparable<unk>?>) v);
&addValue((Comparable<?>) v);
addValue((Comparable<?>) v);
addValue((VoidArray&?>) v);
if (nv) rv = addValue(v); if (rv == 0) &/* NOTREACHED */ &if (v.op == s) rv = addValue(v);
v.asm_type = aValue; if (v.asm_type == aValue.type) <addValue((Comparable<unk>?>) v); &else <if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) <splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if ((comp = v) && (v.mFlags & APPENDED)) &if ((comp = v.mComparator) && (v.mResources & APPENDED)) <addValue((Comparable<unk>?>) v); <&else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; <if ((v.dialog == null) || (v.dialog.isPaginated)) &/* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
addValue((Comparable&?>)(v));
rv = addValue((Comparable&?>) v); if (NS_FAILED(rv)) return rv; if (aVariable) rv = addValue((Comparable<?>) v);
if ((v = v.GetContainingPtr()) == 0) <if (v.GetContainingPtr()) <v.GetContainingPtr().AppendValue((Comparable<unk>?>) v); else v.AppendValue((Comparable<unk>?>) v);
if (v == mEmpty) <addValue((Comparable&?>) v);
if (nv) &rv = addValue(v); if (rv == 0) </* NOTREACHED */ <&if (v.op == s) rv = addValue(v);
if (v) &nsComparator::addValue(v); &else <nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); &else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
return AddValue((Comparable&?>) v);
if (!(v) || (v.hashTable)) &v.hashTable = v; return; <<else <if (v.hashTable!= v.hashTable) v.hashTable = v.hashTable; return; if (v.hashList == v.hashTable) v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashTable = v.hashTable; v.hashPos = v.hashTable; v.hashPos = v.
if ((v == null) || (!v)) addValue((Comparable<unk>?>) v); &else </* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if ((v == null) || (!v)) <addValue((Comparable<unk>?>) v); <else &/* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
mAvailable = v; if (mProperties) <mProperties.AppendValue(mProperties); <mProperties.AppendValue(mProperties); &if (mProperties.AppendVar) &mProperties.AppendVar(mOwner); mProperties.AppendVar(mMovement);
addValue((Comparable&?>) v, aValue);
if (v) addValue((Comparable<?>) v);
addValue((Comparable?>) v.value);
if (! v) &return NS_ERROR_NULL_POINTER; &v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
v.asm_type = aValue; if (v.asm_type == aValue.type) &addValue((Comparable<unk>?>) v); &else &if (v.asm_type == aValue.type) <mResult = aValue.type; else if (v.asm_type == aValue.type) addValue((Comparable<unk>?>) v);
if ((comp = v) && (v.mFlags & APPENDED)) <if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) splx(s); return NS_OK; if ((v.dialog == null) || (v.dialog.isPaginated)) /* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) &if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (aValue) &mCurrent = aValue; &else if ((aValue) == -1) addValue(aValue);
nsCString val; if ((((struct value *)&val) == -1) && v.isContent) <PRInt32 cnt; nsCString s = (void **)&((nsCString && (cnt == -1))); if (cnt == -1) &if (*v) <mValue = v.mValue; &else if (*v) mValue = v.mValue; mValue = v.mValue; else mValue = v.mValue;
if (((v = (Comparable<unk>?>) v))!= 0) &/* XXX */ if (v) &/* XXX */ v = v; else &/* XXX */ v = v;
&if (v) mValue = ((comparable<?>) v);
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); else </* Don't add this to the v value */ if ((v == null) || (v == null)) /* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
if (v == null) &return NS_ERROR_NULL_POINTER; <else &v = null;
&addValue((Comparable&?>) v);
val = (Comparable&?>) v;
if ((v == null) || (!v)) &addValue((Comparable<unk>?>) v); &else /* Don't add this to the v value */ if ((v == null) || (v == null)) </* The new value should be in this case */ if (v!= null) addValue((Comparable<unk>?>) v);
nsAutoString val; if ((VarTerm) && val == '0') </* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) </* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (! v) <return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) </* If no v, */ &else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
if (v == null) &void *p = v; p.v = *v; p.v = *p; <else <p.v = v;
addValue((Comparable?>) v, s);
if (v) <nsComparator::addValue(v); else &nsCOMPtrnsIPref> pref(do_QueryInterface(mPrefs)); if (pref) nsCOMPtrnsIPref> pref; pref.GetPref("Pref", pref); pref.GetPref("pref", pref); if (pref) pref.GetPref("Pref", pref.GetPref("pref", pref)); pref.GetPref("pref", pref); pref.GetPref("pref", pref.GetPref", pref.GetPref("pref", pref));
nsAutoString val; if ((VarTerm) && val == '&0') &/* Don't return '&0' on top! */ v = VAL_OF_BASE(v); if (v) &/* Don't return VAL_OF_BASE(v); */ if ((VarTerm) &&!v) /* Don't return VAL_OF_BASE(v); else /* Do not do this to get value as well */ v = VAL_BASE(v);
if (((VarTerm)v) == null) &rv = v; return rv; <else <rv = addValue((Comparable<unk>?>) v); if (rv == null) rv = addValue((Comparable<unk>?>) v); return rv;
if ((comp = v) && (v.mFlags & APPENDED)) if ((comp = v.mComparator) && (v.mResources & APPENDED)) addValue((Comparable<unk>?>) v); &&else addValue((Comparable<unk>?>) v);
/* XXX */ addValue((Comparable<unk>?>) v); /* * Return the truncated value in a field in the parent class. */ if (!(v.dialog)) &splx(s); return NS_OK; &if ((v.dialog == null) || (v.dialog.isPaginated)) </* The result is that the result is only valid. */ if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) <if ((v.dialog.isPaginated) || (v.dialog.isPaginated)) /* XXX */ return result; else /* The value is only valid if we aren't sure that a null value isn't true. */ result = v.d
if (! v) return NS_ERROR_NULL_POINTER; v.mComparator = v; if (!(v.mComparator == v.mComparator)) /* If no v, */ <else v.mComparator = v; v.mComparator = v.mComparator; v.mParams = v.mComparator; v.mResult = v.mResult;
