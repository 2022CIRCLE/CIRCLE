return reportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY);
return anyMatcher(Any.ANY);
return ReportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).returnZero();
return anyShort();
return Any.ANY;
return reportMatcher(Any.ANY, 0);
return Any.ANY.returnZero();
return reportMatcher(Any.ANY).returnZero(0);
return anyMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).returnValue();
return reportMatcher(Any.ANY, anyShort);
return reportMatcher(Any.ANY).return(null);
return Any.ANY.returnZero();
return anyShort;
return reportMatcher(Any.ANY)!= 0;
return reportMatcher(Any).returnZero();
return reportMatcher(Any.aNY).returnZero();
return reportMatcher(Any.aNY);
return reportMatcher(Any.ANY, &anyShort);
return (Any.ANY).returnZero();
return aAny.ANY;
return rv;
return reportMatcher(Any.LONG).returnZero();
return any(Any.ANY);
return reportMatcher(Any.CNY).returnZero();
return Report(Any.ANY).returnZero();
return ReportMatcher(Any.ANY);
return (any.ANY).returnZero();
return reportMatcher();
return anyShort(Any.ANY);
return ReportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY)!= null;
return reportMatcher(Any.NUM).returnZero();
return reportMatcher( Any.ANY );
return reportMatcher( Any.ANY ).returnZero();
return reportMatcher(Any.ANY).get();
return anyMatcher();
return any.returnZero();
return reportMatcher(Any.NUMERIC).returnZero();
return reportMatcher(any.ANY).returnZero();
return reportMatcher(IAny.ANY).returnZero();
return reportMatcher(Any.IA).returnZero();
return any;
return result;
return reportMatcher(Any.ANY).return_Zero();
return any(Any.ANY).returnZero();
return reportMatcher(Any);
return reportMatcher(any.ANY);
return reportMatcher(ANY).returnZero();
return anyANY;
return reportMatcher(Any.null).returnZero();
return reportMatcher(Any.ANY).returnZero(1);
return reportMatcher(Any.ANY, null);
return (reportMatcher(Any.ANY));
return reportMatcher(Any.ANON).returnZero();
return (Any.ANY)returnZero();
return reportMatcher(Any.ASYNC).returnZero();
return reportMatcher(Any.ANY).returnType();
return (anyShort)returnZero();
return reportMatcher(any).returnZero();
return reportMatcher(any.aNY);
return reportMatcher(Any.ANY).returnShort();
return reportMatcher(Any.ANY).return();
return Any.Any();
return this;
return reportMatcher(Any.ANY).ReturnZero();
return anyAny.ANY;
return reportMatcher(Any.aNY).returnZero();
return reportMatcher(any.aNY).returnZero();
return reportMatcher(Any.LONG);
return reportMatcher().returnZero();
return reportMatcher(Any.ANY) && anyShort;
return reportMatcher (Any.ANY).returnZero();
return (any.ANY)returnZero();
return ReportAnyMatcher(Any.ANY).returnZero();
return anyMatcher(any.ANY);
return reportMatcher(Any.ANY).ReturnZero();
return reportMatcher(Any.get()).returnZero();
return reportMatcher(Any.NUMERIC);
return retval;
return reportMatcher(Any.ANY, 1);
return ret;
return reportMatcher(Any.ANY, &any);
return reportMatcher(AnyShort);
return reportMatcher(Any.NUM);
return reportMatcher(Any.NewANY).returnZero();
return reportMatcher(Any.ANY).returnValue();
return reportMatcher(This.ANY).returnZero();
return reportMatcher(Any.ANY).return_zero();
rv = reportMatcher(Any.ANY); return rv;
return reportMatcher(Any.ANY).returnZero(any);
return reportMatcher(Any.ANY, AnyShort);
return reportMatcher(Any.ANY, this);
return anyShort(any.ANY);
returnAny.ANY;
return reportMatcher(aAny.ANY).returnZero();
return reportMatcher(Any.ANY, any);
return reportMatcher(Any.ANY) == 0;
return reportMatcher().returnZero();
return reportMatcher(Any.ANY).returnAll();
return reportMatcher(any.ANY).returnZero();
return Any.aNY.returnZero();
return reportMatcher(Any.ANY).returnAnyShort();
return reportMatcher( ANY.ANY );
return any.Any.ANY;
return anything;
return reportMatcher(Any.ANY).returnZero ();
return anyMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).return('0');
return anyZero();
return reportMatcher (Any.ANY).returnZero ();
return reportMatcher(any);
return ReportMatcher(any.ANY).returnZero();
return reportShort(Any.ANY).returnZero();
return reportMatcher(AnyANY).returnZero();
return reportMatcher(AnyShort).returnZero();
return anyANY.returnZero();
return reportMatcher(Any, Any.ANY);
return anyMatch(Any.ANY);
return reportMatcher( ANY.ANY ).returnZero();
return anyAny;
return 0;
return(Any.ANY).returnZero();
return reportMatcher(Any.ANY).returnZero(this);
return reportMatcher(Any.ANY), anyShort;
return reportShort(Any.ANY);
return reportMatcher(Any.Int).returnZero();
return reportMatcher(Any.ANY).return_anyShort();
return reportMatcher(AnyANY);
return reportMatcher(Any.ANY).returnKey();
return reportMatcher(Any.ANY).return(0);
return reportMatcher(Any.INY).returnZero();
aResult = reportMatcher(Any.ANY); return aResult;
return reportMatcher(Any.NY).returnZero();
return report(Any.ANY).returnZero();
return reportMatcher(Any.N).returnZero();
return reportMatcher(Any.ANY).return Zero();
return any(any.ANY);
return super.returnZero();
return (Any.ANY);
return aAny.ANY.returnZero();
return reportMatcher(anyShort);
return anyReportMatcher(Any.ANY);
ret = reportMatcher(Any.ANY); return ret;
return Any.Any.ANY;
return reportMatcher(Any.ANY) || anyShort;
return reportMatcher(Any.ANY).returnUnicode();
return Any.aNY;
return reportMatcher(Any.ANY, 0, 0);
return reportMatcher(Any.AA).returnZero();
return reportZero(Any.ANY);
return Any.ANY.ReturnZero();
return reportMatcher(Any.ANY, Any.ANY);
return ANY.ANY;
return reportMatcher(Any.).returnZero();
return reportMatcher(Any.0).returnZero();
return reportMatch(Any.ANY).returnZero();
return NS_OK;
*aResult = reportMatcher(Any.ANY); return *aResult;
return reportMatcher(Any.ANY,anyShort);
return anyShort(any);
return reportMatcher(Any.ANY).return(anyShort);
return reportMatcher(Any.DECIMAL);
return reportMatcher(Any.ANY).return(Any.ANY);
return reportMatcher(Any.ANY) == null;
return (anyMatcher(Any.ANY));
return reportMatcher(Any.ANY, null);
return aAny;
returnanyMatcher(Any.ANY);
return reportMatcher(Any.ANY).returnAsInt();
return reportMatcher(Any.AN);
return Any.ANY();
return reportMatcher(Any.ANY).returnNoError();
return report(Any.ANY);
return(reportMatcher(Any.ANY));
return Any.any();
return reportMatcher(Any.ALL);
return (Any.ANY) reportMatcher(Any.ANY);
return reportMatcher(Any.aNY).returnZero(0);
return reportMatcher(Any.ANY).returnError();
return reportMatcher(any.aNY).returnZero();
return reportMatcher(Any.ANY).returnAlloc();
return Report(Any.ANY);
return reportMatcher(Any.ANY).returnAny();
return reportMatcher(Any.ANY).returnVal;
return report_any(Any.ANY);
return anyReturnZero();
return (anyShort) reportMatcher(Any.ANY);
return reportMatcher(Any.ANY).return(0, 0);
return Any.Any;
return reportMatcher(Any.ANY).returnZero(s);
return reportMatcher(Any.ANY, true);
return (any.ANY);
return reportMatcher(Any.NY);
nsresult rv = reportMatcher(Any.ANY).returnZero(); if (NS_FAILED(rv)) return rv; *((nsresult & 0x0000)) = 0; *((nsResult & 0x0000)) = 0; return rv;
return reportMatcher(Any.ANY).return(uintptr_t)null;
if (any)  return reportMatcher(Any.ANY);  else  if (any)  return any;  return null;  return null;
return reportMatcher(Any.ANY).returnZero(&any);
return reportMatcher(Any.ANY).returnZero(null);
return reportMatcher(Any.ANY).return(Any.SHORT_COUNT);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE)  if (mResult == Any.null)  mResult = Any.ALL;  else  mResult = mResult;   return mResult;
return reportMatcher(Any.ANY, Any.SHIFT, Any.NUM, Any.SHIFT, Any.NUM);
return mTargetMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).returnZero("");
return reportMatcher(Any.ANY).return(NS_OK);
return reportMatcher(Any.ANY)? Any.ANY : anyShort;
return reportMatcher(Any.ANY).return(',');
if (anyShort)  return ReportMatcher(Any.ANY).returnZero();  return 0;
if (Any.ANY)  ret = reportMatcher(Any.ANY); if (ret!= 0)  ret = ret;  return ret;
return anyAny.aNY;
if (!reportMatcher(Any.ANY))  /* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv;  return rv;
return reportMatcher(Any.ANY).returnZero('?');
return reportMatcher(Any.ANY).returnZero(anyShort);
mIsNaN::returnZero(); return mAsn.returnZero();
return reportMatcher(Any.ANY)? any.returnZero() : anyShort;
if (!any.IsInitialized())  return any;  else return any.ANY;
return snprintf(any.ANY, sizeof(any));
return reportMatcher(Any.ANY).returnZero((unsigned char*)Any.ANY);
return reportMatcher(Any.ANY).returnZero(aCurrentShort);
mFunc = aFunc; return (anyMatcher(Any.ANY));
return reportMatcher(Any.ANY).returnZero(Any.R);
return reportMatcher(Any.ANY).returnZero(0,0);
return reportMatcher(Any.ANY).returnZero(NS_Zero_LENGTH());
aReturnZero(); return 0;
return reportMatcher(Any.ANY, ANY_MAX_PARSE);
return NS_REINTERPRET_CAST(nsIAtom*, reportMatcher(Any.ANY)).returnZero();
return reportMatcher(Any.ANY).returnZero(any.type);
return reportMatcher(Any.ANY).return(NS_ERROR_NOT_INITIALIZED);
return nsresult!= null;
return reportMatcher(Any.ANY, 0).returnZero();
return reportMatcher(Any.ANY).returnZero(eStyleStruct_Struct_Short);
return reportMatcher(Any.ANY).returnZero(mIsUnknown);
if (reportMatcher(Any.ANY).returnZero())  return 0;
return reportMatcher(Any.ANY).returnZero(orb);
return reportMatcher(Any.ANY).returnZero(SIZE);
return reportMatcher(Any.ANY).returnZero('0');
return reportMatcher(Any.ANY).returnZero(-1);
return mFrame.returnZero();
return reportMatcher(Any.ANY).return(Any.ANY)? Any.ANY : Any.ANY;
return reportMatcher(Any.ANY, null, 0);
if (reportMatcher(Any.ANY) == 0) return 0; if (reportMatcher(Any.ANY) == 0) return 0; return 0;
return reportMatcher(Any.aNY, &anyShort);
if (any.length == 1) return 0; return 0;
return reportMatcher(Any.ANY, Any.Zero);
return reportMatcher(Any.ANY)? reportMatcher(Any.ANY) : 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv))  return rv;  if (!any.ANY)  rv = Any.ANY.returnZero();  return rv;
return reportMatcher(Any.ANY).return(Any.Zero);
return nsCompileValues(reportMatcher(Any.ANY));
return reportMatcher(Any.ANY).returnZero(0, 0);
return reportMatcher(Any.ANY).return_ns_any();
nsString* s = (nsString*) any.size(); if (s  0)  *s = s; return 0;  return 0;
return reportMatcher(Any.ANY).returnZero("any");
return reportMatcher(Any.ANY).returnZero(ord(Any.ANY));
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short))  LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0;  return 0;
nsCOMPtrnsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag)  if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0)  return rdfcnt;  */ return rdfcnt;
return reportMatcher(Any.ANY, false, false, 0);
return reportMatcher(Any.ANY).returnAny(any.ANY);
return reportMatcher(Any.ANY).return_noLong();
return reportMatcher(Any.ANY, &any.Short);
return reportMatcher(Any.ANY).returnZero((nsISupports**)(any.ANY));
return reportMatcher(Any.ANY).returnAll(Any.Memory);
return reportMatcher(Any.ANY).returnZero(&anyShort);
if (Any.ANY) return anyShort; return reportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY).return(any);
return reportMatcher(Any.ANY, IA).returnZero();
return reportMatcher(Any.ANY).returnZero(nsIRDFResource::IID_NAMESPACE_ARGS);
/* * The list of names are in order to look up the real short * names. */ return reportMatcher(Any.ANY)? Any.ANY : Any.ANY;
if (any)  return zShortMatcher(Any.ANY);  else  if (any == -1)  return zShortMatcher(Any.ANY);  else  return zShortMatcher(Any.ANY);  return zShortMatcher(Any.ANY);
return reportMatcher(Any.ANY).returnZero(mUnit);
return reportMatcher(Any.ANY)? Any.ANY : Any.Zero();
return reportMatcher(Any.ANY).returnAny(anyShort);
return reportMatcher(Any.ANY)? Any.Zero() : anyShort;
return reportMatcher(Any.ANY).returnZero(Any.IY);
aAny.returnZero(); return aAny;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0)  m_ab = NS_ERROR_INVALID_ARG;   return NS_OK;
return reportMatcher(Any.ANY, null).returnZero();
return xval_returnZero();
return reportMatcher(Any.ANY).returnZero(any.aNY);
nsresult rv = nsComponentManager::GetResource(kNameSpaceID_None, nsHostNameSpaceID_None, &rv); if (NS_FAILED(rv)) return rv; return anyShort();
if (mIsPositioned && (mStartLine && mStartLine))  mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine;  if (mStartLine)  mStartLine = (mStartLine.mEndLine) mStartLine;  if (mStartLine == 0)  mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine);  if (mStartLine.mEndLine)  mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine;  return NS_OK;  return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY)  if (mXP_PseudoFunc)  mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc)  if (mXP_PseudoFunc == anyShort)  mXP_PseudoFunc = 0;  return NS_OK;   else return Any.ANY;
if (anyShort) return reportMatcher(Any.ANY); else return Any.ReturnZero();
if (aAny)  return 0;  else  return 0;
rv = reportMatcher(Any.ANY).returnZero(); if (NS_FAILED(rv)) return rv; return rv;
return reportMatcher(Any.ANY, Any.ALPHY).returnZero();
if (Any.ANY) return reportMatcher(Any.ANY).returnZero(); else return 0;
return reportMatcher(Any.ANY, &any.anyShort);
return reportMatcher(Any.ANY).return(Any.true);
return reportMatcher(Any.ANY)? Any.ANY : Any.ANY;
/* We can just call getter_AddRefs(). */ rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; */ return rv;
return reportMatcher(Any.ANY).return(aReturn);
return mType.returnZero();
if (mTarget)  mTarget.ReturnZero();  return mTarget;
rv = any.any(); if (NS_FAILED(rv)) return rv; rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.any) return rv; return rv;
return reportMatcher(Any.ANY).returnZero(mOldShort);
if (Any.ANY)  return (anyShort)? any.returnZero() : 0;  else  return (any.ANY);
if (mCaseIsShort()) return anyShort(); else return reportMatcher(Any.ANY).returnZero();
return reportMatcher(Any.ANY, anyArena == 0? : Any.ANY.returnZero());
return reportMatcher(Any.aNY).returnZero(mAny);
if (aAny.ANY == any.Zero)  return 0;  else  return anyShort;
return reportMatcher(Any.ANY)? 0 : Any.ANY;
nsString* s = (nsString*) any.size(); if (s <0) <*s = s; return 0; <return 0;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return zShortMatcher(Any.ANY); &else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return reportMatcher(Any.ANY); &else if (any) <return any; return null; return null;
if (any) &return reportMatcher(Any.ANY); else &if (any) <return any; return null; return null;
if (any) return reportMatcher(Any.ANY); else <if (any) &return any; return null; return null;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; else <return (any.ANY);
if (any) <return zShortMatcher(Any.ANY); <else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) m_ab = NS_ERROR_INVALID_ARG; <<return NS_OK;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; else &mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) return zShortMatcher(Any.ANY); else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) return reportMatcher(Any.ANY); &else <if (any) &return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; <else mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) &return reportMatcher(Any.ANY); &else &if (any) &return any; return null; return null;
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; return ret;
if (anyShort) return ReportMatcher(Any.ANY).returnZero(); &return 0;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; <else <mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; &else mResult = mResult; return mResult;
if (any) &return zShortMatcher(Any.ANY); <else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) &return reportMatcher(Any.ANY); &else <if (any) <return any; return null; return null;
if (any) &return reportMatcher(Any.ANY); &else if (any) return any; return null; return null;
if (anyShort) &return ReportMatcher(Any.ANY).returnZero(); &return 0;
if (any) <return zShortMatcher(Any.ANY); &else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
return reportMatcher(Any.ANY).returnZero('<0');
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; &else <return (any.ANY);
if (any) &return reportMatcher(Any.ANY); else if (any) return any; return null; return null;
if (any) <return reportMatcher(Any.ANY); <else <if (any) return any; return null; return null;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) &return reportMatcher(Any.ANY); else <if (any) return any; return null; return null;
if (reportMatcher(Any.ANY).returnZero()) &return 0;
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; &return ret;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) <return reportMatcher(Any.ANY); <else if (any) <return any; return null; return null;
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; <return ret;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (aAny.ANY == any.Zero) <return 0; &else return anyShort;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; &else &mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) <return reportMatcher(Any.ANY); else &if (any) &return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) return reportMatcher(Any.ANY); else if (any) &return any; return null; return null;
nsCOMPtr<nsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (aAny) return 0; else &return 0;
if (anyShort) <return ReportMatcher(Any.ANY).returnZero(); <return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
if (any) <return reportMatcher(Any.ANY); else if (any) <return any; return null; return null;
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; <return ret;
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; <return ret;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) m_ab = NS_ERROR_INVALID_ARG; <return NS_OK;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!reportMatcher(Any.ANY)) /* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; return rv;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
nsString* s = (nsString*) any.size(); if (s 0) <*s = s; return 0; return 0;
if (any) <return reportMatcher(Any.ANY); <else <if (any) <return any; return null; return null;
nsCOMPtr&nsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) &if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) return zShortMatcher(Any.ANY); else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) <return reportMatcher(Any.ANY); &else &if (any) <return any; return null; return null;
if (any) &return reportMatcher(Any.ANY); <else &if (any) return any; return null; return null;
if (any) &return zShortMatcher(Any.ANY); else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; <else return (any.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) &m_ab = NS_ERROR_INVALID_ARG; return NS_OK;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) m_ab = NS_ERROR_INVALID_ARG; &return NS_OK;
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; &return ret;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
if (any) &return zShortMatcher(Any.ANY); &else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return zShortMatcher(Any.ANY); else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) m_ab = NS_ERROR_INVALID_ARG; return NS_OK;
if (any) <return zShortMatcher(Any.ANY); <else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) <return zShortMatcher(Any.ANY); &else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) &m_ab = NS_ERROR_INVALID_ARG; <return NS_OK;
nsString* s = (nsString*) any.size(); if (s 0) *s = s; return 0; return 0;
if (any) return zShortMatcher(Any.ANY); &else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; <else <mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) <m_ab = NS_ERROR_INVALID_ARG; &<return NS_OK;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return reportMatcher(Any.ANY); <else <if (any) <return any; return null; return null;
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; <else <return (any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
nsString* s = (nsString*) any.size(); if (s 0) &*s = s; return 0; return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) &LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; <return 0;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) <m_ab = NS_ERROR_INVALID_ARG; return NS_OK;
if (any) &return zShortMatcher(Any.ANY); &else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
nsString* s = (nsString*) any.size(); if (s &0) <*s = s; return 0; return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; <else mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny.ANY == any.Zero) &return 0; <else &return anyShort;
if (any) return zShortMatcher(Any.ANY); else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; else &mResult = mResult; return mResult;
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; &return ret;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) m_ab = NS_ERROR_INVALID_ARG; &<return NS_OK;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (any) <return reportMatcher(Any.ANY); &else if (any) &return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; else mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return zShortMatcher(Any.ANY); <else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mTarget) mTarget.ReturnZero(); &return mTarget;
if (aAny) <return 0; &else return 0;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) <m_ab = NS_ERROR_INVALID_ARG; &&return NS_OK;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
nsString* s = (nsString*) any.size(); if (s <0) *s = s; return 0; return 0;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (mTarget) &mTarget.ReturnZero(); return mTarget;
nsString* s = (nsString*) any.size(); if (s 0) *s = s; return 0; <return 0;
if (aAny.ANY == any.Zero) <return 0; else &return anyShort;
if (aAny.ANY == any.Zero) return 0; else return anyShort;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; return ret;
if (any) return reportMatcher(Any.ANY); <else &if (any) <return any; return null; return null;
nsString* s = (nsString*) any.size(); if (s &0) <*s = s; return 0; &return 0;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; else &return (any.ANY);
if (any) <return reportMatcher(Any.ANY); else <if (any) return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; <else <mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) <return zShortMatcher(Any.ANY); else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny.ANY == any.Zero) <return 0; <else &return anyShort;
if (aAny) return 0; &else return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; &else mResult = mResult; return mResult;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) &m_ab = NS_ERROR_INVALID_ARG; &&return NS_OK;
if (any) return reportMatcher(Any.ANY); <else <if (any) <return any; return null; return null;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; <return ret;
if (any) &return zShortMatcher(Any.ANY); &else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) <return zShortMatcher(Any.ANY); else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
nsString* s = (nsString*) any.size(); if (s &0) *s = s; return 0; return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; <else mResult = mResult; return mResult;
if (aAny.ANY == any.Zero) <return 0; <else return anyShort;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; <else <return (any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; &else mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
if (any) <return reportMatcher(Any.ANY); <else &if (any) <return any; return null; return null;
if (aAny.ANY == any.Zero) &return 0; &else &return anyShort;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
if (aAny) <return 0; else &return 0;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; <else return (any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; <else <mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
if (mTarget) <mTarget.ReturnZero(); <return mTarget;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (reportMatcher(Any.ANY).returnZero()) return 0;
nsCOMPtr<nsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) <if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (any) &return reportMatcher(Any.ANY); else <if (any) &return any; return null; return null;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (aAny.ANY == any.Zero) <return 0; &else &return anyShort;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) return reportMatcher(Any.ANY); <else <if (any) return any; return null; return null;
if (aAny) &return 0; else <return 0;
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) &return rdfcnt; <*/ return rdfcnt;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; <else <mResult = mResult; return mResult;
if (any) &return zShortMatcher(Any.ANY); <else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (anyShort) <return ReportMatcher(Any.ANY).returnZero(); return 0;
if (!any.IsInitialized()) &return any; else return any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; <else <mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; else <return (any.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mTarget) <mTarget.ReturnZero(); &return mTarget;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
nsString* s = (nsString*) any.size(); if (s &0) &*s = s; return 0; return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
nsCOMPtr<nsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) &if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (aAny) return 0; &else <return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; else mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) return rdfcnt; &*/ return rdfcnt;
if (any) <return reportMatcher(Any.ANY); &else <if (any) &return any; return null; return null;
if (aAny.ANY == any.Zero) <return 0; <else <return anyShort;
if (!any.IsInitialized()) &return any; &else return any.ANY;
if (any) <return zShortMatcher(Any.ANY); else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return reportMatcher(Any.ANY); &else if (any) <return any; return null; return null;
if (aAny.ANY == any.Zero) &return 0; else <return anyShort;
if (!reportMatcher(Any.ANY)) </* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; <return rv;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
if (any) <return reportMatcher(Any.ANY); &else if (any) <return any; return null; return null;
if (aAny) &return 0; &else return 0;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) <return reportMatcher(Any.ANY); else &if (any) <return any; return null; return null;
if (any) <return reportMatcher(Any.ANY); &else &if (any) &return any; return null; return null;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny) &return 0; &else &return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; &else mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; &else &mResult = mResult; return mResult;
if (!reportMatcher(Any.ANY)) </* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; return rv;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) &m_ab = NS_ERROR_INVALID_ARG; <<return NS_OK;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; else <mResult = mResult; return mResult;
if (any) return reportMatcher(Any.ANY); else &if (any) return any; return null; return null;
if (aAny) &return 0; <else &return 0;
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) return rdfcnt; <*/ return rdfcnt;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
if (any) return reportMatcher(Any.ANY); &else &if (any) return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; <else <mResult = mResult; return mResult;
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; return ret;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
if (any) &return zShortMatcher(Any.ANY); &else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) return zShortMatcher(Any.ANY); else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return reportMatcher(Any.ANY); <else if (any) &return any; return null; return null;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; else &mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny) <return 0; else <return 0;
if (any) <return zShortMatcher(Any.ANY); <else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return zShortMatcher(Any.ANY); <else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) <return reportMatcher(Any.ANY); &else <if (any) <return any; return null; return null;
if (any) &return zShortMatcher(Any.ANY); &else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; &else &return (any.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; &else <return (any.ANY);
if (any) return zShortMatcher(Any.ANY); else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (anyShort) &return ReportMatcher(Any.ANY).returnZero(); return 0;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
nsCOMPtrnsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (any) <return zShortMatcher(Any.ANY); &else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mTarget) mTarget.ReturnZero(); return mTarget;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; else &mResult = mResult; return mResult;
return reportMatcher(Any.ANY).return('&0');
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) return reportMatcher(Any.ANY); <else &if (any) return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; else mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; else &mResult = mResult; return mResult;
nsString* s = (nsString*) any.size(); if (s <0) &*s = s; return 0; <return 0;
nsString* s = (nsString*) any.size(); if (s 0) <*s = s; return 0; &return 0;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; &else &return (any.ANY);
if (any) <return reportMatcher(Any.ANY); else <if (any) <return any; return null; return null;
if (aAny.ANY == any.Zero) return 0; &else <return anyShort;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (aAny.ANY == any.Zero) return 0; else &return anyShort;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; &else return (any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; <else &mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; else mResult = mResult; return mResult;
if (any) &return zShortMatcher(Any.ANY); else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; &else &return (any.ANY);
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; else return (any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; else mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
nsString* s = (nsString*) any.size(); if (s <0) &*s = s; return 0; return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; else <mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; <else mResult = mResult; return mResult;
if (any) return zShortMatcher(Any.ANY); <else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return reportMatcher(Any.ANY); <else if (any) return any; return null; return null;
if (!reportMatcher(Any.ANY)) &/* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; return rv;
if (anyShort) return ReportMatcher(Any.ANY).returnZero(); return 0;
if (any) return reportMatcher(Any.ANY); &else if (any) &return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; &else &mResult = mResult; return mResult;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) m_ab = NS_ERROR_INVALID_ARG; <&return NS_OK;
if (any) &return zShortMatcher(Any.ANY); else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return zShortMatcher(Any.ANY); <else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!any.IsInitialized()) <return any; else return any.ANY;
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; <else return (any.ANY);
if (!any.IsInitialized()) <return any; <else return any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; &return ret;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) m_ab = NS_ERROR_INVALID_ARG; &&return NS_OK;
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; return ret;
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; &else return (any.ANY);
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; &return 0;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!any.IsInitialized()) &return any; <else return any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny.ANY == any.Zero) return 0; &else return anyShort;
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) <LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; &return 0;
if (any) <return zShortMatcher(Any.ANY); else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) &return rdfcnt; */ return rdfcnt;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
if (any) <return reportMatcher(Any.ANY); &else if (any) return any; return null; return null;
if (aAny) <return 0; <else <return 0;
if (any) return reportMatcher(Any.ANY); &else <if (any) <return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; else <mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
if (any) return zShortMatcher(Any.ANY); &else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
return reportMatcher(Any.ANY).return('0');
if (!any.IsInitialized()) return any; <else return any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; else &mResult = mResult; return mResult;
if (any) <return zShortMatcher(Any.ANY); else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
if (any) return zShortMatcher(Any.ANY); &else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return zShortMatcher(Any.ANY); <else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; else &return (any.ANY);
if (any) return reportMatcher(Any.ANY); <else if (any) <return any; return null; return null;
nsCOMPtr&nsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) <if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (any) <return zShortMatcher(Any.ANY); &else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) &m_ab = NS_ERROR_INVALID_ARG; &return NS_OK;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny.ANY == any.Zero) <return 0; &else <return anyShort;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; else <mResult = mResult; return mResult;
if (any) &return zShortMatcher(Any.ANY); &else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; <else &return (any.ANY);
nsString* s = (nsString*) any.size(); if (s &0) <*s = s; return 0; <return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; &else return (any.ANY);
if (!reportMatcher(Any.ANY)) &/* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; &return rv;
if (any) return zShortMatcher(Any.ANY); &else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return reportMatcher(Any.ANY); <else &if (any) &return any; return null; return null;
if (aAny) return 0; &else &return 0;
nsString* s = (nsString*) any.size(); if (s 0) *s = s; return 0; &return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) return reportMatcher(Any.ANY); else <if (any) return any; return null; return null;
if (aAny) <return 0; else return 0;
if (any) <return zShortMatcher(Any.ANY); <else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return reportMatcher(Any.ANY); &else &if (any) <return any; return null; return null;
if (aAny) &return 0; else &return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; <return ret;
if (!reportMatcher(Any.ANY)) </* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; &return rv;
nsString* s = (nsString*) any.size(); if (s <0) *s = s; return 0; &return 0;
if (any) return reportMatcher(Any.ANY); else <if (any) <return any; return null; return null;
if (any) return reportMatcher(Any.ANY); &else &if (any) &return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; else mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
if (aAny.ANY == any.Zero) return 0; <else &return anyShort;
if (aAny.ANY == any.Zero) return 0; &else &return anyShort;
if (aAny.ANY == any.Zero) &return 0; &else return anyShort;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; <else mResult = mResult; return mResult;
if (aAny) <return 0; &else <return 0;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) <return reportMatcher(Any.ANY); else if (any) return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; else mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
nsCOMPtr&nsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; <else <mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; <else &mResult = mResult; return mResult;
if (any) &return reportMatcher(Any.ANY); &else <if (any) return any; return null; return null;
if (any) return zShortMatcher(Any.ANY); <else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; &else &mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) &return rdfcnt; &*/ return rdfcnt;
if (any) return zShortMatcher(Any.ANY); else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return reportMatcher(Any.ANY); else if (any) <return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return zShortMatcher(Any.ANY); else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (aAny.ANY == any.Zero) &return 0; <else return anyShort;
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) return rdfcnt; */ return rdfcnt;
if (aAny.ANY == any.Zero) &return 0; else &return anyShort;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; <else &mResult = mResult; return mResult;
if (any) return zShortMatcher(Any.ANY); <else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
nsString* s = (nsString*) any.size(); if (s &0) &*s = s; return 0; <return 0;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
if (any) <return zShortMatcher(Any.ANY); <else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) <return reportMatcher(Any.ANY); else &if (any) return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; else <mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (any) <return zShortMatcher(Any.ANY); &else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return reportMatcher(Any.ANY); &else &if (any) <return any; return null; return null;
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; return ret;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) return reportMatcher(Any.ANY); <else &if (any) &return any; return null; return null;
return reportMatcher(Any.ANY).returnZero('0');
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) &LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; return 0;
if (any) &return reportMatcher(Any.ANY); else &if (any) return any; return null; return null;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (any) <return zShortMatcher(Any.ANY); &else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
nsString* s = (nsString*) any.size(); if (s &0) *s = s; return 0; <return 0;
if (any) &return zShortMatcher(Any.ANY); <else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return zShortMatcher(Any.ANY); &else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; <return ret;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; <else mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) &return reportMatcher(Any.ANY); &else if (any) &return any; return null; return null;
if (any) &return zShortMatcher(Any.ANY); else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; <else &mResult = mResult; return mResult;
nsString* s = (nsString*) any.size(); if (s <0) <*s = s; return 0; &return 0;
if (any) <return zShortMatcher(Any.ANY); <else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mTarget) &mTarget.ReturnZero(); &return mTarget;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; <else &return (any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; else &mResult = mResult; return mResult;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; else return (any.ANY);
if (anyShort) <return ReportMatcher(Any.ANY).returnZero(); &return 0;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (any) &return reportMatcher(Any.ANY); else &if (any) &return any; return null; return null;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; return ret;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; &else &mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
nsString* s = (nsString*) any.size(); if (s &0) &*s = s; return 0; &return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; &return ret;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (!reportMatcher(Any.ANY)) /* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; <return rv;
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; return ret;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; &else &mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; &else mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; else &mResult = mResult; return mResult;
if (any) <return reportMatcher(Any.ANY); &else <if (any) return any; return null; return null;
if (any) return reportMatcher(Any.ANY); <else if (any) return any; return null; return null;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; else return (any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) &return reportMatcher(Any.ANY); else <if (any) <return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; <else &mResult = mResult; return mResult;
if (any) return zShortMatcher(Any.ANY); &else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return zShortMatcher(Any.ANY); else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return reportMatcher(Any.ANY); else if (any) &return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; &else &mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) &return reportMatcher(Any.ANY); &else &if (any) return any; return null; return null;
if (any) <return zShortMatcher(Any.ANY); &else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; &else &mResult = mResult; return mResult;
if (any) <return reportMatcher(Any.ANY); <else <if (any) &return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (Any.ANY) return (anyShort)? any.returnZero() : 0; &else <return (any.ANY);
if (any) <return zShortMatcher(Any.ANY); else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; <return ret;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) <m_ab = NS_ERROR_INVALID_ARG; <return NS_OK;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (any) &return zShortMatcher(Any.ANY); else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) <return reportMatcher(Any.ANY); <else if (any) return any; return null; return null;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
return reportMatcher(Any.ANY).returnZero('&0');
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
nsString* s = (nsString*) any.size(); if (s &0) *s = s; return 0; &return 0;
if (aAny) &return 0; &else <return 0;
nsString* s = (nsString*) any.size(); if (s 0) &*s = s; return 0; <return 0;
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; &return ret;
if (any) &return zShortMatcher(Any.ANY); &else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) <LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; return 0;
nsString* s = (nsString*) any.size(); if (s <0) *s = s; return 0; <return 0;
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; <return ret;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return reportMatcher(Any.ANY); else if (any) <return any; return null; return null;
if (any) return reportMatcher(Any.ANY); <else <if (any) &return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
if (any) <return reportMatcher(Any.ANY); &else &if (any) return any; return null; return null;
if (any) return zShortMatcher(Any.ANY); <else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; &return ret;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) <return zShortMatcher(Any.ANY); else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (!reportMatcher(Any.ANY)) /* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; &return rv;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) <m_ab = NS_ERROR_INVALID_ARG; &return NS_OK;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
if (any) <return reportMatcher(Any.ANY); else if (any) &return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; else <mResult = mResult; return mResult;
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; return ret;
if (any) return reportMatcher(Any.ANY); <else if (any) &return any; return null; return null;
nsCOMPtrnsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) &if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; <else &return (any.ANY);
if (any) &return reportMatcher(Any.ANY); <else if (any) <return any; return null; return null;
if (any) return zShortMatcher(Any.ANY); else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) &ret = ret; <return ret;
if (aAny.ANY == any.Zero) <return 0; else <return anyShort;
nsString* s = (nsString*) any.size(); if (s <0) <*s = s; return 0; return 0;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (any) return zShortMatcher(Any.ANY); else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return reportMatcher(Any.ANY); else &if (any) &return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (anyShort) return ReportMatcher(Any.ANY).returnZero(); <return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (aAny) return 0; <else &return 0;
if (any) return zShortMatcher(Any.ANY); &else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; else <mResult = mResult; return mResult;
if (any) <return reportMatcher(Any.ANY); <else if (any) &return any; return null; return null;
if (any) &return zShortMatcher(Any.ANY); else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (aAny.ANY == any.Zero) return 0; <else <return anyShort;
if (Any.ANY) <ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; &return ret;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (mTarget) mTarget.ReturnZero(); <return mTarget;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; <else &mResult = mResult; return mResult;
return reportMatcher(Any.ANY).return('<0');
if (aAny) return 0; else <return 0;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (any) return zShortMatcher(Any.ANY); &else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!any.IsInitialized()) return any; else return any.ANY;
if (aAny.ANY == any.Zero) return 0; <else return anyShort;
if (any) <return reportMatcher(Any.ANY); <else &if (any) &return any; return null; return null;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) return zShortMatcher(Any.ANY); <else &if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) <return zShortMatcher(Any.ANY); else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (any) &return zShortMatcher(Any.ANY); <else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (aAny) return 0; <else <return 0;
if (aAny) <return 0; <else &return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; &else mResult = mResult; return mResult;
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) <LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; <return 0;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) &return reportMatcher(Any.ANY); <else <if (any) return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; else &mResult = mResult; return mResult;
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) &LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; &return 0;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!reportMatcher(Any.ANY)) &/* If we're in an object, a sock which may contain the object of the same type, then return the one we're in. */ return rv; <return rv;
nsString* s = (nsString*) any.size(); if (s <0) &*s = s; return 0; &return 0;
/* XXX - don't * use any new symbols. */ if (!(Any.ANY.Any.ANY.Any.Short)) LOG(L_ERR, "Short of anyShort to report to any other nodes"); return 0; <return 0;
if (aAny) &return 0; else return 0;
if (any) &return zShortMatcher(Any.ANY); <else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (any) <return reportMatcher(Any.ANY); else <if (any) &return any; return null; return null;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) &m_ab = NS_ERROR_INVALID_ARG; <&return NS_OK;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; else <mResult = mResult; return mResult;
if (aAny.ANY == any.Zero) &return 0; else return anyShort;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) <m_ab = NS_ERROR_INVALID_ARG; <&return NS_OK;
if (anyShort) &return ReportMatcher(Any.ANY).returnZero(); <return 0;
nsCOMPtrnsIAtom> tag; GetTag(getter_AddRefs(tag)); if (tag == nsIAtom::nsIAtom> && tag == nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom* && tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom*& &tag) <if (tag == nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::nsIAtom::ns
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (aAny.ANY == any.Zero) <return 0; else return anyShort;
if (any) return zShortMatcher(Any.ANY); <else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (aAny) return 0; <else return 0;
if (any) &return zShortMatcher(Any.ANY); else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; <else &mResult = mResult; return mResult;
if (any) return reportMatcher(Any.ANY); &else <if (any) return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; <if (!any.ANY) &rv = Any.ANY.returnZero(); <return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); <return rv;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; <if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny.ANY == any.Zero) &return 0; &else <return anyShort;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; &else mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) mResult = Any.ALL; &else <mResult = mResult; return mResult;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) ret = reportMatcher(Any.ANY); if (ret!= 0) ret = ret; return ret;
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; else &return (any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; <else mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; <if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
if (any) return zShortMatcher(Any.ANY); &else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
nsString* s = (nsString*) any.size(); if (s 0) &*s = s; return 0; &return 0;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) <m_ab = NS_ERROR_INVALID_ARG; <<return NS_OK;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) <return rdfcnt; <*/ return rdfcnt;
if (any) return reportMatcher(Any.ANY); else &if (any) <return any; return null; return null;
if (reportMatcher(Any.ANY).returnZero()) <return 0;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (any) <return zShortMatcher(Any.ANY); &else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) &mResult = Any.ALL; &else mResult = mResult; return mResult;
if (any) <return zShortMatcher(Any.ANY); <else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (any) return zShortMatcher(Any.ANY); &else <if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) <mResult = Any.ALL; <else &mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); &return rv;
if (any) <return zShortMatcher(Any.ANY); else if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (Any.ANY) &ret = reportMatcher(Any.ANY); if (ret!= 0) <ret = ret; &return ret;
if (!any.IsInitialized()) <return any; &else return any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (!any.IsInitialized()) return any; &else return any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; &else mResult = mResult; return mResult;
if (aAny) return 0; else return 0;
nsString* s = (nsString*) any.size(); if (s 0) <*s = s; return 0; <return 0;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; <else &mResult = mResult; return mResult;
if (any) <return zShortMatcher(Any.ANY); <else &if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) &return reportMatcher(Any.ANY); <else &if (any) <return any; return null; return null;
if (any) &return reportMatcher(Any.ANY); <else <if (any) &return any; return null; return null;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; else mResult = mResult; return mResult;
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) <return rdfcnt; */ return rdfcnt;
if (any) <return zShortMatcher(Any.ANY); <else if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return zShortMatcher(Any.ANY); <else if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
/* * Make sure we have a big enough size to return. */ if (rdfcnt > 0) <return rdfcnt; &*/ return rdfcnt;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) mResult = Any.ALL; <else <mResult = mResult; return mResult;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny) <return 0; &else &return 0;
if (any) <return reportMatcher(Any.ANY); <else &if (any) return any; return null; return null;
m_ab = NS_SHORT_PARAM; if (m_ab >= 0) &m_ab = NS_ERROR_INVALID_ARG; &<return NS_OK;
if (aAny.ANY == any.Zero) return 0; else <return anyShort;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) <rv = Any.ANY.returnZero(); <return rv;
if (any) <return zShortMatcher(Any.ANY); &else <if (any == -1) &return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (any) return reportMatcher(Any.ANY); &else if (any) return any; return null; return null;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) <mResult = Any.ALL; else <mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) &mResult = Any.ALL; <else mResult = mResult; return mResult;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) &if (mResult == Any.null) mResult = Any.ALL; &else &mResult = mResult; return mResult;
if (any) return zShortMatcher(Any.ANY); <else <if (any == -1) return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (Any.ANY) &return (anyShort)? any.returnZero() : 0; <else <return (any.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) &return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); &return rv;
if (mIsPositioned && (mStartLine && mStartLine)) <mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (!IsNative) return anyShort; if (Any.ANY) if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) <if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (aAny) <return 0; <else return 0;
if (aAny.ANY == any.Zero) &return 0; <else <return anyShort;
if (any) return reportMatcher(Any.ANY); else if (any) return any; return null; return null;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; <if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (aAny) &return 0; <else <return 0;
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) &mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (aAny) &return 0; <else return 0;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; <if (!any.ANY) <rv = Any.ANY.returnZero(); return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
if (any) &return reportMatcher(Any.ANY); &else <if (any) &return any; return null; return null;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) &mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) &if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) &mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) if (mXP_PseudoFunc == anyShort) mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mTarget) <mTarget.ReturnZero(); return mTarget;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) <return rv; &if (!any.ANY) &rv = Any.ANY.returnZero(); return rv;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); return rv;
if (any) &return zShortMatcher(Any.ANY); <else &if (any == -1) <return zShortMatcher(Any.ANY); else return zShortMatcher(Any.ANY); return zShortMatcher(Any.ANY);
if (mIsPositioned && (mStartLine && mStartLine)) mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) <mStartLine = (mStartLine.mEndLine) mStartLine; &if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
if (Any.ANY) <return (anyShort)? any.returnZero() : 0; else <return (any.ANY);
if (mTarget) &mTarget.ReturnZero(); <return mTarget;
if (!IsNative) return anyShort; if (Any.ANY) <if (mXP_PseudoFunc) <mXP_PseudoFunc = reportMatcher(Any.ANY); if (mXP_PseudoFunc) &if (mXP_PseudoFunc == anyShort) <mXP_PseudoFunc = 0; return NS_OK; else return Any.ANY;
if (mIsPositioned && (mStartLine && mStartLine)) &mStartLine = (mStartLine) mStartLine; mEndLine = (mEndLine) mStartLine; &if (mStartLine) mStartLine = (mStartLine.mEndLine) mStartLine; if (mStartLine == 0) mStartLine = (mEndLine.mEndLine); mStartLine = (mEndLine.mEndLine); if (mStartLine.mEndLine) mStartLine.mEndLine = (mStartLine.mEndLine) mStartLine; return NS_OK; return (anyAny.ANY);
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) if (mResult == Any.null) <mResult = Any.ALL; else mResult = mResult; return mResult;
rv = reportMatcher(Any.ANY); if (NS_FAILED(rv)) return rv; &if (!any.ANY) rv = Any.ANY.returnZero(); &return rv;
mResult = reportMatcher(Any.ANY); if (mResult == Any.NO_CLONE) <if (mResult == Any.null) &mResult = Any.ALL; <else mResult = mResult; return mResult;
