golden:
return reportMatcher(Any.ANY).returnList();
inference:
return anyMatcher(Any.ANY);
return ReportMatcher(Any.ANY).returnList();
return reportMatcher(Any.ANY);
return anyCollection;
return Any.ANY;
return Any.ANY.returnList();
return reportMatcher(Any.ANY).returnList();
return aCollection;
return reportMatcher(Any.ANY).return();
return rv;
return anyMatcher(Any.ANY).returnList();
return anyMatcher();
return Any.ANY.returnList();
return result;
return ReportMatcher(Any.ANY);
return mCollection;
return (Any.ANY).returnList();
return anyCollection(Any.ANY);
return reportMatcher(Any.ANY).get();
return (any.ANY).returnList();
return Any.ANY.return();
return reportMatcher(Any.ANY, 0);
return Report(Any.ANY).returnList();
return anyCollection();
return reportMatcher(Any.ANY, &anyCollection);
return any.returnList();
return this;
return ReportMatcher(Any.ANY).returnList();
return reportMatcher(Any.ANY).returnList();
return (reportMatcher(Any.ANY));
return anyCollection.returnList();
return any(Any.ANY);
return any;
return ReportList(Any.ANY);
return NS_OK;
return mCollection.returnList();
return reportMatcher(Any.ANY)!= 0;
return (any.ANY)returnList();
return reportMatcher(Any.aNY);
return anyMatch(Any.ANY);
return (Any.ANY)returnList();
return reportMatcher(Any).returnList();
return reportMatcher(Any.ANY, anyCollection);
return anyMatcher(any.ANY);
return anyCollection.returnList();
return (anyMatcher(Any.ANY));
return mCollection.returnList();
return retval;
return mCollections[Any.ANY].returnList();
return reportMatcher();
return reportMatcher(any.ANY);
return reportMatcher(IAny.ANY).returnList();
return reportMatcher(Any);
return reportMatcher(any);
return reportMatcher(Any.IA).returnList();
return aAny.ANY;
return reportMatcher(Any.ANY, &any);
return any(Any.ANY).returnList();
return reportMatcher(Any.ANY).returnObject();
return (Any.ANY);
return reportMatcher(any.aNY);
return anyReturnList();
return anything;
return anyCollection(any.ANY);
return mCurrentCollection.returnList();
return reportMatcher(Any.ANY).returnArray();
return aCollection.returnList();
return ReportMatcher(any.ANY).returnList();
return ReportAnyMatcher(Any.ANY).returnList();
return Any.ANY.return();
return ReportAnyMatcher(Any.ANY);
return mCollection(Any.ANY);
return ret;
return reportMatcher(Any.ANY).returnList(this);
return Report(Any.ANY);
return reportMatcher(Any.ANY, any);
return reportMatcher( Any.ANY );
return reportMatcher(Any.null).returnList();
returnAny.ANY;
return reportMatcher(Any.ANY).return();
return aReturnList();
return anyMatcher.returnList();
return reportCollection(Any.ANY);
return reportMatcher(Any.ANY)!= null;
return reportMatcher(any).returnList();
return reportMatcher(Any.ANY, this);
return ReportAny(Any.ANY);
return reportMatcher(aAny.ANY).returnList();
return findMatcher(Any.ANY).returnList();
return(Any.ANY).returnList();
return false;
return Any.aNY.returnList();
return aReturnList;
return (any.ANY);
return super.returnList();
return reportMatcher(Any.ANY), anyCollection;
return Any.any();
return mMatcher(Any.ANY).returnList();
return reportMatcher().returnList();
return aCollection.returnList();
return reportMatcher(Any.aNY).returnList();
return (anyMatcher(Any.ANY).returnList());
return any.aNY;
returnanyMatcher(Any.ANY);
return anyReturn;
return (any)returnList();
return ANY.ANY;
return Any.ANY.ReturnList();
return (anyCollection)returnList();
return reportMatcher( ANY.ANY );
return ReportMatcher(Any.ANY).return();
return ANY.ANY.returnList();
return reportMatcher(Any.ANY, &anyCol);
return reportMatcher(Any.ANY, null);
return reportMatcher(Any.ANY).returnList(any);
return reportMatcher(Any.None).returnList();
return reportMatcher(Any.NUM).returnList();
return ReportList(Any.ANY).returnList();
return anyToReturn;
return Any.aNY;
return returnReportMatcher(Any.ANY);
return reportMatcher(Any.ANY).returnMap();
return *any;
return reportMatcher(Any, Any.ANY);
return Any.Any();
return(reportMatcher(Any.ANY));
return reportMatcher(any.ANY).returnList();
return AllCollection(Any.ANY);
return reportMatcher(Any.LONG).returnList();
return any();
return nsCollection::returnList(Any.ANY);
return Report(Any.ANY).returnList();
return (anyMatcher)returnList();
return None;
return reportMatcher(Any.ANY).Return();
return reportMatcher(Any.ANY).returns();
return res;
return reportMatcher(Any.ANY, 1);
return anyMatcher;
return anyCopy.returnList();
return Recycle(Any.ANY);
return any.aNY.returnList();
returnany.returnList();
return any.ANY;
return anyMatch;
return reportMatcher(Any.ANY).mCollection;
return mCollection(Any.ANY).returnList();
return reportMatcher(Any.ANY, false);
return reportMatcher(Any.ANY, true);
return reportMatcher (Any.ANY).returnList ();
return Recycle(any.ANY);
return Any.Any.ANY;
return findMatcher(Any.ANY);
return reportAttributes(Any.ANY);
return reportMatcher(Any.ANON).returnList();
return returnCollection(Any.ANY);
return reportMatcher(null).returnList();
return anyMatch();
return reportMatcher(any.ANY).return();
return reportMatcher(Any.ANY).returnType();
return any(any.ANY);
return reportMatcher(AnyANY);
return reportMatcher(any.aNY).returnList();
return mCurrentCollection;
return Report().returnList();
return AnyMatcher(Any.ANY);
return reportMatcher(Any.ANY).this;
return report(Any.ANY);
return mInner.returnList();
return aReturn;
return reportMatcher(Any.aNY).return();
return (any) reportMatcher(Any.ANY);
return Any.aNY.returnList();
return anAny.ANY;
return reportMatcher(Any.NUM);
return lookupMatcher(Any.ANY);
return(Any.ANY);
return type;
return (ReportMatcher(Any.ANY));
return allCollection;
return Any;
return 0;
return count;
return typeCollection(Any.ANY);
return reportMatch(Any.ANY).returnList();
return reportMatcher(Any.ANY) == 0;
return any.return();
return reportMatcher(anyCollection);
return reportMatcher(Any.ANY).returnData();
return reportMatcher(Any.ANY).return_any();
return reportMatcher(Any.ANY).anyCollection();
return (Any.ANY) reportMatcher(Any.ANY);
return ReportMatcher(Any.ANY).returnList(this);
return reportMatcher(Any.ANY).return(this);
return reportMatch(Any.ANY);
return reportMatcher(Any.ANY, Any.ANY);
return reportMatcher(Any.ANY, &anyCols);
return reportMatcher(Any.ANY, anyGroup);
nsresult rv; if (((nsresult = nsComparator("*"))!= -1) || ((null == mMap.mMap) && (null!= mMap.mMap.mMap)))  rv = mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.m
return reportMatcher(Any.ANY).return(any.mCurrentCollection);
return reportMatcher(Any.ANY, Any.ANY).returnList();
return reportMatcher(Any.ANY)? 1 : 0;
if (null == aResult)  aResult = NS_OK;  return NS_OK;
return (reportMatcher(Any.ANY).returnList());
return reportMatcher(Any.ANY, M_ADDRESS);
return (any)any.returnList();
nsresult rv = NS_OK; if (!aCollection) return NS_ERROR_NULL_POINTER; if (!aCollection) return NS_ERROR_NULL_POINTER; return NS_OK;
return reportMatcher(Any.ANY).returnList(!anyCollection);
return reportMatcher(Any.ANY).return('0');
return reportMatcher(Any.ANY, null, 0);
return NS_STATIC_CAST(CollectionMatcher(Any.ANY)).returnList();
return reportMatcher(Any.ANY).get().returnList();
if (!anyCollection) return 0; return rv;
if (!any.allocated)  return 0;  return 0;
return (any.ANY)mMatcher(Any.ANY);
return ((Any.ANY)!= null);
return reportMatcher(Any.ANY)? returnList(result) : 0;
return reportMatcher(Any.ANY).returnList(aCollection);
return mScanner.returnList(Any.ANY);
if (Any.IsDirty())  return mCurrentCollection;  return NS_OK;
if (!anyCollection) return NS_ERROR_NULL_POINTER; return Any.Any.ANY;
return ReportAsSyntaxMatcher(Any.ANY);
return anyAttributes(Any.ANY);
return reportMatcher(Any.ANY).returnList(saveResult);
aReturn = ReportMatcher(Any.ANY); if (aReturn) return (aReturn); return (aReturn);
if (Any.ANY)  return nsGenericElement::returnList();  return NS_OK;
return reportMatcher(Any.ANY, Any.EXT_LIST_SIZE);
if (any) return reportMatcher(Any.ANY).returnList(); return NS_OK;
return mRatcMatcher(Any.ANY).returnList();
return reportMatcher(Any.ANY).returnList(null);
return null;
return ReportAttr(Any.ANY, true, true);
return Any.aNY.return();
if (any.isDirty())  return ReportMatcher(Any.ANY).returnList();  return NS_OK;
return mContentViewer.returnList();
if (!any.aNY) return NS_ERROR_NULL_POINTER; return anyMatcher(Any.ANY).returnList();
nsresult rv = mRangeManager.returnList(any.ANY, aResult); if (NS_FAILED(rv)) return rv; return NS_OK;
return reportMatcher(Any.ANY).return(id);
nsCOMPtrnsIContent> content = (nsIContent*)any.nsComponents; if (content) return NS_OK; *aCollection = content; return NS_OK;
return reportMatcher(Any.ANY).returnList(eHTMLValue);
return (reportMatcher(Any.ANY)).returnList();
return reportMatcher(Any.ANY).returnElement(Any.ANY);
if ((items = reportMatcher(Any.ANY)) &&!mList)  return NS_OK;  if (items == mMatches)  if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK;  return NS_OK;
return reportMatcher(Any.ANY, 0).returnList();
return nsAbCardProperty::returnList(any.ANY);
return reportMatcher(Any.ANY, null).returnList();
if (!Any.IsAvailable()) return 0; return reportMatcher(Any.ANY).returnList();
return reportMatcher(Any.ANY, Any.IsInMatch());
return reportMatcher(Any.ANY).return(mMatcher);
return reportMatcher(Any.ANY, &any.returnList);
nsresult rv; if (Any.ANY)  rv = any.any.returnList();  else  *nsresult = NS_OK;  return rv;
return reportMatcher(Any.ANY).returnList(any.arena);
if (any.ANY)  return reportMatcher(Any.ANY).returnList();  else  return NS_OK;
if (any.size() == 0)  return NS_OK;  return mIsEmpty();
return reportMatcher(Any.ANY, null).returnList();
if (!aCollection) return; return 0;
return nsresult? nsResultList: anyMatcher(Any.ANY) : anyMatcher(Any.ANY);
return mTargetTableImpl::Return(Any.ANY);
if (!returnList)  return NS_OK;  return anyCollection;
return reportMatcher(Any.ANY, anyType);
nsresult rv; rv = aCollection.returnList(); if (NS_FAILED(rv)) return rv; return NS_OK;
return reportMatcher(Any.ANY).return(null);
return ReportAsSupports(any.ANY);
return mAttrs[any.ANY].returnList();
return reportMatcher(Any.ANY).returnList(*any);
if (!mOwningCollection)  return NS_OK;   return NS_OK;
if (!Any.ANY) return NS_ERROR_NULL_POINTER; return NS_OK;
return nsCRT::returnList(Any.ANY);
return reportMatcher(Any.ANY).return(aCollection);
return reportMatcher(Any.ANY, true).returnList();
if (mClone)  mClone.mClone = null;  if (mClone)  mClone.mClone = null;  return mClone.returnList();
if (!mConflict) return NS_OK; if (!any.aNY) return NS_ERROR_NULL_POINTER; if (!any.aNY) return NS_ERROR_NULL_POINTER; return NS_OK;
return reportMatcher(Any.ANY).returnList(*this);
return (Any.ANY)? anyMatcher(Any.ANY): noReturnList();
if (mOwner)  rv = mOwner.returnList();  else  rv = mOwner.returnList();  return rv;
return NS_REINTERPRET_CAST(ReportMatcher(Any.ANY)).returnList();
if (aReturnType == mCollection)  nsAutoString tmp; aReturnType = anyCollection; return NS_OK;  else return NS_OK;
if (!any) return None; if (!any.item) return list; return NS_OK;
return reportMatcher(Any.ANY, MARK_ADDR);
return reportMatcher(Any.ANY).returnList(&any.list);
return Any.ANY.anyCollection();
return reportMatcher(Any.ANY).returnList(null);
if (any)  if (Any.ANY)  return NS_OK;  else  if (any.ANY)  NS_ADDREF(any.ANY);  return NS_OK;  return NS_OK;  return NS_OK;
if (mOwner) &rv = mOwner.returnList(); &else <rv = mOwner.returnList(); <return rv;
if (any.ANY) return reportMatcher(Any.ANY).returnList(); &else return NS_OK;
if (mOwner) rv = mOwner.returnList(); else <rv = mOwner.returnList(); <return rv;
if (mOwner) <rv = mOwner.returnList(); &else &rv = mOwner.returnList(); <return rv;
if (mClone) mClone.mClone = null; <if (mClone) &mClone.mClone = null; return mClone.returnList();
if (Any.IsDirty()) return mCurrentCollection; return NS_OK;
if (mOwner) rv = mOwner.returnList(); else <rv = mOwner.returnList(); return rv;
if (any) if (Any.ANY) return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mOwner) rv = mOwner.returnList(); else rv = mOwner.returnList(); <return rv;
if (any) <if (Any.ANY) &return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) &mClone.mClone = null; if (mClone) <mClone.mClone = null; <return mClone.returnList();
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else *nsresult = NS_OK; <return rv;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else *nsresult = NS_OK; <return rv;
if (!mOwningCollection) return NS_OK; &&return NS_OK;
if (any.ANY) return reportMatcher(Any.ANY).returnList(); else return NS_OK;
if (any) <if (Any.ANY) <return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any.size() == 0) return NS_OK; return mIsEmpty();
if (mClone) &mClone.mClone = null; if (mClone) mClone.mClone = null; return mClone.returnList();
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); else return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else &*nsresult = NS_OK; &return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else <*nsresult = NS_OK; return rv;
return reportMatcher(Any.ANY).return();
if (mOwner) &rv = mOwner.returnList(); <else <rv = mOwner.returnList(); return rv;
if (!mOwningCollection) return NS_OK; <return NS_OK;
if (any.isDirty()) &return ReportMatcher(Any.ANY).returnList(); return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else &*nsresult = NS_OK; <return rv;
if (mOwner) &rv = mOwner.returnList(); <else rv = mOwner.returnList(); &return rv;
if (any) &if (Any.ANY) &return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (!any.allocated) <return 0; &return 0;
if (any.ANY) return reportMatcher(Any.ANY).returnList(); else <return NS_OK;
if (any) if (Any.ANY) &return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) if (Any.ANY) <return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; &if (mClone) &mClone.mClone = null; <return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (Any.IsDirty()) &return mCurrentCollection; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); &else <rv = mOwner.returnList(); return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mClone) mClone.mClone = null; <if (mClone) mClone.mClone = null; <return mClone.returnList();
if (!mOwningCollection) <return NS_OK; <<return NS_OK;
if (mOwner) &rv = mOwner.returnList(); <else &rv = mOwner.returnList(); &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mClone) &mClone.mClone = null; if (mClone) mClone.mClone = null; <return mClone.returnList();
if (mOwner) <rv = mOwner.returnList(); else <rv = mOwner.returnList(); return rv;
if (mClone) <mClone.mClone = null; &if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (!returnList) return NS_OK; <return anyCollection;
if (mOwner) rv = mOwner.returnList(); else &rv = mOwner.returnList(); return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else &*nsresult = NS_OK; <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mOwner) <rv = mOwner.returnList(); <else <rv = mOwner.returnList(); &return rv;
if (any) &if (Any.ANY) &return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else &*nsresult = NS_OK; return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else *nsresult = NS_OK; &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (any) <if (Any.ANY) return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) <rv = mOwner.returnList(); else &rv = mOwner.returnList(); return rv;
if (any) if (Any.ANY) <return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (!mOwningCollection) <return NS_OK; &return NS_OK;
if (mOwner) <rv = mOwner.returnList(); else &rv = mOwner.returnList(); &return rv;
if (any) &if (Any.ANY) &return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (any.ANY) return reportMatcher(Any.ANY).returnList(); else &return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (any) if (Any.ANY) return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) <return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) mClone.mClone = null; <if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (any.ANY) return reportMatcher(Any.ANY).returnList(); <else &return NS_OK;
if (mOwner) rv = mOwner.returnList(); &else &rv = mOwner.returnList(); <return rv;
if (any) &if (Any.ANY) return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); &else &rv = mOwner.returnList(); &return rv;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else <*nsresult = NS_OK; &return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else *nsresult = NS_OK; <return rv;
if (any.isDirty()) return ReportMatcher(Any.ANY).returnList(); <return NS_OK;
if (mClone) mClone.mClone = null; &if (mClone) <mClone.mClone = null; return mClone.returnList();
if (Any.ANY) return nsGenericElement::returnList(); return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mOwner) &rv = mOwner.returnList(); else rv = mOwner.returnList(); &return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else *nsresult = NS_OK; <return rv;
if (any) &if (Any.ANY) <return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mClone) &mClone.mClone = null; if (mClone) &mClone.mClone = null; return mClone.returnList();
if (aReturnType == mCollection) nsAutoString tmp; aReturnType = anyCollection; return NS_OK; else return NS_OK;
if (mClone) mClone.mClone = null; &if (mClone) mClone.mClone = null; <return mClone.returnList();
if (mOwner) <rv = mOwner.returnList(); <else &rv = mOwner.returnList(); &return rv;
if (mClone) &mClone.mClone = null; &if (mClone) mClone.mClone = null; &return mClone.returnList();
if (!mOwningCollection) &return NS_OK; &&return NS_OK;
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); &else <return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else <*nsresult = NS_OK; &return rv;
if (any.size() == 0) return NS_OK; <return mIsEmpty();
if (mOwner) <rv = mOwner.returnList(); <else <rv = mOwner.returnList(); return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else <*nsresult = NS_OK; <return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else &*nsresult = NS_OK; return rv;
if (mClone) <mClone.mClone = null; <if (mClone) &mClone.mClone = null; <return mClone.returnList();
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); &else return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else <*nsresult = NS_OK; return rv;
if (any) if (Any.ANY) &return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); <else &rv = mOwner.returnList(); <return rv;
if (mOwner) &rv = mOwner.returnList(); <else rv = mOwner.returnList(); return rv;
if (any) &if (Any.ANY) return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) &rv = mOwner.returnList(); else &rv = mOwner.returnList(); return rv;
if (any) <if (Any.ANY) return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mOwner) <rv = mOwner.returnList(); &else &rv = mOwner.returnList(); return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else &*nsresult = NS_OK; <return rv;
if (mClone) <mClone.mClone = null; &if (mClone) mClone.mClone = null; <return mClone.returnList();
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); else &return NS_OK;
if (any) <if (Any.ANY) &return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else *nsresult = NS_OK; return rv;
if (any) if (Any.ANY) &return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); <else return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else &*nsresult = NS_OK; <return rv;
if (mOwner) <rv = mOwner.returnList(); <else &rv = mOwner.returnList(); return rv;
if (mOwner) <rv = mOwner.returnList(); else rv = mOwner.returnList(); return rv;
if (any.size() == 0) return NS_OK; &return mIsEmpty();
if (mOwner) <rv = mOwner.returnList(); else rv = mOwner.returnList(); &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (any) &if (Any.ANY) &return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) &rv = mOwner.returnList(); <else <rv = mOwner.returnList(); <return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else <*nsresult = NS_OK; <return rv;
if (any.size() == 0) <return NS_OK; &return mIsEmpty();
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (any) <if (Any.ANY) <return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) <if (Any.ANY) &return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) &return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else &*nsresult = NS_OK; <return rv;
if (any) <if (Any.ANY) <return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); &else &return NS_OK;
if (any) if (Any.ANY) return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); else rv = mOwner.returnList(); &return rv;
if (!mOwningCollection) <return NS_OK; return NS_OK;
if (mOwner) <rv = mOwner.returnList(); &else rv = mOwner.returnList(); <return rv;
if (any.isDirty()) <return ReportMatcher(Any.ANY).returnList(); return NS_OK;
if (any) &if (Any.ANY) <return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else &*nsresult = NS_OK; &return rv;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else <*nsresult = NS_OK; <return rv;
if (mClone) mClone.mClone = null; &if (mClone) <mClone.mClone = null; <return mClone.returnList();
if (any.size() == 0) &return NS_OK; return mIsEmpty();
if (mClone) <mClone.mClone = null; if (mClone) mClone.mClone = null; &return mClone.returnList();
if (Any.IsDirty()) &return mCurrentCollection; <return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else *nsresult = NS_OK; return rv;
if (mOwner) &rv = mOwner.returnList(); else rv = mOwner.returnList(); <return rv;
if (!any.allocated) &return 0; &return 0;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else *nsresult = NS_OK; return rv;
if (any) &if (Any.ANY) &return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (any.size() == 0) &return NS_OK; &return mIsEmpty();
if (any) <if (Any.ANY) &return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) &mClone.mClone = null; &if (mClone) mClone.mClone = null; <return mClone.returnList();
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else &*nsresult = NS_OK; return rv;
if (mClone) <mClone.mClone = null; if (mClone) <mClone.mClone = null; return mClone.returnList();
if (any.ANY) return reportMatcher(Any.ANY).returnList(); <else return NS_OK;
nsCOMPtrnsIContent> content = (nsIContent*)any.nsComponents; if (content) return NS_OK; *aCollection = content; return NS_OK;
if (mClone) &mClone.mClone = null; &if (mClone) <mClone.mClone = null; &return mClone.returnList();
if (mOwner) &rv = mOwner.returnList(); &else &rv = mOwner.returnList(); &return rv;
if (mOwner) rv = mOwner.returnList(); else rv = mOwner.returnList(); return rv;
if (Any.ANY) &return nsGenericElement::returnList(); &return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (!any.allocated) return 0; <return 0;
if (mClone) &mClone.mClone = null; <if (mClone) &mClone.mClone = null; &return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (Any.ANY) <return nsGenericElement::returnList(); &return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mClone) mClone.mClone = null; if (mClone) mClone.mClone = null; return mClone.returnList();
if (any.isDirty()) &return ReportMatcher(Any.ANY).returnList(); &return NS_OK;
if (mClone) &mClone.mClone = null; <if (mClone) <mClone.mClone = null; <return mClone.returnList();
if (mOwner) <rv = mOwner.returnList(); else &rv = mOwner.returnList(); <return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else <*nsresult = NS_OK; &return rv;
if (mClone) <mClone.mClone = null; <if (mClone) <mClone.mClone = null; &return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mClone) &mClone.mClone = null; <if (mClone) <mClone.mClone = null; &return mClone.returnList();
if (any.size() == 0) <return NS_OK; return mIsEmpty();
if (aReturnType == mCollection) &nsAutoString tmp; aReturnType = anyCollection; return NS_OK; <else return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mClone) mClone.mClone = null; &if (mClone) <mClone.mClone = null; &return mClone.returnList();
if (mClone) mClone.mClone = null; if (mClone) <mClone.mClone = null; &return mClone.returnList();
if (mClone) mClone.mClone = null; if (mClone) <mClone.mClone = null; return mClone.returnList();
if (mClone) <mClone.mClone = null; if (mClone) &mClone.mClone = null; <return mClone.returnList();
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else *nsresult = NS_OK; &return rv;
if (Any.ANY) &return nsGenericElement::returnList(); return NS_OK;
if (mClone) mClone.mClone = null; if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (mOwner) rv = mOwner.returnList(); &else rv = mOwner.returnList(); <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mClone) mClone.mClone = null; &if (mClone) &mClone.mClone = null; return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mClone) mClone.mClone = null; &if (mClone) &mClone.mClone = null; <return mClone.returnList();
if (any) if (Any.ANY) <return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mClone) mClone.mClone = null; &if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (any) <if (Any.ANY) <return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) &rv = mOwner.returnList(); else <rv = mOwner.returnList(); return rv;
if (!returnList) <return NS_OK; <return anyCollection;
if (null == aResult) &aResult = NS_OK; &return NS_OK;
return reportMatcher(Any.ANY).return('&0');
if (mOwner) <rv = mOwner.returnList(); <else rv = mOwner.returnList(); return rv;
if (any) &if (Any.ANY) &return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (mClone) <mClone.mClone = null; <if (mClone) <mClone.mClone = null; return mClone.returnList();
if (any) <if (Any.ANY) return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; if (mClone) <mClone.mClone = null; <return mClone.returnList();
if (Any.IsDirty()) <return mCurrentCollection; &return NS_OK;
if (mOwner) <rv = mOwner.returnList(); <else rv = mOwner.returnList(); <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else &*nsresult = NS_OK; <return rv;
if (mClone) &mClone.mClone = null; if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (mClone) mClone.mClone = null; &if (mClone) mClone.mClone = null; &return mClone.returnList();
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else &*nsresult = NS_OK; &return rv;
if (mOwner) &rv = mOwner.returnList(); <else <rv = mOwner.returnList(); &return rv;
if (!any.allocated) return 0; return 0;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (any) if (Any.ANY) return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; if (mClone) mClone.mClone = null; <return mClone.returnList();
if (!mOwningCollection) &return NS_OK; &<return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else *nsresult = NS_OK; return rv;
if (!mOwningCollection) return NS_OK; &return NS_OK;
if (mOwner) &rv = mOwner.returnList(); else <rv = mOwner.returnList(); &return rv;
if (mOwner) rv = mOwner.returnList(); &else &rv = mOwner.returnList(); return rv;
if (!returnList) &return NS_OK; return anyCollection;
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); &else <return NS_OK;
if (mOwner) &rv = mOwner.returnList(); <else &rv = mOwner.returnList(); <return rv;
if (any) <if (Any.ANY) &return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) <if (Any.ANY) return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else &*nsresult = NS_OK; <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mOwner) rv = mOwner.returnList(); &else <rv = mOwner.returnList(); <return rv;
if (any.ANY) return reportMatcher(Any.ANY).returnList(); &else &return NS_OK;
if (any.size() == 0) &return NS_OK; <return mIsEmpty();
if (any) <if (Any.ANY) return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) if (Any.ANY) return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) &return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); &else rv = mOwner.returnList(); &return rv;
if (any) <if (Any.ANY) <return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (any) <if (Any.ANY) return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mClone) &mClone.mClone = null; &if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (mClone) &mClone.mClone = null; &if (mClone) &mClone.mClone = null; return mClone.returnList();
if (any) <if (Any.ANY) &return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (!returnList) return NS_OK; return anyCollection;
if (mOwner) &rv = mOwner.returnList(); else &rv = mOwner.returnList(); <return rv;
nsresult rv; if (((nsresult = nsComparator("*"))!= -1) || ((null == mMap.mMap) && (null!= mMap.mMap.mMap))) rv = mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.m
if (any) if (Any.ANY) &return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; <if (mClone) &mClone.mClone = null; return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (any) if (Any.ANY) return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
return reportMatcher(Any.ANY).return('0');
if (any) if (Any.ANY) &return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else &*nsresult = NS_OK; &return rv;
if (mOwner) <rv = mOwner.returnList(); <else &rv = mOwner.returnList(); <return rv;
if (mClone) mClone.mClone = null; <if (mClone) <mClone.mClone = null; return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mClone) <mClone.mClone = null; <if (mClone) &mClone.mClone = null; &return mClone.returnList();
if (!mOwningCollection) &return NS_OK; <&return NS_OK;
if (mOwner) &rv = mOwner.returnList(); else rv = mOwner.returnList(); return rv;
if (mClone) <mClone.mClone = null; <if (mClone) <mClone.mClone = null; <return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); else &rv = mOwner.returnList(); &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
nsresult rv; if (((nsresult = nsComparator("*"))!= -1) || ((null == mMap.mMap) && (null!= mMap.mMap.mMap))) <rv = mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.m
if (any) <if (Any.ANY) &return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; <if (mClone) mClone.mClone = null; return mClone.returnList();
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else <*nsresult = NS_OK; return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else <*nsresult = NS_OK; &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else &*nsresult = NS_OK; &return rv;
if (!mOwningCollection) <return NS_OK; &<return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); else return NS_OK;
if (!mOwningCollection) return NS_OK; <<return NS_OK;
if (!mOwningCollection) return NS_OK; <&return NS_OK;
if (!mOwningCollection) return NS_OK; &<return NS_OK;
if (Any.IsDirty()) <return mCurrentCollection; return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else *nsresult = NS_OK; &return rv;
if (mClone) mClone.mClone = null; if (mClone) &mClone.mClone = null; <return mClone.returnList();
if (any) &if (Any.ANY) <return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) <rv = mOwner.returnList(); &else <rv = mOwner.returnList(); &return rv;
if (any) <if (Any.ANY) &return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) &return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) &rv = mOwner.returnList(); else <rv = mOwner.returnList(); <return rv;
if (mOwner) &rv = mOwner.returnList(); &else &rv = mOwner.returnList(); <return rv;
if (!returnList) <return NS_OK; &return anyCollection;
if (mClone) mClone.mClone = null; <if (mClone) <mClone.mClone = null; &return mClone.returnList();
if (Any.ANY) &return nsGenericElement::returnList(); <return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else *nsresult = NS_OK; &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; <if (mClone) mClone.mClone = null; &return mClone.returnList();
if (mClone) &mClone.mClone = null; <if (mClone) mClone.mClone = null; &return mClone.returnList();
if (aReturnType == mCollection) <nsAutoString tmp; aReturnType = anyCollection; return NS_OK; &else return NS_OK;
if (mOwner) &rv = mOwner.returnList(); &else <rv = mOwner.returnList(); return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else <*nsresult = NS_OK; &return rv;
nsCOMPtr&nsIContent> content = (nsIContent*)any.nsComponents; if (content) return NS_OK; *aCollection = content; return NS_OK;
if (mOwner) <rv = mOwner.returnList(); &else <rv = mOwner.returnList(); return rv;
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); <else return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else *nsresult = NS_OK; return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else <*nsresult = NS_OK; <return rv;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else <*nsresult = NS_OK; &return rv;
if (any) if (Any.ANY) <return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mOwner) <rv = mOwner.returnList(); &else rv = mOwner.returnList(); return rv;
if (!any.allocated) &return 0; return 0;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mOwner) rv = mOwner.returnList(); &else <rv = mOwner.returnList(); &return rv;
if (any) if (Any.ANY) &return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); <else <return NS_OK;
if (mOwner) rv = mOwner.returnList(); <else &rv = mOwner.returnList(); return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else *nsresult = NS_OK; &return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else <*nsresult = NS_OK; return rv;
if (mClone) mClone.mClone = null; <if (mClone) mClone.mClone = null; return mClone.returnList();
if (any.isDirty()) <return ReportMatcher(Any.ANY).returnList(); &return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (Any.ANY) return nsGenericElement::returnList(); <return NS_OK;
if (aReturnType == mCollection) nsAutoString tmp; aReturnType = anyCollection; return NS_OK; <else return NS_OK;
if (any) &if (Any.ANY) <return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else &*nsresult = NS_OK; return rv;
if (mClone) &mClone.mClone = null; <if (mClone) <mClone.mClone = null; return mClone.returnList();
if (mOwner) &rv = mOwner.returnList(); <else &rv = mOwner.returnList(); return rv;
if (mOwner) rv = mOwner.returnList(); &else rv = mOwner.returnList(); return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else *nsresult = NS_OK; return rv;
if (mClone) &mClone.mClone = null; if (mClone) &mClone.mClone = null; <return mClone.returnList();
if (mClone) &mClone.mClone = null; if (mClone) mClone.mClone = null; &return mClone.returnList();
if (mOwner) rv = mOwner.returnList(); <else <rv = mOwner.returnList(); &return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else *nsresult = NS_OK; return rv;
if (!mOwningCollection) &return NS_OK; &return NS_OK;
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); <else <return NS_OK;
if (aReturnType == mCollection) &nsAutoString tmp; aReturnType = anyCollection; return NS_OK; &else return NS_OK;
if (mOwner) &rv = mOwner.returnList(); <else rv = mOwner.returnList(); <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else &*nsresult = NS_OK; &return rv;
if (mOwner) <rv = mOwner.returnList(); <else <rv = mOwner.returnList(); <return rv;
if (mOwner) &rv = mOwner.returnList(); &else rv = mOwner.returnList(); return rv;
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); else &return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else *nsresult = NS_OK; &return rv;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else *nsresult = NS_OK; &return rv;
if (mClone) &mClone.mClone = null; <if (mClone) &mClone.mClone = null; <return mClone.returnList();
if (any) <if (Any.ANY) return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else &*nsresult = NS_OK; return rv;
if (mOwner) <rv = mOwner.returnList(); <else rv = mOwner.returnList(); &return rv;
if (any) &if (Any.ANY) return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) &mClone.mClone = null; <if (mClone) mClone.mClone = null; return mClone.returnList();
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else <*nsresult = NS_OK; &return rv;
if (mOwner) rv = mOwner.returnList(); <else <rv = mOwner.returnList(); <return rv;
if (aReturnType == mCollection) <nsAutoString tmp; aReturnType = anyCollection; return NS_OK; <else return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) return NS_OK; &else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) &mClone.mClone = null; &if (mClone) &mClone.mClone = null; <return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (any) &if (Any.ANY) <return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (any) if (Any.ANY) return NS_OK; &else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) if (Any.ANY) <return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any.isDirty()) &return ReportMatcher(Any.ANY).returnList(); <return NS_OK;
if (mClone) <mClone.mClone = null; &if (mClone) mClone.mClone = null; &return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mClone) <mClone.mClone = null; &if (mClone) mClone.mClone = null; return mClone.returnList();
if (mClone) <mClone.mClone = null; &if (mClone) <mClone.mClone = null; <return mClone.returnList();
if (any) <if (Any.ANY) return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) <mClone.mClone = null; &if (mClone) &mClone.mClone = null; return mClone.returnList();
if (mClone) &mClone.mClone = null; &if (mClone) mClone.mClone = null; return mClone.returnList();
if (mOwner) rv = mOwner.returnList(); else <rv = mOwner.returnList(); &return rv;
if (mClone) <mClone.mClone = null; if (mClone) mClone.mClone = null; return mClone.returnList();
if (null == aResult) &aResult = NS_OK; <return NS_OK;
if (Any.IsDirty()) return mCurrentCollection; &return NS_OK;
if (Any.ANY) return nsGenericElement::returnList(); &return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mClone) &mClone.mClone = null; &if (mClone) <mClone.mClone = null; <return mClone.returnList();
if (mClone) mClone.mClone = null; if (mClone) <mClone.mClone = null; <return mClone.returnList();
if (any) <if (Any.ANY) <return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) &rv = mOwner.returnList(); &else rv = mOwner.returnList(); <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (any) if (Any.ANY) return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) if (Any.ANY) &return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (null == aResult) aResult = NS_OK; <return NS_OK;
if (mOwner) <rv = mOwner.returnList(); &else <rv = mOwner.returnList(); <return rv;
if (any) if (Any.ANY) &return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) <rv = mOwner.returnList(); else rv = mOwner.returnList(); <return rv;
if (mClone) &mClone.mClone = null; <if (mClone) &mClone.mClone = null; return mClone.returnList();
if (mOwner) &rv = mOwner.returnList(); &else &rv = mOwner.returnList(); return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (any.isDirty()) <return ReportMatcher(Any.ANY).returnList(); <return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else <*nsresult = NS_OK; return rv;
if (!returnList) &return NS_OK; &return anyCollection;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else *nsresult = NS_OK; <return rv;
if (aReturnType == mCollection) &nsAutoString tmp; aReturnType = anyCollection; return NS_OK; else return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mClone) <mClone.mClone = null; if (mClone) <mClone.mClone = null; &return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (aReturnType == mCollection) <nsAutoString tmp; aReturnType = anyCollection; return NS_OK; else return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mOwner) rv = mOwner.returnList(); else &rv = mOwner.returnList(); <return rv;
if (mClone) &mClone.mClone = null; if (mClone) <mClone.mClone = null; return mClone.returnList();
if (!returnList) <return NS_OK; return anyCollection;
if (null == aResult) <aResult = NS_OK; <return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else *nsresult = NS_OK; return rv;
if (Any.ANY) <return nsGenericElement::returnList(); <return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else <*nsresult = NS_OK; &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else <*nsresult = NS_OK; <return rv;
if (any) &if (Any.ANY) return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) <if (Any.ANY) <return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); else <*nsresult = NS_OK; return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else <*nsresult = NS_OK; <return rv;
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); <else &return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (null == aResult) &aResult = NS_OK; return NS_OK;
if (any) &if (Any.ANY) <return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); &else <*nsresult = NS_OK; <return rv;
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); &else return NS_OK;
if (any) <if (Any.ANY) <return NS_OK; else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else &*nsresult = NS_OK; &return rv;
if (!any.allocated) <return 0; return 0;
if (null == aResult) aResult = NS_OK; &return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else *nsresult = NS_OK; &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (!mOwningCollection) &return NS_OK; return NS_OK;
if (mClone) &mClone.mClone = null; <if (mClone) mClone.mClone = null; <return mClone.returnList();
if (any.ANY) return reportMatcher(Any.ANY).returnList(); &else <return NS_OK;
if (any) <if (Any.ANY) &return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else *nsresult = NS_OK; <return rv;
return reportMatcher(Any.ANY).return('<0');
if (!returnList) &return NS_OK; <return anyCollection;
if (null == aResult) aResult = NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); <else &rv = mOwner.returnList(); &return rv;
if (mClone) mClone.mClone = null; <if (mClone) <mClone.mClone = null; <return mClone.returnList();
if (Any.IsDirty()) &return mCurrentCollection; &return NS_OK;
if (!mOwningCollection) <return NS_OK; <&return NS_OK;
if (any) <if (Any.ANY) return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mClone) mClone.mClone = null; if (mClone) mClone.mClone = null; &return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mClone) mClone.mClone = null; <if (mClone) mClone.mClone = null; &return mClone.returnList();
if (!mOwningCollection) <return NS_OK; &&return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else <*nsresult = NS_OK; <return rv;
if (any.size() == 0) <return NS_OK; <return mIsEmpty();
if (!mOwningCollection) <return NS_OK; <return NS_OK;
if (any) if (Any.ANY) &return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); <else rv = mOwner.returnList(); return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (any.ANY) return reportMatcher(Any.ANY).returnList(); <else <return NS_OK;
if (mClone) <mClone.mClone = null; if (mClone) &mClone.mClone = null; return mClone.returnList();
if (!any.allocated) &return 0; <return 0;
if (any) &if (Any.ANY) <return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (mOwner) <rv = mOwner.returnList(); &else rv = mOwner.returnList(); &return rv;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else &*nsresult = NS_OK; return rv;
if (mOwner) <rv = mOwner.returnList(); else <rv = mOwner.returnList(); &return rv;
if (mOwner) rv = mOwner.returnList(); <else rv = mOwner.returnList(); <return rv;
if (aReturnType == mCollection) nsAutoString tmp; aReturnType = anyCollection; return NS_OK; &else return NS_OK;
if (!mOwningCollection) &return NS_OK; <<return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else *nsresult = NS_OK; &return rv;
if (mOwner) <rv = mOwner.returnList(); &else &rv = mOwner.returnList(); &return rv;
if (mClone) <mClone.mClone = null; &if (mClone) <mClone.mClone = null; return mClone.returnList();
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else <*nsresult = NS_OK; return rv;
if (any) if (Any.ANY) return NS_OK; <else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (mOwner) &rv = mOwner.returnList(); else &rv = mOwner.returnList(); &return rv;
if (mClone) mClone.mClone = null; <if (mClone) &mClone.mClone = null; <return mClone.returnList();
if (mClone) <mClone.mClone = null; <if (mClone) mClone.mClone = null; <return mClone.returnList();
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else <*nsresult = NS_OK; return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (!mOwningCollection) &return NS_OK; <return NS_OK;
if (any.isDirty()) return ReportMatcher(Any.ANY).returnList(); return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else &*nsresult = NS_OK; <return rv;
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); else <return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (any) if (Any.ANY) <return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any) &if (Any.ANY) return NS_OK; else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); &else &return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else <*nsresult = NS_OK; return rv;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else *nsresult = NS_OK; return rv;
if (!any.allocated) <return 0; <return 0;
if (mOwner) rv = mOwner.returnList(); <else <rv = mOwner.returnList(); return rv;
nsCOMPtr<nsIContent> content = (nsIContent*)any.nsComponents; if (content) return NS_OK; *aCollection = content; return NS_OK;
if (!any.allocated) return 0; &return 0;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else <*nsresult = NS_OK; <return rv;
if (any) if (Any.ANY) <return NS_OK; &else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (Any.IsDirty()) <return mCurrentCollection; <return NS_OK;
if (any) &if (Any.ANY) <return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; &if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (Any.ANY) <return nsGenericElement::returnList(); return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else *nsresult = NS_OK; <return rv;
if (mOwner) &rv = mOwner.returnList(); &else <rv = mOwner.returnList(); &return rv;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); else &*nsresult = NS_OK; return rv;
if (mClone) &mClone.mClone = null; if (mClone) <mClone.mClone = null; &return mClone.returnList();
if (any.ANY) &return reportMatcher(Any.ANY).returnList(); else <return NS_OK;
if (Any.IsDirty()) return mCurrentCollection; <return NS_OK;
if (!returnList) return NS_OK; &return anyCollection;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
if (mOwner) &rv = mOwner.returnList(); &else rv = mOwner.returnList(); &return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) &if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else *nsresult = NS_OK; <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) &return NS_OK; &if (items == mMatches) <if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; return NS_OK;
if (mClone) mClone.mClone = null; &if (mClone) mClone.mClone = null; return mClone.returnList();
if (!mOwningCollection) return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); else &*nsresult = NS_OK; <return rv;
if (mClone) <mClone.mClone = null; &if (mClone) <mClone.mClone = null; &return mClone.returnList();
if (mClone) mClone.mClone = null; if (mClone) &mClone.mClone = null; return mClone.returnList();
if (null == aResult) <aResult = NS_OK; return NS_OK;
if (mOwner) rv = mOwner.returnList(); <else rv = mOwner.returnList(); &return rv;
if (mClone) mClone.mClone = null; if (mClone) mClone.mClone = null; <return mClone.returnList();
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else <*nsresult = NS_OK; &return rv;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); <else &*nsresult = NS_OK; &return rv;
if (mClone) &mClone.mClone = null; &if (mClone) <mClone.mClone = null; return mClone.returnList();
if (any) if (Any.ANY) <return NS_OK; <else &if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); &else *nsresult = NS_OK; <return rv;
if (mOwner) <rv = mOwner.returnList(); else <rv = mOwner.returnList(); <return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; <return NS_OK;
nsresult rv; if (Any.ANY) rv = any.any.returnList(); &else &*nsresult = NS_OK; &return rv;
if (any.ANY) <return reportMatcher(Any.ANY).returnList(); <else &return NS_OK;
if (any) <if (Any.ANY) <return NS_OK; <else <if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
if (any.isDirty()) return ReportMatcher(Any.ANY).returnList(); &return NS_OK;
nsresult rv; if (((nsresult = nsComparator("*"))!= -1) || ((null == mMap.mMap) && (null!= mMap.mMap.mMap))) &rv = mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.mMap.m
nsresult rv; if (Any.ANY) <rv = any.any.returnList(); <else &*nsresult = NS_OK; return rv;
if ((items = reportMatcher(Any.ANY)) &&!mList) <return NS_OK; <if (items == mMatches) if (!mMatches) return NS_ERROR_NULL_POINTER; return NS_OK; &return NS_OK;
if (any) if (Any.ANY) <return NS_OK; else if (any.ANY) NS_ADDREF(any.ANY); return NS_OK; return NS_OK; return NS_OK;
nsresult rv; if (Any.ANY) &rv = any.any.returnList(); <else &*nsresult = NS_OK; return rv;
if (null == aResult) <aResult = NS_OK; &return NS_OK;
