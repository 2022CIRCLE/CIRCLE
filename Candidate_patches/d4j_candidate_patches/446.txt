return (i);
return (int)i;
return ch;

return (int) i;
return 0;
return result;
return (char)i;
return(i);
return (ch);
return i;
return (indexOfAny)i;
return (char) i;
return i - 1;
return &i;
return indexOfAny(i);
return j;
return false;
return (char *)i;
return i + 1;
return (indexOfAny) i;
return rv;
return -1;
return true;
return NS_OK;
return int i;
return i == 0;
return n;
return cs;
break;
return ret;
return (0);
return ((int)i);
return Integer(i);
return (char *) i;
return (indexOfAny);
return '0';
return r;
return (void)i;
return i  0;
return l;
return (*i);
return true;
return, i;
return;
goto out;
return numChars;
return (int)(i);
return 1;
return (char*)i;
return ((char *)i);
return (CharSequence)i;
return null;
return INDEX_OK;
return ind;
return ++i;
return (1);
return *i;
return ((char)i);
ret = i;
return (ret);
return (j);
return s;
return INDEX_SUCCESS;
return i-1;
return cs[i];
return INDEX_NONE;
return i + csLen;
return x;
return index;
return i + searchLen;
return (-1);
return INDEX_UNKNOWN;
return searchChars[i];
return i >= 0;
return i+1;
return len;
return (i) 0;
return EINVAL;
return IndexOfAny(i);
return (int) ch;
return (cs);
return value;
return v;
return (char*) i;
return (size_t)i;
return (result);
return (n);
return i + i;
return i  searchLen;
return inet;
return (long)i;
goto ret;
return INDEX_UNUSED;
return false;
return (int i);
return rval;
return (indexOfAny(i));
result = i;
return val;
result = i; return result;
return(int)i;
return indx;
return (void) i;
return char(i);
return [i];
return INDEX_ADDRESS;
return (int)j;
return &ch;
return INDEX(i);
return res;
return (!i);
return (&i);
return (void *)i;
return (ch)i;
return INDEX_CH;
return (unsigned char)i;
return e;
return (l);
continue;
return ch.i;
return (String)i;
return (indexOfAny)(i);
return i + searchChars.length;
return ((char*)i);
return (int)ch;
return u;
return i--;
return i > 0;
return INDEX_RETURN;
return ENXIO;
return (len);
return indexOfAny;
return i - i;
return (Integer)i;
return -i;
return (v);
return INDEX_LOCK;
return INDEX_LOOKUP;
return (ch - i);
return INDEX_NO_FOUND;
return h;
return (int);
return ENOMEM;
return i = 0;
return ( i );
return num;
return (error);
return numChildren;
return retval;
return INDEX_ANY;
return (null);
return Int32(i);
return y;
return INDEX_BOOLEAN;
return d;
return (ch.i);
return INDEX_POINTER;
return i - searchLen;
return (unsigned long)i;
return (PRUint32)i;
return i == -1;
goto done;
return match;
return f;
return(ch);
return (unsigned char) i;
return INDEX_ADDREF;
return INDEX_UNLOCKED;
return true;
return (IReturn)i;
return i!= 0;
return (cs[i]);
return (sizeof(char));
return type;
return (const char *)i;
return ((int) i);
return (ch == i);
return INDEX_ENCODER;
return INDEX_ROUND;
return (int)cs;
return (int)indexOfAny;
return (const char*)i;
return INDEX_CHANGE;
return (Integer) i;
return indexOfAny(cs);
return (int i) i;
return INDEX_UNLOCK;
return (int) (i);
i = 0; return i;
ret = i; break;
return INDEX_UNSPEC;
return (indexOfAny) (i);
return (int) cs;
return INDEX_NOT_FOUND;
return (csLen  searchLen)? i : INDEX_NOT_FOUND;
return numCases;
return (cs!= '0');
return char_num(i);
return ((cs == null)? i : 0);
return char_i;
return (ch.charAt(i));
return char_ch;
return (cs.length() - i);
return i, i++;
return cs.charAt(i);
return numChannels;
return &indexOfAny;
return INDEX_OT_FOUND;
return cs.next;
return INDEX_ADDR_CHAR;
return ((i  0)? i : 0);
return (cs  0? i : 0);
return (cs.charAt(i));
return i;  return INDEX_NOT_FOUND;
return (cs  searchLen);
return INDEX_UNSPECIFIED;
return INDEX_FOR_BOUND;
return nsCRT::strdup(i);

return i &searchLen;
return i &= 0;
return '0';
return i; <return INDEX_NOT_FOUND;
return i; return INDEX_NOT_FOUND;
return (cs!= '<0');
return ((i <0)? i : 0);
return (csLen &searchLen)? i : INDEX_NOT_FOUND;
return (cs searchLen);
return ((i 0)? i : 0);
&return (i);
return '<0';
return i 0;
<return i;
return (cs!= '&0');
return i;
return i;
return i <0;
return i = 0;
return (cs &0? i : 0);
return (csLen searchLen)? i : INDEX_NOT_FOUND;
return i; &return INDEX_NOT_FOUND;
return '&0';
return (i);
<return i;
&return i;
<return (i);
&return i;
return (cs <0? i : 0);
return (cs <searchLen);
return (cs &searchLen);
return (cs!= '0');
return ((i &0)? i : 0);
return (cs 0? i : 0);
return i searchLen;
return i <= 0;
return i &0;
return (csLen <searchLen)? i : INDEX_NOT_FOUND;
return i <searchLen;
