golden:
rowData.removeValue(columnKey);
inference:

columnData.removeValue(columnKey);
rowData.removeElement(columnKey);
columnData.removeValue(columnKey);
rowData.removeValue(columnKey.get());
rowData.removeValue(columnKey);
rv = rowData.removeValue(columnKey);
rowData.removeElementAt(columnKey);
this.rowData.removeValue(columnKey);
rowData.removeValue(columnKey, null);
rowData.remove(columnKey);
rowData.remove(columnKey.get());
rowData.removeValue(columnKey, 0);
colData.removeValue(columnKey);
this.rows.removeValue(columnKey);
rowData.removeKey(columnKey);
rowData.removeValue(columnKey);
this.columnKeys.remove(columnKey);
(void) rowData.removeValue(columnKey);
rowData.removeElementValue(columnKey);
rowData.removeValue(columnKey, this);
this.rowData.removeValue(columnKey);
rowData.removeValue(columnKey.get());
result = rowData.removeValue(columnKey);
this.rows.remove(columnKey);
aRowData.removeValue(columnKey);
rowData.removeValue(columnKey, null);
return rowData.removeValue(columnKey);
rowData.remove(columnKey);
rowData.removeObject(columnKey);
rowData.removeValue(columnKey, index);
rowData = rowData.removeValue(columnKey);
nrowData.removeValue(columnKey);
rowData.removeElement(columnKey);
rowData.remove(columnKey, null);
rowData.RemoveValue(columnKey);
rowData.RemoveValue(columnKey);
rowData.removeString(columnKey);
nrows.removeValue(columnKey);
rowData.removeValue(&columnKey);
rowData = (KeyedObjects) iterator.next();
value.removeValue(columnKey);
columnData = rowData.removeValue(columnKey);
rowData.removeAll(columnKey);
rowData.clear();
delete rowData;
cellData.removeValue(columnKey);
rowData.removeValue(key);
this.rows.removeElement(columnKey);
rowData.removeChild(columnKey);
removeColumn(columnKey);
rowData.remove(columnKey, true);
rowData.remove(columnKey, 0);
ret = rowData.removeValue(columnKey);
rows.removeValue(columnKey);
rowData.removeIndex(columnKey);
rowData.removeValue(columnKey, 0);
data.removeValue(columnKey);
rowData.removeValue( columnKey );
tableData.removeValue(columnKey);
rowData.removeInt(columnKey);
else rowData.removeValue(columnKey);
break;
this.rowData.removeValue(columnKey);
rowData.removeValues(columnKey);
rowData.removeStringValue(columnKey);
RowData.removeValue(columnKey);
(void)rowData.removeValue(columnKey);
getRowData().removeValue(columnKey);
value = rowData.removeValue(columnKey);
rowData.removeValue(columnKey, this);
val = rowData.removeValue(columnKey);
columnData.remove(columnKey);
rowData.remove(columnKey, false);
rowData.removeValue(columnKey, -1);
rowData.setValue(columnKey);
rowData.removeValue(columnKey, 1);
rowData.removeEmptyValue(columnKey);
rv = rowData.removeValue(columnKey);
itemData.removeValue(columnKey);
rowData.removeIntValue(columnKey);
rowData.removeKey(columnKey);
rowData.removeValue(columnKey, index);
rowData.removeValue(columnKey, value);
delete columnKey;
this.rows.removeValue(columnKey);
rowData.removeValue(columnIndex);
colData.removeValue(columnKey);
columnKey.removeValue(columnKey);
tableData.removeValue(columnKey);
res = rowData.removeValue(columnKey);
rowData.removeElementAt(columnKey);
rowData.remove(columnKey, this);
i = rowData.removeValue(columnKey);
item.removeValue(columnKey);
rowData.put(columnKey);
rowData.removeAttributes(columnKey);
rowData.removeArray(columnKey);
return rowData;
rowData.removeValue(columnName);
rowData.removeElementValue(columnKey);
cellData.removeValue(columnKey);
self.rowData.removeValue(columnKey);
rowData.removeData(columnKey);
mData.removeValue(columnKey);
rowData.clearValues();
rowData.removeForwards(columnKey);
table.removeValue(columnKey);
mRowData.removeValue(columnKey);
r = rowData.removeValue(columnKey);
rowData.removeLength(columnKey);
rowData.removeValue (columnKey);
nrowData.removeValue(columnKey);
rowData.addValue(columnKey);
rowData = null;
rowData.remove(columnKey)
index = rowData.removeValue(columnKey);
rowData.removeValue(columnKey + 1);
columnKey = rowData.removeValue(columnKey);
rowData.remove(columnKey, index);
rowData.remove(columnIndex);
rowData.removeValue(tableKey);
rowData = columnKey;
rowData.removeValue(value);
rowData.removeValue(columnKey, flags);
rowData.remove(columnKey, &columnKey);
nsCRT::free(columnKey);
rowData.remove(columnKey + 1);
c = rowData.removeValue(columnKey);
columns.removeValue(columnKey);
rowData.removeValue(columnKey, columnKey);
rowData.addElement(columnKey);
rowData = this.rows;
this.columnKeys.removeElement(columnKey);
rowData.remove(&columnKey);
rowData.remove(key);
rowData.removeValue(columnKey)
rowData.removeValue();
if (columnKey == null)  return;
rowData.removeElementAt(0);
rowData.removeValue(columnKey, false);
rowData.removeValue(columnKey, true);
rowData.removeValue(columnKey, &index);
columnData = rowData;
rowData.remove(columnKey, 1);
rowData.removeValue(0);
rowData.remove(columnKey.get());
int i;
rowData.removeValue(column);
rowData = rowData;
rowData = (KeyedObjects)iterator.next();
free(columnKey);
rowData.remove(column);
rowData.removeValue(ColumnKey);
rowData.remove(columnKey.GetUnicode());
rowData.removeValue(columnKey == null);
rowData += columnKey;
rowData.removeValue(columnKey, -1);
rowData.removeValue(columnKey, 1);
rowData.remove(columnKey, -1);
if (columnKey == null) return;
rowData.removeValue(columnKey, data);
rowData.removeValue(columnKey.trim());
rowData = columnData;
rowData.removeValue(columnKey, value);
rowData.removeAttribute(columnKey);
return 0;
rowData.removeValue(columnKey, null);
int index = getColumnIndex(columnKey);
rowData.removeValue(columnKey, offset);
rowData.clear();
rv = columnData.removeValue(columnKey);
rowData.removeValue(columnKey, &this);
index = getColumnIndex(columnKey);
rowData.removeProperty(columnKey);
rowData.remove(columnKey == null);
rowData.removeValue(columnKey.value);
rowData[columnKey].removeValue();
rowData.remove(columnKey, &columnData);
rowData.removeValue(columnIndex);
rowData.removeValue(columnKey, 0, 0);
rowData.removeValue(columnKey, columnKey);
rowData.removeValue(columnKey, name);
rowData.removeValue(columnKey, rowData);
continue;
rowData.removeValue(columnKey, iterator);
rowData.removeValue(columnKey); return 0;
rowData.removeValue(columnKey); return 0;
rowData.removeValue(columnKey, &index);
nsresult rv;
rowData.removeValue(columnKey, ':');
rowData.removeValue(columnKey, ':');
this.columnData = rowData; if (rowData!= null)  if (columnKey == null)  delete [] columnKey;
if (columnKey)  if (columnKey.len > 1 && columnKey.len  1)  return;  rowData.removeValue(columnKey);
rowData.remove(columnKey, false);
if (columnKey)  rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &columnKey);
if (columnKey == '0')  break;  if (columnKey == '0')  break;  rowData.removeValue(columnKey);
if (columnKey)  /* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (rowData) rowData.removeValue(columnKey);
if (columnKey == -1)  if (columnKey == null)  rowData.removeValue(columnKey);  else
if (columnKey)  /* * If the key is not found, remove it. */ if (rowData) rowData.removeValue(columnKey);
if (columnKey)  /* If columnKey is zero, it should be extracted from the index of columnKey. */ return -1;
rowData.remove(columnKey, null);
if (!rowData.hasValue())  ret = 0;
if (columnKey)  rowData.removeValue(columnKey);  else  columnData.removeValue(columnKey);
if (! columnKey) return NS_OK; rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &rowData);
if (rowData) rowData.removeValue(columnKey);
if (columnKey  columnKey.mCurrKey)  rowData.removeValue(columnKey);  else  PRInt32 rv = -1; while (rv = 0)  PRInt32 i = 0; while (*i >= 0)  PRInt32 i = 0; while (i-- >= 0)  PRInt32 cnt = 0; for (i = 0; i  cnt; i++)  PRInt32 i; for (i = i--; i-- i-- >= i--)  PRInt32 i; if (i  cnt)  *cnt = i - cnt; if (i  cnt)  PRInt32 i; if (i = i-- i)  *cnt = i
if (columnKey!= 0)  rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey);
rowData.removeValue(columnKey, true);
if (columnKey)  int index = getColumnIndex(columnKey); if (index  0)  throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
rowData.remove(columnKey, &mArena);
if (columnKey == kNC_Name)  delete rowData; return NS_OK;
rowData.removeValue(columnKey, aColumn);
if (rowData)  rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &columnKey);
rowData.removeValue(columnKey.mKey);
if (columnKey)  if (columnKey)  rowData.removeValue(columnKey);
rowData.remove(columnKey.trim());
if (columnKey == null)  rowData.removeValue(columnKey);  else  return false;
nsAutoString colName; columnKey.mValue = (nsAutoString)columnKey; rowData.removeValue(colName);
if (columnKey == '0')  rowData.removeValue(columnKey);
nsresult rv; rv = rowData.removeValue(columnKey); if (NS_FAILED(rv))
rowData.removeValue(columnKey);  else  if (columnKey == '/')  rowData.removeValue(columnKey);
if (rowData)  if (columnKey)  delete columnKey;
if (columnKey  0)  rowData.removeValue(columnKey);
if (!columnKey)  return 0;  if (!columnKey)  if (columnKey == '.') return 0; else  if (columnKey == '.') return 1;
rowData.removeValue(columnKey, &columnData);
if (columnKey)  if (rowData.removeValue(columnKey) == 0)  /* XXX this should be different */
if (columnKey)  if (columnKey)  rowData.removeValue(columnKey);  else  /* Remove column key, to remove */
if (columnKey)  columnKey.mParent = mParent;  else  columnKey.mParent = mParent;
if (!columnKey) return;
if (columnKey == -1) return;
if (columnKey)  for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1))))  if (col == columnData.mColCount)  break;
if (!columnKey)  /* ignore the column value if the column is empty. */ if (columnKey == null)  /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null)  /* ignore the column value in the column */   else  rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey  columnKey)  if (columnKey > columnKey)  *columnKey = (*columnKey) columnKey;  else  if (columnKey  columnKey)  *columnKey = (*columnKey) columnKey;  else  *columnKey = (*columnKey) columnKey;  else  *columnKey = (*columnKey) columnKey;
if (rowData && columnData) rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &list);
if (columnKey)  return;
else  rowData.removeValue(columnKey);
if (columnKey!= '0')  rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &keyedObject);
rowData.removeValue(columnKey, ncolumnKeys);
if (columnKey == null)  columnData.removeValue(columnKey);  else  columnData.removeValue(columnKey);
if (columnKey == index)  break;  else  rowData.removeValue(columnKey);
if (columnKey!= null)  /* XXX */
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv))  break;
rowData.removeValue(columnKey, (const char*)columnKey);
if (columnKey)  rowData.removeValue(columnKey);  else  if (columnKey == '"')  delete [] columnKey;
rdfServ.RemoveValue(columnKey);
rowData.removeValue(columnKey, &rCol);
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv))  return 0;
if (columnKey)  if (columnKey)  if (columnKey == null) return;   else  if (columnKey == null)  /* * If the value isn't available, set the index to the table. */ if (idx == -1)  PRInt32(columnKey, (char *)&columnKey);  else  /* The table cannot get a field name that would be used as a value. */ if (idx  0)  PRInt32(columnKey, idx);   else  PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey;  else  /* The table is not in a value that isn't a value. */ if (idx > 0)
/* do not remove 'column'. */ if (columnKey)  for (col = getColumnIndex(columnKey); col  columnKey; col++)  if (col == '0' || col == '0')  /* this is a * new epseudo key, * this should be * a real-column key */  else  *this = (*this) col; *this = (*this)col; *this = 0;
rowData.removeValue(columnKey, aValue);
if (columnKey!= null)  return;
rowData.remove(columnKey);  else  mClusterInfo.mBlocks.removeElementAt(columnKey);
if (columnKey) rowData.removeValue(columnKey); else  fprintf(stderr, "removeColumn: not a column key"); return;
if (columnKey == null)  rowData.removeValue(columnKey);  else  /* delete columnKey. */
if (columnKey == index)  return;
rowData.removeValue(columnKey, (caddr_t)null);
rowData.removeValue(columnKey, rowData.value);
if (columnKey == index)  rowData.removeValue(columnKey);
if (rowData && rowData.removeValue(columnKey))  delete [] val;
if (columnKey)  rv = rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &i);
if (columnKey)  /*Remove columns from a column. */ if (columnKey)  rowData.removeValue(columnKey);  else  /*Remove columns in the column index. */
if (rowData.removeValue(columnKey))  if (columnKey.colCount  0)  if (rowData.removeValue(columnKey.colCount - 1) > 0)  if (columnKey.colCount  0)  if (rowData.removeValue(columnKey.colCount)  0)  if (columnKey.colCount > 0)  rowData.removeValue(columnKey.colCount);
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv))  return rv;
if (!rowData.containsKey(columnKey))  if (columnKey == this)  delete columnKey;  return 0;
if (columnKey!= '_')  rowData.removeValue(columnKey);
if (rowData!= null)  ret = rowData.removeValue(columnKey);  else  ret = rowData.removeValue(columnKey);
rowData.removeValue(columnKey, &columnKeys);
if (columnKey!= 0)  if (item)  rv = item.Init(&item); if (rv  0)  return rv;
if (columnKey)  idx = columnKey;  else  idx = rowData.get(idx);
else  if (rowData.length > 1)  if (columnKey)  rowData.removeValue(columnKey);  else  if (columnKey.id == columnKey.id)  columnData.removeValue(columnKey);

if (!columnKey) return 0; if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (rowData!= null) &ret = rowData.removeValue(columnKey); <else ret = rowData.removeValue(columnKey);
if (columnKey &columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) <if (columnKey) if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == '<0') break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
&else <if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
this.columnData = rowData; if (rowData!= null) <if (columnKey == null) delete [] columnKey;
if (columnKey!= 0) <rowData.removeValue(columnKey);
if (columnKey) return;
if (columnKey == '&0') break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
<else <if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (rowData) if (columnKey) <delete columnKey;
if (columnKey == null) &columnData.removeValue(columnKey); <else &columnData.removeValue(columnKey);
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) break;
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) <return; &rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); else /* Remove column key, to remove */
if (columnKey) rowData.removeValue(columnKey); else <fprintf(stderr, "removeColumn: not a column key"); return;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == index) &break; <else <rowData.removeValue(columnKey);
<if (columnKey &0) &rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
if (columnKey == '0') <break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
&if (columnKey &0) <rowData.removeValue(columnKey);
if (columnKey) /* * If the key is not found, remove it. */ if (rowData) rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv <0) <return rv;
rowData.removeValue(columnKey); else &if (columnKey == '/') <rowData.removeValue(columnKey);
if (!columnKey) &return 0; if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) &return 0; &if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey!= '0') &rowData.removeValue(columnKey);
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) return 0; &if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
<else &if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &int index = getColumnIndex(columnKey); if (index 0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) </* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv &0) <return rv;
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey == '"') delete [] columnKey;
if (columnKey columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == '0') &break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv &0) &return rv;
if (columnKey == '<0') break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey == '"') &delete [] columnKey;
if (columnKey == null) &rowData.removeValue(columnKey); &else </* delete columnKey. */
if (columnKey == -1) if (columnKey == null) rowData.removeValue(columnKey); else
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey == '"') &delete [] columnKey;
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) &return; <rowData.removeValue(columnKey);
if (!columnKey) return 0; if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
rowData.removeValue(columnKey); else <if (columnKey == '/') <rowData.removeValue(columnKey);
<else if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!columnKey) return 0; <if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) &rowData.removeValue(columnKey); &else &columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == null) &rowData.removeValue(columnKey); else <return false;
if (columnKey) <columnKey.mParent = mParent; &else <columnKey.mParent = mParent;
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) &return; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) &return 0; <if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) <return; <rowData.removeValue(columnKey);
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv &0) &return rv;
if (columnKey) &if (columnKey) if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
&else if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == '<0') &break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (rowData!= null) <ret = rowData.removeValue(columnKey); &else &ret = rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey);
if (columnKey) if (columnKey) rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey) if (columnKey) <if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv 0) return rv;
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) &return; rowData.removeValue(columnKey);
if (columnKey == '&0') &break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey == null) rowData.removeValue(columnKey); <else /* delete columnKey. */
if (columnKey == null) <rowData.removeValue(columnKey); &else /* delete columnKey. */
if (columnKey) &rowData.removeValue(columnKey); else &columnData.removeValue(columnKey);
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) return; &rowData.removeValue(columnKey);
if (columnKey == index) <break; else <rowData.removeValue(columnKey);
if (columnKey == -1) if (columnKey == null) rowData.removeValue(columnKey); <else
&else &if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!columnKey) return 0; if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey) if (columnKey) if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!rowData.containsKey(columnKey)) &if (columnKey == this) delete columnKey; return 0;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == -1) <if (columnKey == null) &rowData.removeValue(columnKey); else
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) return; <rowData.removeValue(columnKey);
if (columnKey) idx = columnKey; &else idx = rowData.get(idx);
if (columnKey) if (columnKey) if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey &columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == -1) &if (columnKey == null) rowData.removeValue(columnKey); else
if (columnKey == -1) &if (columnKey == null) rowData.removeValue(columnKey); <else
&else if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) <return; <rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &columnData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) return 0;
if (columnKey == null) <rowData.removeValue(columnKey); <else <return false;
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey 0) <rowData.removeValue(columnKey);
if (columnKey!= null) &return;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
else <if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) <if (rowData.removeValue(columnKey) == 0) </* XXX this should be different */
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv &0) &return rv;
if (columnKey == '&0') <break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey == '"') delete [] columnKey;
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey == '"') <delete [] columnKey;
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
<if (columnKey <0) &rowData.removeValue(columnKey);
if (!rowData.containsKey(columnKey)) <if (columnKey == this) &delete columnKey; <return 0;
&if (columnKey) </* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey == '"') <delete [] columnKey;
if (columnKey) &if (columnKey) &if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) <return; &rowData.removeValue(columnKey);
if (columnKey == -1) &if (columnKey == null) &rowData.removeValue(columnKey); &else
if (columnKey == -1) <if (columnKey == null) <rowData.removeValue(columnKey); <else
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
rowData.removeValue(columnKey); <else <if (columnKey == '/') <rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) return 0; <if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) rowData.removeValue(columnKey); else if (columnKey == '"') &delete [] columnKey;
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) <return; <rowData.removeValue(columnKey);
if (columnKey == '&0') break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == '&0') &break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else &columnData.removeValue(columnKey);
&else &rowData.removeValue(columnKey);
if (columnKey == '0') <break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) return 0; &if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey == -1) <if (columnKey == null) rowData.removeValue(columnKey); <else
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &rowData.removeValue(columnKey); <else &if (columnKey == '"') delete [] columnKey;
if (columnKey == null) return;
if (columnKey) <int index = getColumnIndex(columnKey); if (index <0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) if (columnKey) &if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) &return; rowData.removeValue(columnKey);
if (!columnKey) <return 0; if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (rowData) &rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey == '"') delete [] columnKey;
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) int index = getColumnIndex(columnKey); if (index &0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey == '&0') break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey == '"') <delete [] columnKey;
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
rowData.remove(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!rowData.containsKey(columnKey)) <if (columnKey == this) delete columnKey; &return 0;
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (columnKey <columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey == '"') delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) <return; rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey == '"') delete [] columnKey;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (columnKey == null) rowData.removeValue(columnKey); &else </* delete columnKey. */
if (!columnKey) <return 0; &if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey == '"') delete [] columnKey;
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) <break;
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) &return; <rowData.removeValue(columnKey);
if (columnKey) <int index = getColumnIndex(columnKey); if (index &0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey == null) <rowData.removeValue(columnKey); <else &return false;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!rowData.containsKey(columnKey)) &if (columnKey == this) <delete columnKey; <return 0;
if (columnKey &columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
<else <if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == '0') &break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) &rowData.removeValue(columnKey); else &/* delete columnKey. */
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey == null) rowData.removeValue(columnKey); <else &/* delete columnKey. */
rowData.removeValue(columnKey); &else &if (columnKey == '/') &rowData.removeValue(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) rowData.removeValue(columnKey); else /* delete columnKey. */
if (columnKey) /* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv &0) <return rv;
if (columnKey) &if (columnKey) if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv 0) &return rv;
if (columnKey) &if (columnKey) if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData!= null) ret = rowData.removeValue(columnKey); else ret = rowData.removeValue(columnKey);
rowData.removeValue(columnKey); <else if (columnKey == '/') <rowData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey == '"') <delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
else &if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == null) rowData.removeValue(columnKey); else return false;
<else &if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
rowData.removeValue(columnKey); &else if (columnKey == '/') <rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey == '"') <delete [] columnKey;
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else </*Remove columns in the column index. */
rowData.removeValue(columnKey); else <if (columnKey == '/') &rowData.removeValue(columnKey);
if (columnKey) if (columnKey) <if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <return rv;
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (!rowData.containsKey(columnKey)) if (columnKey == this) delete columnKey; return 0;
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey <0) <rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) break;
if (columnKey) columnKey.mParent = mParent; else &columnKey.mParent = mParent;
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (rowData!= null) &ret = rowData.removeValue(columnKey); else &ret = rowData.removeValue(columnKey);
if (columnKey) <columnKey.mParent = mParent; else <columnKey.mParent = mParent;
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv &0) return rv;
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv &0) return rv;
if (columnKey columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!rowData.containsKey(columnKey)) if (columnKey == this) &delete columnKey; &return 0;
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey == '"') delete [] columnKey;
if (columnKey == index) break; <else &rowData.removeValue(columnKey);
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv &0) return rv;
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey == '"') <delete [] columnKey;
if (columnKey) <if (columnKey) if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) return rv;
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) &return; &rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); else /* Remove column key, to remove */
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) <return; &rowData.removeValue(columnKey);
if (columnKey columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) <return 0; &if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) <columnKey.mParent = mParent; &else columnKey.mParent = mParent;
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) <return; &rowData.removeValue(columnKey);
if (!columnKey) return 0; if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey == '0') break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (!rowData.containsKey(columnKey)) &if (columnKey == this) &delete columnKey; <return 0;
if (columnKey <columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) return 0; if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
rowData.remove(columnKey); <else &mClusterInfo.mBlocks.removeElementAt(columnKey);
if (columnKey) if (columnKey) if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
else if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey <columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); &else /* Remove column key, to remove */
if (!rowData.containsKey(columnKey)) <if (columnKey == this) delete columnKey; return 0;
if (columnKey == index) <break; else &rowData.removeValue(columnKey);
if (columnKey <columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
else <if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) return 0; if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) int index = getColumnIndex(columnKey); if (index 0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (!columnKey) &return 0; <if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey == '"') <delete [] columnKey;
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else /*Remove columns in the column index. */
rowData.remove(columnKey); &else &mClusterInfo.mBlocks.removeElementAt(columnKey);
if (columnKey) <rv = rowData.removeValue(columnKey);
if (!columnKey) <return 0; if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (!columnKey) return 0; &if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) <break;
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey == null) <return;
if (columnKey) if (columnKey) if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) <return;
rowData.remove(columnKey); &else <mClusterInfo.mBlocks.removeElementAt(columnKey);
if (columnKey == '0') <break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
this.columnData = rowData; if (rowData!= null) &if (columnKey == null) &delete [] columnKey;
if (columnKey) &columnKey.mParent = mParent; &else <columnKey.mParent = mParent;
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) <return; &rowData.removeValue(columnKey);
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) &break;
if (!columnKey) &return 0; &if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv &0) <return rv;
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == null) rowData.removeValue(columnKey); <else </* delete columnKey. */
if (columnKey) &if (columnKey) <if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) if (rowData.removeValue(columnKey) == 0) /* XXX this should be different */
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == null) columnData.removeValue(columnKey); else columnData.removeValue(columnKey);
if (columnKey &columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) <return 0; <if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv &0) return rv;
if (!columnKey) return 0; &if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
&else <if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey &columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= 0) &rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &if (columnKey) &if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
<if (columnKey 0) &rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey);
if (columnKey == '&0') &rowData.removeValue(columnKey);
if (columnKey) if (columnKey) rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
if (columnKey <columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); else /* Remove column key, to remove */
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey == index) <break; &else &rowData.removeValue(columnKey);
else &if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else <columnData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) <return; &rowData.removeValue(columnKey);
if (columnKey == '&0') <break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey == null) &columnData.removeValue(columnKey); else <columnData.removeValue(columnKey);
if (columnKey &columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) <return; <rowData.removeValue(columnKey);
if (columnKey) if (columnKey) rowData.removeValue(columnKey); else </* Remove column key, to remove */
rowData.remove(columnKey); else &mClusterInfo.mBlocks.removeElementAt(columnKey);
if (columnKey <columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == null) <rowData.removeValue(columnKey); &else <return false;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) <rowData.removeValue(columnKey);
if (rowData!= null) <ret = rowData.removeValue(columnKey); &else <ret = rowData.removeValue(columnKey);
if (columnKey) &/* * If the key is not found, remove it. */ if (rowData) rowData.removeValue(columnKey);
if (columnKey) if (columnKey) rowData.removeValue(columnKey); &else /* Remove column key, to remove */
columnData.removeValue(columnKey);
if (!columnKey) <return 0; if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey == '<0') &break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (rowData) &if (columnKey) &delete columnKey;
if (columnKey == '0') break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) &return; <rowData.removeValue(columnKey);
if (columnKey) &idx = columnKey; <else &idx = rowData.get(idx);
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) <if (columnKey) &if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey == -1) if (columnKey == null) &rowData.removeValue(columnKey); else
if (columnKey) <if (columnKey) if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) &rowData.removeValue(columnKey); else <columnData.removeValue(columnKey);
if (columnKey columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey &columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (!columnKey) <return 0; &if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) <if (columnKey) &if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey == '"') <delete [] columnKey;
if (columnKey <0) rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey == '"') <delete [] columnKey;
if (columnKey) &if (columnKey) if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == '0') <break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (!columnKey) &return 0; <if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv <0) <return rv;
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) return; rowData.removeValue(columnKey);
rowData.removeValue(columnKey); else if (columnKey == '/') <rowData.removeValue(columnKey);
if (columnKey &columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey == '"') <delete [] columnKey;
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) &break;
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv <0) <return rv;
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == '0') &break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey!= '_') rowData.removeValue(columnKey);
if (!columnKey) <return 0; <if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) <return; rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
&if (columnKey &0) rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey == '"') <delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey == '"') <delete [] columnKey;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
if (columnKey) <if (columnKey) <if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey == '"') <delete [] columnKey;
if (columnKey == null) <rowData.removeValue(columnKey); else <return false;
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); else /* Remove column key, to remove */
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
if (columnKey) &if (columnKey) &if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (rowData && rowData.removeValue(columnKey)) delete [] val;
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey == '"') &delete [] columnKey;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (columnKey columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == '0') <break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey == null) &rowData.removeValue(columnKey); &else &/* delete columnKey. */
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) &return; rowData.removeValue(columnKey);
if (columnKey == -1) <if (columnKey == null) &rowData.removeValue(columnKey); <else
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (columnKey == '&0') &break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
this.columnData = rowData; if (rowData!= null) if (columnKey == null) <delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey &columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey == '"') &delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == '<0') break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
<else if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == '0') break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv <0) return rv;
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) return; &rowData.removeValue(columnKey);
if (rowData!= null) ret = rowData.removeValue(columnKey); <else &ret = rowData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &idx = columnKey; else idx = rowData.get(idx);
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) &return; &rowData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); &else /* Remove column key, to remove */
if (columnKey <columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
rowData.remove(columnKey);
if (!columnKey) &return 0; <if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
else if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) return 0; if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &rv = rowData.removeValue(columnKey);
if (columnKey) &int index = getColumnIndex(columnKey); if (index <0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey == index) &rowData.removeValue(columnKey);
if (!columnKey) &return 0; <if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey == null) rowData.removeValue(columnKey); else <return false;
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (columnKey) &columnKey.mParent = mParent; else columnKey.mParent = mParent;
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey) <if (columnKey) if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
else if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
<else if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey == '"') <delete [] columnKey;
if (columnKey) <if (columnKey) <if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
else &if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
columnData.removeValue(columnKey);
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) return; <rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) <break;
if (columnKey &columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!rowData.containsKey(columnKey)) if (columnKey == this) <delete columnKey; &return 0;
if (columnKey == '&0') <break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey &columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
rowData.removeValue(columnKey); <else <if (columnKey == '/') rowData.removeValue(columnKey);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (columnKey == null) rowData.removeValue(columnKey); else </* delete columnKey. */
if (!rowData.containsKey(columnKey)) <if (columnKey == this) &delete columnKey; return 0;
if (columnKey == -1) if (columnKey == null) &rowData.removeValue(columnKey); <else
if (columnKey == index) <break; <else &rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey == null) &rowData.removeValue(columnKey); &else /* delete columnKey. */
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) &return; <rowData.removeValue(columnKey);
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) <return; &rowData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey &columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey &columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) &return; rowData.removeValue(columnKey);
if (columnKey) &int index = getColumnIndex(columnKey); if (index 0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey <columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv &0) return rv;
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv 0) &return rv;
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) <break;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == '&0') break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) &columnKey.mParent = mParent; <else columnKey.mParent = mParent;
<else if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) <return; rowData.removeValue(columnKey);
&else &if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) &return; &rowData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) return; rowData.removeValue(columnKey);
if (columnKey == -1) &if (columnKey == null) <rowData.removeValue(columnKey); else
if (columnKey &columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv <0) return rv;
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv <0) return rv;
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
if (rowData!= null) <ret = rowData.removeValue(columnKey); <else &ret = rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (rowData!= null) &ret = rowData.removeValue(columnKey); <else <ret = rowData.removeValue(columnKey);
rowData.removeValue(columnKey); <else &if (columnKey == '/') <rowData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey &columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == null) columnData.removeValue(columnKey); else <columnData.removeValue(columnKey);
if (columnKey == null) columnData.removeValue(columnKey); <else &columnData.removeValue(columnKey);
if (columnKey <columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!rowData.containsKey(columnKey)) if (columnKey == this) &delete columnKey; return 0;
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) &return; &rowData.removeValue(columnKey);
rowData.removeValue(columnKey); &else if (columnKey == '/') rowData.removeValue(columnKey);
if (!columnKey) return 0; if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
&if (columnKey <0) <rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv 0) return rv;
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == '&0') &break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
else &if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == '<0') break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) &break;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <if (columnKey) rowData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (columnKey) <rowData.removeValue(columnKey); <else &columnData.removeValue(columnKey);
if (columnKey) <int index = getColumnIndex(columnKey); if (index 0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey == '&0') <break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey <columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == null) <columnData.removeValue(columnKey); else columnData.removeValue(columnKey);
if (!columnKey) <return 0; &if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) &if (columnKey) <if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) return; &rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv 0) return rv;
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
if (columnKey columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) int index = getColumnIndex(columnKey); if (index <0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (rowData!= null) ret = rowData.removeValue(columnKey); &else &ret = rowData.removeValue(columnKey);
rowData.removeValue(columnKey); <else if (columnKey == '/') rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey == '"') <delete [] columnKey;
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) <return; rowData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
&if (columnKey) &return;
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey == null) <columnData.removeValue(columnKey); <else &columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey == '"') &delete [] columnKey;
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) return; &rowData.removeValue(columnKey);
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) &break;
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey == '"') delete [] columnKey;
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey == '"') &delete [] columnKey;
if (columnKey!= null) /* XXX */
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) return; <rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &idx = columnKey; else &idx = rowData.get(idx);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv 0) return rv;
if (columnKey columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == index) &break; <else &rowData.removeValue(columnKey);
<else if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) return; rowData.removeValue(columnKey);
if (columnKey) <columnKey.mParent = mParent; <else columnKey.mParent = mParent;
if (columnKey == null) <columnData.removeValue(columnKey); <else <columnData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); else &/* Remove column key, to remove */
if (columnKey) rowData.removeValue(columnKey); else fprintf(stderr, "removeColumn: not a column key"); return;
if (rowData!= null) &ret = rowData.removeValue(columnKey); else ret = rowData.removeValue(columnKey);
if (columnKey == '0') &break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <return 0;
if (columnKey) idx = columnKey; &else &idx = rowData.get(idx);
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv &0) return rv;
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) &return 0; if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (rowData!= null) &ret = rowData.removeValue(columnKey); else <ret = rowData.removeValue(columnKey);
if (!columnKey) &return 0; &if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey == '0') <break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv 0) &return rv;
if (columnKey == '<0') <break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey == '&0') rowData.removeValue(columnKey);
if (columnKey == index) <break; else rowData.removeValue(columnKey);
if (!columnKey) return 0; <if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
rowData.removeValue(columnKey); <else &if (columnKey == '/') &rowData.removeValue(columnKey);
if (columnKey == kNC_Name) delete rowData; return NS_OK;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) &idx = columnKey; else <idx = rowData.get(idx);
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) &return; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
&else &if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) <int index = getColumnIndex(columnKey); if (index 0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey &columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv &0) <return rv;
nsresult rv; rv = rowData.removeValue(columnKey); if (NS_FAILED(rv))
if (columnKey == null) <columnData.removeValue(columnKey); else &columnData.removeValue(columnKey);
if (columnKey) &idx = columnKey; &else idx = rowData.get(idx);
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); &else /* Remove column key, to remove */
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) <break;
&if (columnKey <0) &rowData.removeValue(columnKey);
<else rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); else &/* Remove column key, to remove */
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey == '"') delete [] columnKey;
<else &if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); &else /* Remove column key, to remove */
if (columnKey <columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
rowData.remove(columnKey); <else <mClusterInfo.mBlocks.removeElementAt(columnKey);
if (!columnKey) return 0; <if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) break;
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == '<0') <break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else &fprintf(stderr, "removeColumn: not a column key"); return;
if (columnKey == '0') <rowData.removeValue(columnKey);
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) &break;
if (columnKey == null) <rowData.removeValue(columnKey); &else </* delete columnKey. */
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) &return; <rowData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey == index) break; <else rowData.removeValue(columnKey);
if (columnKey <columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (columnKey == '<0') break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv 0) &return rv;
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
rowData.removeValue(columnKey); &else <if (columnKey == '/') rowData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) <return; rowData.removeValue(columnKey);
if (columnKey == index) return;
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) <return; &rowData.removeValue(columnKey);
if (columnKey) &/* If columnKey is zero, it should be extracted from the index of columnKey. */ return -1;
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) return; &rowData.removeValue(columnKey);
if (columnKey columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv <0) return rv;
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv 0) &return rv;
if (columnKey == '0') &rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else columnData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (columnKey!= '&0') <rowData.removeValue(columnKey);
if (rowData!= null) <ret = rowData.removeValue(columnKey); <else <ret = rowData.removeValue(columnKey);
rowData.removeValue(columnKey); &else &if (columnKey == '/') rowData.removeValue(columnKey);
&else <if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) if (columnKey) &if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == index) break; &else <rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) <if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) rowData.removeValue(columnKey); &else return false;
if (columnKey) if (columnKey) &if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == null) <rowData.removeValue(columnKey); else &/* delete columnKey. */
else if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) return; rowData.removeValue(columnKey);
if (columnKey == null) <columnData.removeValue(columnKey); &else columnData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) <rowData.removeValue(columnKey); <else <if (columnKey == '"') <delete [] columnKey;
else if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) <if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (!columnKey) &return 0; if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey == null) &columnData.removeValue(columnKey); <else columnData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey == '"') <delete [] columnKey;
if (!columnKey) <return 0; <if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) <break;
if (columnKey == null) &rowData.removeValue(columnKey); <else &/* delete columnKey. */
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey &columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (rowData!= null) ret = rowData.removeValue(columnKey); &else <ret = rowData.removeValue(columnKey);
&if (columnKey!= 0) &rowData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) <return; <rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == '&0') &break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) &int index = getColumnIndex(columnKey); if (index &0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv &0) <return rv;
if (rowData!= null) &ret = rowData.removeValue(columnKey); &else ret = rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else <columnData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
if (columnKey) &rowData.removeValue(columnKey); else columnData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey <columnKey) if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= '0') <rowData.removeValue(columnKey);
&if (columnKey!= 0) rowData.removeValue(columnKey);
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) <break;
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &break;
if (columnKey) &int index = getColumnIndex(columnKey); if (index 0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (!columnKey) &return 0; &if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
rowData.remove(columnKey); else <mClusterInfo.mBlocks.removeElementAt(columnKey);
else <if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (rowData!= null) <ret = rowData.removeValue(columnKey); else <ret = rowData.removeValue(columnKey);
if (columnKey) &columnKey.mParent = mParent; &else columnKey.mParent = mParent;
if (columnKey == '&0') &break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey == '"') <delete [] columnKey;
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv &0) <return rv;
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); else /* Remove column key, to remove */
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey) &if (columnKey) <if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
<else <if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == -1) &if (columnKey == null) <rowData.removeValue(columnKey); &else
if (!columnKey) &return 0; <if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey == '<0') rowData.removeValue(columnKey);
if (columnKey == index) <break; <else <rowData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv <0) <return rv;
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv <0) <return rv;
&if (columnKey) /* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
rowData.removeValue(columnKey); else if (columnKey == '/') &rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (columnKey) rv = rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (columnKey!= '<0') <rowData.removeValue(columnKey);
if (columnKey == '0') &break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey == -1) <if (columnKey == null) rowData.removeValue(columnKey); &else
&rowData.removeValue(columnKey);
if (columnKey == null) &columnData.removeValue(columnKey); else columnData.removeValue(columnKey);
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (columnKey == null) <rowData.removeValue(columnKey); <else &/* delete columnKey. */
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == '<0') <break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (!rowData.hasValue()) <ret = 0;
if (!columnKey) &return 0; <if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey == '"') <delete [] columnKey;
if (columnKey == index) break; else rowData.removeValue(columnKey);
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv 0) &return rv;
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) rowData.removeValue(columnKey); else columnData.removeValue(columnKey);
if (columnKey == null) rowData.removeValue(columnKey); <else return false;
else <if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else <columnData.removeValue(columnKey);
if (columnKey == '0') break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) <if (columnKey) &if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey <columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey == '"') delete [] columnKey;
&else if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == '&0') break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) &return; rowData.removeValue(columnKey);
&else <rowData.removeValue(columnKey);
if (columnKey 0) rowData.removeValue(columnKey);
if (columnKey) <columnKey.mParent = mParent; &else &columnKey.mParent = mParent;
&if (columnKey 0) &rowData.removeValue(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
&else if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) &return; rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == -1) if (columnKey == null) rowData.removeValue(columnKey); &else
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
if (columnKey == null) <rowData.removeValue(columnKey); else return false;
if (!columnKey) return 0; <if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (!columnKey) <return 0; if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (!rowData.containsKey(columnKey)) if (columnKey == this) delete columnKey; <return 0;
if (columnKey columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv <0) &return rv;
<if (columnKey &0) <rowData.removeValue(columnKey);
if (columnKey == '&0') <break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (columnKey == null) columnData.removeValue(columnKey); <else <columnData.removeValue(columnKey);
&else if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) <columnData.removeValue(columnKey); &else <columnData.removeValue(columnKey);
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) return; &rowData.removeValue(columnKey);
<if (columnKey) </* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey) if (rowData.removeValue(columnKey) == 0) &/* XXX this should be different */
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv &0) return rv;
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) <return; rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == null) rowData.removeValue(columnKey); else &return false;
else &if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == null) &rowData.removeValue(columnKey); &else &return false;
<if (columnKey) &return;
if (columnKey &columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) <if (columnKey) &if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) rowData.removeValue(columnKey);
if (!columnKey) <return 0; if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (rowData) <if (columnKey) <delete columnKey;
if (columnKey) &columnKey.mParent = mParent; else <columnKey.mParent = mParent;
if (!columnKey) <return 0; &if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey == '"') delete [] columnKey;
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv <0) <return rv;
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv <0) <return rv;
if (columnKey == index) <break; <else rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey == '"') <delete [] columnKey;
&else <if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else columnData.removeValue(columnKey);
if (columnKey) int index = getColumnIndex(columnKey); if (index 0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) <if (columnKey) &if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == index) break; &else &rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <int index = getColumnIndex(columnKey); if (index <0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (!columnKey) &return 0; <if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) <if (columnKey) if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <rowData.removeValue(columnKey); else &columnData.removeValue(columnKey);
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) return; &rowData.removeValue(columnKey);
if (columnKey) <if (rowData.removeValue(columnKey) == 0) /* XXX this should be different */
if (columnKey) if (columnKey) <if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <idx = columnKey; &else <idx = rowData.get(idx);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); else &/* Remove column key, to remove */
if (columnKey) if (columnKey.len > 1 && columnKey.len 1) <return; <rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else &if (columnKey == '"') &delete [] columnKey;
if (columnKey == '0') break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey == '&0') &break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (rowData) <rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey == '"') &delete [] columnKey;
if (columnKey) &if (columnKey) rowData.removeValue(columnKey);
&else if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
<else <if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) <break;
if (rowData!= null) &ret = rowData.removeValue(columnKey); &else <ret = rowData.removeValue(columnKey);
this.columnData = rowData; if (rowData!= null) if (columnKey == null) delete [] columnKey;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
&else &if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == null) &columnData.removeValue(columnKey); &else columnData.removeValue(columnKey);
if (columnKey == kNC_Name) <delete rowData; return NS_OK;
if (rowData!= null) ret = rowData.removeValue(columnKey); else <ret = rowData.removeValue(columnKey);
if (columnKey == index) <break; &else <rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) if (columnKey) <if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) &break;
if (columnKey == '0') &break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (columnKey) &if (columnKey) <if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
<if (columnKey &0) rowData.removeValue(columnKey);
if (columnKey) columnKey.mParent = mParent; &else <columnKey.mParent = mParent;
if (!columnKey) &return 0; if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey == '<0') &break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
rowData.removeValue(columnKey); <else if (columnKey == '/') &rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) return; rowData.removeValue(columnKey);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (columnKey columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) if (columnKey) &if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == -1) <if (columnKey == null) &rowData.removeValue(columnKey); &else
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) return; <rowData.removeValue(columnKey);
if (columnKey!= '<0') rowData.removeValue(columnKey);
if (!rowData.containsKey(columnKey)) &if (columnKey == this) <delete columnKey; return 0;
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv 0) <return rv;
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey == -1) if (columnKey == null) <rowData.removeValue(columnKey); <else
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) break;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey == '<0') <break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey == null) &rowData.removeValue(columnKey); <else <return false;
if (columnKey) &rowData.removeValue(columnKey); else <if (columnKey == '"') &delete [] columnKey;
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) &return; <rowData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) &return 0; if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) &int index = getColumnIndex(columnKey); if (index <0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey == null) &columnData.removeValue(columnKey); &else <columnData.removeValue(columnKey);
&else &if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
if (columnKey) <idx = columnKey; &else idx = rowData.get(idx);
&if (columnKey) &/* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey) columnKey.mParent = mParent; <else <columnKey.mParent = mParent;
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey == '"') delete [] columnKey;
if (columnKey == null) &rowData.removeValue(columnKey); &else <return false;
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv &0) <return rv;
if (columnKey) if (columnKey) rowData.removeValue(columnKey); else /* Remove column key, to remove */
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <idx = columnKey; <else &idx = rowData.get(idx);
rowData.remove(columnKey); else mClusterInfo.mBlocks.removeElementAt(columnKey);
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
else &if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == '&0') break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey!= null) </* XXX */
if (columnKey) if (columnKey) &if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
if (columnKey) <if (columnKey.len > 1 && columnKey.len 1) &return; <rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); else &/* Remove column key, to remove */
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) &return 0; if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) if (columnKey) <if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (!columnKey) <return 0; if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
else &if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
rowData.removeValue(columnKey); &else <if (columnKey == '/') &rowData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData && rowData.removeValue(columnKey)) &delete [] val;
if (columnKey == index) break; else <rowData.removeValue(columnKey);
if (columnKey) <int index = getColumnIndex(columnKey); if (index 0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData!= null) <ret = rowData.removeValue(columnKey); <else ret = rowData.removeValue(columnKey);
if (columnKey == null) <rowData.removeValue(columnKey); &else return false;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) columnData.removeValue(columnKey); &else columnData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey == '"') delete [] columnKey;
&else <if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == '<0') &break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == -1) &if (columnKey == null) &rowData.removeValue(columnKey); else
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (columnKey == '<0') break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) &return 0; &if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (!columnKey) <return 0; if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey == '0') break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey == kNC_Name) &delete rowData; return NS_OK;
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &return rv;
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) &return; &rowData.removeValue(columnKey);
if (columnKey == null) &rowData.removeValue(columnKey); else &return false;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
rowData.removeValue(columnKey); &else &if (columnKey == '/') <rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); else </* Remove column key, to remove */
if (columnKey) <idx = columnKey; <else <idx = rowData.get(idx);
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey == '"') &delete [] columnKey;
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (columnKey == null) &rowData.removeValue(columnKey); <else </* delete columnKey. */
<if (columnKey!= 0) <rowData.removeValue(columnKey);
if (columnKey &columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == '&0') break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv 0) return rv;
if (!columnKey) &return 0; if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey) if (columnKey) rowData.removeValue(columnKey);
if (columnKey) if (rowData.removeValue(columnKey) == 0) </* XXX this should be different */
if (columnKey == null) rowData.removeValue(columnKey); &else <return false;
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) <return; rowData.removeValue(columnKey);
if (columnKey == -1) &if (columnKey == null) &rowData.removeValue(columnKey); <else
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!rowData.containsKey(columnKey)) &if (columnKey == this) delete columnKey; <return 0;
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey == '"') delete [] columnKey;
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv &0) &return rv;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) <return 0; &if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) &return; &rowData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) <int index = getColumnIndex(columnKey); if (index &0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (!rowData.containsKey(columnKey)) <if (columnKey == this) &delete columnKey; &return 0;
if (columnKey) rowData.removeValue(columnKey); else <columnData.removeValue(columnKey);
if (columnKey == '0') break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey == index) <return;
if (columnKey) &idx = columnKey; &else &idx = rowData.get(idx);
&else &if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv &0) <return rv;
if (columnKey == '0') &break; if (columnKey == '0') break; rowData.removeValue(columnKey);
<else if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == index) &break; &else rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey == '"') <delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == '&0') <break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey == '<0') break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
<if (columnKey) /* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) &return; rowData.removeValue(columnKey);
if (columnKey == '<0') <rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) if (columnKey) &if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey);
if (columnKey!= null) return;
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) return 0; &if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); &else /* Remove column key, to remove */
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey <columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
else <if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) <return; rowData.removeValue(columnKey);
if (columnKey &columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); else &/* Remove column key, to remove */
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!rowData.containsKey(columnKey)) if (columnKey == this) <delete columnKey; return 0;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == -1) &if (columnKey == null) <rowData.removeValue(columnKey); <else
if (columnKey) &int index = getColumnIndex(columnKey); if (index &0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) break;
if (rowData && rowData.removeValue(columnKey)) <delete [] val;
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); else /* Remove column key, to remove */
<else &rowData.removeValue(columnKey);
<if (columnKey <0) <rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (rowData) <if (columnKey) delete columnKey;
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) &break;
<if (columnKey <0) rowData.removeValue(columnKey);
if (columnKey == null) <rowData.removeValue(columnKey); &else &/* delete columnKey. */
<else <if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &columnKey.mParent = mParent; <else &columnKey.mParent = mParent;
&else &if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == '<0') <break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
else &rowData.removeValue(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) columnKey.mParent = mParent; &else &columnKey.mParent = mParent;
if (columnKey) &if (rowData.removeValue(columnKey) == 0) </* XXX this should be different */
if (columnKey == -1) <if (columnKey == null) <rowData.removeValue(columnKey); else
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) &return 0;
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); &else /* Remove column key, to remove */
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv &0) <return rv;
if (!columnKey) <return 0; &if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!rowData.containsKey(columnKey)) if (columnKey == this) delete columnKey; &return 0;
<else <rowData.removeValue(columnKey);
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (columnKey) int index = getColumnIndex(columnKey); if (index 0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey <columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey 0) &rowData.removeValue(columnKey);
else <if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey == '"') <delete [] columnKey;
if (columnKey == null) &columnData.removeValue(columnKey); else &columnData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv &0) &return rv;
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) return 0; &if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (!rowData.containsKey(columnKey)) <if (columnKey == this) delete columnKey; <return 0;
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv <0) &return rv;
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == null) <rowData.removeValue(columnKey); else </* delete columnKey. */
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv &0) return rv;
&else &if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
if (columnKey &0) <rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
else if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) &return 0; &if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) rowData.removeValue(columnKey); <else columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); else /* Remove column key, to remove */
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (columnKey == '0') break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (!columnKey) <return 0; if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) break;
if (columnKey &columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey <columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) &return 0; &if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey == '<0') &break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) if (columnKey) &rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
if (columnKey == '<0') <break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) idx = columnKey; else idx = rowData.get(idx);
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); else &/* Remove column key, to remove */
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey) if (columnKey) if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); &else /* Remove column key, to remove */
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) int index = getColumnIndex(columnKey); if (index &0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (!columnKey) <return 0; <if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey <columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) <return 0; <if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey == null) &rowData.removeValue(columnKey); &else return false;
<else &if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == null) rowData.removeValue(columnKey); &else &return false;
if (columnKey &columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!rowData.containsKey(columnKey)) <if (columnKey == this) <delete columnKey; <return 0;
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv <0) &return rv;
if (columnKey == '<0') &break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); else if (columnKey == '"') &delete [] columnKey;
rowData.removeValue(columnKey);
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &rowData.removeValue(columnKey); &else if (columnKey == '"') <delete [] columnKey;
if (columnKey) <int index = getColumnIndex(columnKey); if (index <0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey);
<else <if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
else <if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey!= 0) rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); else if (columnKey == '"') delete [] columnKey;
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey == '"') &delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
&else if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) &return; &rowData.removeValue(columnKey);
if (columnKey == '0') <break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) <return; <rowData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
&if (columnKey) <return;
this.columnData = rowData; if (rowData!= null) <if (columnKey == null) &delete [] columnKey;
if (columnKey columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
if (columnKey) /* If columnKey is zero, it should be extracted from the index of columnKey. */ return -1;
if (columnKey == null) <rowData.removeValue(columnKey); <else /* delete columnKey. */
<else if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == -1) <if (columnKey == null) <rowData.removeValue(columnKey); &else
if (!columnKey) return 0; <if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey &columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (rowData!= null) <ret = rowData.removeValue(columnKey); else ret = rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
<else &if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) <rowData.removeValue(columnKey); else &return false;
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey) rowData.removeValue(columnKey); <else if (columnKey == '"') delete [] columnKey;
if (!columnKey) &return 0; &if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey &0) &rowData.removeValue(columnKey);
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) <break;
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (rowData) rowData.removeValue(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv <0) &return rv;
if (columnKey) <columnKey.mParent = mParent; <else &columnKey.mParent = mParent;
rowData.removeValue(columnKey); else <if (columnKey == '/') rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (columnKey == '&0') &break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
<if (columnKey!= 0) rowData.removeValue(columnKey);
if (!rowData.containsKey(columnKey)) <if (columnKey == this) <delete columnKey; return 0;
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) <int index = getColumnIndex(columnKey); if (index &0) &throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
rowData.removeValue(columnKey); else &if (columnKey == '/') &rowData.removeValue(columnKey);
if (columnKey) idx = columnKey; else &idx = rowData.get(idx);
if (columnKey == -1) &if (columnKey == null) rowData.removeValue(columnKey); &else
if (columnKey) &if (columnKey) if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) return; <rowData.removeValue(columnKey);
if (!columnKey) <return 0; <if (!columnKey) &if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <idx = columnKey; &else &idx = rowData.get(idx);
if (columnKey) rowData.removeValue(columnKey); &else <if (columnKey == '"') &delete [] columnKey;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
rv = rowData.removeValue(columnKey); if (NS_FAILED(rv)) break;
if (columnKey) idx = columnKey; else <idx = rowData.get(idx);
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); else &/* Remove column key, to remove */
&if (columnKey 0) <rowData.removeValue(columnKey);
else if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == null) &columnData.removeValue(columnKey); &else &columnData.removeValue(columnKey);
if (columnKey) if (columnKey) <rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) <idx = columnKey; <else idx = rowData.get(idx);
rowData.removeValue(columnKey); <else <if (columnKey == '/') &rowData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) &return;
if (columnKey!= '&0') &rowData.removeValue(columnKey);
if (columnKey) <if (rowData.removeValue(columnKey) == 0) &/* XXX this should be different */
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv &0) &return rv;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!rowData.hasValue()) ret = 0;
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv 0) return rv;
if (columnKey columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) &return 0; if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey) idx = columnKey; <else <idx = rowData.get(idx);
if (!rowData.containsKey(columnKey)) &if (columnKey == this) delete columnKey; &return 0;
this.columnData = rowData; if (rowData!= null) &if (columnKey == null) delete [] columnKey;
if (!columnKey) <return 0; &if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey == -1) if (columnKey == null) <rowData.removeValue(columnKey); &else
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv &0) return rv;
if (columnKey) </*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) break;
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) <if (col == columnData.mColCount) break;
this.columnData = rowData; if (rowData!= null) if (columnKey == null) &delete [] columnKey;
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) <rowData.removeValue(columnKey); &else &columnData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey == '"') &delete [] columnKey;
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (rowData!= null) <ret = rowData.removeValue(columnKey); &else ret = rowData.removeValue(columnKey);
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) <rowData.removeValue(columnKey); &else &return false;
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); &else </* Remove column key, to remove */
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &rowData.removeValue(columnKey); <else columnData.removeValue(columnKey);
if (columnKey!= '<0') &rowData.removeValue(columnKey);
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) return; rowData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else if (columnKey == '"') &delete [] columnKey;
if (rowData!= null) ret = rowData.removeValue(columnKey); &else ret = rowData.removeValue(columnKey);
if (columnKey == '0') <break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
&else <if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
if (columnKey == index) <rowData.removeValue(columnKey);
if (columnKey <columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == '0') <break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey == index) &break; else rowData.removeValue(columnKey);
if (columnKey == null) &rowData.removeValue(columnKey); else return false;
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey == '"') delete [] columnKey;
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == '0') rowData.removeValue(columnKey);
if (!rowData.containsKey(columnKey)) &if (columnKey == this) &delete columnKey; &return 0;
if (!rowData.containsKey(columnKey)) &if (columnKey == this) &delete columnKey; return 0;
rowData.remove(columnKey); &else mClusterInfo.mBlocks.removeElementAt(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey == '"') &delete [] columnKey;
if (columnKey == index) break; else &rowData.removeValue(columnKey);
if (columnKey) if (columnKey) if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == index) &break; else &rowData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); <else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) &return 0; if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey == '&0') <rowData.removeValue(columnKey);
if (columnKey == '&0') &break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); <else &if (columnKey == '"') &delete [] columnKey;
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <rowData.removeValue(columnKey); else <columnData.removeValue(columnKey);
<rowData.removeValue(columnKey);
if (columnKey) if (columnKey) if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey &columnKey) <if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (columnKey) &rowData.removeValue(columnKey); <else if (columnKey == '"') delete [] columnKey;
if (columnKey == index) <break; &else rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv &0) &return rv;
else if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == '&0') break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey == null) <rowData.removeValue(columnKey); else /* delete columnKey. */
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
this.columnData = rowData; if (rowData!= null) &if (columnKey == null) <delete [] columnKey;
if (columnKey) &idx = columnKey; <else idx = rowData.get(idx);
if (columnKey == index) &break; <else rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) return; &rowData.removeValue(columnKey);
if (columnKey == index) break; &else rowData.removeValue(columnKey);
if (columnKey) if (columnKey) rowData.removeValue(columnKey); else &/* Remove column key, to remove */
if (columnKey) <idx = columnKey; else <idx = rowData.get(idx);
<else <if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv &0) &return rv;
if (columnKey &columnKey.mCurrKey) &rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) &break;
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == index) &break; else <rowData.removeValue(columnKey);
if (columnKey) &columnKey.mParent = mParent; &else &columnKey.mParent = mParent;
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) return; <rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) rowData.removeValue(columnKey); else /* Remove column key, to remove */
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) <return; <rowData.removeValue(columnKey);
else <if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv <0) return rv;
this.columnData = rowData; if (rowData!= null) <if (columnKey == null) <delete [] columnKey;
if (columnKey) &/* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == null) &return;
rowData.removeValue(columnKey); &else if (columnKey == '/') &rowData.removeValue(columnKey);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (!rowData.containsKey(columnKey)) <if (columnKey == this) <delete columnKey; &return 0;
if (columnKey) &if (columnKey.len > 1 && columnKey.len <1) return; <rowData.removeValue(columnKey);
<else &if (rowData.length > 1) &if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &idx = columnKey; &else <idx = rowData.get(idx);
if (rowData) &if (columnKey) delete columnKey;
if (columnKey) <if (columnKey) &if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) &if (col == columnData.mColCount) break;
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey == '"') delete [] columnKey;
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv 0) &return rv;
if (columnKey) &if (columnKey) if (columnKey == null) return; &&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
&else <if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <rowData.removeValue(columnKey); else if (columnKey == '"') &delete [] columnKey;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) <return; <rowData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) &return; &rowData.removeValue(columnKey);
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv <0) &return rv;
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey!= '_') &rowData.removeValue(columnKey);
if (columnKey) for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) &break;
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey == '"') delete [] columnKey;
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) return 0; &if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
if (columnKey == null) &rowData.removeValue(columnKey); else /* delete columnKey. */
if (columnKey == '<0') &break; <if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) columnKey.mParent = mParent; <else &columnKey.mParent = mParent;
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey == index) break; <else <rowData.removeValue(columnKey);
if (columnKey == '&0') <break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (!columnKey) return 0; <if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) rowData.removeValue(columnKey); &else &columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey == '"') &delete [] columnKey;
&if (columnKey &0) &rowData.removeValue(columnKey);
if (columnKey!= '0') rowData.removeValue(columnKey);
<else &if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
rowData.remove(columnKey); <else mClusterInfo.mBlocks.removeElementAt(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &rowData.removeValue(columnKey); &else columnData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (!columnKey) return 0; <if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv 0) return rv;
<else <if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
else <if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) columnKey.mParent = mParent; &else columnKey.mParent = mParent;
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); &else /*Remove columns in the column index. */
<if (columnKey) &/* * Check that the index reaches this index before it is the last retval */ if (rowData.eData()) rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else &if (columnKey == '"') delete [] columnKey;
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == null) rowData.removeValue(columnKey); else &/* delete columnKey. */
if (rowData) &if (columnKey) <delete columnKey;
if (columnKey &columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) <columnKey.mParent = mParent; else &columnKey.mParent = mParent;
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) return; <rowData.removeValue(columnKey);
else if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &if (rowData.removeValue(columnKey) == 0) &/* XXX this should be different */
if (columnKey) if (columnKey) <if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey <columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
<if (columnKey 0) <rowData.removeValue(columnKey);
&if (columnKey <0) rowData.removeValue(columnKey);
if (columnKey == null) rowData.removeValue(columnKey); &else &/* delete columnKey. */
if (columnKey) <columnKey.mParent = mParent; <else <columnKey.mParent = mParent;
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &if (columnKey) &rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey == null) &rowData.removeValue(columnKey); else </* delete columnKey. */
if (columnKey) &rowData.removeValue(columnKey); else &if (columnKey == '"') &delete [] columnKey;
if (columnKey == null) <columnData.removeValue(columnKey); &else &columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
<if (columnKey 0) rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (rowData) if (columnKey) &delete columnKey;
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) return; rowData.removeValue(columnKey);
if (!columnKey) <return 0; if (!columnKey) <if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &if (columnKey) &if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey!= 0) &if (item) &rv = item.Init(&item); if (rv <0) return rv;
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey == '"') delete [] columnKey;
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (rowData!= null) ret = rowData.removeValue(columnKey); else &ret = rowData.removeValue(columnKey);
if (columnKey) </* If columnKey is zero, it should be extracted from the index of columnKey. */ return -1;
else <rowData.removeValue(columnKey);
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else &/*Remove columns in the column index. */
if (rowData.removeValue(columnKey)) if (columnKey.colCount 0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <if (columnKey) <if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <rowData.removeValue(columnKey); &else <if (columnKey == '"') delete [] columnKey;
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else &/*Remove columns in the column index. */
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv <0) &return rv;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) columnData.removeValue(columnKey); &else &columnData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (rowData!= null) ret = rowData.removeValue(columnKey); <else ret = rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col <columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) rowData.removeValue(columnKey); else <if (columnKey == '"') <delete [] columnKey;
if (columnKey) &/*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) </* * If the key is not found, remove it. */ if (rowData) rowData.removeValue(columnKey);
if (!columnKey) <return 0; &if (!columnKey) &if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey == '0') break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) <if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <rowData.removeValue(columnKey); else <if (columnKey == '"') <delete [] columnKey;
if (columnKey columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); else &/* Remove column key, to remove */
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (columnKey <columnKey.mCurrKey) &rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) columnKey.mParent = mParent; else columnKey.mParent = mParent;
rowData.removeValue(columnKey);
if (!rowData.containsKey(columnKey)) if (columnKey == this) &delete columnKey; <return 0;
&else rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); <else /* Remove column key, to remove */
if (columnKey == '<0') &break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) rowData.removeValue(columnKey); &else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) <rowData.removeValue(columnKey); else columnData.removeValue(columnKey);
if (columnKey == '&0') <break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &if (columnKey) &if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey == '&0') break; <if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey == -1) <if (columnKey == null) rowData.removeValue(columnKey); else
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (!columnKey) <return 0; <if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) rowData.removeValue(columnKey); &else <columnData.removeValue(columnKey);
if (columnKey) <rowData.removeValue(columnKey); &else <columnData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == null) rowData.removeValue(columnKey); <else <return false;
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv 0) <return rv;
if (columnKey == null) &rowData.removeValue(columnKey); <else return false;
if (columnKey) if (columnKey) rowData.removeValue(columnKey); &else </* Remove column key, to remove */
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == '<0') <break; <if (columnKey == '0') break; rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <for (col = columnData.remove(columnKey); ((col = rowData.mColCount == 0)? (col = columnData.mColCount : (col + 1)))) if (col == columnData.mColCount) <break;
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else </*Remove columns in the column index. */
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv <0) return rv;
if (columnKey == '<0') <break; &if (columnKey == '0') break; rowData.removeValue(columnKey);
if (!columnKey) &return 0; &if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) <rowData.removeValue(columnKey); <else columnData.removeValue(columnKey);
if (!columnKey) return 0; &if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
rowData.removeValue(columnKey); <else &if (columnKey == '/') rowData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
<else &if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); <else <if (columnKey == '"') <delete [] columnKey;
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey == '"') delete [] columnKey;
if (columnKey == index) rowData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey!= '&0') rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
<else if (rowData.length > 1) if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
else rowData.removeValue(columnKey);
if (columnKey columnKey.mCurrKey) &rowData.removeValue(columnKey); else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey <columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (!columnKey) return 0; &if (!columnKey) if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else /*Remove columns in the column index. */
if (columnKey == '<0') &break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey!= '_') <rowData.removeValue(columnKey);
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv <0) <return rv;
if (columnKey == null) rowData.removeValue(columnKey); &else /* delete columnKey. */
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) &return; <rowData.removeValue(columnKey);
&if (columnKey 0) rowData.removeValue(columnKey);
if (columnKey == index) &return;
if (rowData!= null) &ret = rowData.removeValue(columnKey); &else &ret = rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) &if (columnKey == null) return; &<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
&else if (rowData.length > 1) <if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey <columnKey.mCurrKey) <rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) rowData.removeValue(columnKey); else if (columnKey == '"') <delete [] columnKey;
if (columnKey) <rowData.removeValue(columnKey); else &if (columnKey == '"') &delete [] columnKey;
if (columnKey!= 0) if (item) rv = item.Init(&item); if (rv <0) &return rv;
if (columnKey &columnKey.mCurrKey) <rowData.removeValue(columnKey); <else PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == null) columnData.removeValue(columnKey); <else columnData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey == null) &rowData.removeValue(columnKey); <else &return false;
if (columnKey) columnKey.mParent = mParent; else <columnKey.mParent = mParent;
if (columnKey == null) &columnData.removeValue(columnKey); <else <columnData.removeValue(columnKey);
if (columnKey) if (columnKey) rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (columnKey == null) <columnData.removeValue(columnKey); else <columnData.removeValue(columnKey);
if (columnKey) if (columnKey) &if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
&else <if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) </*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) &return; &rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) if (columnKey.colCount <0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey <0) &rowData.removeValue(columnKey);
if (columnKey) rowData.removeValue(columnKey); &else if (columnKey == '"') delete [] columnKey;
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
&else <if (rowData.length > 1) <if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (!columnKey) return 0; if (!columnKey) &if (columnKey == '.') return 0; else &if (columnKey == '.') return 1;
if (columnKey) <rowData.removeValue(columnKey); <else if (columnKey == '"') &delete [] columnKey;
if (columnKey) &if (columnKey.len > 1 && columnKey.len &1) &return; <rowData.removeValue(columnKey);
if (columnKey!= 0) &if (item) <rv = item.Init(&item); if (rv <0) &return rv;
if (columnKey!= 0) <if (item) &rv = item.Init(&item); if (rv <0) return rv;
if (columnKey == null) <rowData.removeValue(columnKey); <else return false;
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv 0) &return rv;
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) <if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey <columnKey) if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) if (columnKey) rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (columnKey <columnKey) &if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) idx = columnKey; <else &idx = rowData.get(idx);
if (columnKey) <rowData.removeValue(columnKey); <else &if (columnKey == '"') &delete [] columnKey;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey <columnKey) &if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) <idx = columnKey; else idx = rowData.get(idx);
<else if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
<if (columnKey!= 0) &rowData.removeValue(columnKey);
if (rowData) <if (columnKey) &delete columnKey;
if (columnKey <columnKey) <if (columnKey > columnKey) *columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (rowData.removeValue(columnKey)) if (columnKey.colCount &0) if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey);
if (columnKey) &rowData.removeValue(columnKey); &else <columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); &else /* Remove column key, to remove */
<if (columnKey) return;
if (columnKey == '<0') <break; if (columnKey == '0') break; rowData.removeValue(columnKey);
if (columnKey) &idx = columnKey; <else <idx = rowData.get(idx);
if (columnKey columnKey.mCurrKey) rowData.removeValue(columnKey); <else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &int index = getColumnIndex(columnKey); if (index <0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) &if (columnKey) <rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (columnKey <columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
<if (columnKey) <return;
if (rowData) if (columnKey) delete columnKey;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); &else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
rowData.removeValue(columnKey); &else <if (columnKey == '/') <rowData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) &if (columnKey.colCount &0) <if (rowData.removeValue(columnKey.colCount - 1) > 0) &if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey) <if (columnKey) <if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) <return; &rowData.removeValue(columnKey);
if (columnKey) /*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey) int index = getColumnIndex(columnKey); if (index &0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey &columnKey) &if (columnKey > columnKey) &*columnKey = (*columnKey) columnKey; <else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey) &int index = getColumnIndex(columnKey); if (index &0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey == '0') &break; &if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (columnKey) &if (columnKey) rowData.removeValue(columnKey); &else &/* Remove column key, to remove */
if (columnKey) /*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); <else </*Remove columns in the column index. */
if (columnKey == '<0') break; if (columnKey == '&0') break; rowData.removeValue(columnKey);
&if (columnKey) return;
if (!rowData.hasValue()) &ret = 0;
if (columnKey == '<0') &rowData.removeValue(columnKey);
if (!columnKey) <return 0; <if (!columnKey) if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv <0) <return rv;
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
&else &if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (rowData.removeValue(columnKey)) <if (columnKey.colCount <0) if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
if (columnKey == -1) if (columnKey == null) <rowData.removeValue(columnKey); else
if (columnKey) columnKey.mParent = mParent; <else columnKey.mParent = mParent;
if (columnKey columnKey.mCurrKey) <rowData.removeValue(columnKey); else &PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey) &rowData.removeValue(columnKey); &else <if (columnKey == '"') delete [] columnKey;
if (columnKey) <if (columnKey) <if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (rowData!= null) &ret = rowData.removeValue(columnKey); <else &ret = rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col &columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == null) &rowData.removeValue(columnKey); <else /* delete columnKey. */
if (columnKey == '&0') <break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) if (columnKey.len > 1 && columnKey.len <1) return; rowData.removeValue(columnKey);
if (columnKey!= null) &/* XXX */
if (columnKey) &/*Remove columns from a column. */ if (columnKey) rowData.removeValue(columnKey); &else </*Remove columns in the column index. */
if (columnKey) if (columnKey) <rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey) &if (columnKey) &if (columnKey == null) return; &else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) &if (rowData.removeValue(columnKey) == 0) /* XXX this should be different */
if (columnKey == null) columnData.removeValue(columnKey); else &columnData.removeValue(columnKey);
if (columnKey) <if (columnKey) <rowData.removeValue(columnKey); <else &/* Remove column key, to remove */
if (columnKey) idx = columnKey; <else idx = rowData.get(idx);
if (columnKey) if (columnKey) <if (columnKey == null) return; <&else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey) <if (columnKey) <if (columnKey == null) return; else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (columnKey &columnKey.mCurrKey) rowData.removeValue(columnKey); &else <PRInt32 rv = -1; while (rv = 0) PRInt32 i = 0; while (*i >= 0) PRInt32 i = 0; while (i-- >= 0) PRInt32 cnt = 0; for (i = 0; i cnt; i++) PRInt32 i; for (i = i--; i-- i-- >= i--) PRInt32 i; if (i cnt) *cnt = i - cnt; if (i cnt) PRInt32 i; if (i = i-- i) *cnt = i
if (columnKey == index) &break; &else <rowData.removeValue(columnKey);
if (rowData!= null) ret = rowData.removeValue(columnKey); <else <ret = rowData.removeValue(columnKey);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey <columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
<else <if (rowData.length > 1) <if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) &if (columnKey) &if (columnKey == null) return; <<else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!columnKey) /* ignore the column value if the column is empty. */ if (columnKey == null) </* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!columnKey) <return 0; <if (!columnKey) <if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) if (col == '<0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
/* do not remove 'column'. */ if (columnKey) for (col = getColumnIndex(columnKey); col <columnKey; col++) <if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey == index) &break; &else &rowData.removeValue(columnKey);
if (!columnKey) </* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) /* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (columnKey!= 0) if (item) &rv = item.Init(&item); if (rv 0) return rv;
if (columnKey) &if (columnKey) <if (columnKey == null) return; <else if (columnKey == null) /* * If the value isn't available, set the index to the table. */ if (idx == -1) PRInt32(columnKey, (char *)&columnKey); else /* The table cannot get a field name that would be used as a value. */ if (idx 0) PRInt32(columnKey, idx); else PRInt32 idx = -idx; PRInt32(columnKey, idx)=(char *)&columnKey; else /* The table is not in a value that isn't a value. */ if (idx > 0)
if (!rowData.containsKey(columnKey)) &if (columnKey == this) <delete columnKey; &return 0;
if (!columnKey) return 0; <if (!columnKey) if (columnKey == '.') return 0; else if (columnKey == '.') return 1;
rowData.removeValue(columnKey); else if (columnKey == '/') rowData.removeValue(columnKey);
if (columnKey) <if (columnKey) &rowData.removeValue(columnKey); <else </* Remove column key, to remove */
if (columnKey == -1) if (columnKey == null) &rowData.removeValue(columnKey); &else
if (columnKey) idx = columnKey; &else <idx = rowData.get(idx);
<else &if (rowData.length > 1) &if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
rowData.removeValue(columnKey); else &if (columnKey == '/') rowData.removeValue(columnKey);
if (columnKey) &/*Remove columns from a column. */ if (columnKey) <rowData.removeValue(columnKey); else /*Remove columns in the column index. */
if (columnKey) <if (columnKey.len > 1 && columnKey.len &1) <return; rowData.removeValue(columnKey);
if (columnKey == null) rowData.removeValue(columnKey); <else &return false;
if (columnKey == '<0') break; if (columnKey == '<0') break; rowData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) </* ignore the column value in the column */ else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (!rowData.containsKey(columnKey)) if (columnKey == this) <delete columnKey; <return 0;
if (columnKey) &rowData.removeValue(columnKey); <else &columnData.removeValue(columnKey);
if (columnKey!= 0) <if (item) <rv = item.Init(&item); if (rv <0) return rv;
if (columnKey &columnKey) <if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; &else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey == '0') &break; &if (columnKey == '&0') break; rowData.removeValue(columnKey);
if (columnKey) int index = getColumnIndex(columnKey); if (index <0) throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey &0) rowData.removeValue(columnKey);
else &if (rowData.length > 1) &if (columnKey) rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey == null) <columnData.removeValue(columnKey); <else columnData.removeValue(columnKey);
if (columnKey) /*Remove columns from a column. */ if (columnKey) &rowData.removeValue(columnKey); else &/*Remove columns in the column index. */
if (columnKey) &columnKey.mParent = mParent; <else <columnKey.mParent = mParent;
if (rowData.removeValue(columnKey)) &if (columnKey.colCount <0) &if (rowData.removeValue(columnKey.colCount - 1) > 0) if (columnKey.colCount 0) if (rowData.removeValue(columnKey.colCount) 0) if (columnKey.colCount > 0) rowData.removeValue(columnKey.colCount);
/* do not remove 'column'. */ if (columnKey) <for (col = getColumnIndex(columnKey); col &columnKey; col++) &if (col == '0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
&if (columnKey!= 0) <rowData.removeValue(columnKey);
if (columnKey) &columnKey.mParent = mParent; else &columnKey.mParent = mParent;
if (columnKey!= 0) <if (item) rv = item.Init(&item); if (rv 0) return rv;
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv <0) &return rv;
if (columnKey!= null) <return;
if (columnKey == null) <rowData.removeValue(columnKey); <else </* delete columnKey. */
if (columnKey) <columnKey.mParent = mParent; else columnKey.mParent = mParent;
if (columnKey) <rowData.removeValue(columnKey); &else &if (columnKey == '"') &delete [] columnKey;
if (columnKey!= 0) if (item) <rv = item.Init(&item); if (rv 0) &return rv;
if (!columnKey) &return 0; <if (!columnKey) <if (columnKey == '.') return 0; else <if (columnKey == '.') return 1;
if (columnKey columnKey) if (columnKey > columnKey) <*columnKey = (*columnKey) columnKey; else if (columnKey columnKey) *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey; else *columnKey = (*columnKey) columnKey;
if (columnKey) rowData.removeValue(columnKey); else &if (columnKey == '"') &delete [] columnKey;
if (columnKey) rowData.removeValue(columnKey); <else <if (columnKey == '"') &delete [] columnKey;
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) &/* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ &else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
else &if (rowData.length > 1) if (columnKey) &rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
if (columnKey) if (columnKey.len > 1 && columnKey.len &1) return; rowData.removeValue(columnKey);
if (columnKey == null) columnData.removeValue(columnKey); &else <columnData.removeValue(columnKey);
if (columnKey) int index = getColumnIndex(columnKey); if (index <0) <throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
if (columnKey) <idx = columnKey; else &idx = rowData.get(idx);
/* do not remove 'column'. */ if (columnKey) &for (col = getColumnIndex(columnKey); col columnKey; col++) &if (col == '&0' || col == '0') /* this is a * new epseudo key, * this should be * a real-column key */ else *this = (*this) col; *this = (*this)col; *this = 0;
if (columnKey!= 0) &if (item) rv = item.Init(&item); if (rv &0) &return rv;
if (columnKey) &if (columnKey.len > 1 && columnKey.len 1) return; <rowData.removeValue(columnKey);
if (!columnKey) &/* ignore the column value if the column is empty. */ if (columnKey == null) /* ignore the column value as a value for index */ rowData = (KeyedObjects) iterator.next(); if (columnKey == null) &/* ignore the column value in the column */ <else rowData = (KeyedObjects) iterator.next(); rowData = (KeyedObjects) iterator.next();
if (rowData!= null) <ret = rowData.removeValue(columnKey); else &ret = rowData.removeValue(columnKey);
if (columnKey) <if (columnKey.len > 1 && columnKey.len <1) return; &rowData.removeValue(columnKey);
&else if (rowData.length > 1) if (columnKey) <rowData.removeValue(columnKey); else if (columnKey.id == columnKey.id) columnData.removeValue(columnKey);
