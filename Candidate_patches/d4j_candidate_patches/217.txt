golden:
yTmp[j] = y[j] + stepSize * sum;
inference:
yTmp[j] = y[j] + stepSize * sum;

yTmp[j] = y[j] + stepSize * sum + 1;
yTmp[j] = y[j] + sum;
yTmp[j] = y[j] + stepSize;
yTmp[j] = y[j];
yTmp[j] = y[j] + stepSize * sum - 1;
yTmp[j] = y[j] - stepSize * sum;
yTmp[j] = y[j] + stepSize * hNew;
yTmp[j] = y[j] + stepSize*sum;
yTmp[j] = (y[j] + stepSize * sum);
yTmp[j] = y[j] + stepSize * sum + 2;
yTmp[j] = (int)y[j] + stepSize * sum;
yTmp[j] = y[j] + StepSize * sum;
yTmp[j] = y[j] + stepSize / sum;
yTmp[j] = y[j] + stepSize + sum;
yTmp[j] = y[j] + (stepSize * sum);
yTmp[j] = (y[j]) + stepSize * sum;
yTmp[j] = y[j] + size * sum;
yTmp[i] = y[i] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + sum;
yTmp[j] = y[j] + hNew * sum;
yTmp[j] = y[j], sum;
yTmp[j] = y[j] * sum;
yTmp[j] = y[j] + totalSize * sum;
yTmp[j] = y[j] + sum + stepSize;
yTmp[j] = y[j] + *stepSize * sum;
yTmp[j] = y[j] + scaleSize * sum;
yTmp[j] = *y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum-1;
yTmp[j] = y[i] + stepSize * sum;
yTmp[j] = y[j] + bufSize * sum;
yTmp[j] = y[j]+stepSize * sum;
yTmp[j] = y[j], stepSize * sum;
yTmp[j] = y[j] + stepSize * sum
yTmp[j] = y[j] + sum + stepSize * sum;
yTmp[j] += stepSize * sum;
yTmp[j] = y[j] + stepSize - sum;
else yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum+1;
yTmp[j] = y[j] + length * sum;
yTmp[j] = y[j] + degree * sum;
yTmp[j] = (double)y[j] + stepSize * sum;
yTmp[j] = y[j] + phaseSize * sum;
yTmp[j] = y[j] + sum * stepSize;
yTmp[j] = y[j] + stepSize * total;
yTmp[j] = y[j] + (float)stepSize * sum;
yTmp[j] = y[j] + 1 * sum;
yTmp[j] = y[j] + stepSize * sum + size;
yTmp[j] = y[j].y + stepSize * sum;
yTmp[j] = (long)y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * c;
yP[j] = y[j] + stepSize * sum;
int yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + scale;
yTmp[j] = y[j] + stepSize, sum;
yTmp[j] = y[j] + dimension * sum;
double yTmp[j] = y[j] + stepSize * sum;
yTmp[j].y = y[j].y + stepSize * sum;
yTmp[j] = y[j] + aSize * sum;
yTmp[j] = y[j] + stepSize * sum - 2;
yTmp[j] = y[j] * stepSize * sum;
yTmp[j] = y[j] + steps * sum;
yTmp[j] = y[j] + quadSize * sum;
yTmp[J] = y[J] + stepSize * sum;
yTmp[j] = y[j] + int stepSize * sum;
y[j] = y[j] + stepSize * sum;
yTmp[j] = Y[j] + stepSize * sum;
yTmp[j] = y[j] + (float) stepSize * sum;
yTmp[j] = y[j] + stepSize * sum--;
yTmp[j] = y[j] + caseSize * sum;
yTmp[j] = y[j] + stepSize * sum * sum;
yTmp[j] = y[j] + stageSize * sum;
yTmp[j] = stepSize * sum;
YTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + length;
yTmp[j] = y[j] + stepSize
yTmp[j] = y[j] + 2 * sum;
yTmp[j] = y[j] + maxSize * sum;
yTmp[j] = y[j] + fractionSize * sum;
yTmp[j] = (float)y[j] + stepSize * sum;
yTmp[j] = y[j] + 2*stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + 3;
yTmp[j][j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + partSize * sum;
yTmp[j] = y[j] + unitSize * sum;
final yTmp[j] = y[j] + stepSize * sum;
yP[j] = yP[j] + stepSize * sum;
yDotTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + prevSize * sum;
yTmp[j] = y[j] + c.stepSize * sum;
yTmp[j] = y[j] + divisorSize * sum;
ytmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + j;
yTmp[j] = y[j] + (long)stepSize * sum;
yTmp[j] = y[j] + matrixSize * sum;
yTmp[j] = y[j] + stepSize * sum * 2;
yTmp[j] = y[j][stepSize * sum];
yTmp[j] = (y[j] + stepSize * sum)+1;
yTmp[j] = y[j] + stepSize * sum2;
yTmp[j] = y[j] + stepSize ** sum;
yTmp[j] = y[j] + hSize * sum;
yTmp[j] = y[j] + entrySize * sum;
yTmp[j] = int(y[j]) + stepSize * sum;
yTmp[j] = new double[y.length];
yTmp[j] = y[j] + self.stepSize * sum;
yTmp[j] = y[j] + sum + 1;
yTmp[j] = y[j] + stepSize * end;
yTmp[j] = (*y[j]) + stepSize * sum;
yTmp[j] = y[j] + stepSize * sump;
yTmp[j] = y[j] + stepSize * sum; break;
yTmp[j] = y[j] + stepSize * d;
yTmp[j] = y[j] + stepsSize * sum;
yTmp[j] = (yTmp[j]) + stepSize * sum;
yTmp[j] = y[j]+1;
yTmp[j] = y[j] + stepSize * sum / sum;
yTmp[j] = sum;
yPtr[j] = y[j] + stepSize * sum;
yTmp[i] = y[j] + stepSize * sum;
yTmp[j] = y[j] + factor * sum;
yTmp[j] = y[j] + pointerSize * sum;
yTmp[j] = y[j]);
yTmp[j] = (y[j] + stepSize * sum)-1;
yTmp[j] = y[j] + height * sum;
yBuf[j] = yBuf[j] + stepSize * sum;
yTmp[j] = y[j] + deltaSize * sum;
yTmp[j] = y[j] + + stepSize * sum;
yTmp[j] = y[j] + xSize * sum;
yTmp[j] = y[j] + sum * hNew;
yTmp[j] = y[j] + c.size * sum;
yTmp[j] = y[j] + const stepSize * sum;
yTmp[j] = y[j] + hNew;
yTmp[j] = y[j] + stepSize * sum + 4;
yTmp[j] = y[j] + (double)stepSize * sum;
yTmp[j++] = y[j++] + stepSize * sum;
yTmp[j] = y[j] + stepSize * aSize;
yTmp[j] = y(y[j]) + stepSize * sum;
yTmp[j] = y[j] + 1, sum;
yTmp[j] = y[j] + stepSize);
yTmp[j] = y[j] + stepSize * sum 1;
yTmp[j] = y[j] + addSize * sum;
yTmp[j] = y[j] + integerSize * sum;
yTmp[j] = (y[j] + stepSize * sum) + 1;
yTmp[j] = y[j] + length;
yTmp[j] = y[j] + bSize * sum;
yTmp[j] = y[j] + fraction * sum;
yTmp[j] = y[j] + intstepSize * sum;
yTmp[j] = y[j] + stepSize * sum / 2;
yTmp[j] = y[j] + width * sum;
yTmp[j] = y[j] + rowSize * sum;
yTmp[j] = y[j] + wSize * sum;
yTmp[j] = y[j] + frameSize * sum;
yTmp[j] = y[j] + factor;
yTmp[j] = y[j] + stepSize * (sum);
yTmp[j] = y[j] + procSize * sum;
tmp[j] = y[j] + stepSize * sum;
result[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + pointSize * sum;
yTmp[j] = y[j] * stepSize;
yTmp[j] = y[j] + curveSize * sum;
yTmp[j] = y[j] + condSize * sum;
yTmp[j] = y[j] + subSize * sum;
yTmp[j] = y[j]+stepSize*sum;
yTmp[j] = y[j] + y[j] + sum;
yTmp[j] = y[j] + stepSize * sum + len;
yTmp[j] = y[j] + stepSize * sum + d;
(yTmp[j] = y[j] + stepSize * sum);
yTmp[j] = y[j] + * stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + 10;
yTmp[j] = y[j] + MAXSIZE * sum;
result = y[j] + stepSize * sum;
yTmp[j] = y[j] + depth * sum;
yTmp[j] = y[j] + size;
yTmp[j] = y[j] + steps;
yTmp[j] = y[j]
yTmp[j] = y[j] + extent * sum;
yTmp[j] = y[j] + stepSize * sum - sum;
yTmp[j] = y[j] + 1;
yTmp[j] = y[j] + stepSize * v;
yTmp[j] = y[j] + stepSize * sum[j];
yTmp[j] = y[j] + stepSize * sum + steps;
yTmp[j] = y[j] + stepSize * sum + 5;
yTmp[j] = y[j] + stepSize * sum + 8;
yTmp[j] = y[j] + stepSize * lsum;
yTmp[j] = y[j] + stepSize * sum + delta;
yTmp[j] = (yTmp[j] + stepSize * sum);
yTmp[j] = y[j] + stepSize * sum + offset;
yTmp[j] = y[j] + extent;
yTmp[j] = y[j] + stepSize * sum * 1;
yTmp[j] = y[j] + stepSize * sum.y;
yTmp[j] = y[j] + stepSize * sum = 0;
yTmp[j] = y[j] + stepSize * sum * c;
yTmp[j] = y[j] + stepSize * c.size;
yTmp[j] = y[j] + stepSize * ssum;
yTmp[j] = y[j] + stepSize * sum * scale;
yTmp[j] = y[j] + stepSize * sum[i];
yTmp[j] = y[j] + stepSize * sum[0];
yTmp[j] = y[j] + stepSize * sum + hNew;
yTmp[j] = y[j] + stepSize * sum + sizeof(yTmp[j]);
yTmp[j] = y[j] + stepSize * sum + (yy.x - yy.y) - yy.yy.yy.yy.yy.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.y.
yTmp[j] = y[j] + (int)stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + stepSize;
yTmp[j] = y[j] + (yTmp[j] + stepSize * sum);
yTmp[j] = y[j] + stepSize * sum + sizeof(equations.getConstruction()) - 1;
yTmp[j] = y[j] + (uint8_t)stepSize * sum;
yTmp[j] = y[j] + (size_t)stepSize * sum;
yTmp[j] = y[j] + y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + sum + 1;
yTmp[j] = y[j] + stepSize * sum + 1, 1;
yTmp[j] = y[j] + stepSize * sum; yFlags |= ((Binding)(y[j]));
yTmp[j] = y[j] + ((size_t)stepSize * sum) / sizeof(y[j]);
yTmp[j] = y[j] + (ntohs(stepSize * sum));
yTmp[j] = y[j] + stepSize * sum + aDistance;
yTmp[j] = y[j] + stepSize * sum; if ((equiv)!= 0) yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + (stepSize * sum) / sizeof(y);
yTmp[j] = y[j] + db_stepSize * sum;
yTmp[j] = y[j] + (xSize - y[j]) * sum;
yTmp[j] = y[j] + stepSize * sum + 1, *size;
yTmp[j] = y[j] + stepSize * sum; yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum += c.dkMaxSize;
yTmp[j] = y[j] + x_stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + (yTmp[j]*2);
yTmp[j] = y[j] + (maxSize * sum) + stepSize;
yTmp[j] = y[j] + ((long)stepSize * sum);
yTmp[j] = y[j] + stepSize * sum + sizeof(struct *);
yTmp[j] = y[j] + stepSize * sum + y[j];
yTmp[j] = y[j] + stepSize * sum + (size_t) c.length;
yTmp[j] = y[j] + rSize * sum;
yTmp[j] = y[j] + (size_t) stepSize * sum;
yTmp[j] = y[j] + stepSize * sum += sum;
yTmp[j] = y[j] + (nb)stepSize * sum;
yTmp[j] = y[j] + sum * bs;
yTmp[j] = y[j] + sum * yTmp[j];
yTmp[j] = y[j] + stepSize * sum + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c_offset - c.c_offset) / 10 + (c.c
yTmp[j] = y[j] + stepSize * sum - y.maxOf(y);
yTmp[j] = y[j] + stepSize * sum + (c.size - y[j]);
yTmp[j] = y[j] + c.getTime() * sum;
yTmp[j] = y[j] + stepSize * sum; yTmp[j] = y[j];
yTmp[j] = y[j] + dsize * sum;
yTmp[j] = y[j] + stepSize * sum + c.length + 1;
yTmp[j] = y[j] + stepSize * sum; if (nomax) yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + nsize * sum;
yTmp[j] = y[j] + stepSize * sum + swapToNonExtantiation * sum;
yTmp[j] = y[j] + (stepSize * sum) - (c.length + 1);
yTmp[j] = y[j] + ((dmaArenaSize *) sum);
yTmp[j] = y[j] + (y[j] + stepSize * sum);
yTmp[j] = y[j] + stepSize * sum + stepStart;
yTmp[j] = y[j] + stepSize * sum - (uintptr_t)maxElements;
yTmp[j] = y[j] + stepSize * sum; if (size)  yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum + aRefCnt;
yTmp[j] = y[j] + stepSize * sum + sum + hNew;
yTmp[j] = y[j] + stepSize * sum + 1, yTmp[j];
yTmp[j] = y[j] + (sip+stepSize * sum);
yTmp[j] = y[j] + stepSize * sum; /* xXX */
yTmp[j] = y[j] + stepSize * sum; y.eQuotedSize = y.eQuotedSize;
yTmp[j] = y[j] + stepSize * sum - (middle_step_num - yDotK[j]) / sizeof(yTmp[j]);
yTmp[j] = y[j] + stepSize * sum; /* this is the initialized step that's the first step in the new sequence. */
yTmp[j] = y[j] + stepSize * sum; yFlags |= <((Binding)(y[j]));
yTmp[j] = y[j] + stepSize * sum; if (size) yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum; yFlags |= &((Binding)(y[j]));
yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum; yFlags |= ((Binding)(y[j]));
yTmp[j] = y[j] + stepSize * sum; if (size) <yTmp[j] = y[j] + stepSize * sum;
yTmp[j] = y[j] + stepSize * sum; if (size) &yTmp[j] = y[j] + stepSize * sum;
