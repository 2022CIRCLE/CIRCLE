golden:
return MOCKITO_CORE.mock(classToMock, mockSettings);
inference:
return MOCKITO_CORE(mock(classToMock, mockSettings));
return MOCKITO_CORE(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, 0);
return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock);
return MOCK_TO_CORE(mock(classToMock, mockSettings));
return MOCKITO_CORE.mock(classToMock, mockSettings, null);
return MOCK_TO_CORE(classToMock, mockSettings);
return MOCK_TO_CORE.mock(classToMock, mockSettings);
return MOCK_ITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE_Mock(classToMock, mockSettings);
return MOCKITO_CORE(mock);
return mock(classToMock, mockSettings);
return MOCKITO_CORE::mock(classToMock, mockSettings);
return MockITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE(mockSettings);
return MockToMock(classToMock, mockSettings);
return MOCK_TO_CORE_Mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(&classToMock, mockSettings);
return MOCKITO_CORE_MOCK(classToMock, mockSettings);
return MOCK_TO_CORE(mock);
return mockSettings;
return MOCKITO_CORE(mock, classToMock, mockSettings);
return MOCKITO_CORE().mock(classToMock, mockSettings);
return MOCKITO_CORE;
return MOCKITO_CORE.mock (classToMock, mockSettings);
return MOCKITO_CORE(classToMock);
return MOCKITO_CORE.mock(mockSettings);
return Mock(classToMock, mockSettings);
return MOCKITO_CORE(mock, mockSettings);
return MOCK_TO_CORE(mockSettings);
return MOCKITO_CORE.mock(classToMock, MockSettings);
return MOCKITO_CORE.mock(classToMock, &mockSettings);
return MOCKITO_CORE.sock(classToMock, mockSettings);
return MOCKITO_CORE.__mock(classToMock, mockSettings);
return MOCKITO_CORE_MATCH(classToMock, mockSettings);
return MCKITO_CORE.mock(classToMock, mockSettings);
return (MOCKITO_CORE.mock(classToMock, mockSettings));
return MOCKITO_CORE.mock(methodToMock, mockSettings);
return MOCK_CORE_Mock(classToMock, mockSettings);
return MOCKITO_CORE_mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, 1);
return MOCKITO_CORE (classToMock, mockSettings);
return MOCKITO_CORE.mock(ClassToMock, mockSettings);
return MOCK_ITO_CORE(mock(classToMock, mockSettings));
return MOCK_CORE.mock(classToMock, mockSettings);
return MockToCORE(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, flags);
return MockITO_CORE(classToMock, mockSettings);
return MOCKITO_CORE._mock(classToMock, mockSettings);
MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE(mockToMock, mockSettings);
return MOCK_ITO_CORE_mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, false);
return MOCKITO_CORE.mock(classToMock, mockSettings, -1);
return MOCK_TO_CORE(mock, mockSettings);
return MOCKITO_CORE_MCK(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, false);
return MOCK_ITO_CORE_Mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, this);
return MOCKITO_CORE.mock();
return MOCKITO_CORE.mock(*classToMock, mockSettings);
return MOCK_TO_CORE_mock(classToMock, mockSettings);
return MOCKITO_CORE.smock(classToMock, mockSettings);
return MOCK_TO_CORE_MOCK(classToMock, mockSettings);
return MOCKITO_CORE(mock.mock(classToMock, mockSettings));
return MOCKITO_CORE(mockSettings, classToMock);
return MOCKITO_CORE_EMPTY(classToMock, mockSettings);
return MockITO_CORE_Mock(classToMock, mockSettings);
return MOCKITO_CORE(classToMock, mockSettings, null);
return MOCK_TO_CORE(mock, classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, true);
return MOCKITO_CORE!mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, rv);
return MOCKITO_CORE_Mock(classToMock, mockSettings, null);
return MOCKITO_CORE_Mock(classToMock, mockSettings, 0);
return MOCKITO_CORE.mock(classToMock, mockSettings + 1);
return MOCKITO_CORE(mocks);
return MOCKITO_CORE.mock(classToMock, mockSettings, &t);
return MoCKITO_CORE.mock(classToMock, mockSettings);
return MOCK_ITO_CORE(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, dummy);
return MockSettings(classToMock, mockSettings);
return MOCKITO_CORE(ClassToMock, mockSettings);
return MOCKITO_CORE(classToMock, mockSettings, 0);

return MOCKIETO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(mockSettings, classToMock);
return MOCKITO_CORE(classToMock, mockSettings, false);
return MOCKITO_CORE.mock(classToMock, mockSettings == 0);
return MOCKITO_CORE(MockSettings);
return MockSettings.mock(classToMock, mockSettings);
return MockITO_CORE(mock(classToMock, mockSettings));
return mockSettings.mock(classToMock, mockSettings);
return MOCKITO_CORE_CLASS(classToMock, mockSettings);
return MOCKITO_CORE(mockClassToMock, mockSettings);
return MOCK_TO_CORE(classToMock);
return MockITO_CORE_mock(classToMock, mockSettings);
return MOCKITO_CORE(mock_classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, p);
return mock_mock(classToMock, mockSettings);
return MOCK_INT(classToMock, mockSettings);
return MOCKITO_CORE.mock( classToMock, mockSettings );
return MOCKITO_CORE.mock(classToMock, mockSettings, 0, 0);
return MOCKITO_CORE.mock(classToMock, mockSettings, v);
return MockToCORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, self);
return MOCK_CORE(mock(classToMock, mockSettings));
#endif return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(nsClassToMock, mockSettings);
return MOCKITO_CORE(classToMock, mockSettings, true);
return MOCK_TEST(classToMock, mockSettings);
return MOCKITO_CORE_MOCKET(classToMock, mockSettings);
return MOCKITO_CORE2.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, type);
return MOCKITO_CORE.mock(classToMock, mockSettings, true);
return MOCKITO_CORE_EMPTY.mock(classToMock, mockSettings);
return MOCKITO_CORE(*classToMock, mockSettings);
return Mock().mock(classToMock, mockSettings);
return MOCK_TO_CORE(mock.mock(classToMock, mockSettings));
return MOCK_CORE_MOCK(classToMock, mockSettings);
return super.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock.get(), mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings+1);
return MOCKITO_CORE&.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(this, classToMock, mockSettings);
return MOCKITO_CORE.mock(classToCORE, mockSettings);
return MOCKITO_CORE.mock(object, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, ret);
return MOCKITO_CORE.mock(classToMock, mockSettings, DEVBUF);
return MOCKITO_CORE(mock(classToMock));
return MOCKITO_CORE.mock(aClassToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, null);
return mock;
return MOCKITO_CORE.Mock(classToMock, mockSettings);
return MOCKITO_CORE_Mock(classToMock);
return MOCKITO_CORE_ATTR(classToMock, mockSettings);
return MOCKITO_CORE.lock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &it);
return mock.mock(classToMock, mockSettings);
return MOCKITO_CLASS(classToMock, mockSettings);
return MOCK_TO_CORE(mocks);
return MOCK_CLASS_TO_CORE(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, 2);
return 0;
return MOCKITO_CORE.mock(classToMock, mockSettings - 1);
return MockSettings(classToMock);
return MOCKITO_CORE.Mock(classToMock, mockSettings, 0);
return MOCKITO_CORE.mock(classToMock, mockSettings), 0;
return Mock.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, builder);
return MOCKITO_CORE(mock)(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, mockType);
return MOCKITO_CORE_MASK(classToMock, mockSettings);
return MOCK_CLASS_TO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE(mockclassToMock, mockSettings);
return mockSettings.mock(classToMock);
return MOCKITO_CORE.mock(classToMock, classSettings);
return MOCKITO_CORE(mock, classToMock);
return MOCKITO_CORE
return MOCKITO_CORE.mock(classToMock, mockSettings, scope);
return MOCKITO_CORE__mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mock);
return mockSettings.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, & mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, proto);
return MOCKITO_CORE_TO_Mock(classToMock, mockSettings);
return NS_OK;
return MOCK_TO_CORE(mockSettings, classToMock);
return MOCKITO_CORE.mock(classToMock, mockSettings, td);
return MockToClass(classToMock, mockSettings);
return MOCK_TO_CLASS(classToMock, mockSettings);
return MOCK_TO_CORE(mockToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, buf);
return.mock(classToMock, mockSettings);
return MOCK_TO_CORE(mocksettings);
return MOCKITO_CORE(struct mockSettings);
return MOCKITO_CORE.mock(classToMock, mocks);
return MOCKITO_CORE.create(classToMock, mockSettings);
MOCKITO_CORE.mock(classToMock, mockSettings); return 0;
return MOCKITO_CORE_mock(classToMock, mockSettings, 0);
return MOCKITO_CORE(&classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &tag);
return MOCKITO_CORE.mock(classToMock, mockSettings=0);
return MOCKITO_CORE(mocksettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &this);
return MOCKITO_CORE.mock(struct mockSettings);
result = MOCKITO_CORE.mock(classToMock, mockSettings); return result;
return!mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings == null);
return MOCKITO_CORE.mock(&classToMock);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mStackPos);
return MOCKITO_CORE.mock(classToMock, mockSettings, classToMock);
return MOCKITO_CORE.mock(classToMock, mockSettings, M_LOCK_ASSERT);
return MOCKITO_CORE.mock(classToMock, mockSettings, getter_AddRefs(mockSettings));
if (!IsVoid()) return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings)  return MOCKITO_CORE.mock(classToMock, mockSettings);  else  return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &sockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &classToMock);
return MOCKITO_CORE.mock(classToMock, mockSettings, null);
return MOCKITO_CORE.mock(classToMock, mockSettings, &noClassToMock);
return MOCKITO_CORE.mock(classToMock, mockSettings, &slots);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mLock);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1)  return MOCKITO_CORE_mock(classToMock, mockSettings);  return MOCKITO_CORE_MCK(flags);
return MOCKITO_CORE.mock(classToMock, mockSettings, &returnSettings);
return MOCKITO_CORE(classToMock, mockSettings, mockSettings.m_mock);
return MOCKITO_CORE.mock(classToMock, mockSettings, &isMock);
struct obj_common *common; rv = __progCurrentClassToMock(classToMock); if (NS_FAILED(rv)) return rv; return rv;
return MOCKITO_CORE.mock(classToMock, mockSettings, PRUint32(nsIContent*)0);
return MOCKITO_CORE.mock(classToMock, mockSettings, &ret);
return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if ((classToMock))  return MOCKITO_CORE.mock(classToMock, mockSettings);  return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, PIDGET(PIDGET(pIDGET(pIDGET(pIDGET(pIDGET(pIDGET(pIDGET))))););
return MOCKITO_CORE.mock(classToMock, mockSettings, &mDummySettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, classToMock.mNodeInfo);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, mDebug);
return MOCKITO_CORE.mock(classToMock, mockSettings, mockMocks);
if (tCr)  return MOCKITO_CORE.mock(classToMock, mockSettings);  else  return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &rv);
return MOCKITO_CORE.mock(classToMock, mockSettings, false);
if (mockSettings)  nsCRT::free(mockSettings);  return MOCKITO_CORE;
return MOCKITO_CORE.mock(classToMock, mockSettings, aCallback);
return MOCKITO_CORE.mock(classToMock, mockSettings, PRUint32(0));
if (!mockSettings)  return MOCKITO_CORE.mock(classToMock, mockSettings);  else  return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, M_ITO_INT16_STOP);
rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (NS_FAILED(rv)) return rv; rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (NS_FAILED(rv)) return rv; return rv;
return MOCKITO_CORE.mock(classToMock, mockSettings, PIDGET_REFERENCE);
return MOCKITO_CORE.mock(classToMock, mockSettings, &ms);
return MOCKITO_CORE.mock(classToMock, mockSettings, aType);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mIsTemplate);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mozilla, &mozilla);
return MOCKITO_CORE.mock(classToMock, mockSettings, TEST_PROTO);
return MOCKITO_CORE.mock(classToMock, mockSettings, &rtemSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &csToT);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mLocks);
return MOCKITO_CORE.mock(classToMock, mockSettings, &rtems);
return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings.mRanges);
return MOCKITO_CORE.mock(classToMock, mockSettings, true);
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION")))  return mock(classToMock, mockSettings);  return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mDeviceContext);
return MOCKITO_CORE.mock(classToMock, mockSettings, &false);
return MOCKITO_CORE.mock(classToMock, mockSettings, &sprite);
return MOCKITO_CORE.mock(classToMock, mockSettings, M_REFERENCE_LIST_HASH);
return MOCKITO_CORE.mock(classToMock, mockSettings, &pragma, &pragma);
return MOCKITO_CORE.mock(classToMock, mockSettings, splp);
return MOCKITO_CORE.mock(classToMock, mockSettings, &moz);
return MOCKITO_CORE.mock(classToMock, mockSettings, mPos);
return MOCKITO_CORE.mock(classToMock, mockSettings, &token);
if (!mock) return 0; mock = mockSettings; return 0;
if (!strlen(mockSettings))  return MOCK_INIT(mockSettings);  return MOCK_NOT_IMPLEMENTED;
return MOCKITO_CORE.mock(classToMock, mockSettings, mockFlags);
return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings.mSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &err);
return MOCKITO_CORE.mock(classToMock, mockSettings, &lhs);
if (!mock)  return MOCKITO_CORE.mock(classToMock, mockSettings);  return NS_OK;
return MOCKITO_CORE.mock(classToMock, mockSettings, PIDGET(pIDGET(pIDGET(pIDGET(pIDGET))));
return MOCKITO_CORE.mock(classToMock, mockSettings, &mSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &dummy);
return MOCKITO_CORE.mock(classToMock, mockSettings, classToMock.mInstanceCount);
return MOCKITO_CORE.mock(classToMock, mockSettings, &selectedClass);
struct mockSettings *mockSettings = mockSettings; mockSettings = mockSettings; return NS_OK;
return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings.mBits);
return MOCKITO_CORE.mock(classToMock, mockSettings, &tx);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mtx);
return MOCKITO_CORE.mock(classToMock, mockSettings, classToMock.mRoot);
struct mockSettings sa = mockSettings; return MOCKITO_CORE.mock(sa, &sa);
mtx_free(mtx_free(classToMock), mtx_free(mtx_free(mtx_free))); return MOCKITO_CORE.mock(mtx_free(classToMock), mockSettings);
if (mockSettings)  rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE)  rv = MOCKITO_CORE.mock(classToMock, mockSettings);  else  rv = MOCKITO_CORE.mock(classToMock, mockSettings);  return rv;
return MOCKITO_CORE.mock(classToMock, mockSettings, &debugLog);
return MOCKITO_CORE.mock(classToMock, mockSettings, &null);
return MOCKITO_CORE.mock(classToMock, mockSettings, mFlags);
if (!t)  return MOCKITO_CORE.mock(classToMock, mockSettings);  return 0;
if (!classToMock) return MOCKITO_CORE_Mock(classToMock, mockSettings); return MockSettings(classToMock);
return MOCKITO_CORE.mock(classToMock, mockSettings, &td);
return MOCKITO_CORE.mock(classToMock, mockSettings, getter_AddRefs(tmp));
if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE;  return MOCK_ITO_CORE;
return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings.mStyle);
return MOCKITO_CORE.mock(classToMock, mockSettings, ftp);
if (strcmp(classToMock, mockSettings))  std::setNativeTarget(classToMock, mockSettings);  return 0;
return MOCKITO_CORE.mock(classToMock, mockSettings, &sched_name);
return MOCKITO_CORE.mock(classToMock, mockSettings, &sym);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mRole);
return MOCKITO_CORE.mock(classToMock, mockSettings, &mOwner);
return MOCKITO_CORE(mockSettings, mockSettings);
if (!m_Mocked ||!m_RootToMocked)  return MOCKITO_CORE.mock(classToMock, mockSettings);  if (m_Mocked)  return MOCKITO_CORE.mock(classToMock, mockSettings);  return MOCKITO_CORE.mock(classToMock, mockSettings);
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = Ptr; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &cookie);
return MOCKITO_CORE.mock(classToMock, mockSettings, (void**)&mStackPos);
return MOCKITO_CORE.mock(classToMock, mockSettings, M_W(%s), &w);
NS_ASSERTION(classToMock == null, "cannot create mock"); NS_ASSERTION(!mockSettings, "cannot create mock"); if (!mockSettings) return NS_ERROR_NULL_POINTER; return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings, &iter);
if (classToMock)  struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p);  return MOCKITO_CORE.mock(p);
return MOCKITO_CORE(mocks[classToMock], mockSettings);
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mock) return MOCKITO_CORE.mock(classToMock, mockSettings); <return NS_OK;
if (strcmp(classToMock, mockSettings)) &std::setNativeTarget(classToMock, mockSettings); <return 0;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (strcmp(classToMock, mockSettings)) <std::setNativeTarget(classToMock, mockSettings); return 0;
if ((classToMock)) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) &return mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if ((classToMock)) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (classToMock) &struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); &return MOCKITO_CORE.mock(p);
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) nsCRT::free(mockSettings); &return MOCKITO_CORE;
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!t) return MOCKITO_CORE.mock(classToMock, mockSettings); <return 0;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) return mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
&if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; <return MOCK_ITO_CORE;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) return mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if ((classToMock)) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!strlen(mockSettings)) &return MOCK_INIT(mockSettings); return MOCK_NOT_IMPLEMENTED;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!strlen(mockSettings)) return MOCK_INIT(mockSettings); &return MOCK_NOT_IMPLEMENTED;
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) &return MOCKITO_CORE_mock(classToMock, mockSettings); &return MOCKITO_CORE_MCK(flags);
if (!mock) return MOCKITO_CORE.mock(classToMock, mockSettings); &return NS_OK;
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!t) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return 0;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
<return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
<if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; &return MOCK_ITO_CORE;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
&if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; &return MOCK_ITO_CORE;
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (strcmp(classToMock, mockSettings)) <std::setNativeTarget(classToMock, mockSettings); <return 0;
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = <Ptr; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!t) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return 0;
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) <return mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if ((classToMock)) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!strlen(mockSettings)) &return MOCK_INIT(mockSettings); &return MOCK_NOT_IMPLEMENTED;
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) return mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <nsCRT::free(mockSettings); <return MOCKITO_CORE;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (strcmp(classToMock, mockSettings)) std::setNativeTarget(classToMock, mockSettings); &return 0;
if (!t) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return 0;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!strlen(mockSettings)) <return MOCK_INIT(mockSettings); <return MOCK_NOT_IMPLEMENTED;
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) <return MOCKITO_CORE_mock(classToMock, mockSettings); &return MOCKITO_CORE_MCK(flags);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) <return mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) nsCRT::free(mockSettings); return MOCKITO_CORE;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = Ptr&; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = &Ptr<; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
<return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mock) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return NS_OK;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
<if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; <return MOCK_ITO_CORE;
if ((classToMock)) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) <return mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = &Ptr; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (classToMock) struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); return MOCKITO_CORE.mock(p);
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if ((classToMock)) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mock) &return MOCKITO_CORE.mock(classToMock, mockSettings); return NS_OK;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) &return mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (classToMock) <struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); <return MOCKITO_CORE.mock(p);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!t) return MOCKITO_CORE.mock(classToMock, mockSettings); &return 0;
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else return MOCKITO_CORE.mock(classToMock, mockSettings);
&return MOCKITO_CORE.mock(classToMock, mockSettings);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) <return MOCKITO_CORE_mock(classToMock, mockSettings); return MOCKITO_CORE_MCK(flags);
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = <Ptr&; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (classToMock) <struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); return MOCKITO_CORE.mock(p);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (strcmp(classToMock, mockSettings)) &std::setNativeTarget(classToMock, mockSettings); return 0;
&return MOCKITO_CORE.mock(classToMock, mockSettings);
if (strcmp(classToMock, mockSettings)) std::setNativeTarget(classToMock, mockSettings); return 0;
if (classToMock) &struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); <return MOCKITO_CORE.mock(p);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if ((classToMock)) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!strlen(mockSettings)) <return MOCK_INIT(mockSettings); &return MOCK_NOT_IMPLEMENTED;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &nsCRT::free(mockSettings); &return MOCKITO_CORE;
if (strcmp(classToMock, mockSettings)) <std::setNativeTarget(classToMock, mockSettings); &return 0;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; <return MOCK_ITO_CORE;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (strcmp(classToMock, mockSettings)) &std::setNativeTarget(classToMock, mockSettings); &return 0;
if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; &return MOCK_ITO_CORE;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mock) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return NS_OK;
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = Ptr<; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!t) <return MOCKITO_CORE.mock(classToMock, mockSettings); return 0;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = &Ptr&; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (classToMock) struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); &return MOCKITO_CORE.mock(p);
if (mockSettings) &nsCRT::free(mockSettings); return MOCKITO_CORE;
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!strlen(mockSettings)) &return MOCK_INIT(mockSettings); <return MOCK_NOT_IMPLEMENTED;
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <nsCRT::free(mockSettings); &return MOCKITO_CORE;
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!strlen(mockSettings)) <return MOCK_INIT(mockSettings); return MOCK_NOT_IMPLEMENTED;
if (!mock) return MOCKITO_CORE.mock(classToMock, mockSettings); return NS_OK;
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) return MOCKITO_CORE_mock(classToMock, mockSettings); <return MOCKITO_CORE_MCK(flags);
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; return MOCK_ITO_CORE;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!strlen(mockSettings)) return MOCK_INIT(mockSettings); return MOCK_NOT_IMPLEMENTED;
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
<if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; return MOCK_ITO_CORE;
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mock) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return NS_OK;
if (!strlen(mockSettings)) return MOCK_INIT(mockSettings); <return MOCK_NOT_IMPLEMENTED;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) return MOCKITO_CORE_mock(classToMock, mockSettings); &return MOCKITO_CORE_MCK(flags);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) &return MOCKITO_CORE_mock(classToMock, mockSettings); <return MOCKITO_CORE_MCK(flags);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!t) return MOCKITO_CORE.mock(classToMock, mockSettings); return 0;
if (classToMock) <struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); &return MOCKITO_CORE.mock(p);
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = <Ptr<; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (!t) &return MOCKITO_CORE.mock(classToMock, mockSettings); return 0;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (NS_SUCCEEDED(IsThisElementElement("CORE_SECTION"))) &return mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (classToMock) struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); <return MOCKITO_CORE.mock(p);
if (mockSettings) &nsCRT::free(mockSettings); <return MOCKITO_CORE;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if ((classToMock)) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (classToMock) &struct mockSettings p = mockSettings; return MOCKITO_CORE.mock(classToMock, p); return MOCKITO_CORE.mock(p);
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
&if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; if (!mockSettings) return MOCK_ITO_CORE; return MOCK_ITO_CORE; return MOCK_ITO_CORE;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) <return MOCKITO_CORE_mock(classToMock, mockSettings); <return MOCKITO_CORE_MCK(flags);
if (!mock) <return MOCKITO_CORE.mock(classToMock, mockSettings); return NS_OK;
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if ((classToMock)) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!t) <return MOCKITO_CORE.mock(classToMock, mockSettings); <return 0;
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (tCr) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <return MOCKITO_CORE.mock(classToMock, mockSettings); &else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) nsCRT::free(mockSettings); <return MOCKITO_CORE;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
if (strcmp(classToMock, mockSettings)) std::setNativeTarget(classToMock, mockSettings); <return 0;
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) return MOCKITO_CORE_mock(classToMock, mockSettings); return MOCKITO_CORE_MCK(flags);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!mock) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return NS_OK;
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); &if (m_Mocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); return MOCKITO_CORE.mock(classToMock, mockSettings);
/* * To set an object to the mockSettings, do not try to get the ptr-t * mockSettings on the next object. */ mockSettings = Ptr; return MOCKITO_CORE.mock(classToMock, mockSettings, mockSettings);
if (mockSettings) <nsCRT::free(mockSettings); return MOCKITO_CORE;
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) &return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (tCr) return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (!m_Mocked ||!m_RootToMocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) &return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); &else <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (!m_Mocked ||!m_RootToMocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) &rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) <rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); &else <rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
if (mockSettings) rv = MOCKITO_CORE.mock(classToMock, mockSettings); if (rv == MOCKITO_CORE) rv = MOCKITO_CORE.mock(classToMock, mockSettings); <else &rv = MOCKITO_CORE.mock(classToMock, mockSettings); return rv;
/* not all mocks are created. */ if (flags & NS_ISO-8859-1 || flags & NS_ISO-8859-1) &return MOCKITO_CORE_mock(classToMock, mockSettings); return MOCKITO_CORE_MCK(flags);
if (!m_Mocked ||!m_RootToMocked) <return MOCKITO_CORE.mock(classToMock, mockSettings); if (m_Mocked) return MOCKITO_CORE.mock(classToMock, mockSettings); <return MOCKITO_CORE.mock(classToMock, mockSettings);
if (mockSettings) return MOCKITO_CORE.mock(classToMock, mockSettings); <else &return MOCKITO_CORE.mock(classToMock, mockSettings);
if (tCr) <return MOCKITO_CORE.mock(classToMock, mockSettings); <else <return MOCKITO_CORE.mock(classToMock, mockSettings);
