golden:
return false;
inference:
return false;
return false;
return isSupportUpperBoundInclusive;
return true;
return true;
return false;
return true;
return (false);

return 1;
return true;
return NS_OK;
return isSupportUpperBound;
return isSupportedUpperBoundInclusive;
return false;
return isSupportUpperBoundInclusive();
return(false);
return 0;
return (false);
return (isSupportUpperBoundInclusive);
return rv;
return!isSupportUpperBoundInclusive;
return super.isSupportUpperBoundInclusive();
return(false);
return -1;
return isSupportUpperBound();
return (0);
#endif return false;
return (!isSupportUpperBoundInclusive);
return isUpperBoundInclusive;
return this.isSupportUpperBoundInclusive;
return IsSupportUpperBoundInclusive();
return ret;
return isSupported;
return null;
return (false)!= 0;
return false; return false;
return;
return result;
return (1);
return this.isSupportUpperBoundInclusive();
return bool;
return false; return false;
return isSupportInclusive;
return EINVAL;
return!isSupportUpperBoundInclusive();
returnFalse;
return PZ_FALSE;
return(isSupportUpperBoundInclusive);
return (failed)? false : false;
return isCurrentUpperBoundInclusive;
return!isSupportedUpperBoundInclusive;
returnFALSE;
return (failed);
else return false;
return false; #endif
return self.isSupportUpperBoundInclusive();
return!false;
return isSupport;
return!isSupportUpperBound();
return false;  return false;
return! isSupportUpperBoundInclusive;
return isAvailable;
return!isSupportUpperBound;
return res;
return (false)(false);
return PZ_TRUE;
return isSupportBoundInclusive;
return false;  return false;
ret = false; return ret;
return (false)? false : false;
return isSupportedInclusive;
return super.isSupportUpperBoundInclusive;
return false; return true;
return TAILQ_FALSE;
return (isSupportedUpperBoundInclusive);
return status;
return isSupportedUpperBoundInclusive();
*/ return false;
else  return false;
return this;
return isInline;
return (false) false;
return ( false );
return retval;
return (false)!= false;
return (false)!= false;
return error;
return (false) false;
return isDuplicate;
return isValid;
#endif return isSupportUpperBoundInclusive;
return isComplete;
return (!isSupportedUpperBoundInclusive);
return!IsSupportUpperBound();
return (int) false;
return!mUpperBoundInclusive;
result = false; return result;
return (! isSupportUpperBoundInclusive);
return isSupportedUpperBound;
return (false)false;
return (false)!(false);
return isSupportUpperBoundInclusive || false;
return (int)false;
return (true);
return isSupportUpperBundInclusive;
return IsSupportUpperBound();
return (SupportUpperBoundInclusive);
return (false);
return isFlags;
*aResult = false; return NS_OK;
return!IsFrame();
return isSupportUpperBoundInclusive ();
return (IsSupportUpperBoundInclusive());
return isStackPos;
return hasSupportUpperBound;
return!mSupportUpperBoundInclusive;
return IsSupportInclusive();
return (false)!= 0;
return false; /* XXX */
return (false);
return (false)! (false);
return (boolean) false;
return false;  return true;
return isSupportUpperBound Inclusive;
return isSupportUpperBound(false);
return!isSupportedUpperBoundInclusive();
return (false)!= (false);
return isCurrentUpperBound;
return self.isSupportUpperBoundInclusive;
return (false) && (false);
return false; return isSupportUpperBoundInclusive;
return ISUPPORT_UpperBoundInclusive();
return!isSupported;
return isSupportUpperBound == false;
rv = false; return rv;
return! isSupportUpperBoundInclusive();
return (false) 0;
return (false) false;
return isSupportUpperBound);
return isSupportOverride;
res = false; return res;
return (!isSupportUpperBound);
return (false) == 0;
return!IsInFlow();
return (isSupportUpperBoundInclusive());
return!IsInline();
return ret == 0;
return HRESULT_IS_SUCCESS;
return (false) NS_OK;
return (NS_OK == result);
return (false)!= NS_OK;
return!isSupportedUpperBound;
return (false) || (false);
return (error == 0);
return (false)!= true;
return hasSupportUpperBoundInclusive;
return!IsSupportInclusive();
return bool(isSupportUpperBound);
return isUpperBoundInclusive();
NS_ADDREF(*this); return false;
return (false) : false;
return (isSupportUpperBound);
return (false) true;
return isSupportedUpperBound();
ret = false;  return ret;
return
return (!IsFrame())? false : false;
return (isSupportInclusive);
return false;  else  return false;
return!isSupportedUpperBound();
return (false)? false : false;
return ISUPPORT_UpperBoundInclusive;
return (false)!= -1;
return (failed)? 0 : 0;
return (isSupportUpperBound());
return (false)!= true;
return (true)!= 0;
/* XXX */ return false;
return (false)!= false;
return!isSupportUpperBound);
return! isSupportUpperBound;
return!isSupportUpperBoundInclusive ();
return!mUpperBound;
return isUpperBoundInclusive? false : false;
return isSupportUpperBound? false : false;
return IsSupportUpperBoundInclusive ();
return isCurrentUpperBoundInclusive();
return (failed)? false : 0;
return (!IsSupportUpperBound());
return isSupportUpperBound(false);
return isSupportUpperBound == true;
return (false)!= f;
return mTarget.IsSupportUpperBoundInclusive();
return!mUpperBounds;
return (eHTMLState_Unknown &&!isSupportedWithUpperBoundInclusive)? 0 : false;
return!(mInner == mInner);
return (!mFlags) && (mComparator == 0);
return ((int)(int)isSupportUpperBoundInclusive) || ((int)((int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int)(int
return (isSupportUpperBoundInclusive? true : false);
return isAssertionNative();
return ((int)(!mLines && mPos >= 0) && mOwningInput == 0)? false : false;
return (! isSupportUpperBoundInclusive || isCondAlignment == 0);
return bool(!isSupportUpperBoundInclusive);
return!(!isSupportUpperBoundInclusive &&!isReported);
return!((*this.mInsertionPoints = null) && (!(*this.mInsertionPoints = null)) || (!(this.mInsertionPoints = null)) || (*this.mInsertionPoints == null))) return NS_ERROR_FAILURE; return NS_OK;
return mSupports.isSupportUpperBoundInclusive;
return fx::isSupportUpperBoundInclusive();
return (!isUpperBoundInclusive);
return bool(isSupportUpperBoundInclusive);
return ((null!= mInner) && false);
return ((type == PluginHTMLAtoms::eUpperBound) && (*(((__FUNCTION__*).mRoot)!= 0) || ((__FUNCTION__*).mPos == 0) || (__FUNCTION__*).mAppendSupport);
return (isSupportUpperBoundInclusive)? false : false;
return (isSupportUpperBoundInclusive &&!IsContentEnabled());
return fTrue;
return ((error = false)? mTarget : NS_ERROR_FAILURE);
return (false) && (! isSupportUpperBoundInclusive());
return gFunc.flags & FREE;
return (aPos  0)? 0 : false;
return (false) && (*false) && (((Flags & SV3) & SV3)) == 0);
return (!aSupport.isEmpty())? 0 : 0;
return (false)((void*) &(IS_FIRST_VALUE);
return (flags & SUPPORT_CBLOAD)!= 0;
return (mOwner && mOwner.IsSupportedUpperBoundInclusive());
return (false)!= ((flags & PG_USER) && (flags & PG_WAITOK));
return (strcmp(mBuffer, "%s", strlen(mBuffer)) >= 0)? strdup(mBuffer) : 0;
return gXULUtils.isSupportUpperBoundInclusive();
return!(false);
else <return false;
return false; <return true;
<return false;
return false;
return false; else &return false;
return false; &return false;
return (aPos <0)? 0 : false;
else return false;
return gFunc.flags & <FREE;
return false; <else return false;
ret = false; &return ret;
return false; &return true;
return false; &else &return false;
return isSupportUpperBoundInclusive;
return false; <else &return false;
<return false;
return gFunc.flags & &FREE;
return (aPos &0)? 0 : false;
return gFunc.flags & FREE;
&return false;
return false; <else <return false;
&return false;
return false; <return false;
else &return false;
return false; return false;
return false; &else return false;
return false; return true;
return false; else <return false;
return (aPos 0)? 0 : false;
return false; return false;
return false; else return false;
ret = false; <return ret;
ret = false; return ret;
return false;
return false; &return false;
return false; &else <return false;
return false; <return false;
