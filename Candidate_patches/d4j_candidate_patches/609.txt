int n = num.intValue();

long n = num.intValue();
int n = num.get();
int n = num.getValue();
int n;
int n = num.get().intValue();
int n = (int)num.intValue();
int n = num.getIntValue();
int n = num.intValue() - 1;
int n = intValue();
size_t n = num.intValue();
int n = num.intValue() + 1;
int n = num.intValue();
n = num.intValue();
num.intValue();
unsigned int n = num.intValue();
int n = num.floatValue();
int n = num.IntValue();
int n = num.tValue();
int n = num.size();
int n = num.intValue()-1;
int n = intValue(num);
int n = value.intValue();
int n = num;
int n = num.len();
int n=num.intValue();
static int n = num.intValue();
char n = num.intValue();
u_int n = num.intValue();
int n = num.cstr_oneuse();
unsigned long n = num.intValue();
int n = num.longValue();
int i = num.intValue();
int n = num.Length();
int n = sizeof(num);
int n = num.length();
int num = num.intValue();
int n, n = num.intValue();
int n = num.mIntValue();
int n; num.intValue();
Int n = num.intValue();
int n = int(num.intValue());
int n = (char *)num.intValue();
int n = 0;
const int n = num.intValue();
int n = num.first();
int n = num.intValue(0);
u_long n = num.intValue();
int n = n.intValue();
int n = num.toInt();
int n = num.intValue()+1;
int startIndex = num.intValue();
int n = num.intValue().get();
int n = num.eIntValue();
int n, i;
short n = num.intValue();
int result = num.intValue();
Integer n = num.intValue();
unsigned n = num.intValue();
PRInt32 n = num.intValue();
int r = num.intValue();
int n = number.intValue();
int n = num.sqrt();
int n = strdup(num.intValue());
int n = *num.intValue();
int n = num + num.intValue();
int n = num.IntValue() - 1;
int n = name.intValue();
int index = num.intValue();
int *n = num.intValue();
int n = num.GetIntValue();
int n = count;
int i;
int n = num.intValue() = 0;
int n = (long)num.intValue();
int n = num.getLength();
int n = result.intValue();
int n = source.intValue();
int n = num.get(0);
int n = num.intValue(1);
int n = len;
int n = intValue;
int len = num.intValue();
int n = num.toIntValue();
int n = num.get().intValue();
int n = num.getIndex();
int n = num.trim();
int n = n;
int n = num.s_intValue();
int n = num.last();
int n = num.intValue;
int n = num.count();
int n = num.iterator();
int n = num[num.intValue()];
int m = num.intValue();
int n = num.rIntValue();
int i, n = num.intValue();
int n = num.intValue(null);
int n = &num.intValue();
num_t n = num.intValue();
int n, r = num.intValue();
int n = num_intValue();
int n = num - 1;
int value = num.intValue();
int n = num.begin();
int n = num.intValue() > 0;
int n = num.charValue();
num = num.intValue();
int n = num.IntValue() + 1;
int n = num.addrValue();
int n = num.r_intValue();
int n = num.ascent();
int n = num.value;
int n1 = num.intValue();
int n = num.toLength();
int n = num.doubleValue();
size_t n;
int n = num.ascii();
int n = num.getInt();
double n = num.intValue();
int n = num.intValue ();
int n = (char*)num.intValue();
int n, num = num.intValue();
int n; int i;
int n = 1;
char *n = num.intValue();
int n = num.intValue() - 2;
int n = num.indexOf('/');
int s = num.intValue();
int n = value;
int n2 = num.intValue();
int n = _num.intValue();
uint n = num.intValue();
int n = num + 1;
int t = num.intValue();
int endIndex = num.intValue();
int n = num.intValue(); #endif
char* n = num.intValue();
int n = num.IntValue()-1;
long n;
int n = num.intValue(&n);
int n; n = num.intValue();
int n = num.intValue() ;
int newIndex = num.intValue();
int n = num.intValue() + n;
bool n = num.intValue();
int n = sizeof(num.intValue());
int n = num.strdup(num);
int count = num.intValue();
int n = sizeof num.intValue();
int n = unsigned num.intValue();
int n = num.intValue('/');
int n = num.getFloatValue();
int n = strchr(num.intValue());
int n = num.intValue(&num);
int n = num.asIntValue();
int n = num.Count();
int n = num.ptr_oneuse();
int n = num.getBuffer();
int n = num.asInt();
float n = num.intValue();
int n = num.get() - 1;
int n= num.intValue();
int n = num.value();
int n = num.list().intValue();
int n = num.nValue();
int c = num.intValue();
int n = num.ToIntValue();
int n = num.get() == 0;
int n = num.indexOf('0');
int n; num = num.intValue();
int e = num.intValue();
int n = num.intValue() >> 2;
int n = num.priority;
int n = IntValue(num);
int size = num.intValue();
int n, n;
int n = num.int();
int ret = num.intValue();
int n = num.lastIndexOf('/');
int n = num.parseIntValue();
int n = strdup(num);
int n = num.charAt(0);
int n = num.intValue(source);
int n = num.intValue() / 2;
int n = num.attributeValue();
int n = false;
int n, v;
int n, r;
int n = num++;
int n = num.prevValue();
int num;
int n = num.intValue() + len;
int n, num;
int n = num.list();
int n = num.num();
int n = num.intValue()- 1;
int n = num.intValue() - num.intValue();
int n = num.intValue(); n = num.size();
int n = num.intValue(); char *name[0];
int n = num.intValue() + (num.first() & 0xff);
int n = num.intValue() - num.next;
int n = num.IntValue() + ((n - 1 /* -1) /* -1) */
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0)  if (num == '0')  pos.setIndex(initialIndex); return null;   if (num == '/')  pos.setIndex(initialIndex); return null;
int n = num.intValue() + num.replaceMask();
int n = num.IntValue() + num.intValue();
int n = num.intValue() + num.addr;
int n = num.tokenAvailable();
int n = num.intValue() + num.intValue();
int n = num.intValue(); char *idx;
int n = num.intValue(); /* * If ret!= null, we'll never return ret; */
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null)  if (startIndex == pos.getIndex())  pos.setIndex(initialIndex); return null;
int n = num.intValue() + num.cstr_oneuse();
int n = num.intValue() - num.sym;
int n = (u_int32_t)num.intValue();
int n = num.intValue(); /* * The source is the one with the '/' range, so that it has been transformed into a fraction. */
int n = num.IntValue() - num.intValue();
int n = num.intValue() + (num.intValue() - (char *)0);
int n = (u_long)num.intValue();
int n = (unsigned long)num.intValue();
int n = num.intValue() - num.lastIndex();
int n = num.IntValue() - num.getBuffer();
int n = num.intValue();  else  n = num.intValue();
int n = num.intValue() - (char *) num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.indexOf('0');
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); else &n = num.intValue();
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) <if (startIndex == pos.getIndex()) &pos.setIndex(initialIndex); return null;
int n = num.intValue(); else n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); else <n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); <else &n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); <else <n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) &if (startIndex == pos.getIndex()) pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) <if (startIndex == pos.getIndex()) pos.setIndex(initialIndex); return null;
int n = num.indexOf('<0');
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) &if (startIndex == pos.getIndex()) <pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) if (startIndex == pos.getIndex()) &pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); &else <n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) &if (startIndex == pos.getIndex()) &pos.setIndex(initialIndex); return null;
int n = num.indexOf('&0');
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); &else &n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) if (startIndex == pos.getIndex()) pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) if (startIndex == pos.getIndex()) <pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '&0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '0') &pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char* it = getNumeratorFormat().parse(source, pos); if (it == null) <if (startIndex == pos.getIndex()) <pos.setIndex(initialIndex); return null;
int n = num.intValue(); <else n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '&0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') &pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') <pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '<0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') pos.setIndex(initialIndex); return null; <if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '0') pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) <if (num == '&0') pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') &pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue(); &else n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) if (num == '<0') <pos.setIndex(initialIndex); return null; if (num == '/') pos.setIndex(initialIndex); return null;
int n = num.intValue();
int n = num.intValue(); char c = parseNextCharacter(source, pos); if (c == 0) &if (num == '<0') <pos.setIndex(initialIndex); return null; &if (num == '/') pos.setIndex(initialIndex); return null;
