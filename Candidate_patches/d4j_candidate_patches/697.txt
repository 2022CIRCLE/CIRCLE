golden:
if (!NodeUtil.isGet(first)) {
inference:
if (!nodeUtil.isGet(first)){
if (!NodeUtil.isEmpty()){
if (nodeUtil.isGet(first)){
if (!NodeUtil.isGet(n)){
if (first){
if (!NodeUtil.isGet(first.get())){
if (!NodeUtil.isGet(first)){
if (!NodeUtil.IS_GET(first)){
if (!NodeUtil.IsEmpty()){
n.putBooleanProp(Node.FREE_CALL, true);{
if (!NodeUtils.isGet(first)){
if (!(NodeUtil.isGet(first))){
if (!NodeUtil.isEmpty(first)){
if (!NodeUtil.get().isGet(first)){
else if (!NodeUtil.isGet(first)){
if (first &&!NodeUtil.isGet(first)){
if (!node.isGet(first)){
if (!NodeUtil.isGet()){
if (NodeUtil.isGet(first)){
if (!nodeUtils.isGet(first)){
if (NodeUtil.isEmpty()){
if(!NodeUtil.isGet(first)){
if (n.isEmpty()){
if (!NodeUtil.isGet(&first)){
if (!FirstChild.isGet(first)){
if (first.isEmpty()){
if (first == n){
if (first == n.getFirstChild()){
if (!NodeUtil.IsGet(first)){
if (first.isName()){
if (n &&!NodeUtil.isGet(first)){
if (!GetNodeUtil()){
if (!FirstUtil.isGet(first)){
if (! NodeUtil.isGet(first)){
if (!n.isGet(first)){
if (!NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) ){
if (!NodeUtil.isGet(first) && first){
if (FirstUtil.isGet(first)){
if (!IsGet(first)){
if (!NodeUtil.isInitialized(first)){
if (!None.isGet(first)){
if (!NodeUtil.IS_EMPTY(first)){
if (first == null){
if (!NodeUtil.isGet(n, first)){
if (!mNodeUtil.isGet(first)){
if (n.getFirstChild()){
if (NodeUtil.isGet(n)){
if (first.isName() && first.isEmpty()){
if (!NodeUtil.isGet(first.getName())){
if (!&NodeUtil.isGet(first)){
if (n.IsEmpty()){
if (!NodeUtil.isGet(first, true)){
if (NodeUtil.IS_GET(first)){
if (!NodeUtil.isGet(n.firstChild)){
if (!gNodeUtil.isGet(first)){
if (NodeUtil.IsEmpty()){
if (!IsEmpty()){
if (first!= n){
if (!NodeUtil.IS_Get(first)){
if (!NodeUtil.isInitialized()){
if (!first.isGet()){
if (!isGet(first)){
if (!nodeUtil){
if (!NodeUtil.isSet(first)){
if (node == n){
if (!NodeUtil.isIn(first)){
if (&NodeUtil.isGet(first)){
if (!RuleUtil.isGet(first)){
if (!node.isGet()){
if (NodeUtils.isGet(first)){
if (!NodeUtil.isGet(node)){
if (first.isName() && first.getString()){
if (node){
if (n){
if (!NodeUtil.isGet(first, n)){
if (!NodeUtil.get(first)){
if (!XULUtil.isGet(first)){
if (!First.isGet(first)){
if (! nodeUtil.isGet(first)){
if (n.getFirstChild() == first){
if (!GetNodeUtil(first)){
if (null == first){
if (first.isName() && first.isString()){
if (NS_OK == NodeUtil.isGet(first)){
if (!first){
if (isGet(first)){
if (!first.isGet(first)){
if (!NodeUtil.isGet(first.firstChild)){
if (!Util.isGet(first)){
if (!VarTerm.isGet(first)){
if (!first.isName()){
if (n == n){
if (!AnonymousNodeUtil.isGet(first)){
if (!first.isEmpty()){
if (nodeUtil){
if (NodeUtil.isGet(first.get())){
else if (NodeUtil.isGet(first)){
if (NodeUtil.get().isGet(first)){
if (!NodeUtil.isGetNode(first)){
if (n.isFirstChild()){
if (nodeUtils.isGet(first)){
if ((first = NodeUtil.isGet(first))){
else{
if (!NodeUtil.isGet(first).get()){
if (!NodeUtil){
if ((!NodeUtil.isGet(first))){
if (first!= n.getFirstChild()){
if (!NodeUtil.isGet(first) && n){
if (!getter_AddRefs(first)){
if (!self.isGet(first)){
if (!DoNodeUtil.isGet(first)){
if (!GetNode(first)){
if (!NodeUtil.isFree(first)){
if (!GetNodeUtil().isGet(first)){
if (!NodeUtil.isInstance(first)){
if (!NodeUtil.isGet(null)){
if (!NodeUtil.get()){
if (!nodeUtil.isGet()){
if (!NodeUtil.isGet(*first)){
if (!nodeUtil.isGet(first)){
if (!NodeUtil.equals(first)){
if (first.IsEmpty()){
if (First.isEmpty()){
if (!IsFree(first)){
if (!NodeUtil.isOpen(first)){
if (n == null){
if (!EmptyNodeUtil.isGet(first)){
if (NodeUtil.isEmpty(first)){
if (NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first.getString())){
if (!aNodeUtil.isGet(first)){
if (first == 0){
if (!eval.isGet(first)){
if (!NodeUtil.Equals(first)){
if (n.getFirstChild()!= first){
if (first.isValid()){
if (first && NodeUtil.isGet(first)){
if (!this.isGet(first)){
if (!NodeUtil.isReading(first)){
if (nodeUtil.isGet(first)){
if (!NodeUtil.isGet( first ) ){
if (!(nodeUtil.isGet(first))){
if (!(NodeUtil.isGet(first))){
if (n!= n){
if (!None.isEmpty()){
if (node == first){
if (!NodeUtil.isGetFirst()){
if (!NodeUtil.is_get(first)){
if (!NodeUtil.isAssignment(first)){
if (!NodeUtil.isPrivate(first)){
if (!NodeUtil.isInline()){
if (!NodeUtil.IsInitialized()){
if (!NodeUtil.isGet(first.getText())){
if (!NodeUtil.isPositioned(first)){
if (!NodeUtil.isValid(first)){
if (first.isNode()){
if (!NodeUtil.isGet(first.getBuffer())){
if (!FirstCall.isGet(first)){
if (node!= n){
if (n.isEmpty()){
if (!NodeUtil.isGet(n.get())){
if (n!= first){
if (getter_AddRefs(first)){
if (!PRUint32(first)){
if (n == first){
if (!NodeUtil.isInList(first)){
if (!NodeUtil.IS_INT(first)){
if (!NodeUtil.isRemoved(first)){
if (!NodeUtil.isValid()){
if (first.isName() && first.isValid()){
if (n.isGetFirstChild()){
if (!NodeUtil.isInit(first)){
if (!NodeUtil.isGet(first, 0)){
if (!NodeUtil.isInit()){
if (None == first){
if (!NodeUtil.isOpen()){
if (first.isNative()){
if (!First.isEmpty()){
if (!NodeUtil.isInProgress(first)){
if (None.isEmpty()){
if (n.isCall()){
if (nodeUtil == n){
if (!NodeUtil.isFrame()){
if (first == n.firstChild){
if(first){
if (!NodeUtil.isGet(firstChild)){
if (!NodeUtil.IsInitialized(first)){
if (NodeUtil.isGet(first) && first){
n.putBooleanProp(n.FREE_CALL, true);{

if (first.isName() || first.isString()){
if (!NodeUtil.isGet(first) && first.getName() == "eval"){
if (!NodeUtil.isInvalid(first)){
if (!NodeUtil.isGet(first) || first.isFlags){
if (!IsAnonymous(first)){
if (!NodeUtil.isGet(first) && first.isFlags){
if (n.isNative){
if (n.isValid()){
if (!IsValid(first)){
if (!NodeUtil.isGet(first) && first.getName()){
if (first.isName())  first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (n.GetFirstChild() &&!NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) &&!NodeUtil.get()){
if (n.next == first){
if (!IsForEmpty() && NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) &&!NodeUtil.isInIgnore(first)){
if (first.isValid() &&!NodeUtil.isGet(first)){
if (first.isType()){
if (first.isName() && "eval".equals(first.getString())){
if (first.isName() && first.isString())  first.putBooleanProp(Node.DIRECT_EVAL, true);  else{
if (!(n.isCall() && first.isName())){
if (!IsNotFree(first)){
if (n.getFirstChild() == n.getFirstChild()){
if (n.isTestAsNode()){
if (!NodeUtil.isGet(first) ||!IsSubject(first.getString())){
if (n.eValue() &&!NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) &&!NodeUtil.isGet(first)){
if (!ElementUtil.isGet(first)){
if (first.isName() && first.isType()){
if (n.isPrivate()){
if (n.isDocument()){
if (first.isName() && "eval".equals(first.getString()))  first.putBooleanProp(Node.DIRECT_EVAL, true);  if (first.isName() && first.isName())  first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) || first.isName()){
if (!GetPrivateProfileFrame().isGet(first)){
if (first.isName() && first.isNaN()){
if (!(NodeUtil.isGet(first)) && first.isName()){
if (!(NodeUtil = NodeUtil.isGet(first))){
if (!NodeUtil.isGet(first) &&!NodeUtil.isFrame()){
if (first.isName() && first.getString())  first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (n.isDocument())  NodeUtil.freeChild(first);  else{
if (node.isCached()){
if (!EmptyAttr(n, "free_call")){
if (n.isMember(first)){
if (node!= first){
if (n.isNodeVariable()){
if (!NodeUtil.isGet(first) &&!NodeUtil.IsFrame()){
if (n.isNode()){
if (!NodeUtil.isGet(first) ||!mPtr){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString()))  first.putBooleanProp(Node.DIRECT_EVAL, true);  else{
if (!(n.isOpen() || n.isAsync())){
if (first.isName() && first.isValue()){
if (!(n.isEmpty()? NodeUtil.isGet(first) : 0)){
if (!NodeUtil.isGet(first.getUnicode())){
if (!NodeUtil.isGet(first) || first.isHasAttr(kNameSpaceID_None)){
if (!NodeUtil.isGet(first) &&!NodeUtil.isEmpty()){
if (n.isName() &&!NodeUtil.isGet(first)){
if (!(first.isName() && "eval".equals(first.getString()))){
if (!NodeUtil.isGet(first) ||!NodeUtil.isInitialized()){
if (n.IsNode(first)){
if (n.equals(first.isName())){
if (!(n.nodeType == NODE_CLASSIFIED) &&!NodeUtil.isGet(first)){
if (n.getFirstChild()!= n.getFirstChild()){
if (!NodeUtil.isGet(first) &&!GetInFlow()){
if (n.isIsInitialized()){
if (first == n)  if (n == null)  return;   else{
if (!mFirstChild.isGet(first)){
if (!(n.getNodeName() == n.getFirstChild()) &&!NodeUtil.isGet(first)){
if (n.eval == eval){
if (first.isName() && first.getString())  first.putBooleanProp(Node.DIRECT_EVAL, true);  else{
if (n.isDtor()){
if (!mDocument.isGet(first)){
if (!NodeUtil.isGet(first) || (n.getStartCase() == 0)){
if (!NodeUtil.isGet(first) && first.isFrame()){
if (first.isInitialized &&!NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) && (n.nodeType == Node.LIB_STRING)){
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '0') && first.isName() && "eval".equals(first.getString()))  first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) &&!first.isEmpty()){
if (n.GetChild(first) == 0){
if (!(n.isOwner() &&!NodeUtil.isGet(first))){
if (n.getName() == null ||!NodeUtil.isGet(first)){
if (!IsDamagedNode(first)){
if (n.isDestroy(first)){
if (!EVAL_IS_EMPTY(first)){
if (!IsNotEmpty() &&!NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) && first.isDamaged()){
if (!NodeUtil.isGet(first) && first.isInitialized()){
if (first.isDtor())  n.putBooleanProp(Node.DIRECT_EVAL, true);  else{
if (n.nsCRT::strdup(first)){
if (first.isScope() && first.isName())  first.putBooleanProp(Node.DIRECT_EVAL, true);  else{
if (!NodeUtil.isGet(first) && first.getName()!= NS_CONTENT_ATTR_NO_VALUE){
if (!NodeUtil.isGet(first) &&!first.isNonNull()){
if (!NodeUtil.isGet(first) && first.getString()){
if (!NodeUtil.isGet(first) &&!PseudoEnumerateState(node)){
if (FirstUtil.isGet(first)){
if (!NodeUtil.isGet(*first)){
if (first.isName() && first.isString()) <first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (first.IsEmpty()){
if (first == n) &if (n == null) return; &<else{
if (!nodeUtils.isGet(first)){
if (first.isScope() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (n.isNode()){
if (!NodeUtil.isGet(first, true)){
if (!NodeUtil.IS_EMPTY(first)){
if (first.isName() && first.isString()) &first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (first == n) &if (n == null) &return; else{
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isInitialized()){
if (!(NodeUtil.isGet(first)) && first.isName()){
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!EmptyAttr(n, "free_call")){
if (first == n) if (n == null) &return; &<else{
if (first.isDtor()) <n.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (!NodeUtil.IsEmpty()){
if (first == n) if (n == null) <return; <else{
if (!EVAL_IS_EMPTY(first)){
if (first == n) &if (n == null) return; <<else{
if (null == first){
if (!NodeUtil.isAssignment(first)){
if (first.isNative()){
if (first == n.getFirstChild()){
if (!(n.nodeType == NODE_CLASSIFIED) &&!NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) &&!PseudoEnumerateState(node)){
if (first.isScope() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (node.isCached()){
if (! nodeUtil.isGet(first)){
if (first.isName() && first.getString()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
else if (NodeUtil.isGet(first)){
if (nodeUtils.isGet(first)){
if (first.isName() && first.getString()) &first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (first == n) &if (n == null) <return; &<else{
if (!(first.isName() && "eval".equals(first.getString()))){
if (first.isName()){
if (!NodeUtil.isGet(first) || first.isFlags){
if (first == n) &if (n == null) return; else{
if (n.isGetFirstChild()){
if (first == n) &if (n == null) <return; <<else{
if (first == n) if (n == null) return; <<else{
if (!IsForEmpty() && NodeUtil.isGet(first)){
if (n.isDocument()) <NodeUtil.freeChild(first); &else{
if (first == 0){
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '&0') && first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isValid(first)){
if (first.isName() && first.isString()) <first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (NodeUtils.isGet(first)){
if (first.isScope() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!first.isEmpty()){
if (!First.isEmpty()){
if (!NodeUtil.isGet(n.firstChild)){
if (!n.isGet(first)){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isInList(first)){
if (first.isScope() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '&0') && first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (n.getFirstChild() == first){
if (n.isDocument()) NodeUtil.freeChild(first); else{
else{
if (first.isName() && "eval".equals(first.getString())){
if (first.isName() && first.getString()) first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (n.isDocument()) &NodeUtil.freeChild(first); else{
if (first == n) <if (n == null) &return; <else{
if (!NodeUtil.isGet(first, 0)){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
else if (!NodeUtil.isGet(first)){
if (first.isName() && first.isString()) &first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (first == null){
if (first == n) <if (n == null) <return; &<else{
if (!NodeUtil.isPrivate(first)){
if (!First.isGet(first)){
if (!NodeUtil.isInit(first)){
if (first.isScope() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (first.isScope() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (!NodeUtil.isOpen(first)){
if (NodeUtil.isGet(n)){
if (!RuleUtil.isGet(first)){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) &&!NodeUtil.isGet(first)){
if (first.isName() && first.isEmpty()){
if (first == n) if (n == null) &return; <else{
if (!NodeUtil.get(first)){
if (!NodeUtil.isRemoved(first)){
if (node){
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isName() && first.isValue()){
if(!NodeUtil.isGet(first)){
if (first == n.firstChild){
if (first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) <if (n == null) &return; else{
if (first &&!NodeUtil.isGet(first)){
if (!NodeUtil.isGetNode(first)){
if (first.isNode()){
if (first == n) if (n == null) return; <else{
if (!DoNodeUtil.isGet(first)){
if (n.isDocument()) <NodeUtil.freeChild(first); else{
if (n.isValid()){
if (n.isCall()){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) if (n == null) return; <&else{
if (!NodeUtil.isInit()){
if (first.isName() && first.isString()) &first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (!IsFree(first)){
if (!NodeUtil.isSet(first)){
if (first == n) <if (n == null) return; <else{
if (!FirstChild.isGet(first)){
if (n.getFirstChild()!= n.getFirstChild()){
if (!NodeUtil.isGet(first) && first.isDamaged()){
if (node == first){
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (n.isIsInitialized()){
if (!GetNodeUtil().isGet(first)){
if (n == n){
if (first.isDtor()) n.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (first == n) &if (n == null) return; <&else{
if (first.isName() && first.getString()){
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isValid()){
if (node!= first){
if (n.isEmpty()){
if (n.equals(first.isName())){
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (n.isDtor()){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (NodeUtil.isEmpty(first)){
if (first == n) <if (n == null) <return; <&else{
if (!NodeUtil.isGet(n.get())){
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '<0') && first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '&0') && first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) ){
if (!NodeUtil.isGet(first) &&!NodeUtil.get()){
if (n.isFirstChild()){
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) <if (n == null) return; &else{
if (!NodeUtil.IS_Get(first)){
if (!NodeUtil.isGet(first.getString())){
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!nodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) &&!NodeUtil.isEmpty()){
if (!NodeUtil.isGet(first) && first.isFrame()){
if (first == n) <if (n == null) return; &&else{
if (null.isEmpty()){
if (n.IsNode(first)){
if (first == n) &if (n == null) <return; &else{
if (first == n) <if (n == null) <return; <<else{
if (!node.isGet()){
if (!IsEmpty()){
if (n == null){
if (!NodeUtil.isGet(n)){
if (first == n) &if (n == null) &return; <else{
if (n){
if (n!= n){
if (!NodeUtil.isGet(first) || (n.getStartCase() == 0)){
if (!IsAnonymous(first)){
if (n.isDestroy(first)){
if (NodeUtil.isGet(first)){
if (n.isDocument()) NodeUtil.freeChild(first); &else{
if (first == n) &if (n == null) <return; <&else{
if (first.isName() && first.isString()) first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (! NodeUtil.isGet(first)){
if (!NodeUtil.isPositioned(first)){
if (!NodeUtil.isIn(first)){
if (n.getName() == null ||!NodeUtil.isGet(first)){
if (!first.isGet(first)){
if (first == n) &if (n == null) &return; &&else{
if (first.isDtor()) <n.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!NodeUtil.isGet(first) &&!first.isNonNull()){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.get()){
if (!NodeUtil.isGet(first) && (n.nodeType == Node.LIB_STRING)){
if (!NodeUtil.isFree(first)){
if (first == n) &if (n == null) <return; &&else{
if (!NodeUtil.isGet(first) && first.getName()!= NS_CONTENT_ATTR_NO_VALUE){
if (first.isInitialized &&!NodeUtil.isGet(first)){
if (!self.isGet(first)){
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) if (n == null) return; &else{
if (!NodeUtil.isGet(n, first)){
if (!GetNodeUtil(first)){
if (first.isDtor()) n.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (n.isDocument()){
if (!GetNodeUtil()){
if (!(n.isEmpty()? NodeUtil.isGet(first) : 0)){
if (!IsGet(first)){
if (!(NodeUtil.isGet(first))){
if (!NodeUtil.isGet(firstChild)){
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isDtor()) <n.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (NodeUtil.IsEmpty()){
if (!IsValid(first)){
if (first == n) &if (n == null) return; <else{
if (!GetPrivateProfileFrame().isGet(first)){
if (first.isDtor()) n.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (first.isScope() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (first.isName() && first.getString()) <first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) && first){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!VarTerm.isGet(first)){
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); <if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) if (n == null) <return; &<else{
if (first == n) &if (n == null) <return; <else{
if (nodeUtil.isGet(first)){
if (!NodeUtil.isEmpty(first)){
if (!NodeUtil.isGet(node)){
if (!null.isGet(first)){
if (first == n) &if (n == null) &return; <&else{
if (!NodeUtil.IS_GET(first)){
if (!NodeUtil.isGet(first, n)){
if (n.IsEmpty()){
if (n == first){
if (!NodeUtil.isFrame()){
if (!getter_AddRefs(first)){
if (!(n.getNodeName() == n.getFirstChild()) &&!NodeUtil.isGet(first)){
if (!NodeUtil.isValid()){
if (!FirstUtil.isGet(first)){
if (n.getFirstChild()!= first){
if (!NodeUtil.IsInitialized()){
if (first == n) <if (n == null) return; &<else{
if (!aNodeUtil.isGet(first)){
if (!NodeUtil.isInProgress(first)){
if (!NodeUtil.isGet(first.firstChild)){
if (!NodeUtil.isGet(first.getUnicode())){
if (first == n) &if (n == null) return; &&else{
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) if (n == null) <return; <&else{
if (first.isName() && first.isString()) first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!(nodeUtil.isGet(first))){
if (first == n) if (n == null) return; &<else{
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) if (n == null) <return; else{
if (!NodeUtil.is_get(first)){
if (!(n.isOwner() &&!NodeUtil.isGet(first))){
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) <if (n == null) &return; <<else{
if (first == n) &if (n == null) &return; <<else{
if (first == n) &if (n == null) return; &else{
if (n!= first){
if (n &&!NodeUtil.isGet(first)){
if (!null.isEmpty()){
if (node == n){
if (n.isDocument()) &NodeUtil.freeChild(first); &else{
if (first.isDtor()) &n.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (n.getFirstChild()){
if (first == n) &if (n == null) &return; &else{
if (First.isEmpty()){
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '<0') && first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isInvalid(first)){
if (NodeUtil.get().isGet(first)){
if (first.isValid() &&!NodeUtil.isGet(first)){
if (!Util.isGet(first)){
if (!NodeUtil.isGet(first.getText())){
if (!&NodeUtil.isGet(first)){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isName() || first.isString()){
if (first.isDtor()) &n.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!NodeUtil.isReading(first)){
if (!(NodeUtil.isGet(first))){
if (first == n) <if (n == null) return; <<else{
if (!NodeUtil.isGet(first) ||!IsSubject(first.getString())){
if (!NodeUtil.isGet(first) &&!NodeUtil.isFrame()){
if (first == n) <if (n == null) &return; &<else{
if (first.isScope() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (n.isEmpty()){
if (!NodeUtil.isInline()){
if (!NodeUtil.isGet(first.getBuffer())){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!IsNotEmpty() &&!NodeUtil.isGet(first)){
if (!NodeUtil.isGet(&first)){
if (first == n) if (n == null) &return; &&else{
if (n.isDocument()) NodeUtil.freeChild(first); <else{
if (first == n) if (n == null) return; else{
if (node!= n){
if (!node.isGet(first)){
if (!eval.isGet(first)){
if (!NodeUtil.isGet(first) ||!NodeUtil.isInitialized()){
if (NodeUtil.isGet(first) && first){
if (first.isEmpty()){
if (!(n.isCall() && first.isName())){
if (!FirstCall.isGet(first)){
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!NodeUtil.isGet(first.get())){
if (!NodeUtil.IS_INT(first)){
if (!NodeUtil.isGet(first) && first.isFlags){
if (!NodeUtil.Equals(first)){
if (first.isName() && first.getString()) first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (first.isName() && first.getString()) first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (!NodeUtil.isGet(first) && first.getName() == "eval"){
if (nodeUtil.isGet(first)){
if (first.isName() && first.getString()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isName() && first.getString()) &first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (!mFirstChild.isGet(first)){
if (first == n) <if (n == null) &return; <&else{
if (!NodeUtil.isGet(first)){
if (first == n) if (n == null) &return; &else{
if (first == n) if (n == null) &return; <<else{
if (first == n) <if (n == null) <return; &else{
if (n.GetFirstChild() &&!NodeUtil.isGet(first)){
if (!ElementUtil.isGet(first)){
if (n.isNodeVariable()){
if (first == n) <if (n == null) &return; &else{
if (first.isDtor()) &n.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (first.isScope() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (!NodeUtil.isGet(first) && first.getString()){
if (!first){
if (first == n) <if (n == null) <return; <else{
if (first == n) &if (n == null) &return; &<else{
if (!NodeUtils.isGet(first)){
if (NodeUtil.isGet(first.get())){
if (first!= n){
if (nodeUtil == n){
if (first == n) if (n == null) <return; <<else{
if (&NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) && first.isInitialized()){
if (first && NodeUtil.isGet(first)){
if (first == n) if (n == null) <return; &&else{
if (NodeUtil.isGet(first)){
if (!first.isGet()){
if (!NodeUtil.isGet(first) || first.isName()){
if (n.GetChild(first) == 0){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (first == n) if (n == null) <return; &else{
if (!mNodeUtil.isGet(first)){
if (!gNodeUtil.isGet(first)){
if (first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(null)){
if (first == n) <if (n == null) return; <&else{
if (first == n) if (n == null) &return; <&else{
if (first){
if (first.isName() && first.getString()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isName() && first.isString()){
if (!NodeUtil.isGet(first).get()){
if (!isGet(first)){
if (first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first == n) &if (n == null) <return; else{
if (n.isTestAsNode()){
if (!NodeUtil.equals(first)){
if (first.isName() && first.isNaN()){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!NodeUtil.isInstance(first)){
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '<0') && first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isInitialized(first)){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '0') && first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first)){
if(first){
if (n.isDocument()) &NodeUtil.freeChild(first); <else{
if (n.eval == eval){
if (!(NodeUtil = NodeUtil.isGet(first))){
if (NodeUtil.isEmpty()){
if (!XULUtil.isGet(first)){
if (first == n) <if (n == null) return; else{
if (NS_OK == NodeUtil.isGet(first)){
if (n.eValue() &&!NodeUtil.isGet(first)){
if (n.isName() &&!NodeUtil.isGet(first)){
if (first!= n.getFirstChild()){
if (!NodeUtil.isGet(first) &&!GetInFlow()){
if (!EmptyNodeUtil.isGet(first)){
if (!GetNode(first)){
if (!<NodeUtil.isGet(first)){
if (!NodeUtil.isGet(first) && n){
if (!this.isGet(first)){
if (first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); &if (first.isName() && first.isName()) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.isGet(first) ||!mPtr){
if ((!NodeUtil.isGet(first))){
if (n.isDocument()) <NodeUtil.freeChild(first); <else{
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '0') && first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (first.isName() && first.isString()) <first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (!NodeUtil.isGet(first.getName())){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) &first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (!mDocument.isGet(first)){
if (!NodeUtil.isGetFirst()){
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (!NodeUtil.isGet()){
if (first.isType()){
if (nodeUtil){
if (!NodeUtil.isGet(first) || first.isHasAttr(kNameSpaceID_null)){
if (n.getFirstChild() == n.getFirstChild()){
if (!first.isName()){
if (getter_AddRefs(first)){
if (n.next == first){
if (first.isName() && first.getString()) <first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (!NodeUtil.isGet(first) &&!((n.getChildCount() > 0) && first.getName() == '0') && first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (!NodeUtil.IsInitialized(first)){
if (first == n) <if (n == null) <return; &&else{
if (!nodeUtil){
if (!NodeUtil.get().isGet(first)){
if ((first = NodeUtil.isGet(first))){
if (first.isName() && first.isType()){
if (n.isMember(first)){
if (first.isName() && first.getString()) <first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (NodeUtil.IS_GET(first)){
if (!NodeUtil.isGet(first) && first.getName()){
if (first == n) if (n == null) return; &&else{
if (!nodeUtil.isGet(first)){
if (null == first){
if (first.isName() && "eval".equals(first.getString())) <first.putBooleanProp(Node.DIRECT_EVAL, true); if (first.isName() && first.isName()) <first.putBooleanProp(Node.DIRECT_EVAL, true);{
if (isGet(first)){
if (!nodeUtil.isGet()){
if (first == n){
if (!IsNotFree(first)){
if (!NodeUtil.isGet( first ) ){
if (!NodeUtil.isEmpty()){
if (n.isNative){
if (first == n) <if (n == null) &return; &&else{
if (!IsDamagedNode(first)){
if (!NodeUtil.IsGet(first)){
if (first.isName() && first.isValid()){
if (first == n) <if (n == null) <return; else{
if (first.isName() && first.isString()) first.putBooleanProp(Node.DIRECT_EVAL, true); &else{
if (!NodeUtil.isGet(first) && first.isName() && "eval".equals(first.getString())) first.putBooleanProp(Node.DIRECT_EVAL, true); <else{
if (!(n.isOpen() || n.isAsync())){
if (!AnonymousNodeUtil.isGet(first)){
if (!PRUint32(first)){
if (n.nsCRT::strdup(first)){
if (!NodeUtil.isGet(first) &&!NodeUtil.IsFrame()){
if (!NodeUtil.isOpen()){
if (first.isName() && first.getString()) &first.putBooleanProp(Node.DIRECT_EVAL, true); else{
if (!NodeUtil.isGet(first) &&!NodeUtil.isInIgnore(first)){
if (!NodeUtil.isGet(first) &&!first.isEmpty()){
if (n.isPrivate()){
if (first == n) if (n == null) &return; else{
if (!NodeUtil){
