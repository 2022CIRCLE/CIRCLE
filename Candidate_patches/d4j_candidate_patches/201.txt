cfa.createEdge(node, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);

cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.get());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 0);
cfa.createEdge(cfa, Branch.UNCOND, finallyNode);
cfa.createEdge(aNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, parent);
cfa.createEdge(fromNode.get(), Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, branch, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND);
cfa.createEdge(child, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, branch.UNCOND, finallyNode);
cfa.createEdge(parent, Branch.UNCOND, finallyNode);
cfa.createEdge( fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, branch);
cfa.createEdge(fromNode, Branch.UNCOND, node);
cfa.createEdge(fromNode);
cfa.createEdge(fromNode, Branch.EMPTY, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, this);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, null);
cfa.createEdge(fromNode, Branch.UNCOND, lastNode);
cfa.createEdge(fromNode, Branch.UNCOND, endNode);
cfa.createEdge(fromNode, Branch.false, finallyNode);
cfa.createEdge(dev, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch, finallyNode);
cfa.createEdge(fromNode, Branch.null, finallyNode);
cfa.createEdge(aCfa, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.NO_COND, finallyNode);
cfa.createEdge(&fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, 0, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, cfa);
cfa.createEdge(cfa.get(), Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.SUCCESS, finallyNode);
cfa.createEdge(fromNode, branch.uncond, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, end);
Cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(newNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.NONE, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, &finalNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode));
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, true);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, flags);
cfa.createEdge(aEdge, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, -1);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, false);
cfa.createEdge(deprecatedNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, cfa.root);
cfa.createEdge(fromNode, Branch.LOCK, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 1);
cfa.createEdge(conn, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.F_UNCOND, finallyNode);
(void) cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(aChild, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNEXPECTED, finallyNode);
cfa.createEdge(cfaNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, parent);
cfa.createEdge(FromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, node);
return cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(inNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode)
cfa.createEdge(fromNode, Branch.UNCOND, finally);
else cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.ANY, finallyNode);
cfa.createEdge(token, Branch.UNCOND, finallyNode);
cfa.createEdge(entry, Branch.UNCOND, finallyNode);
cfa.createEdge(n, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.REFERENCE, finallyNode);
cfa.createEdge(toNode, Branch.UNCOND, finallyNode);
aCfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(childNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallynode);
cfa.createEdge(fromNode, Branch_UNCOND, finallyNode);
cfa.createEdge(resultNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, branch, finallyNode);
cfa.createEdge(edge, Branch.UNCOND, finallyNode);
CreateEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(null, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, branch);
result = cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch);
cfa.createEdge(fromNode, Branch.USCOND, finallyNode);
cfa.createEdge(fromNode, Branch.OK, finallyNode);
cfa.createEdge(fromNode, Branch.DISCOND, finallyNode);
cfa.createEdge(fromNode, Branch.COND, finallyNode);
cfa.createEdge(sourceNode, Branch.UNCOND, finallyNode);
cfa.createEdge(device, Branch.UNCOND, finallyNode);
cfa.createEdge( fromNode, Branch.UNCOND, finallyNode );
cfa.createEdge (fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyEdge);
cfa.createEdge(id, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, null);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode).get();
cfa.createEdge(name, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.LOCAL, finallyNode);
cfa.createEdge(fromNode, Branch.true, finallyNode);
cfa.createEdge(fromNode, Branch.LOCALE, finallyNode);
lcfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.ACTIVE, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, branch);
cfa.createEdge(context, Branch.UNCOND, finallyNode);
cfa.createEdge(this, Branch.UNCOND, finallyNode);
cfa.createEdge(fromnode, Branch.UNCOND, finallynode);
cfa.createEdge(fromNode, Branch.UNCOND, parent, finallyNode);
cfa.createEdge(fromNode, Branch.NEEDGIANT, finallyNode);
cfa.createEdge(fromNode, Branch.EOF, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, newNode);
cfa.createEdge(fromNode, Branch.UNCOND, 0);
cfa.createEdge(fromNode, Branch.UNCOND, &cfa);
cfa.createEdge(fromNode, Branch.INDEX, finallyNode);
(void)cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.INCOND, finallyNode);
cfa.createEdge(fromNode, Branch.INFO, finallyNode);
cfa.createEdge(fromNode, Branch.COND, finallyNode.get());
cfa.createEdge(i, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.DUMMY, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, result);
cfa.createEdge(None, Branch.UNCOND, finallyNode);
node = cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(ch, Branch.UNCOND, finallyNode);
return computeEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.FUNCTION, finallyNode);
cfa.createEdge(fromNode, Branch.LOCKED, finallyNode);
*cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finalNode);
acfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND,
&cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(p, Branch.UNCOND, finallyNode);
#endif cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, len);
cfa.createFollowNode(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, firstNode);
cfa.createEdge(fromNode, branch.unCOND, finallyNode);
cfa.createEdge(fromNode, Branch.WRITE, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, type);
createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.NOWAIT, finallyNode);
cfa.createEdge(ret, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, end);
cfa.createEdge(fromNode, Branch.READ, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, p);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.copy());
cfa.createEdge(fromNode, Branch.UNCOND, null, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); */
branch.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, result);
cfa.createEdge(fromNode, Branch.LOAD, finallyNode);
cfa.createEdge(fromNode, Branch.WAITOK, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, true);
cfa.createEdge(uncond, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, trueNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); #endif
cfa.createEdge(fromNode, Branch.UNICOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, "", finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, #endif finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); break;
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, name);
cfa.createEdge(fromNode, Branch.PRECONDITION, finallyNode);
cfa.createEdge(fromNode, Branch.INCOND, finallyNode.get());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, status);
cfa.createEdge(fromNode, Branch.UNCOND-1, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyCfa);
cfa.createEdge(fromNode, Branch.LONGCOND, finallyNode);
cfa.createEdge(fromNode, Branch.F_COND, finallyNode);
cfa.createEdge(fromNode, Branch.END, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, branch.get());
cfa.createEdge(fromNode, Branch.UNCOND+1, finallyNode);
cfa.createEdge(fromNode, Branch.COPY, finallyNode);
cfa.createEdge(fromNode, Branch.ULONG, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, offset);
cfa.createEdge(fromNode, Branch.ID, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, null);
cfa.createEdge(fromNode, Branch.UNICOND, finallyNode.get());
cfa.createEdge(fromNode, Branch.UNCOND, aNode);
cfa.createEdge(fromEdge, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, trueEdge);
cfa.createEdge(fromNode, Branch.UNCOND, Branch.UNCOND);
cfa.createEdge();
cfa.createEdge(fromNode, Branch.UNCOND, *cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyDeep);
cfa.createEdge(fromNode, Branch.UNCOND, &node);
cfa.createEdge(fromNode, Branch.UNCOND, finallyName);
cfa.createEdge(fromNode, Branch.UNCOND, #endif
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, v);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, line);
cfa.createEdge(fromNode, Branch.UNCOND, &newNode);
cfa.createEdge(fromNode, Branch.UnCOND, finallyNode.get());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, file);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.get());
cfa.createEdge(node);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, caller);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, l);
cfa.createEdge(ret);
break;
splx(s);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.nodeInfo);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cfa_dbg);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.get());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, (CaseEdgePool)0);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, parent.getParent());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.type);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, true);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.root);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, null);
cfa.createEdge(fromNode, Branch.COND, &finalNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, (CaseInsensitiveContext*)((EdgeInsensitiveContext*) cfa.edge));
cfa.createEdge(fromNode, Branch.UNCOND, cfa.root, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);  else  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, null, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, cfa.cfa_obj, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, false);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &fromNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.flags);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &do_instance);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, ntohl(parent));
cfa.createEdge(fromNode, Branch.UNCOND, cfa.name);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, (PRUint32)0);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &result);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 0, 0, &id);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, parent.getEdge());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, isFunction);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.getString());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &loop);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.flags);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cfa_opts);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.path);
cfa.createEdge(fromNode, Branch.UNCOND, cfa.cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, getter_AddRefs(cfa));
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.root);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.getModType());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.getName());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &cfa.Edge);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);  else  preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cstr_oneuse());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 0, false);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, parent.getFunction());
cfa.createEdge(fromNode, Branch.UNCOND, id, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, cfa.get());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, node.getNodeType());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.db.db_node);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 0, &cfa);
cfa.createEdge(fromNode, Branch.FLOAT, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, &returnNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 0, 0);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cfa.cf
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, 0, 0, 0, 0);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, (unsigned long)s);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cfa_flags);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cfaLength());
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.edge);
cfa.createEdge(fromNode, Branch.UNCOND, &device);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &cfa.CfaEdge);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.clone);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, (void *)cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, lastOfNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &cfa.cfa.cfa.cfa);
cfa.createEdge(fromNode, Branch.FORWARD_UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.dbName);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, parent.getName());
cfa.createEdge(fromNode, Branch.COND, &clone);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.name);
cfa.createEdge(fromNode, Branch.UNCOND, &cfa.cfa.cfa.cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.cfa_props);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, cfa.edgeType);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode, &cfa.cfa.cfa);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); <else <cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); else &cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); <else &preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); <else &cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); <else <preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); &else cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); &else <preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); <else preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); else cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); &else <cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); <else cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); else preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); else &preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); &else preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); else <cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); &else &cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); &else &preconditions.checkState(false, "not reached");
cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); else <preconditions.checkState(false, "not reached");
