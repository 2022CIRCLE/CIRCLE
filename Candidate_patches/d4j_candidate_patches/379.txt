golden:
if (n.getParent() == null) { List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); } }
inference:

return tryRemoveUnconditionalBranching(n.getParent());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) return n;
break;
if (n.getParent() == null)
n.getParent() = n;
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null;
return n;
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n);
n.getParent() = null;
n = curCfg.getDirectedGraphNode(n);
n.getParent() == null? ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) break;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) return n;
return tryRemoveUnconditionalBranching(n, n.getParent());
n = n.getParent();
return tryRemoveUnconditionalBranching(gNode.getOutEdges());
n.getParent() == n;
gNode = curCfg.getDirectedGraphNode(n);
if (n.getParent() == n) return n;
return tryRemoveUnconditionalBranching(n, gNode.getOutEdges());
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
n = curCfg.getDirectedGraphNode(n); if (n == null)  return n;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
return tryRemoveUnconditionalBranching(n.getParent(), gNode.getOutEdges());
if (n.getParent() == null) return tryRemoveUnconditionalBranching(gNode.getOutEdges());
n.getParent() = n.getParent();
return tryRemoveUnconditionalBranching(n, gNode);
NS_ENSURE_ARG_POINTER(n);
if (n.getParent() == null)
if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n);
else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges);
return tryRemoveUnconditionalBranching(n.getParent(), n);
if (n.getParent() == null)  return tryRemoveUnconditionalBranching(n);
case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (gNode == null) return n;
n.getParent() == null;
if (gNode == null)  return n;
if (gNode == null)  return n;
return tryRemoveUnconditionalBranching(n.getParent(), outEdges);
if (gNode == null) return n;
return tryRemoveUnconditionalBranching(n, outEdges);
n = curCfg.getDirectedGraphNode(n); if (n == null) return n;
return doRemoveUnconditionalBranching(n);
switch (n.getType())  case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
else  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() = null;
return tryRemoveUnconditionalBranching(n.getParent().getValue());
if (n.getParent() == null)  return n;
else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) return tryRemoveUnconditionalBranching(n);
switch (n.getType())  case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
return tryRemoveUnconditionalBranching(n.getParent());
if (n.getParent() == n)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null)  return n;
if (n.getParent() == null) break;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
else if (n.getParent() == null) return n;
if (n.getParent() == null)  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n == null) return n;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType())  case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
switch (n.getType())  case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n = curCfg.getDirectedGraphNode(n); if (n == null)  return n;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
n.parent = n;
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n, gNode.getOutEdges());
case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n == null)  return n;
if (n.getParent() == null)  DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
break; case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null)  DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null)  return n;
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == n) break;
return TryRemoveUnconditionalBranching(n);
n.getParent() == null
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges;
delete n;
if (n.getParent() == n)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges);
if (!n.getParent()) return n;
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
return tryRemoveUnconditionalBranching(n.getParent().get());
if (n.getParent() == null) return n; DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null)  ListDiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
tryRemoveUnconditionalBranching(n.getParent());
switch (n.getType())
if (n == null) return n;
if (n.getParent() == null)  return tryRemoveUnconditionalBranching(gNode.getOutEdges());
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n.getParent());
if (n.getParent() == null)  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
outEdges = gNode.getOutEdges();
n.getParent() == null? n.getParent() : n;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null)  return n;
n.setParent(n);
if (n == null)  return n;
if (n.getParent() == null) return tryRemoveUnconditionalBranching(gNode.getOutEdges());
break; case Token.BLOCK: if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null)  return n;
if (n.getParent() == null)  DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n);
DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n);
return tryRemoveUnconditionalBranching(n.getParent(), n.getParent());
if (n.getParent() == n)
return ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  break;
n.parent = parent;
#endif
if (n.getParent() == n)  return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges;
NS_IF_RELEASE(n);
DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n == n) return n;
if (n == n)  return n;
tryRemoveUnconditionalBranching(n);
SetDiGraphEdge(n);
return tryRemoveUnconditionalBranching(n.getParent().getDestination().getValue());
DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = curCfg.getDirectedGraphNode(n); if (n == null) return n;
return tryRemoveUnconditionalBranching(gNode.getDestination().getValue());
else return tryRemoveUnconditionalBranching(n);
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null)  list = gNode.getOutEdges();
parent = n.getParent();
return n.getParent();
gNode = curCfg;
if (n.getParent() == null)  return tryRemoveUnconditionalBranching(n);
return tryRemoveUnconditionalBranching(n.getParent(), gNode);
return tryRemoveUnconditionalBranching(gNode.getDestination());
ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = n;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0));
n.hasChildren(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n)  return n;
return n.getParent() == null;
return tryRemoveUnconditionalBranching(gNode.getOutEdges(), n.getParent());
n.getParent() = node;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
delete n.getParent();
n.getParent() = n;
if (n.getParent() == null)  Return tryRemoveUnconditionalBranching(n);
n.parent = curCfg.getDirectedGraphNode(n);
NS_RELEASE(n);
else if (n.getParent() == null)  return n;
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n.getDestination());
Init();
setParent(n);
if (n.getParent() == null)  n = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n.getType());
+= n.getParent();
n = gNode;
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges);
n.getParent() = parent;
if (n.getParent() == null)  return tryRemoveUnconditionalBranching(n.getParent());
else break;
else
continue;
return result;
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());   else  if (n.getType() == Token.BLOCK)  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);  else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  n.getType() = n.hasChildren(); n.hasChildren(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode, curCfg.getDirectedGraphNode(n));
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());   else  break;
if (n.getParent() == null)  DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = n.getParent(); if (n == n) return n;
if (n.getParent() == null)  if (!gNode)  /* * If n is null the target is the end of the function, nothing to do. */ break;  if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));  else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());   else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());   else  if (n.getType() == Token.BLOCK)  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);  else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());   else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null)  DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  n = n;
if (n.getParent() == null)  n.getName() = n.getName();
n = n.getParent(); if (n!= n)  return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null)  n.getType() = Type; if (n.hasChildren())  Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);  else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null)  if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());   else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());   else  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n = gNode.getParent(); if (n!= n)  return tryRemoveUnconditionalBranching(n, n.getName());
n.getParent() == null && n.getParent() == null)  ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)  return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null)  /* * Only know what the source does *. */ return n;

if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == n) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n = curCfg.getDirectedGraphNode(n); if (n == null) <return n;
ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == n) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) n.getName() = n.getName();
if (n.getParent() == null) &if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
<else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == null? List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == n) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) n = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null? List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &return tryRemoveUnconditionalBranching(n);
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null && n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == n) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == n) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
else List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <list = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == n) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List<DiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == n) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = curCfg.getDirectedGraphNode(n); if (n == null) &return n;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == null) <return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges;
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
n.getParent() == null? ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == n) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) <if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) List&DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null && n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
n.getParent() == null? List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) return n;
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
n.getParent() == null && n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n == n) return n;
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) return n; DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == n) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
else <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
else &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
n.getParent() == null && n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <return tryRemoveUnconditionalBranching(gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
return List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == n) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) list = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &n.getType() = n.hasChildren(); n.hasChildren(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode, curCfg.getDirectedGraphNode(n));
if (n.getParent() == null) if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = curCfg.getDirectedGraphNode(n); if (n == null) &return n;
if (n.getParent() == n) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
&else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n == null) <return n;
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == n) <return n;
else <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) n = n;
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
n.getParent() == null? List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n = n.getParent(); if (n!= n) return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
ListDiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == n) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
else if (n.getParent() == null) &return n;
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == n) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
break;
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
return List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == null && n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == n) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
n.getParent() == null && n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges;
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == n) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
n.getParent() == null && n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
&else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) n.getType() = n.hasChildren(); n.hasChildren(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode, curCfg.getDirectedGraphNode(n));
if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == null? List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (gNode == null) return n;
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == n) <return tryRemoveUnconditionalBranching(n);
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
else <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n == null) &return n;
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &return tryRemoveUnconditionalBranching(n);
List<DiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
return List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
else List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
return ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == null && n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == n) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n == null) <return n;
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == n) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null? List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null && n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges;
List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
break; case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
if (n.getParent() == null) <if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n = curCfg.getDirectedGraphNode(n); if (n == null) return n;
else List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
n.getParent() == null && n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List&DiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <return tryRemoveUnconditionalBranching(n.getParent());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) return n; DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) List&DiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
n.getParent() == null? ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) return n; DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
n.getParent() == null && n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == null && n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &return tryRemoveUnconditionalBranching(gNode.getOutEdges());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
else List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
else &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == n) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
else ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
else <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges;
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = curCfg.getDirectedGraphNode(n); if (n == null) &return n;
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
else &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == n) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
return n;
List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getName() = n.getName();
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == null && n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (gNode == null) return n;
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (gNode == null) <return n;
if (n.getParent() == n) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
else ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
n.getParent() == null? List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == n) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null && n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == n) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
return List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == null? List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
break; case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null && n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
else if (n.getParent() == null) <return n;
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == n) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
else <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <n = curCfg.getDirectedGraphNode(n);
else &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
else ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n == n) &return n;
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
return List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (gNode == null) &return n;
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
break; case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n);
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
else <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges;
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
else &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == n) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) <DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = curCfg.getDirectedGraphNode(n); if (n == null) return n;
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List&DiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) /* * Only know what the source does *. */ return n;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
&else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) </* * Only know what the source does *. */ return n;
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
else &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
else List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
<else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = n.hasChildren(); n.hasChildren(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode, curCfg.getDirectedGraphNode(n));
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) return tryRemoveUnconditionalBranching(gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
n.getParent() == null? List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == n) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
n = curCfg.getDirectedGraphNode(n); if (n == null) return n;
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == null && n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
else &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == n) &return n;
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
n.getParent() == null && n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
else <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
n.getParent() == null && n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null)
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &return tryRemoveUnconditionalBranching(n.getParent());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) &DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n = n.getParent(); if (n!= n) <return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) <DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &return tryRemoveUnconditionalBranching(n);
if (n.getParent() == n) return n;
if (n.getParent() == n) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n == null) return n;
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
break; case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
n = gNode.getParent(); if (n!= n) &return tryRemoveUnconditionalBranching(n, n.getName());
n.getParent() == null && n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == null && n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n == null) &return n;
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
n.getParent() == null && n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <return n;
if (n.getParent() == null) <return tryRemoveUnconditionalBranching(n);
n.getParent() == null && n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges;
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges;
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
else <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
<else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
n.getParent() == null && n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
else List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges;
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == n) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == n; if (n.getParent() == n) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
else List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
n.getParent() == null && n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == n) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
n.getParent() == n; if (n.getParent() == n) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (gNode == null) &return n;
else ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
else <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n == n) <return n;
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &list = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
else <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges;
n = gNode.getParent(); if (n!= n) <return tryRemoveUnconditionalBranching(n, n.getName());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == n) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
n = n.getParent(); if (n!= n) &return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
n = curCfg.getDirectedGraphNode(n); if (n == null) <return n;
List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
if (n.getParent() == n) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == n) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == null) <DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
else if (n.getParent() == null) return n;
if (n.getParent() == n) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
n.getParent() == null && n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n = n;
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == null && n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (gNode == null) <return n;
else <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
n.getParent() == null && n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
n.getParent() == n; if (n.getParent() == n) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
n.getParent() == null && n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) <if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n);
gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
return ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
else &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
else <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
else &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &return n;
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge&Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
break; case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <Return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == n) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
else List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null && n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
else &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == n) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
else <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &n = n;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n == null) return n;
if (n.getParent() == null) &/* * Only know what the source does *. */ return n;
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == n) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
n.getParent() == null? List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null && n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
else <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
return ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == n) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
n.getParent() == null && n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
n.getParent() == n; if (n.getParent() == n) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n.getParent());
if (n.getParent() == null) &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == n; if (n.getParent() == n) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == n) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
return List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) Return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <if (!gNode) /* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == null && n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
switch (n.getType()) <case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) &case Token.BLOCK: if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
else <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
else <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
else List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == n) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
else List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges;
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == n; if (n.getParent() == n) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &break;
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
break; case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <DiGraphEdgeNode, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == n) return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) return n;
else List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == n) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
else &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &Return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
n.getParent() == n; if (n.getParent() == n) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges;
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
return tryRemoveUnconditionalBranching(n.getParent());
n.getParent() == null? List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (n.getParent() == null) <DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
else <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getName() = n.getName();
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) &ListDiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
else List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
switch (n.getType()) case Token.BLOCK: if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) DiGraphEdge<Node, Branch> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null && n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) DiGraphNode&Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
else &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
n.getParent() == null? List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
n = curCfg.getDirectedGraphNode(n); if (n == null) <return n;
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
n.getParent() == null && n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) if (n.getParent() == null) <List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) break;
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == n) List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0));
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <if (!gNode) </* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
n.getParent() == null? List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges() : tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); &else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
ListDiGraphEdgeNode,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) &if (n.getParent() == null) &List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) <List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == n) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &if (n.hasChildren()) <Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) <DiGraphNodeNode, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching( outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
else <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first)); <else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) &Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); <else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) <return tryRemoveUnconditionalBranching(n);
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode);
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); &else &return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) <List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <n.getType() = Type; if (n.hasChildren()) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else <return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first), gNode.getOutEdges());
n.getParent() == null? List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) List&DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else if (n.getType() == Token.BLOCK) Node first = n.getFirstChild(); return tryRemoveUnconditionalBranching(first); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n), gNode.getOutEdges());
List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
else <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) <return n;
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; &if (n.getParent() == null) <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
else <ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == null) &if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) &ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else break;
if (n.getParent() == null) ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <break;
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) &List&DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges[0].getDestination().getValue());
if (n.getParent() == n) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == n) List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); else return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges);
n = gNode.getParent(); if (n!= n) return tryRemoveUnconditionalBranching(n, n.getName());
if (n.getParent() == null) if (n.getParent() == null) List<DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) if (!gNode) &/* * If n is null the target is the end of the function, nothing to do. */ break; <if (n.getParent() == null) &ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) ListDiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
if (n.getParent() == null) ListDiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n); if (gNode == null) &return n;
if (n.getParent() == null) &ListDiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) &return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ListDiGraphEdge&Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
if (n.getParent() == null) <List<DiGraphEdgeNode,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) <ListDiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1)
List&DiGraphEdge&Node,Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1) <return tryRemoveUnconditionalBranching(outEdges);
if (n.getParent() == null) List<DiGraphEdge&Node, Branch>> outEdges = gNode.getOutEdges();
if (n.getParent() == null) <List&DiGraphEdge<Node,Branch>> outEdges; if (outEdges.size() == 1) return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
