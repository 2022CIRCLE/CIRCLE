rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = SelectNumberRule(Calendar.YEAR, tokenLen);
Rule rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(CALendar.YEAR, tokenLen);
rule = selectNumberRule(calendar.YEAR, tokenLen);
rule = chooseNumberRule(Calendar.YEAR, tokenLen);
rule = twoDigitYearField.INSTANCE;
rule = selectNumberRule(Calendar.YEAR, tokenLen, 0);
rule = selectNumberRule(Calendar.YEAR, token);
rule = selectNumberRule(YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR);
rule = TwoDigitYearField.INSTANCE;
rule = selectionNumberRule(Calendar.YEAR, tokenLen);
rule = parseToken(mPattern, indexRef);
rule = selectNumberRule(&Calendar.YEAR, tokenLen);
rule = SelectionNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Token.YEAR, tokenLen);
rule = SelectNumberRule(calendar.YEAR, tokenLen);
rule = selectedNumberRule(Calendar.YEAR, tokenLen);
Rule rule = SelectNumberRule(Calendar.YEAR, tokenLen);
rule = SelectRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, 0);
rule = selectNumberRule (Calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR_YEAR, tokenLen);
rule = getNumberRule(Calendar.YEAR, tokenLen);
rule = SelectNumberRule(CALendar.YEAR, tokenLen);
rule = new TextField(Calendar.YEAR, ERAs);

rule = parseNumberRule(Calendar.YEAR, tokenLen);
rule = rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen, null);
rule = selNumberRule(Calendar.YEAR, tokenLen);
rule = rule.get();
rule = twoDigitYearField;
rule = selectNumberRule(Calendar.YEAR, tokenLen - 1);
rule = selectNumberRule(YEAR_YEAR, tokenLen);
rule = selectNumberRule();
rule = selectNumberRule(Calendar.YEAR, token.get());
rule = selectNumberRule(Calendar.YEAR,tokenLen);
rule = selectNumberRule(Calendar.YEAR, &tokenLen);
rule = 2DigitYearField.INSTANCE;
rule = selectNumberRule(Calendar.YEAR, tokenLen);  else
rule = selectNumberRule(Calendar_YEAR, tokenLen);
rule=selectNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, &rule);
rule = TAILQ_FIRST(&rule);
rule = selectNumberRule(Calendar.YEAR, tokenLen, 1);
rule = parseToken(mPattern, ERAs);
rule = pickNumberRule(Calendar.YEAR, tokenLen);
rule = parseToken(mPattern, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen+1);
rule = selectNumberRule(Calendar.YEAR, tokenlen);
rule = selectNumberRule(&tokenLen);
rule = selectNumberRule(calendar, tokenLen);
rule = selectNumberRule("YEAR", tokenLen);
rule = setNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(year, tokenLen);
rule = selectNumberRule(mYear, tokenLen);
rule = selectNumberRule(Calendar.YEAR,TokenLen);
rule = do_QueryInterface(tokenLen);
Rule rule; rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, TokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen, 2);
rule = ThreeDigitYearField.INSTANCE;
rule = selectNumberRule(Dialog.YEAR, tokenLen);
rule = selectNumberRule(SECURITY_YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen.get());
rule = findNumberRule(Calendar.YEAR, tokenLen);
rule = rule;
rule = selectNumberRule(Calendar.YEAR, tokenLen); else
rule = selectNumberRule(Calendar.YEAR, tokenLen); break;
rule = SelectNumberRule();
rules = selectNumberRule(Calendar.YEAR, tokenLen);
rule = selectSelectNumberRule(Calendar.YEAR, tokenLen);
rule = 0;
rule = selectYearRule(Calendar.YEAR, tokenLen);
result = selectNumberRule(Calendar.YEAR, tokenLen);
Rule rule;
rule = selectNumberRule(Calendar.YEAR, tokenLen + 1);
rule = selectNumberRule(Calendar.YEAR + 1, tokenLen);
rule = selectNumberRule(Time.YEAR, tokenLen);
rule = selectNumberRule(tokenLen);
rule = selectNumberRule(Rule.YEAR, tokenLen);
rule = selectNumberRule(Calendar.year, tokenLen);
rule = selectNumberRule(Calendar.DAY, tokenLen);
rule = RuleField.INSTANCE;
rule = selectNumberRule(Key.YEAR, tokenLen);
rule = selectNumberRule(months, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen-1);
rule = selectNumberRule(Calendar.YEAR.get(), tokenLen);
rule = stringNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Document.YEAR, tokenLen);
rule = selectRule(Calendar.YEAR, tokenLen);
rule = selectNumberField(Calendar.YEAR, tokenLen);
rule = getNumberRule(tokenLen);
rule = selectNumberRule(Value.YEAR, tokenLen);
rule = SelectNumberRule(Calendar.YEAR, tokenLen, 0);
rule = selectNumberRule(XYEAR, tokenLen);
rule = selectNumberRule( Calendar.YEAR, tokenLen);
rule = selectNumberRule('YEAR', tokenLen);
rule = saveNumberRule(Calendar.YEAR, tokenLen);
rule = SelectNumberRule(Token.YEAR, tokenLen);
rule = selectNumberRule(None, tokenLen);
rule = null;
rule = selectNumberRule(Calendar.YEAR, tokenLen, -1);
rule = SelectYearRule(Calendar.YEAR, tokenLen);
rule = parseNumberRule(mPattern, tokenLen);
rule = selectNumberRule(ConstCalendar.YEAR, tokenLen);
Rule rule = twoDigitYearField.INSTANCE;
rule = SelectRuleNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(aCalendar.YEAR, tokenLen);
rule = TwoDigitYearField;
rule = false;
rule = selectNumberRule(Calendar.YEAR, tokenList);
rule = selectNumberRule(Calendar.YEAR, TOKEN_YEAR);
rule = selectNumberRule(Calendar.YEAR, 0, tokenLen);
rule = Rule();
rule = selectNumberRule(Calendar.YEAR, tokenLength);
Rule rule = selectNumberRule(CALendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, token.Length());
rule = getSelectNumberRule(Calendar.YEAR, tokenLen);
rule = parseToken(mPattern, token);
rule = SelectNumberRule(Calendar.YEAR);
rule = selectNumberRule(0, tokenLen);
rule = selectNumberRule(this, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenVal);
Rule rule; Rule rule;
rule = selectNumberRule(&calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, Token.YEAR);
rule = selectNextNumberRule(Calendar.YEAR, tokenLen);
Rule rule = selectNumberRule(calendar.YEAR, tokenLen);
rule = addNumberRule(Calendar.YEAR, tokenLen);
rule = rule.first();
rule = selectNumberRule(Calendar.YEAR, tokenPattern);
rule = new TextField(Calendar.ERA, ERAs);
rule = selectNumberRule(nsCRT::YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR + tokenLen);
rule = selectNumberRule(Calendar.YEAR, *tokenLen);
rule = selectNumberRule2(Calendar.YEAR, tokenLen);
rule = SecondDigitYearField.INSTANCE;
rule = new TwoDigitYearField();
rule = selectNumberRule(Calendar.YEAR, ERAs);
rule = selectNumberRule(Calendar.YEAR.YEAR, tokenLen);
rule = ruleLen;
rule = selectNumberRule(Calendar.yEAR, tokenLen);
rule = selectNumberRule(Number.YEAR, tokenLen);
rule = selectDigitYearRule(Calendar.YEAR, tokenLen);
rule = rule = SelectNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRuleFor(Calendar.YEAR, tokenLen);
rule = selectNumberRule(String.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen).get();
rule = TAILQ_FIRST(&tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen);;
rule = result;
if (tokenLen >= 4)
rule = selectNewNumberRule(Calendar.YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEARS, tokenLen);
rule = getNumberRule(Token.YEAR, tokenLen);
rule = SingleDigitYearField.INSTANCE;
rule = selectNumberRule(Calendar.YEAR, tokenLen, rule);
rule = selectNumberRule(Key, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenValue);
rule = selectNumberRule(Calendar.YEAR, tokenLen); Rule rule;
rule = selectNumberRule(mPattern, tokenLen);
rule = selectNumberRule(DOM_YEAR, tokenLen);
rule = selectNumberRule(Calendar.YEAR, len);
rule = selectNumberRule(Calendar.YEAR, tokenStr);
rule = selectNumberRule(Calendar.YEAR, token.len);
rule = new TwoDigitYearField(Calendar.YEAR, tokenLen);
rule = selectNumberRule(CalendarYEAR, tokenLen);
rule = rule.selectNumberRule();
rule = selectNumberRule(month, tokenLen);
rule = selectNumberRule(Calendar.YEAR, tokenCount);
rule = selectNumberRule(doc, tokenLen);
rule = do_QueryInterface(rule);
Rule rule = selectNumberRule(Calendar.YEAR, token);
rule = selectNumberRule(&rule);
rule = selectNumberRule(0);
rule = selectNumberRule(Calendar.YEAR, tokLen);
rule = selectNumberRule(Calendar.YEAR, tokenLen, flags);
rule = rules[tokenLen];
rule = rule.selectNumber();
rule = getNumberRule(&rule);
rule = rule.First();
rule = rule.Int();
rule = EOF;
rule = aValue;
rule = selectNumberRule(Calendar.YEAR, tokenLen); #endif
rule = selectNumberRule(Calendar.YEAR, tokenLen, this);
rule = aCalendar.YEAR;
rule = parseToken(mPattern, indexRef); i = indexRef[0]; int tokenLen = token.length();
rule = nsXULAutoString::selectNumberRule(Calendar.YEAR, tokenLen);
rule = tsnull;
rule = nsAutoString(tokenLen);
rule = nsChange::selectNumberRule(Calendar.YEAR, tokenLen);
rule = rule.first();
rule = rule.charAt(0);
rule = rule.selectNumberRule(Calendar.YEAR, tokenLen);
rule = mFlags.Empty();
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4)  rule = selectNumberRule(Calendar.YEAR, tokenLen);  else  rule = TwoDigitYearField.INSTANCE;
rule = xstrdup(rule); rule = rule.nsLastError;
rule = &selectNumberRule(Calendar.YEAR, tokenLen);
rule = null; rule = ruleList.GetPathFromYear(&rule);
rule = nsHTMLAtoms::rule, rule = twoDigitYearField.INSTANCE;
rule = rulePattern.Field(nsIYEAR_YEAR, 0);
rule = rule.GetYearField();
rule = mInner.match(tokenLen); if (rule) rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = ruleField.int;
rule = rule.mYear;
rule = ruleToValues.YEAR;
rule = nsYearField::ETHER_YEAR; rule = nsYearField::ETHER_YEAR;
rule = rule.firstChild;
rule = parseRule(&mToken, tokenLen);
rule = aRangeFrame.FirstDigit; rule = aRangeFrame.FirstDigit;
rule = aFunction;
rule = aPrtl((unsigned long) tokenLen);
rule = aStringToFrame(aTimeFormat, tokenLen);
rule = parseRule(mPattern, tokenLen);
rule = rule.SelectNumberRule(Calendar.YEAR, tokenLen);
rule = parseNumberRule(&ariz);
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); &else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); else rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); else <rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); &else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); else <rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); <else rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); &else rule = TwoDigitYearField.INSTANCE;
rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); &else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); &else <rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); &else <rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); else rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); <else <rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); <else rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); <else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); &else <rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); <else <rule = TwoDigitYearField.INSTANCE;
rule = selectNumberRule(Calendar.YEAR, tokenLen); else
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); <else &rule = TwoDigitYearField.INSTANCE;
rule = selectNumberRule(Calendar.YEAR, tokenLen); &else
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); else rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); <else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); &else rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); &else rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) rule = selectNumberRule(Calendar.YEAR, tokenLen); <else rule = TwoDigitYearField.INSTANCE;
rule = selectNumberRule(Calendar.YEAR, tokenLen); <else
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); else <rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) <rule = selectNumberRule(Calendar.YEAR, tokenLen); else &rule = TwoDigitYearField.INSTANCE;
rule = parseToken(mPattern, indexRef); if (tokenLen >= 4) &rule = selectNumberRule(Calendar.YEAR, tokenLen); <else <rule = TwoDigitYearField.INSTANCE;
