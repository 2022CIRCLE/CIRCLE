golden:
return StringDescription.toString(m).equals(arg.toString());
inference:
return StringDescription.equals(m);
return StringDescription.Equals(m);
return m.equals(arg.toString());
return StringDescription(m).equals(arg);
return StringDescription.get().equals(arg.get());
return StringDescription.toString(m).equals(arg);
return (StringDescription)m.equals(arg.toString());
return StringDescription.equals(arg);
return StringDescription.Equals(m, arg);
return StringDescription(m).Equals(arg);
return StringDescription.toString(m).equals(arg.get());
return StringDescription(m).equals(arg.get());
return StringDescription.equals(arg.get());
return StringDescription.equals(m, arg);
return (StringDescription)String(m).equals(arg.toString());
return StringDescription.equals(m.get());
return StringDescription.toString(m).Equals(arg);
return (StringDescription) m.equals(arg.toString());
return StringDescription.toString(m).Equals(arg.get());
return m.equals(StringDescription.toString(m));
return StringDescription.toString(m).equals(arg.toString());
return StringDescription.toString(m).equals(m);
return m.equals(arg);
return (StringDescription) StringDescription(m).equals(arg.toString());
return StringDescription.toInt(m).equals(arg.toInt());
return StringDescription(m);
return StringDescription.toUnicode(m).equals(arg.toUnicode());
return StringDescription.Equals(m).get();
return StringDescription.get(m).equals(arg.get());
return (StringDescription)m.equals(arg);
return m.equals(StringDescription.toString(m));
return StringDescription(m).equals(arg);
return StringDescription.get().equals(arg.get());
return StringDescription.toCharset(m).equals(arg.toCharset());
return StringDescription.ToString(m).equals(arg);
return m.equals(arg);
return StringDescription[m].equals(arg.toString());
return StringDescription.get().equals(arg.get().get());
return StringDescription.Equals(m).equals(arg);
return ToString(m).equals(arg.toString());
return StringDescription.toString(m);
return StringDescription.toString(m).equals(arg);
return StringDescription.Equals(m.get());
return StringDescription.Equals(m, arg.Equals(arg));
return StringDescription.fromString(m).equals(arg.toString());
return StringDescription.toLength(m).equals(arg.toLength());
return strToString(m).equals(arg.toString());
return StringDescription.toCharArray(m).equals(arg.toCharArray());
return StringDescription.toString(m).Equals(arg.toString());
return StringDescription(m).equals(arg.toString());
return StringDescription.ToString(m).equals(arg.ToString());
return StringDescription.trim(m).equals(arg.trim());
return StringDescription.get().equals(arg);
return StringDescription.toBytes(m).equals(arg.toBytes());
return StringDescription().equals(arg);
return StringDescription.equals(m, arg.toString());
return m.equals(arg.toString());
return StringDescription(m).equals(m);
return StringDescription.get().equals(m);
return StringDescription.ToString(m).Equals(arg.ToString());
return StringDescription(m).get().equals(arg.get());
return StringDescription[m].equals(arg);
return StringDescription.Length(m).equals(arg.Length());
return StringDescription.decode(m).equals(arg.decode());
return StringDesc.toString(m).equals(arg.toString());
return false;
return StringDescription.toCString(m).equals(arg.toCString());
return toString(m).equals(arg.toString());
return m.equals(Arg.toString());
return StringDescription.toCharString(m).equals(arg.toCharString());
return m.toString().equals(arg.toString());
return StringDescription.toString(&m).equals(arg.toString());
return StringDescription.get().equals(arg.toString());
return StringDescription(m).Equals(arg.Equals(""));
return StringDescription.ToString(m).Equals(arg);
return StringDescription.equals(StringDescription(m));
return m.Equals(StringDescription.toString(m));
return StringDescription.ToCString(m).equals(arg.ToCString());
return StringDescription.Equals(m).equals(arg.Equals(""));
return (StringDescription)(m).equals(arg.toString());
return StringDescription.Equals(m, arg.Equals());
return (StringDescription)toString(m).equals(arg.toString());
return StringDescription.equals(m).get();
return StringDescription().equals(arg.toString());
return ToNewUnicode(m).equals(arg.toNewUnicode());
return String(m).equals(arg.toString());
return m.equals(arg.get());
return m.Equals(StringDescription.toString(m));
return StringDescription.toString(m).Equals(arg.ToString());
return StringDescription(m).get().equals(arg.get().get());
return StringDescription.get().equals(m);
return StringDescription.get() == m;
return (StringDescription) m.equals(arg);
return StringDescription.get().equals(m).get();
return StringDescription.get().equals(arg.get().toString());
return StringDescription.equals(arg.toString());
return StringDescription.get().equals(m.get());
return m.get().equals(arg.get());
return (StringDescription) StringDescription.equals(m);
return StringDescription(m).Equals(arg.get());
return String(m).equals(arg);
return StringDescription.Equals(m).equals(arg.Equals(arg));
return strToString(m).equals(arg);
return StringDescription().equals(m);
return StringDescription.get().equals(arg);
return StringDescriptionToString(m).equals(arg);
return String.toString(m).equals(arg.toString());
return ToNewString(m).equals(arg.toNewString());
return StringDescription.equals(arg.equals(""));
return (StringDescription) StringDescription.equals(arg.toString());
return StringDescription.toString(m).equals(m.get());
return StringDescription.toString(m).equals(arg.toString());
return StringDescription.ToCString(m).equals(arg.toCString());
return StringDescription(&m).equals(arg.toString());
return StringDescription.toString(m).get() == arg.get();
return StringDescription.Equals(m).Equals(arg);
return ValueDescription.toString(m).equals(arg.toString());
return StringDescription(m, arg);
return StringDescription.Equals(m).equals(arg.Equals(m));
return (StringDescription)m.equals(arg.toString());
return StringDescription(m).Equals(arg.ToString());
return StringDescription.equals(nsDependentString(m));
return m.Equals(arg);
return StringDescription.get() == m.equals(arg.get());
return StringDescription.toString(m) == null;
return StringDescription.Equals(m).equals(arg.toString());
return StringDescription.toString(m).equals(arg.toString());
return StringDescription.toString(m).equals(arg.toString(m));
return StringDescription.ToUnicode(m).equals(arg.ToUnicode());
return ToString(m).equals(arg);
return (StringDescription)m;
return StringDescription.Equals(arg.Equals(m));
return StringDescription.decode(m).equals(arg.toString());
return StringDescription.equalsIgnoreCase(m);
return StringDescription.get(m).equals(arg);
return (StringDescription)m.equals(arg);
return ToNewUnicode(m).equals(arg.toString());
return m.equals(arg.equals(""));
return StringToString(m).equals(arg);
return StringDescription.toString(m) == arg.toString();
return StringDescription.toString(m).Equals(arg.toString());
return toString(m).equals(arg);
return StringDescription.fromInt(m).equals(arg.toString());
return StringDescription.equals(strlen(m));
return StringDescription.ToUnicode(m).equals(arg.toUnicode());
return StringDescription(m).Equals(arg.Equals());
return (StringDescription)String(m).equals(arg);
return StringDescription.assign(m).equals(arg.assign(""));
return StringDescription.ToNewUnicode(m).equals(arg);
return StringDescription.equals(arg.equals(m));
return StringDescription.get(m).equals(arg.get(arg));
return StringDescription.toString(m.get()).equals(arg.get());
return StringDescription (m).equals(arg.toString ());
return StringDescription.Equals(m).Equals(arg.Equals(m));
return StringDescription.toString(m).get().equals(arg.get());
return StringDescription(m).Equals(arg.Equals(arg));
return StringDescription.toString(m).equals(arg);
return StringDescription(m).equals(nsDependentString(arg));
return StringDescription.Equals(m).Equals(arg.Equals(arg));
return StringDescription.get().equals(m).get());
return StringDescription.toString(m).equals(*arg);
return StringDescription.Equals(m).Equals(arg.Equals(""));
return "";
return StringDescription.assign(m).equals(arg.assign());
return StringDescription.toLowerCaseString(m).equals(arg);
return StringDescription.toString(m).equals(&arg.toString());
return StringDescription.toString(m).equals(strlen(arg));
return StringDescription.equalsIgnoreCase(m).get();
return StringDescription.toString(m).Equals(m);
return StringDescription.toString(m).get() == arg.toString();
return StringDescription.toString(m).equals(&arg);
return StringDescription.Equals(m).equals(arg.Equals());
return StringDescription.valueOf(m).equals(arg.valueOf(arg));
return StringDescription.Equals(m).equals(arg.ToString());
return StringDescription.valueOf(m).equals(arg.valueOf());
return (StringDescription) StringDescription.equals(m).get();
return StringDescription.toString(m).equals(m.toString());
return StringDescription.get(m).equals(arg.get(m));
return StringDescription.ToNewCString(m).equals(arg);

return StringDescription.Equals(m, arg.Equals(m));
return StringDescription.Equals(m, arg.Equals(""));
return StringDescription.equals(nsDependentCString(m));
return StringDescription.ToString(m).equals(arg.toString());
return StringDescription.toString(m).get().equals(arg);
return StringDescription.Equals(m).equals(arg.equals(""));
return StringDescription(m).Equals(arg.Equals('0'));
return StringDescription.fromInt(m).equals(arg.toInt());
return StringDescription.toString(m).equals( arg.toString());
return StringDescription.equalsIgnoreCase(m, arg);
return (StringDescription) StringDescription(m).equals(arg);
return StringDescription.toString(m).equals(arg.ToString());
return StringDescription.EqualsIgnoreCase(m).get();
return StringDescription.toString(m).equals(arg.toString(""));
return StringDescription.ToUnicode(m).equals(arg.toString());
return StringDescription.Equals(m).Equals(arg.Equals());
return StringDescription.assign(m).equals(arg.assign(arg));
return StringDescription.toString(m).equals( arg.toString() );
return StringDescription(m).Equals(arg.Equals(m));
return nsCRT::strdup(m).equals(arg.toString());
return nsGenericElement::ToString(m).equals(nsGenericElement::toString(arg));
return StringDescription.toString(m)!= 0? StringDescription.toString(m) : StringDescription.equals(arg.toString());
return m.Equals(m.Equals(arg));
if ((m = StringDescription.toString(m)) == null) return 0; if (arg) return 1; return 1;
return StringDescription.equals((StringDescription)m).equals(arg.equals('0'));
return StringDescription.equals(&m);
return m.equals("&");
return StringDescription.toString(m).equals((char *)arg.toString());
return m.Equals(arg);
return StringDescription(m)!= null; return StringDescription.equals(arg);
return (nsCRT::strlen(m) > 0)? StringDescription.toString(m) : StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td)  return NS_CONTENT_ATTR_HAS_VALUE;   else  return StringDescription.toString(m).equals(arg.toString());  return NS_OK;
return m.equals(NS_ConvertASCIItoUCS2(m), arg);
return StringDescription.toString(m)!= null; return StringDescription.toString(m).equals(arg);
return StringDescription.get().equals((const StringDescription*)arg.get());
return StringDescription.toString(m).get() == '0' && StringDescription.toString(m).equals(arg.toString());
return m.GetStringValue() == arg.get();
if ((m.s == null) && (arg.s == null)) return 0; if ((m.s == null) && (arg.s == null)) return 0; if (m.s == null) return 0; if (m.s == null) return 0; return -1;
char *cnt; char* n = sz_eval(arg.toString()); if (!cnt) return null; m.ToString(cnt); return null;
if (m)  ret = StringDescription.toString(m); if (ret)  return ret;  return ret;
rv = StringDescription.toString(m); if (NS_FAILED(rv)) return rv; if (arg.toString()) return rv; return rv;
return m.mContentType.equals(arg.toString());
if (m)  return StringDescription.toString(m).equals(arg.toString());  else  if (arg)  /* We have no arg, but no args */  return NS_OK;   return NS_OK;
m = StringDescription.toString(m); if (m == null) return 0; return NS_OK;
if (m!= null)  return NS_OK;  return nsCRT::strdup(m).equals(arg.toString());
if (m!= null) return false; return false;
return m.mParent.description.equals(arg);
return StringDescription.toString(m)!= NS_CONST_CAST(StringDescription*, m).equals(arg.toString());
if (arg)  return arg;   else return NS_ERROR_NOT_INITIALIZED;
return m.equals(StringDescription);
return StringDescription.Equals((void **)m);
return StringDescription.equals((nsIDOMNode*)m).toString());
if (!m) return NS_ERROR_NULL_POINTER; return nsDependentString(m).equals(arg.toString());
return StringDescription.equals((StringDescription*)m).equals(arg.toString());
return StringDescription.toString(m) == null; return NS_OK;
return StringDescription.toString(((caddr_t)m).equals(arg.toString()));
return (StringDescription) StringDescription.toString(m).equals(arg.toString());
return StringDescription.toString((void **)m).equals(arg.toString());
return m.mVariants.Equals(arg.mVariants.Equals(arg));
if (m == null) return XP_MAC; else return XP_MAC;
return StringDescription((unsigned long)m).equals(arg.toString());
return StringDescription.equals(aString);
return nsDependentStringDescription::equals(StringDescription(m));
return _StringDescription(m).equals(_StringDescription(arg));
return rv.Equals(m, arg);
return StringDescription(m)!= null && StringDescription.equals(arg.toString());
if (!(m.mType.Equals(nsCRT::eType(nsIContent))) &&!(arg.mType.Equals(nsIContent))) return -1; else return -1;
return m.get().equals(StringDescription.toString(m));
if (m.mParent)  return StringDescription.toString(m).equals(arg.toString());  else  return StringDescription.toString(m).equals(arg.toString());
return!strlen(m) && StringDescription.toString(m).equals(arg.toString());
nsIStreamListener* listener = NS_STATIC_CAST(nsIStreamListener*, m); if (listener) listener.Equals(nsIStreamListener::keyEquals(m)); return NS_OK;
return m.get() == 0? StringDescription.toString(m) : StringDescription.toString(m).equals(arg.toString());
if (! m ||!(m.mTimezone &&!(m.mTimezone &&!(m.mTimezone && m.mTimezone))) return NS_ERROR_OUT_OF_MEMORY; return NS_OK;
nsresult rv = StringDescription.toString(m); if (NS_FAILED(rv)) return rv; if (arg.toString()) return rv; return NS_OK;
return StringDescription(m).equals(arg.Equals("/"));
return StringDescription.toString(m).equals(aString);
if (!m ||!arg) return NS_ERROR_NULL_POINTER; return NS_OK;
return nsAutoString::StringDescription(m).equals(nsAutoString::arg.toString());
return StringDescription.toString(m).equals((void**)arg.toString());
return NS_STATIC_CAST(StringDescription*, m).equals(arg.toString());
return aString.equals((void*)m).get());
return StringDescription.toString(m).equals((const char*)arg.toString());
return m.mName.equals(arg.toString());
return val.Equals(arg.toString());
return StringDescription.equals(StringDescription.toString(m));
return StringDescription.Equals(m, arg.Equals(&arg));
return StringDescription.toString((const char*)m).equals(arg.toString());
return nsStringDescription::StringDescription(m).equals(nsStringDescription::arg.toString());
return StringDescription.toString(m).equals(arg.toString().get());
return StringDescription.toString(m).get().equals(arg.toString());
if ((m == '0') && (arg == '0'))  return 0;  if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg)  return m.description.get().equals(arg.get());  else  return -1;
return!nsStringDescription::equals(m, arg);
return StringDescription.equals((void**)m);
if (m == null)  return nsCRT::strdup("nsIAtom: can't get a namespace.n");  return NS_OK;
return StringDescription.equals((StringDescription)m).equals(arg.toString());
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('0') : StringDescription.toString(m).equals('0');
return (StringDescription) StringDescription.equals(m).equals(arg);
if (!m) return -1; return -1;
return m.Equals(arg.Equals('0'));
return StringDescription.toString(m).get() == m.get();
return m.type == DOM_T_NAME? StringDescription.toString(m).equals(arg.toString());
return nsDependentString(m).equals(nsDependentString(arg));
return (StringDescription) m;
return StringDescription.toString(m).equals(m.mTokens)&m.mTokens;
return (StringDescription) &m.equals(arg.toString());
return StringDescription.toString(m).equals(arg.toString("));
return StringDescription.equals(m.m.nsBytes());
return snprintf(stdout, sizeof(stdout), "%s", StringDescription.toString(m));
return rv.Equals(StringDescription.toString(m));
char *tmp = StringDescription.toString(m); if (tmp == null) return EINVAL; return tmp;
return val.equals(*arg.toString());
return StringDescription.toString(m).equals(m.m_arg);
return m.equals((StringDescription)m).toString());
return m.GetUnicode().equals(arg.toString());
return m.get().Equals(arg.get());
return m.mString.Equals(arg.toString());
return m.mToString() == arg.toString();
return StringDescription.equals(m.mDescription);
return StringDescription.toString(m).equals(aBytes.get());
return StringDescription.toCharAt(m).equals(arg.toCharAt(m));
return nsCRT::strdup(stringDescription).equals(m);
return nsAutoString::Description(m).Equals(arg.Equals(arg));
return StringDescription.equals((const char*)m).get());
return m.equals(nsCRT::strlen(arg));
return StringDescription.toString((char*)m).equals(arg.toString());
/* Init(), do a -C for an argument. */ if (m)  nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key());  return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
return StringDescription.toString(m).equals((nsIStyledContent*)arg.toString());
rv = StringDescription.toString(m); if (NS_FAILED(rv)) return rv; rv = StringDescription.equals(arg); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; rv = StringDescription.toString(m).equals(arg.toString()); if (NS_FAILED(rv)) return rv; return rv;
if (m) ret = StringDescription.toString(m); if (ret) &return ret; return ret;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '<0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '0') && (arg == '&0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '&0') && (arg == '&0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '<0') && (arg == '0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <&else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '&0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '<0') && (arg == '&0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '0') && (arg == '0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg) return m.description.get().equals(arg.get()); <else &return -1;
return StringDescription.equals((StringDescription)m).equals(arg.equals('&0'));
if (m) &return StringDescription.toString(m).equals(arg.toString()); else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) return arg; else return NS_ERROR_NOT_INITIALIZED;
if ((m == '<0') && (arg == '0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &return StringDescription.toString(m).equals(arg.toString()); else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); return NS_OK;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg) &return m.description.get().equals(arg.get()); <else return -1;
if (m) return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '&0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('&0') : StringDescription.toString(m).equals('0');
if (arg) &return arg; &else return NS_ERROR_NOT_INITIALIZED;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
return m.Equals(arg.Equals('0'));
if ((m == '<0') && (arg == '<0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.n"); return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) &return m.description.get().equals(arg.get()); &else <return -1;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); else <return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) <return m.description.get().equals(arg.get()); <else <return -1;
if (m!= null) <return NS_OK; &return nsCRT::strdup(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <<else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) ret = StringDescription.toString(m); if (ret) return ret; <return ret;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m!= null) &return NS_OK; <return nsCRT::strdup(m).equals(arg.toString());
if ((m == '0') && (arg == '0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('0') : StringDescription.toString(m).equals('0');
if ((m == '&0') && (arg == '<0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg) return m.description.get().equals(arg.get()); else <return -1;
if ((m == '0') && (arg == '0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) &return arg; else return NS_ERROR_NOT_INITIALIZED;
if (m) ret = StringDescription.toString(m); if (ret) &return ret; &return ret;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <&else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.n"); &return NS_OK;
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('&0') : StringDescription.toString(m).equals('<0');
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &<else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <<else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); &return NS_OK;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); &else return StringDescription.toString(m).equals(arg.toString());
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) &return m.description.get().equals(arg.get()); &else return -1;
if (m) return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <<else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); <else <return StringDescription.toString(m).equals(arg.toString());
if ((m == '<0') && (arg == '&0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.n"); <return NS_OK;
if (m!= null) return NS_OK; return nsCRT::strdup(m).equals(arg.toString());
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); &else &return StringDescription.toString(m).equals(arg.toString());
if ((m == '&0') && (arg == '<0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg) <return arg; <<else return NS_ERROR_NOT_INITIALIZED;
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); &else return StringDescription.toString(m).equals(arg.toString());
if (m) return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <&else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '<0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '&0') && (arg == '0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) return StringDescription.toString(m).equals(arg.toString()); else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); <else &return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
/* Init(), do a -C for an argument. */ if (m) &nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('0') : StringDescription.toString(m).equals('<0');
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); else return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &<else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); else &return StringDescription.toString(m).equals(arg.toString());
if ((m == '<0') && (arg == '0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); &else &return StringDescription.toString(m).equals(arg.toString());
if (m) &ret = StringDescription.toString(m); if (ret) return ret; <return ret;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &&else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '<0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) &return m.description.get().equals(arg.get()); else &return -1;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <<else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &&else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) return arg; <else return NS_ERROR_NOT_INITIALIZED;
if (m) &ret = StringDescription.toString(m); if (ret) &return ret; return ret;
if (arg) <return m.description.get().equals(arg.get()); &else <return -1;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); else return StringDescription.toString(m).equals(arg.toString());
if (arg) return arg; &else return NS_ERROR_NOT_INITIALIZED;
if (m) &return StringDescription.toString(m).equals(arg.toString()); else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
/* Init(), do a -C for an argument. */ if (m) nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if (m) return StringDescription.toString(m).equals(arg.toString()); else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '<0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg) return m.description.get().equals(arg.get()); <else return -1;
if ((m == '<0') && (arg == '0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '<0') && (arg == '&0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); <else <return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); else &return StringDescription.toString(m).equals(arg.toString());
if (m) <return StringDescription.toString(m).equals(arg.toString()); else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '&0') && (arg == '&0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <<else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) <return arg; &&else return NS_ERROR_NOT_INITIALIZED;
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('<0') : StringDescription.toString(m).equals('<0');
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
return StringDescription.toString(m).equals(arg.toString());
if (m) return StringDescription.toString(m).equals(arg.toString()); <else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) return m.description.get().equals(arg.get()); <else <return -1;
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); <return NS_OK;
if (arg) &return arg; &<else return NS_ERROR_NOT_INITIALIZED;
if (m) <ret = StringDescription.toString(m); if (ret) <return ret; <return ret;
if ((m == '&0') && (arg == '<0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
return StringDescription.equals((StringDescription)m).equals(arg.equals('<0'));
if (arg) return arg; <&else return NS_ERROR_NOT_INITIALIZED;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) ret = StringDescription.toString(m); if (ret) return ret; return ret;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); &else &return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <&else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) &return m.description.get().equals(arg.get()); <else &return -1;
if (arg) &return arg; <<else return NS_ERROR_NOT_INITIALIZED;
if ((m == '0') && (arg == '<0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '<0') && (arg == '<0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &return StringDescription.toString(m).equals(arg.toString()); else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '0') && (arg == '&0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &&else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '&0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); return NS_OK;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); <else return StringDescription.toString(m).equals(arg.toString());
if ((m == '&0') && (arg == '<0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); &else return StringDescription.toString(m).equals(arg.toString());
&return StringDescription.toString(m).equals(arg.toString());
if ((m == '0') && (arg == '&0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
return StringDescription.toString(m).get() == '&0' && StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &&else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '0') && (arg == '0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &ret = StringDescription.toString(m); if (ret) <return ret; &return ret;
/* Init(), do a -C for an argument. */ if (m) nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); &return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &<else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) <return arg; &<else return NS_ERROR_NOT_INITIALIZED;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '<0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <ret = StringDescription.toString(m); if (ret) return ret; <return ret;
if (m) return StringDescription.toString(m).equals(arg.toString()); else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m!= null) &return NS_OK; return nsCRT::strdup(m).equals(arg.toString());
if (arg) <return arg; else return NS_ERROR_NOT_INITIALIZED;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <<else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '<0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.n"); return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); &else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '&0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) ret = StringDescription.toString(m); if (ret) <return ret; &return ret;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <<else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); else return StringDescription.toString(m).equals(arg.toString());
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('0') : StringDescription.toString(m).equals('&0');
if ((m == '&0') && (arg == '0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '0') && (arg == '&0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '&0') && (arg == '0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '<0') && (arg == '0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &ret = StringDescription.toString(m); if (ret) <return ret; return ret;
if (arg) return m.description.get().equals(arg.get()); &else &return -1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); &return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); <else &return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <&else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &<else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '&0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
return m.Equals(arg.Equals('<0'));
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '0') && (arg == '0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <return StringDescription.toString(m).equals(arg.toString()); else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) <return arg; &else return NS_ERROR_NOT_INITIALIZED;
if (arg) &return m.description.get().equals(arg.get()); else <return -1;
if (arg) <return m.description.get().equals(arg.get()); else &return -1;
if ((m == '0') && (arg == '0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <&else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) <return m.description.get().equals(arg.get()); else return -1;
if ((m == '0') && (arg == '<0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '0') && (arg == '&0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); return NS_OK;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.n"); &return NS_OK;
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('&0') : StringDescription.toString(m).equals('&0');
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.n"); <return NS_OK;
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('<0') : StringDescription.toString(m).equals('0');
<return StringDescription.toString(m).equals(arg.toString());
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); <return NS_OK;
if (m) <ret = StringDescription.toString(m); if (ret) return ret; &return ret;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) <ret = StringDescription.toString(m); if (ret) return ret; return ret;
if (m) return StringDescription.toString(m).equals(arg.toString()); &else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) &return arg; &&else return NS_ERROR_NOT_INITIALIZED;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '&0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) return StringDescription.toString(m).equals(arg.toString()); else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '&0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &ret = StringDescription.toString(m); if (ret) return ret; return ret;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); &else <return StringDescription.toString(m).equals(arg.toString());
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); <else &return StringDescription.toString(m).equals(arg.toString());
if (arg) <return m.description.get().equals(arg.get()); &else return -1;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); <return NS_OK;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); <else return StringDescription.toString(m).equals(arg.toString());
if (m) return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '&0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
return StringDescription(m).Equals(arg.Equals('0'));
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); <else <return StringDescription.toString(m).equals(arg.toString());
if (m) return StringDescription.toString(m).equals(arg.toString()); &else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '&0') && (arg == '0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) return arg; &<else return NS_ERROR_NOT_INITIALIZED;
if ((m == '&0') && (arg == '0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
return StringDescription(m).Equals(arg.Equals('<0'));
if (m) &return StringDescription.toString(m).equals(arg.toString()); else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '0') && (arg == '<0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <ret = StringDescription.toString(m); if (ret) <return ret; &return ret;
if ((m == '0') && (arg == '0')) &return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
return StringDescription.toString(m).get() == '<0' && StringDescription.toString(m).equals(arg.toString());
if (m) ret = StringDescription.toString(m); if (ret) <return ret; <return ret;
if ((m == '0') && (arg == '&0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &return StringDescription.toString(m).equals(arg.toString()); else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '&0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '<0') && (arg == '<0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); &else <return StringDescription.toString(m).equals(arg.toString());
if ((m == '&0') && (arg == '<0')) <return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
/* Init(), do a -C for an argument. */ if (m) nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); <return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if (m!= null) <return NS_OK; return nsCRT::strdup(m).equals(arg.toString());
if (arg) <return m.description.get().equals(arg.get()); <else &return -1;
if (arg) &return m.description.get().equals(arg.get()); <else <return -1;
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); <return NS_OK;
if (m) ret = StringDescription.toString(m); if (ret) <return ret; return ret;
if (m!= null) &return NS_OK; &return nsCRT::strdup(m).equals(arg.toString());
if (m) return StringDescription.toString(m).equals(arg.toString()); &else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <&else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '<0') && (arg == '0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.n"); return NS_OK;
if (arg) return m.description.get().equals(arg.get()); else return -1;
/* Init(), do a -C for an argument. */ if (m) &nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); &return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m) ret = StringDescription.toString(m); if (ret) return ret; &return ret;
if ((m == '<0') && (arg == '0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) return m.description.get().equals(arg.get()); &else return -1;
if (arg) <return arg; <else return NS_ERROR_NOT_INITIALIZED;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <<else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); &return NS_OK;
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); &return NS_OK;
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &&else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &<else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) return arg; &&else return NS_ERROR_NOT_INITIALIZED;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '&0') && (arg == '0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <ret = StringDescription.toString(m); if (ret) &return ret; &return ret;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <&else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &&else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '<0') && (arg == '<0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '0') && (arg == '<0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg) <return m.description.get().equals(arg.get()); <else return -1;
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.n"); <return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; <else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '<0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '&0') && (arg == '&0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if ((m == '&0') && (arg == '&0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <ret = StringDescription.toString(m); if (ret) &return ret; return ret;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m == null) return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); &return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) return m.description.get().equals(arg.get()); else &return -1;
if ((m == '&0') && (arg == '<0')) return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &return StringDescription.toString(m).equals(arg.toString()); else &if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
/* Init(), do a -C for an argument. */ if (m) &nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); <return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if (arg) &return m.description.get().equals(arg.get()); &else &return -1;
if (m) <return StringDescription.toString(m).equals(arg.toString()); &else <if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &&else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) &ret = StringDescription.toString(m); if (ret) &return ret; &return ret;
if ((m == '<0') && (arg == '<0')) return 0; <if (!(m == '0') && (m == '0')) return 1; return 1;
return m.Equals(arg.Equals('&0'));
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); else <return StringDescription.toString(m).equals(arg.toString());
if ((m == '<0') && (arg == '&0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &ret = StringDescription.toString(m); if (ret) return ret; &return ret;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '&0') && (arg == '<0')) &return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) return StringDescription.toString(m).equals(arg.toString()); else &if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &<else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) &ret = StringDescription.toString(m); if (ret) <return ret; <return ret;
if (m) &ret = StringDescription.toString(m); if (ret) &return ret; <return ret;
/* Init(), do a -C for an argument. */ if (m) <nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); &return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if ((m == '<0') && (arg == '<0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
return StringDescription.toString(m).equals(arg.toString())? StringDescription.toString(m).equals('<0') : StringDescription.toString(m).equals('&0');
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &<else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) return m.description.get().equals(arg.get()); &else <return -1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); &return NS_OK;
if (m) return StringDescription.toString(m).equals(arg.toString()); <else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '0') && (arg == '&0')) <return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) &return StringDescription.toString(m).equals(arg.toString()); <else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '&0') && (arg == '&0')) return 0; if (!(m == '0') && (m == '0')) return 1; return 1;
/* Init(), do a -C for an argument. */ if (m) <nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); <return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if (arg) &return arg; <&else return NS_ERROR_NOT_INITIALIZED;
return StringDescription.toString(m).get() == '0' && StringDescription.toString(m).equals(arg.toString());
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); else &return StringDescription.toString(m).equals(arg.toString());
if (m!= null) return NS_OK; <return nsCRT::strdup(m).equals(arg.toString());
if (m) return StringDescription.toString(m).equals(arg.toString()); else <if (arg) &/* We have no arg, but no args */ return NS_OK; return NS_OK;
if (arg) <return m.description.get().equals(arg.get()); else <return -1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.<n"); return NS_OK;
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; &&else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '&0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; &<else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.n"); &return NS_OK;
if ((m == '<0') && (arg == '<0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m!= null) return NS_OK; &return nsCRT::strdup(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) &return arg; <else return NS_ERROR_NOT_INITIALIZED;
if (arg) <return m.description.get().equals(arg.get()); &else &return -1;
if (m.mParent) <return StringDescription.toString(m).equals(arg.toString()); <else return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &<else <return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (arg) &return m.description.get().equals(arg.get()); else return -1;
if (m) return StringDescription.toString(m).equals(arg.toString()); <else if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
return StringDescription(m).Equals(arg.Equals('&0'));
if (m) <ret = StringDescription.toString(m); if (ret) <return ret; return ret;
if (m.mParent) &return StringDescription.toString(m).equals(arg.toString()); &else <return StringDescription.toString(m).equals(arg.toString());
if ((m == '<0') && (arg == '<0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <else return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m) &return StringDescription.toString(m).equals(arg.toString()); &else if (arg) </* We have no arg, but no args */ return NS_OK; return NS_OK;
if ((m == '&0') && (arg == '<0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m) <ret = StringDescription.toString(m); if (ret) &return ret; <return ret;
/* Init(), do a -C for an argument. */ if (m) <nsString::key in_Key = m; return StringDescription.toString(m).equals(in_Key.Key()); return StringDescription.toString(in_Key.Key()).equals(in_Key.Key());
if (m!= null) <return NS_OK; <return nsCRT::strdup(m).equals(arg.toString());
if ((m == '&0') && (arg == '&0')) <return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (arg) return arg; <<else return NS_ERROR_NOT_INITIALIZED;
if (m.mType == nsHTMLAtoms::td) <return NS_CONTENT_ATTR_HAS_VALUE; &&else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if ((m == '0') && (arg == '0')) &return 0; &if (!(m == '0') && (m == '0')) return 1; return 1;
if (m == null) <return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); <return NS_OK;
if (arg) <return arg; <&else return NS_ERROR_NOT_INITIALIZED;
if (m) ret = StringDescription.toString(m); if (ret) &return ret; <return ret;
if (m.mType == nsHTMLAtoms::td) &return NS_CONTENT_ATTR_HAS_VALUE; <&else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
if (m.mParent) return StringDescription.toString(m).equals(arg.toString()); else <return StringDescription.toString(m).equals(arg.toString());
if (m.mType == nsHTMLAtoms::td) return NS_CONTENT_ATTR_HAS_VALUE; <<else &return StringDescription.toString(m).equals(arg.toString()); return NS_OK;
return StringDescription.equals((StringDescription)m).equals(arg.equals('0'));
if (m == null) &return nsCRT::strdup("nsIAtom: can't get a namespace.&n"); <return NS_OK;
if (m) <return StringDescription.toString(m).equals(arg.toString()); <else &if (arg) /* We have no arg, but no args */ return NS_OK; return NS_OK;
