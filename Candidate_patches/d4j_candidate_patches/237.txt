return parseTypeName(token.get());
return parseContextTypeName(token);
return parseTypeName(token, true);
return ParseTypeName(token);
return parseTypeName(token, false);
return parseTypeName(token, null);
return parseTypeName(token, 0);
return parseTypeName(token, token);
return (parseTypeName(token));
return parseTypeName(&token);
return parseTypeName(token);
return parseTypeName(Token);
return parseTypeName(node);
return token;
return parseTypeName(token.GetUnicode());
return parseTypeName(aToken);
return parseTypeName(*token);
return parseTypeName(token, this);
return parseTypeName(token.get());
return parseTypeName(token, "");
return parseContextTypeExpression(token);
return parseTypeName(token.GetUnicode());
return parseTypeName(token, token.get());
return parseTypeName(token, '0');
return parseTypeName(token, &token);
return parseTypeName(token, false);
return parseTypeName(token, type);
return parseTypeName(token.mType);
return parseTypeName(token, aType);

return parseContextName(token);
return parseTypeName(name);
return parseTypeName(token, 1);
return parseTypeName(token, value);
return parseTypeName(token, name);
return parseTypeName (token);
return parseTypeName();
return parseTypeName(token, null);
return parseTypeName(null);
return parseTypeName(token, self);
return parseTypeNameWithConversion(token);
return parseContentTypeName(token);
return parseTypeName(token, -1);
return parseTypeName(string);
return parseTypeName(token, rv);
return parseTypeName(token, symbol);
return parseTypeName(token.mType);
result = parseTypeName(token); return result;
return parseTypeName(token, flags);
return parseTypeName(str);
return parseTypeName(token, mType);
return parseTypeExpression(token);
return parseTypeName(token, &ret);
return parseTypeName(token, &rv);
return parseTypeName(token).get();
return parseTypeName((void**)token);
return parseTypeNameWithContext(token);
return parseTypeName(token, namespaceID);
return parseTypeName(token, token.get());
return parseTypeName(this, token);
return parseTypeName(token, key);
return parseTypeName(node, token);
return parseTypeName(jsToken);
return parseTypeName(token, &key);
return parseTypeName(token, result);
return parseTypeName((void*)token);
return parseTypeName(token,true);
return parseTypeName(token, token.mType);
return parseTypeName(token, offset);
return parseTypeName(token.Token());
return parseTypeName(token, context);
return parseTypeName(token, sizeof token);
return parseTypeName(token, false);
return parseTypeName(nodeInfo);
return parseTypeNode(token);
return parseTypeName( token );
return parseTypeName(token,null);
return parseTypeName(token.mNodeInfo);
return parseContextType(token);
return parseTypeName(token, true);
return parseTypeName(token, &mType);
return typeName(token);
return parseTypeName(token, aName);
return ParseContextTypeName(token);
return(parseTypeName(token));
return parseTypeName(token, &node);
return parseTypeName(result);
return parseTypeName(token, &aType);
return (ParseTypeName(token));
return parseTypeName(aType);
return parseTypeName(key);
return self.parseTypeName(token);
return parseObjectName(token);
return parseTypeName(token, &name);
return parseTypeName(token, parent);
return parseTypeName(null);
return parseTypeName(token.Token);
return parseTypeName(token1, token2);
return parseTypeName(token, &type);
return parseTypeName(token, prefix);
return parseTypeName(key, token);
return parseTypeName(token.mNodeInfo);
return parseTypeName(eToken);
return parseTypeName(jsDocToken);
return parseTypeName(token, true);
return parseTypeName(name, token);
return rv;
return parseTypeName((void **)token);
return parseTypeName(ntoken);
return parseTypeName(token, l);
return parseTypeName(token, aValue);
return &parseTypeName(token);
return parseParseTypeName(token);
return parseObjectTypeName(token);
return parseTypeNameInternal(token);
return parseTypeName(token, len);
return parseTypeName(token, charset);
return getParseTypeName(token);
return (paraseTypeName(token));
return parseTypeName(token, nodeInfo);
return parseTypeName(JsDocToken);
return parseTypeName2(token);
return parseTypeName(token, val);
return parseTypeName(jstoken);
return null;
return parseTypeName(token, &res);
return parseTypeName(token, nameSpaceID);
return parseTypeName(token, &context);
return parseClassName(token);
return parseTypeNameNode(token);
return NodeTypeName(token);
return parseTypeName(token, &str);
return typename(token);
return parseCTypeName(token);
return parseTypeName(token,false);
return parseTypeName(token, aNodeInfo);
return parseTypeName(token.Token());
return parseTypeName(token, data);
return parseTypeName(token, literal);
return parseTypeName(type);
return parseTypeName(token.Name);
return parseTypeName(token, token.mType);
return parseTypeName(context, token);
return parseTypeName(token, *this);
return parseTypeName(token, kNodeInfo);
return name;
return parseTypeName(token, tok);
return parseTypeName(token, auth);
return new NodeTypeName(token);
return parseNodeTypeName(token);
return parseTypeName(token, 'n');
return parseTypeName(token, &data);
return parseTypeName(token, aToken);
return parseTypeName(token, nodeType);
return *token;
return parseTypeName(token, &t);
return parseTypeName(token, Token);
return parseTypeName(token.token);
return parseTypeName(token, encoding);
return parseTypeName(token, null, null);
return parseTypeName(token, ret);
return nodeTypeName(token);
token = parseTypeName(token); return token;
return parseTypeName(token, fn);
return parseTypeName(token, dummy);
return parseTypeName(token, token.type);
return parseTypeName(token, &val);
return parseTypeName(token, &aResult);
return parseTypeName(token, aNodeType);
return parseTypeName(token, parser);
return parseTypeName(token, &s);
return parseTypeName(token, id);
return parseTypeName(token.GetNodeInfo());
return parseTypeName(token, authType);
return parseTypeName(token, fmt);
return result;
return this;
return parseTypeName(t);
return parseTypeName(token.mOwner);
return parseTypeName(token, &iter);
return parseTypeName(token, aNode);
return parseTypeName(token.GetNodeType());
return parseTypeName(token, &flags);
return parseTypeName(token.cstr());
return parseTypeName(l);
return parseTypeName(token.mParser);
node = parseTypeName(token); return node;
return parseTypeName(token);  return 0;
return parseTypeName(token, &charset);
return parseTypeName(0);
if (token) return parseTypeName(token);
return parseTypeName(token, "node");
return parseTypeName(token, aResult);
return parseTypeName(token, null);
return parseTypeName(token, kNC_Type);
return parseTypeName(token, &mDocument);
return parseTypeName(token, &mHash);
return parseTypeName(token, &token.eObject);
return parseTypeName(token, namespaceID_None);
return parseTypeName(token, nameSpace);
return parseTypeName(token, &nodeInfo);
return parseTypeName(token, &op.op);
return parseTypeName(token, "rdf");
return parseTypeName(nsDocToken::Token);
return parseTypeName(token, &inner);
return parseTypeName(token, kIID);
return parseTypeName(token, &strlen(str));
return parseTypeName(token, &mCX);
return parseTypeName(nsNodeInfo::Token);
return parseTypeName(token, getter_AddRefs(token));
return parseTypeName(token, mDocument);
return parseTypeName(token, parseTypeName);
return parseTypeName(token, token.GetUnicode());
return parseTypeName(token, &mElement);
return parseTypeName(token, &isInType);
return parseTypeName(token, eNotEmpty);
return parseTypeName(token, fc);
return parseTypeName(token, &aNode);
return parseTypeName(token, NS_LITERAL_STRING("").get());
return parseTypeName(token, &token.len);
return parseTypeName(token, nsCRT::strdup(token));
return parseTypeName(token, "#");
return parseTypeName(token, fcnt);
return parseTypeName(token, fget);
return parseTypeName(token, (void**)&token);
return parseTypeName(token, token.mContent);
return parseTypeName(token, &mNameSpace);
return parseTypeName(token, &mNodeType);
return parseTypeName(token, &sc);
return parseTypeName(token, &token.GetOwnerDocument());
return parseTypeName(token, fprintf(stdout, "%s", token));
return parseTypeName(token, '.');
return parseTypeName(token, getter_AddRefs(typeName));
return parseTypeName(token, &contextType);
return parseTypeName(token, kNC_None);
return parseTypeName(token, &mTypeName);
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr), token));
return parseTypeName(token, kDOMNodeInfo);
return parseTypeName(token, &token.id);
return parseTypeName(token, "", "", &key);
return parseTypeName(token, &src);
return parseTypeName(token, &token.GetContent());
return parseTypeName(token, eFormat);
return parseTypeName(token, &gArena);
return parseTypeName(token, parseTypeStrings);
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %s<n", token, fprintf(stderr), token));
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %s&n", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %s&n", token, fprintf(stderr), token));
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %s&n", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %s<n", token, fprintf(stderr), token));
return parseTypeName(token, 'n');
return parseTypeName(token, '<n');
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %s&n", token, fprintf(stderr), token));
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %s<n", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %s<n", token, fprintf(stderr), token));
return parseTypeName(token, '<0');
return parseTypeName(token);
return parseTypeName(token); <return 0;
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %s&n", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr), token));
return parseTypeName(token, '&0');
<return parseTypeName(token);
return parseTypeName(token);
return parseTypeName(token); &return 0;
&return parseTypeName(token);
return parseTypeName(token); return 0;
<return parseTypeName(token);
&return parseTypeName(token);
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %s<n", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %s&n", token, fprintf(stderr), token));
return parseTypeName(token, '&n');
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %s<n", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr), token));
return parseTypeName(token, '0');
return parseTypeName(token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr, "%s: parseContextTypeExpression %s", token, fprintf(stderr, "%s: parseContextTypeExpression %sn", token, fprintf(stderr), token));
