golden:
mockInstance = classInstantiator.instantiate(mockedProxyType);
inference:
mockInstance = classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(&mockedProxyType);
mockInstance = instantiate(mockedProxyType);
mockInstance = mockInstance.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, settings);
mockInstance = classInstantiator.instantiate();
mockInstance = classInstantiator.instantiate(socketType);
mockInstance = classInstantiator.instantiate(classInstantiator);
mockInstance = classInstantiator;
mockInstance = classInstantiator.instantiate(mockedMockType);
mockInstance = classInstantiator.instantiate(mockedType);
mockInstance = mockInstance.instantiate(mockedProxyType);
mockInstance=classInstantiator.instantiate(mockedProxyType);
mockInstance = &classInstantiator.instantiate(mockedProxyType);
mockInstance = mockedProxyType.instantiate();
mockInstance = mockedProxyType;
mockInstance = ClassInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate( mockedProxyType );
T mockInstance = classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedMode);
mockInstance = classInstantiator_instantiate(mockedProxyType);
mockInstance = classInstantiator. Instantiate(mockedProxyType);

mockInstance = classes.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(classInstantiator.get());
mockInstance = classInstantiator.instantiate(settings.getTypeToMock());
mockInstance = classInstance.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiateInstance(mockedProxyType);
mockInstance = classInstantiator.instantiate (mockedProxyType);
mockInstance = classInstantiator::instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedMock);
mockInstance = builder.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mock);
mockInstance = classInstantiator.instantiate(mockInstance);
mockInstance = classInstantiator.instantiate(mockedProxy);
mockInstance = classInstantiator.instantiate(mockedObject);
mockInstance = mockInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedInstance);
mockInstance = classInstantiator.instantiateWithType(mockedProxyType);
mockInstance = null;
mockInstance = classInstantiator.instantiate(type);
mockInstance = classInstantiator.instantiate(mockedProxyType, context);
mockInstance = classInstantiator().instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedType, null);
mockInstance = mockInstance;
mockInstance = getter_AddRefs(classInstantiator);
mockInstance = classInstantiator.create(mockedProxyType);
mockInstance = classInstantiator.instantiate(&mockedProxyType);
mockInstance = nsCRT::instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedType.get());
mockInstance = classInstantiator.instantiate(lock);
mockInstance = classInstantiator.instantiate(smockedProxyType);
mockInstance = factory.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, classes);
mockInstance = classInstantiator.instantiate(this.mockedProxyType);
mockInstance = classInstantiator.instantiate(handler);
mockInstance = classInstantiator.instantiateMock(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedMockProxyType);
mockInstance = (classInstantiator.instantiate(mockedProxyType));
mockInstance = classInstantiator.instantiate(mockedProxyType, this);
mockInstance = mockAccess.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate("");
mockInstance = classInstantiator.instantiate(mockedProxyMode);
mockInstance = classInstantiator.instantiate(mockedMethodType);
mockInstance = mockInstance.instantiate();
mockInstance = classInstantiator. instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(this);
mockInstance = classInstantiator.instantiate(mockedProxyType, false);
mockInstance = classInstantiator.instantiate(socket);
mockInstance = classInstantiator.instantiate(ockedProxyType);
mockInstance = classInstance.instantiate(mockedProxyType);
mockInstance = methodInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedChild);
mockInstance = classInstantiator.instantiate(mockedPtr);
mockInstance = mockInstance.instantiate();
mockInstance = instantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(str);
mockInstance = classInstantiator.instantiate(settings);
mockInstance = classMethodInterceptor.instantiate(mockedProxyType);
mockInstance = mockAccess.instantiate(mockedProxyType);
mockInstance =!classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, true);
mockInstance = classInstantiator.instantiate(classInstantiator.class);
mockInstance = classInstantiator.instantiate(MockedProxyType);
mockInstance = classInstantiator.instantiateObject(mockedProxyType);
mockInstance = classInstantiator.instantiate(asInstance);
mockInstance = instance.instantiate(mockedProxyType);
mockInstance = classesInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiation.instantiate(mockedProxyType);
mockInstance = &classInstantiator.instantiate(mockedProxyType);
mockInstance = null;
mockInstance = classInstantiator.instantiate(slotType);
mockInstance = null;
mockInstance = classInstantiator.instantiate(target);
mockInstance = loader.instantiate(mockedProxyType);
mockInstance= classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedType, settings);
mockInstance = classInstantiator.instantiate(mockedProxyType, settings);
mockInstance = mocker.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate();
mockInstance = classInstantiator.instantiateType(mockedProxyType);
mockInstance = classInstantiator.instantiate(sockedProxyType);
mockInstance = classInstantiator.instantiate(!mockedProxyType);
mockInstance = typeInstantiator.instantiate(mockedProxyType);
mockInstance = classArena.instantiate(mockedProxyType);
mockInstance = 0;
mockInstance = classInfo.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mocked_type);
mockInstance = classInstantiator.instantiate(socketProxyType);
mockInstance = classInstantiator.instantiate(rv);
mockInstance = classInstantiator.instantiate(method);
mockInstance = classInstantiator.instantiate(slot);
mockInstance = classInstantiator.instantiate(mockedInstanceType);
mockInstance = classInstantiator.instantiate(mockedProxyType, options);
mockInstance = aClassInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(proxyType);
mockInstance = classInstantiator.instantiate(classInstantiator.mType);
mockInstance = classInstantiator.instantiate(mockedProxyInstance);
mockInstance = classInstantiator.instantiate(mockedProxyType, status);
mockInstance = classInstantiator.instantiate(mockedProxyType, 1);
mockInstance = classInstantiator.instantiate(mockProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType());
mockInstance = classInstantiator.instantiate(mockedObjectType);
mockInstance = nodeInfo.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(*mockedProxyType);
mockInstance = instantiate(classInstantiator);
mockInstance = classInstantiator.instantiate(aType);
mockInstance = classInstantiator.instantiate(Type);
mockInstance = classInstantiator.instantiate(result);
mockInstance = classInstantiator.instantiate(mockedType);
mockInstance = classInstantiator.instantiate(mock_type);
mockInstance = classInstantiator.instantiate(mockedProxyType, setting);
mockInstance = classInstantiator.instantiate(mockEventType);
mockInstance = loader.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockingType);
mockInstance = mockMethodInterceptor.instantiate(mockedProxyType);
mockInstance = factory.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(object);
mockInstance = classInstantiator.instantiate(mockedProxyTypes);
mockInstance = mockType;
mockInstance = classInstantiator.instantiate(moduleType);
mockInstance = classInstantiator(mockedProxyType);
mockInstance = classInstantiator.instantiate(socketType);
mockInstance = classInstantiator.instantiate(mockedMethod);
mockInstance = classInstantiator.instantiate(mockedContractType);
mockInstance = classInstantiator.instantiate(mockedMockInstance);
mockInstance = session.instantiate(mockedProxyType);
mockInstance = mock.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(this, mockedProxyType);
mockInstance = object.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(classType);
mockInstance = classInstantiator.instantiate(classInstantiator);
mockInstance = classInstantiator.instantiate(mockedClass);
mockInstance = classInstantiator.instantiate(__func__);
mockInstance = classInstantiator.instantiate(mockedModel);
mockInstance = classes[mockedProxyType].instantiate();
mockInstance = classInstantiator.instantiate(scheduler);
mockInstance = classInstantiator.instantiate(mockedProxyType)
mockInstance = classInstantiator.instantiate(mockedProxyType, parameters);
mockInstance = classInstantiator.instantiate(mockedChildType);
mockInstance = classInstantiator.instantiate(instance);
mockInstance = classInstantiator.instantiate(key);
mockInstance = classInstantiator.instantiate(mockedChannel);
mockInstance = classInstantiator.instantiate(mocketType);
mockInstance = classInstantiator.instantiate((mockedProxyType));
mockInstance = classInstantiator.instantiate(mockType);
mockInstance = classInstantiator.instantiate(mockingProxyType);
mockInstance = classInstantiator.instantiate(mockedContentType);
mockInstance = classInstantiator.instantiate(class);
mockInstance = classInstantiator.instantiate(mockedProxyType,0);
mockInstance = classInstantiator.instantiate(mockedProxyType );
mockInstance = classInstantiator.instantiate(mockedModuleType);
mockInstance = classInstantiator.instantiate(mocks);
mockInstance = classInstantiator.instantiateWithClass(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockObject);
mockInstance = classInstantiator.instantiate(mockedLock);
mockInstance = classInstantiator.instantiate(socketedProxyType);
mockInstance = classInstantiator.instantiate(mockedMessage);
mockInstance = (classInstantiator.instantiate(mockedProxyType))
mockInstance = classInstantiator.instantiate(classProxyType);
mockInstance = classInstantiator.instantiate(mockedType.mType);
mockInstance = classInstantiator.instantiate(tmockedProxyType);
mockInstance = classInstantiator.instantiate(mockedContext);
mockInstance = classInstantiator.instantiate(tmp);
mockInstance = classInstantiator.instantiate(mockedModType);
mockInstance = classInstantiator.instantiate(instantiator);
mockInstance = classInstantiator.instantiate(mockedProxyType, null);
mockInstance = classInstantiator.instantiate(mockedProxyType, &saveHidden);
mockInstance = classInstantiator.instantiate(sc.mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, &mockedProxyType);
mockInstance = mockIsInstance(classInstantiator);
mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getExtraInterfaces());
mockInstance = classInstantiator.instantiate(classInstantiator.mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, &mockedInstance);
mockInstance = mockInstance = classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(asMockedMockHandler, MockBytecodeGenerator.get( settings.getTypeToMock(), settings.getExtraInterfaces() ));
mockInstance = classInstantiator.instantiate(aMock);
mockInstance = aMockInstance.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate((caddr_t)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, false);
mockInstance = classInstantiator.instantiate(strcmp(mockedProxyType), std::sizeof(mockedProxyType));
mockInstance = classInstantiator.instantiate(mockedProxyType, 0);
mockInstance = classInstantiator.instantiate(mockedProxyType, null);
mockInstance = sock.instantiate(mockedProxyType);
mockInstance = mockGetCachedMethodType();
mockInstance = sockProxy.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, mInstances.GetModuleType());
mockInstance = mockMocks.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(strlen(mockedProxyType));
mockInstance = nsClassInstantiator::instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, getter_AddRefs(mockInstance));
mockInstance = classInstantiator.instantiate(mockedProxyType, &selected );
mockInstance = classInstantiator.instantiate(mockedProxyType, (PRUint32)settings.getTypeToMock());
mockInstance = classInstantiator.instantiate(asInternalMockHandler(handler));
mockInstance = classInstantiator.instantiate(mockedProxyType, &scheduler);
mockInstance = classInstantiator.instantiate(mockedProxyType, &sc.mock);
mockInstance = classInstantiator.instantiate((struct Class>)mockedProxyType);
mockInstance = kInstanceImpl;
mockInstance = classInstantiator.instantiate((struct object *)mockedProxyType);
mockInstance = classInstantiator.instantiate(classInstantiator.mockType);
mockInstance = kChildInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, (classInstantiator_t)&mockedProxyType);
mockInstance = classInstantiator.instantiate((struct mockerProxy*)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, (void **)&mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getTypeToMock());
mockInstance = classInstantiator.instantiate(mockedProxyType, mCachedSerializableMode);
mockInstance = classInstantiator.instantiate(mockedProxyType, &rv);
mockInstance = classInstantiator.instantiate(mockedProxyType, &classInstantiator);
mockInstance = classInstantiator.instantiate((struct mockedProxyType*) mockedProxyType);
mockInstance = classInstantiator.instantiate(classInstantiator.get(), mockedProxyType);
mockInstance = mockEnumeratedCachedMocks(classInstantiator, mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, &strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen(strlen))))))))) )) ))))))))))))))))))))))) == null; mockInstance = classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, &isProxyInstance);
mockInstance = classInstantiator.instantiate(mockedProxyType, mock_next);
mockInstance = classInstantiator.instantiate(mockedProxyType, mckedChildren);
mockInstance = classInstantiator.instantiate(mockedProxyType, &defaultMockInstance);
mockInstance = classInstantiator.instantiate(mockedProxyType);  else  mockInstance = null;
mockInstance = mockClient.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, mocks.mockProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, mockedProxyType, null);
mockInstance = classInstantiator.instantiate(asInternalMockHandler(handler), settings);
mockInstance = classInstantiator.instantiate(mockedProxyType, &mockedMethod);
mockInstance = classInstantiator.instantiate((struct mockAccess *)&mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, &mockedProxy);
mockInstance = classInstantiator.instantiate(mockedProxyType, &selected.get());
mockInstance = classInstantiator.instantiate(mockedProxyType, &savedMocks);
mockInstance = classInstantiator.instantiate(mockedProxyType);  else  mockInstance = null;
mockInstance = classInstantiator.instantiate(aMockedMockType);
mockInstance = classInstantiator.instantiate(aMockEvent);
mockInstance = mockitoInstance.instantiate(mockedProxyType);
mockInstance = mockGetModule();
mockInstance = classInstantiator.instantiate((jsCallbacks*)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType, &mockedMockInstance);
mockInstance = classInstantiator.instantiate((classInstantiator *)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType); if (mockInstance) mockInstance.sc_mocks_removed = false;
mockInstance = classInstantiator.instantiate(mockedProxyType); &else <mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); else mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); else <mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); else mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); <else mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); <else <mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); else <mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); &else mockInstance = null;
mockInstance = classInstantiator.instantiate((struct Class&>)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType); else &mockInstance = null;
mockInstance = classInstantiator.instantiate((struct Class<>)mockedProxyType);
mockInstance = classInstantiator.instantiate((struct <Class<>)mockedProxyType);
mockInstance = classInstantiator.instantiate((struct &Class&>)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType); &else &mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); <else &mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType); &else &mockInstance = null;
mockInstance = classInstantiator.instantiate((struct &Class<>)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType); &else mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); &else <mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); <else &mockInstance = null;
mockInstance = classInstantiator.instantiate((struct <Class>)mockedProxyType);
mockInstance = classInstantiator.instantiate((struct Class>)mockedProxyType);
mockInstance = classInstantiator.instantiate((struct <Class&>)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType); <else <mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedProxyType); else &mockInstance = null;
mockInstance = classInstantiator.instantiate((struct &Class>)mockedProxyType);
mockInstance = classInstantiator.instantiate(mockedProxyType); <else mockInstance = null;
mockInstance = classInstantiator.instantiate(mockedType);
