golden:
return multiplyFast(x);
inference:
return multiply(x);
return multiplyFast((int)x);
return x;
return multiplyFast(x, 0);
return (multipleFast(x));
return (double) multiplyFast(x);
return (int) multiplyFast(x);
return multipli(x);
return multiplyFast(&x);
return multipliFast((int)x);
return _multipleFast(x);
return multiply(x, 0);
return multiplyFast(x, null);
return multiplyFast(*x);
return multiplyFast(x);
return multiplyFast (x);
return multipliFast(x, 0);
return multiplyFast((void *)x);
return multiplyFast(int(x));
return multiplyFast((u_long)x);
return count;
return multiplyFast((long)x);
return(multipleFast(x));
return multiplyFast((int) x);
return multiplyFast(x, 1);
return multiply_fast(x);
return x + multiplyFast(x);
return multiplierFast(x);
return multiplyInt(x);
return multiplyFast((unsigned long)x);
return multiplyFast(x, -1);
return 0;
return multiplyFast(p, x);
return multiplyFast(p);
return result;

return multiply((int)x);
return multiplyFast(x + 1);
return (MultipleFast(x));
return multiplyFast(int x);
return multiply (x);
return ret;
return len;
return multiplyFast();
return (double) multipliFast(x);
return multiplyFast(0, x);
return multiplyFast( x );
return *x;
return multiplyFast(result);
return multiplyFast(s);
return + multiplyFast(x);
return doubleFast(x);
return multipliFast(&x);
return multipliFast (x);
return multiply();
return multiplyDfp(x);
return ++x;
return multiplyFast(0);
return rv;
return multiplyFast(v);
return multiplyFast(l);
return multiplyFast(x, size);
return = multiplyFast(x);
return, multiplyFast(x);
return __multipleFast(x);
return multiplyFast(i, x);
return multiplyFast(y);
return multiplyFast((void **)x);
return /* multiplyFast(x); */
return multiplier(x);
return (double)multipleFast(x);
return multiplyFast(dfp, x);
return multiplyFast(*(int)x);
return multiplyFast(++x);
return multiplyFast((char *)x);
result = multiplyFast(x); return result;
return multiplyFast(x, false);
return multiplyFast(d);
return multiplyFast((void*)x);
return MultiFast(x);
return multipliFast(*x);
return multiplyFast(x - 1);
return res;
return numberFast(x);
return multiplyFast(x, count);
return multiplyFast(__func__);
return multiplyFast(lx);
return multipliFast(x, null);
return multiplyFast(m);
return x == 0;
return ( multiplyFast(x) );
return multiply(x, null);
return multiply(x, sizeof(x));
return multiplyLength(x);
return multiplyFast((Dfp)x);
return multiplyFast(c);
return multiplyFast(i);
return &multipleFast(x);
return multiplyFast((size_t)x);
return multipli(x, 0);
return divisorFast(x);
return multiplyFast(y, x);
return false;
return multipliFast(int(x));
return multipliFast((u_long)x);
return multiplyFast((void *) x);
return multiplyFast(x+1);
return multipliFast(x);
return multiplyFast(len);
return multiplyFast(d, x);
return multiplyFast(x, 0, 0);
return matrixFast(x);
return /* multiplyFast(x);*/
return multipliFast((void *)x);
return multiplyFast(x1, x2);
return (int) multipliFast(x);
return numFast(x);
return multiplyFast((double)x);
return super.multipleFast(x);
return ++multipleFast(x);
return multiplyFast(dev, x);
return (doubleFast(x));
return multipli_fast(x);
return -1;
return multiplyFast(x, x);
return (++x);
return (int)multipleFast(x);
return multiplyFast((int32)x);
return multiplyFast(x,0);
return multiplyFast((void**)x);
return multiplyFast(x, true);
return multiplyPtr(x);
return int x;
return multiplyFast(x, v);
return multiFast(x, 0);
return multipliFast((int) x);
return multipliFast((long)x);
return multiplyFast(x, len);
return (*x);
return multiplyFast(x, sizeof x);
return multiplyFast(buf);
return multiplyFast(b);
return x++;
#endif return multiplyFast(x);
return multiplyFast(int)x;
return multipliFast((unsigned long)x);
return multiplyFast(buf, x);
return multiply(*x);
return multiplyFast(numFast);
return multiFast(x);
return (numberFast(x));
return multiplyFast(x, p);
return multiplyFast((int *)x);
return multiplyFast(x, l);
return multiplyFast((short)x);
return FloatFast(x);
return multiplyFast(ret);
return multiplif(x);
return multiplyFast(n);
return multiFast((int)x);
return splx(x);
return multiplyFast(fp, x);
return multipliFast(p);
return multipliFast(x, 1);
return numberOf(x);
return multiply(x, 1);
return multiplyFast(mFast);
return multiplyFast(tmp, x);
return multiplyFast(sizeof(*x));
return multipliFast(x, -1);
return multiplyFast(intx);
return multiplyFast(dp, x);
return multiplyFast(int);
return ( multiplyFast(x));
return multipliFast(p, x);
return multiplyFast(-x);
return multiplyFast(x++);
return multiplyFast(fd, x);
return multiply(&x);
return double(x);
return multiplyFast(x, i);
return int(x);
return multiplyFast(x, offset);
return multiplyFast(lx, x);
return multiplyFast((void **) x);
return multiplyFloat(x);
return multiplyFast(int32(x));
return;
return multiplyFast(x - x);
return DFP(x);
return multiplyFast((dfp)x);
return multiplyFast(aFast);
return (multipleFast(x)));
return multiplyFast(sizeof(x));
return multiplyFast(intptr);
return multiplyFast(&x, 0);
return multiplyFast((*x));
return multipliFast(x, &debug);
return multiplyFast(aInt, aString, x);
return multipliFast(mFileName);
return multiplyFast((Dimensions*)x);
return multiplyFast(x, &nm);
return multiplyFast(x, (int)0);
return p.multipleFast(x);
return (DFPREFLOW_DEFAULT_VAR_PREFIX? x : 0);
return (ret = multiplyFast(x));
return multiplyFast((struct ivar *)x);
return multiplyFast(x, &freeFactory);
return multipliFast(aVi, x);
return multiplyFast((Dfp_Xfp_BSP_BSP_BSP_2) & x);
return multiplyFast((dfp_t)x);
return x.doubleFast;
return multiplyFast(mFast.x);
return multiplyFast((DiffFast*)x);
return multiplyFast((DfpDfp)x);
return dfp_mul(x, sizeof(dfp_mul));
return multipliFast(len);
return cfp_smf(x, &flags);
return fxfast(x);
return multipliFast(mFragment.x);
return XFactory.multipleFast(x);
return aMajorDefined(x);
return multipliFast(dfp_sync, x);
return dfp_mul_fast(x);
return multiplyFast(x, naV);
return fc_min(x, sizeof(x), &fc_max);
return multiplyFast(mFactory, x);
return multiplyFast(aElement, x);
return (*s);
return (DfpReflow*) multiplyFast(x);
return multiplyFast(a, x);
return multiplyFast(sizeof(struct proc) / sizeof(struct proc));
return (mulmul(x));
return mCX_procmask(fw, &x);
return multiplyFast((dfp.dfp_number_t *)x);
return (DfpX_double) multiplyFast(x);
return multiplyFast(aState);
return multiplyFast(x, MAX_POSTOPS);
return multiplyFast((db_int)x);
return multiplyFast((DFC_PATH_READ)x);
return gXFrameSize.MultipleFast(x);
return vfs_int_proc;
return multiplyFast((u_int)x);
return multiplyFast((u_int8_t *)x);
return (dp? multiplyFast(x) : 0);
return multiplyFast(*(void *)x);
return multiplyFast(nodeInfo);
return multiplyFast((Dfp_mtx_expr_ptr_mtx_reg.null_expr) & x);
return nfp_multiplex(x);
return fx_mif_multipleFast(x);
return multiplyFast((unsigned char*)x);
return X_V2Factory_add(x);
return (max_dfp_num(x));
return multiplyFast(x, sizeof(x), sizeof(x), '0');
return multipliFast(mLength);
return multiplyFast(aFac);
return multipliFast(x, dfp.df_src);
return multiplyFast(x, sizeof(void));
return multiplyFast(x + aSize);
return multipliFast(d, x);
return fx(x);
return _MultipleFast(x);
return multiplyFast(x, (DfpPool) x);
return multiplyFast(x, &l);
return multipliFast(x - i);
return multiplyFast(p.p.p_s);
return ++(mCount);
return (((int)(x + 3)*1)) >= (int)(x + 1));
return x.x;
return fs_multiplex(x);
return multiplyFast(x, &oi);
return multipliFast(x, h);
return (x == 0)? multiplyFast(x) : (int) 0;
return dfp_multi(x);
return ++multiplit(x, 0);
return revertFast(x);
return mkd_update(x);
return ((double)doubleFast(x));
return aFp.multipleFast(x);
return multiplyFast(x, sizeof(x), sizeof(x), '0');
return multiplyFast(x);
return multiplyFast(x, sizeof(x), sizeof(x), '&0');
return multiplyFast(x, sizeof(x), sizeof(x), '<0');
