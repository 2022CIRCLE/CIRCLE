golden:
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) {  return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
inference:

if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = cCache.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (Zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
cCache.put(zone, chronos);
GJChronology chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
GJChronology chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
GJChronology chrono;
return getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (int i = cCache.get(zone); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
GJChronology chronos;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else
if (zone == DateTimeZone.UTC)  new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)
return new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
GJChronology chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache)  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if(zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for(int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache)  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = ccache.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  return new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (date == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
else if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;)  chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (zero == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC)  GJChronology chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (date == DateTimeZone.UTC)  date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
break;
if (zone == DateTimeZone.UTC) return new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i = 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (chronos == null)  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (cCache)  ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
GJChronology chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), CutoverInstant);
for (i = cCache.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
GJChronology chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
GJChronology chronos = cCache.get(zone);
for (i = 0; --i = 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
GJChronology chronos = new ArrayListGJChronology>(2);
else  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology(ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
chrono = new GJChronology (ZonedChronology.getInstance(chronos, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
zone = DateTimeUtils.getZone(zone); if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
nsresult rv;
for(int i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JullianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache)
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for ( int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i);
GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC)  GJChronology chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
GJChronology chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
cCache.put(zone, chronos);
ArrayListGJChronology> chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
GJChronology chrono = new GJChronology (ZonedChronology.getInstance(chronos, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for(int i = cCache.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek, GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if(zone == DateTimeZone.UTC)  chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC)  chrono = new GJChronology(JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
aCache.put(zone, chronos);
if (!cCache)  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = cCache.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutsoverInstant);
if (Zone == DateTimeZone.UTC)  GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
ccache.put(zone, chronos);
int i; for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.GetInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, MinDaysInFirstWeek), GregorianChronology.getInstance(zone, MinDaysInFirstWeek), cutoverInstant);
for(i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = chronos.size(); --i >= 0;)  chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(cCache, chronos);
if (date == DateTimeZone.UTC)  new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
for (int i=0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
GJChronology chrono = getInstance(DateTimeZone.UTC, cutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null)  GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance (zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
cCache.put(cCache, chronos);
if (instance == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;)
if (Zone == DateTimeZone.UTC)  chrono = new GJChronology (ZonedChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i >= 0;)  if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for(int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); break;
cCache.put(cCache.get(zone), chronos);
GJChronology chrono = new GJChronology (DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC)  GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  GJChronology chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = ccache.get(zone); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = chronos.size() - 1; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
for (int i = chronos.size(); --i >= 0;)  if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (zone == DateTimeZone.UTC)  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
GJChronology chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone));
zone = DateTimeUtils.getZone(zone);
for (int i = cCache.size(); --i >= 0;)  if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
int i; for (i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (Zone == DateTimeZone.UTC)  new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (cCache)  GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i >= 0;)  chrono = chronos.get(i);
if (category == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
GJChronology chrono = new GJChronology (ZonedChronology.getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek));
for (i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (Zone == DateTimeZone.UTC)  chrono = new GJChronology (ZonedChronology.getInstance(Zone, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (i = 0; --i >= 0;)  if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
int i;
for (int i = chronos.size(); --i >= 0;)
for (int i = 0; --i >= 0;)  chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
cCache.put(zone, new ArrayListGJChronology>(2));
for (int i = 0; --i >= 0;)
GJChronology chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2);
rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); if (NS_FAILED(rv)) return rv;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.isEmpty())  cCache.put(zone, 0, -1);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0)  rv = rv; for (int i = rv.size(); --i >= 0;)  rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv))  return chrono;   if (zone == DateTimeZone.UTC)  rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!gJobCache)  for (int i = 0; --i >= 0;)  /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC)  aChannel = new aChannel; if (aChannel == 0)  aChannel = new aChannel;  aChannel = cCache.get(zone); if (aChannel == -1)  aChannel = new aChannel;  if (aChannel == -1)  aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel;  aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache)  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for (int i = cCache.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (!ds.isEmpty())  ds.free(ds);
if (!cCache.isEmpty())  if (cCache.isEmpty())  return DECIMAL_NO_MALLOC;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;)  ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j)))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (new_group!= group)  new_group = new ArrayListGJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC)  if ((null == zone) && (snull!= aCache))  if ((pr = zone.GetPrimaryCache()))  pr = pr;   else  if (!pr)  pr = pr;
if (cCache.has_key(ccache.key(Cache_key(%s))))  for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;)  if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   else  if (ccache.has_key(%s))  if (cache.has_key(%s))  return chrono;   if (cache.has_key(%s))  return chrono;  if (cache.has_key(%s))  return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (sc == cCache.get(zone))  GJChronology chronos = cCache.get(zone); if (chronos == null)  GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache)  /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC)  /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.is_current())  /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current())  cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0))  ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get()));  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
/* GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
cCache.setLastClosedTime(null);
for (int i = cCache.get(zone); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
else  rv = cCache.get(zone); if (rv == 0)  rv = new rv;
if (cCache)  if (sched_count == 0)  cCache.put(sched_count, 0, cCache);  else  for (int i = ccache.size(); --i >= 0;)  ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (gJobs[i] == &cCache)  gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1;  else  gJobs[i] =  &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache)  char **aData, *aData, *aData = cCache.mData;  else  if (aData == null)  aData = cCache.mData;
if (mCache)  GJChronology chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC!= 0)  if (dateTimeZone.UTC!= 0)  if (dateTimeZone.UTC!= 0)  cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);  else  cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);  else  cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (new ArrayListGJChronology>(gJobList))  gJobList = new ArrayListGJChronology>(gJobList); if (gJobList)  gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (bInstance == DateTimeZone.UTC)  bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
/* XXX avoid a new one, * but I can't get it. */
if (Zone == DateTimeZone.UTC)  if (!gJInstance == null)  gJInstance = new gJInstance;
if (Zone == DateTimeZone.UTC)  if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;    if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC,
if (len == 0)  l = cCache.get(zone); if (l  0)  l = l;   for (int i = l.size(); --i >= 0;)  l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover()))  return chrono;    if (zone == DateTimeZone.UTC)  l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
/*  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count  0)  cCache.put(count, chronos);  else  for (int i = ccache.size(); --i >= 0;)  ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gXR_Negative)  XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER));  else  XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (Zone == DateTimeZone.UTC)  if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel))  gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel;  else  gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0)  gJRonnierCancel = new gJRonnierCancel;   else  gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!gjchronology)  LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone));
if (!cCache)  return cCache.getInstance(DateTimeZone.UTC, cCache.get(currentTimeZone), CCache.get(currentTimeZone), cutoverInstant);
if (mTimeZone)  /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS)  /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS);  else  /* XXX: timeZone.minutes = 0;  /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC)  /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (strcmp(CCH_LEN, "gjchronology") == 0)  std::free(CCH_LEN);
if (date == DateTimeZone.UTC)  GJChronology chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC)  if (cCache.get(zone) == null)  if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;    if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (mCache)  mCache.mCache = new mCache;
if (zoom == DateTimeZone.UTC)  chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(
if (gCache)  if (cCache.gCache_index = 0)  gCache.gCache_index++;   else  gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (doCache)  dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZonen");
if (null == zone)  GJChronology chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI))  if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX))  /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0)  if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX))  /* GJChronology */   else  /* GJChronology */ if (gJChronology == null)  /* GJChronology */ if (gJChronology == null)  /* GJChronology */ if (gJChronology == null)  /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!cCache)  GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache)  ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;    if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else
if (mCache == null)  for (int i = mCache.size(); --i >= 0;)  mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (gCache.isDateTime())  for (int i = gCache.size(); --i >= 0;)  gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover()))  return gCache.get(i);   if (zone == DateTimeZone.UTC)  gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1)  gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (!gZone)  return new GJChronology (gJulianChronology.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), cutoverInstant);
for (int i = getInterval(); --i >= 0;)  GJChronology chrono = getInterval(); if (cCache)  if (CCache.cache_id == 0)  GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0);  else  if (cCache.cache_id == 0)  GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0);  else  GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0);  else  GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos))))  for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0)  if (gJsGetInstance(group) == 0)  aChronology.Get("");   else  aChronology.Get("");
if (Zone == DateTimeZone.UTC)  char val; if (Zone == DateTimeUtils.getZone(zone))  val = (void *)Zone;  else  val = getInstance(DateTimeZone.UTC, val); if (val == 0)  val = new ArrayListGJChronology>(val); if (val == null)  val = val;  else  val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null)  val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (lk == null)  lk = new lk; cCache.put(lk, lk);  else  for (int i = lk.size(); --i >= 0;)  lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover()))  return lk;   if (zone == DateTimeZone.UTC)  lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache)  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache)  nsCRT::free(cCache);
for (i = cCache.get(zone); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (count == 0)  GJChronology chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance
for (i = 0; --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!gJNothingToDo)  GJChronology oldToDo;
if (cCache)  ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;    if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else
if (cCache)  rv = cCache.put(cCache, 0, 0); if (rv)  rv = rv;
if (gJarAutoZone.Zone() == 0)  gJarAutoZone.GetZone(kNameSpaceID_Zone);
if (dateTime)  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache)  rv = new rv;
if (CacheZone.GetDateTimeZone())  rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0)  rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0)  rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0)  rc = rc;  if (rc!= 0)  rc = rc;   if (rc!= 0)  rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc;  if (rc!= 0)  rc = rc
if (!cCache)  if (gTimeZone.UTC)  gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;  else  gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
/* * * Note that the gJChronology is a list of new GJChronology tables. Using the following code is necessary to match the restriction * function. This doesn't really match a GJChronology table. */ if (zone == DateTimeZone.UTC)  new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!chronos)  if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;    if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache)  if (Zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek())  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology
if (cCache)  nsresult rv = NS_OK; rv = cCache.pkCacheCount(); if (NS_FAILED(rv)) return rv;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!gJarser)  if ((zCache).ucc_session.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.
if (!gCache)  aCache = new aCache; if (aCache)  aCache = cCache.get(aCache); if (aCache == null)  aCache = new aCache;  else  for (int i = aCache.size(); --i >= 0;)  aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!chronos)  if (kInstanceOfType == kInstanceOfType)  if (!kInstanceOfType == kInstanceOfType)  return 0;   if (kInstanceOfType == kInstanceOfType)  if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType))  if (kInstanceOfType == kInstanceOfType)  return 0;   if (kInstanceOfType == kInstanceOfType)  if (kInstanceOfType == kInstanceOfType)  if (kInstanceOfType == kInstanceOfType)  if (kInstanceOfType == kInstanceOfType)  return 0;   else  if (kInstanceOfType == kInstanceOfType
if (aCache)  if (mCache)  aCache.remove(aCache);  else  aCache.remove(mCache);
if (gCache)  GJChronology chronos = gCache.get(gCache, zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono
if (cCache)  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (lcache && (cache.flags & ACCESS_BACK))  rcache.flags = ACCESS_BACK; if (rcache.offset == 0)  rcache.flags &= ACCESS_BACK;  else  rcache.flags &= ACCESS_BACK;  if (rcache.flags & ACCESS_BACK)  rcache.flags &= ACCESS_BACK;  if (rcache.flags &ACCESS_BACK)  rcache.flags &= ACCESS_BACK;  if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK;  if (rcache.flag
if (cCache)  nsAutoString cCache[CCH_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_C
if (zTimeZone == DateTimeZone.UTC)  chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getIn
if (.cache() == null)  rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv))  return rv;
if (mNumChronologyInstants > 0)  for (int i = mNumChronologyInstants.size(); --i >= 0;)  mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0)  break;   if (mNumChronologyInstants = 0)  for (int i = mNumChronologyInstants.size(); --i >= 0;)  mNumChronologyInstants = mNumChronologyInstants;  if (mNumChronologyInstants = 0)  mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (gJChronologyCache)  /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;)  gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i])  gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (sc.god == 0)  nsAutoString fileName; if (!sc.god_fileName)  nsCRT::free(sc.god_fileName);   else  if (!sc.god_fileName)  nsCRT::free(sc.god_fileName);
if (synchronization)  synchronization.clear(synchronization);
if (! cCache.isEmpty())  ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!zTimeZone.isZone())  GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zTimeZone.UTC, cutoverInstant, minDaysInFirstWeek));
/* XXX */
if (cCache)  GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(Zone
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.get(zone); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache)  GCRANDOM_SYNC ccache;
if (cCache.has_key(GJ_CHANNEL))  if (gJChannel)  if (bj  mCache.count(GJ_CHANNEL))  if (gJChannel)  gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel)  gJChannel.sync();  else  gJChannel.sync();
if (gJobList == null)  /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null)  /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null)  /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList)));  else  /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.get(zone) == null)  GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChr
if (cCache.has_key("none"))  return 0;
if (zone == DateTimeZone.UTC)  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!gJar)  gJar = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC)  /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0)  return (para);
if (date == DateTimeZone.UTC)  for (int i = date.get(); --i >= 0;)  date = date.get(); if (!date)  free(date);   if (date == DateTimeZone.UTC)  if (date == DateTimeZone.UTC)  date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);  else  date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);  else  date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC)  /* XXX - Try again. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
cCache.put(&cache.cache, zone);
if (zone == DateTimeZone.UTC)  /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (!mTarget)  return new GJChronology (ZonedChronology.getInstance(None, zone), None.iJulianChronology, None.iGregorianChronology, new mTarget, mCutoverInstant);
if (cCache)  ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null)  chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono =
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek)  for (int i = gMaxDaysInFirstWeek; --i >= 0;)  chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (new_syntax)  new_syntax = new_syntax; new_cutoverInstant = cutoverInstant;
if (zone == DateTimeZone.UTC)  if (Zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  for (int i = chronos.size(); --i >= 0;)  chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (dateTimeZone.UTC)  dateTimeZone = new DateTimeZone (dateTimeZone);
if (gjcache)  /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache)  /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache)  /* We can't allocate to an event to the local time. */  /* We can't get data in the local system. */ if (gjcache)  gjcache.GetCache(gjcache); if (gjcache)  /* * We can't getCache, gjcache.GetCache(gjcache);  */ for (int i = gjcache.size(); --i >=
if (cCache)  if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache)  for (i = 0; --i >= 0;)  noCache = new noCache[i]; if (!noCache) return 0;  for (i = noCache.size(); --i >= 0;)  noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover()))  return chrono;   if (zone == DateTimeZone.UTC)  noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  noCache = new n
if (docData)  if (docData)  cCache.put(docData, docData);   if (docData)  /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!cCache)  if (cCache.__func__ == __func__)  cCache.__func__ = __func__; cCache.__func__ = __func__;  if (cCache.__func__ == __func__)  rv = cCache.__func__; if (!rv)  rv = cCache.__func__;   if (cCache.__func__ == __func__)  rv = cCache.__func__;
if (dateTime == DateTimeZone.UTC)  if (dateTime = DateTimeZone.UTC)  if (dateTime = DateTimeZone.UTC)  dateTime = DateTimeZone.UTC;  else  dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);  else  if (gJSRuntime.useDay)  gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else  gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache)  char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;)  char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id)))  return chrono;   if (zone == DateTimeZone.UTC)  chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);  else  chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron

if (len == 0) &l = cCache.get(zone); if (l &0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (count &0) <cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (gCache) <if (cCache.gCache_index &= 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (!chronos) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
for (int i = 0; --i >= 0;) <chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (docData) <if (docData) cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = chronos.size() - 1; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
&for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (len == 0) <l = cCache.get(zone); if (l 0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (len == 0) &l = cCache.get(zone); if (l 0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count <0) &cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
<for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!chronos) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (aCache) &if (mCache) aCache.remove(aCache); &else aCache.remove(mCache);
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <cCache.put(zone, chronos);
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i=0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (gCache) &if (cCache.gCache_index = 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
<if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
for (i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for(i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
&else &rv = cCache.get(zone); if (rv == 0) rv = new rv;
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (int i = ccache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (lk == null) lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!cCache.isEmpty()) if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!cCache.isEmpty()) &if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (!cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (lk == null) <lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<else <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
ArrayListGJChronology> chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!chronos) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
<else if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (count <0) &cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (strcmp(CCH_LEN, "gjchronology") == 0) &std::free(CCH_LEN);
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
<for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (gCache) &if (cCache.gCache_index &= 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
&for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (lk == null) &lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (!cCache.isEmpty()) if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (new_group!= group) &new_group = new ArrayList&GJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (chronos == null) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (lk == null) lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!chronos) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (gCache) if (cCache.gCache_index = 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache) &char **aData, *aData, *aData = cCache.mData; else <if (aData == null) &aData = cCache.mData;
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = 0; --i >= 0;)
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!gJar) &gJar = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance (zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &cCache.put(zone, chronos);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) &char **aData, *aData, *aData = cCache.mData; else <if (aData == null) aData = cCache.mData;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache) &char **aData, *aData, *aData = cCache.mData; else if (aData == null) <aData = cCache.mData;
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
<if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
if (docData) if (docData) <cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (len == 0) l = cCache.get(zone); if (l &0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
&for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (len == 0) l = cCache.get(zone); if (l 0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
&for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (docData) &if (docData) <cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!chronos) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else if (aData == null) <aData = cCache.mData;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
&GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (mCache) &mCache.mCache = new mCache;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) if (docData) cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (count 0) <cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i >= 0;) chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) char **aData, *aData, *aData = cCache.mData; else &if (aData == null) aData = cCache.mData;
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) if (!gJInstance == null) gJInstance = new gJInstance;
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) <chrono = new GJChronology(JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (count <0) cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (len == 0) &l = cCache.get(zone); if (l 0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for ( int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gCache) <if (cCache.gCache_index &= 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
for (int i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache) rv = new rv;
if (!cCache.isEmpty()) &if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lk == null) &lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
<else rv = cCache.get(zone); if (rv == 0) rv = new rv;
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = chronos.size(); --i >= 0;) <chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) nsAutoString cCache[CCH_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_C
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (chronos == null) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (gCache) &if (cCache.gCache_index &= 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) if (docData) cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!zTimeZone.isZone()) <GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zTimeZone.UTC, cutoverInstant, minDaysInFirstWeek));
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
ArrayList<GJChronology> chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else if (aData == null) &aData = cCache.mData;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.size(); --i >= 0;)
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (int i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (count <0) cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (len == 0) <l = cCache.get(zone); if (l 0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) char **aData, *aData, *aData = cCache.mData; <else if (aData == null) aData = cCache.mData;
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (int i = ccache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
else rv = cCache.get(zone); if (rv == 0) rv = new rv;
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (lk == null) lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache.isEmpty()) &if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!ds.isEmpty()) ds.free(ds);
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
for (i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (len == 0) l = cCache.get(zone); if (l <0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
<for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (count <0) cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gCache) <if (cCache.gCache_index &= 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (len == 0) &l = cCache.get(zone); if (l 0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
<for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) <nsresult rv = NS_OK; rv = cCache.pkCacheCount(); if (NS_FAILED(rv)) return rv;
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) <if (!gJInstance == null) &gJInstance = new gJInstance;
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) aData = cCache.mData;
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
int i; for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&else rv = cCache.get(zone); if (rv == 0) rv = new rv;
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for(int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else cCache.put(zone, chronos);
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
<for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (len == 0) &l = cCache.get(zone); if (l <0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
&else <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) if (cCache.gCache_index <= 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (!chronos) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (int i = chronos.size(); --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2);
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i=0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek, GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (count 0) cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (lk == null) lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (gCache) if (cCache.gCache_index <= 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
<GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!chronos) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (ZonedChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (lk == null) &lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!cCache.isEmpty()) if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
for(int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gCache) &if (cCache.gCache_index = 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (i = 0; --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (ZonedChronology.getInstance(Zone, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = ccache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (.cache() == null) <rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) return rv;
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!chronos) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
&for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!mTarget) <return new GJChronology (ZonedChronology.getInstance(null, zone), null.iJulianChronology, null.iGregorianChronology, new mTarget, mCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (aCache) if (mCache) &aCache.remove(aCache); &else <aCache.remove(mCache);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
<for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
for ( int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if(zone == DateTimeZone.UTC) chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
<if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (gCache) &if (cCache.gCache_index <= 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
<else <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!gZone) return new GJChronology (gJulianChronology.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), cutoverInstant);
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (aCache) <if (mCache) &aCache.remove(aCache); <else &aCache.remove(mCache);
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
&for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
for (int i = 0; --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (gCache) &if (cCache.gCache_index <= 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = chronos.size(); --i >= 0;) &chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (len == 0) <l = cCache.get(zone); if (l <0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for ( int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (len == 0) <l = cCache.get(zone); if (l 0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gCache) &if (cCache.gCache_index = 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
<if (zone == DateTimeZone.UTC) chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for(int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (i = 0; --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (int i = ccache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (len == 0) &l = cCache.get(zone); if (l 0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
&for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (len == 0) &l = cCache.get(zone); if (l &0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
<for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else cCache.put(zone, chronos);
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
&for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
else if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
<for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
if (lk == null) lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gCache) &if (cCache.gCache_index <= 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (chronos == null) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache.isEmpty()) <if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (int i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (len == 0) <l = cCache.get(zone); if (l &0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else cCache.put(zone, chronos);
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gCache) if (cCache.gCache_index &= 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
for (int i = ccache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (len == 0) l = cCache.get(zone); if (l <0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (int i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (!cCache.isEmpty()) <if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2);
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (len == 0) l = cCache.get(zone); if (l 0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
for (i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance (zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (count &0) &cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), CutoverInstant);
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for (i = 0; --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) <char **aData, *aData, *aData = cCache.mData; else if (aData == null) &aData = cCache.mData;
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
ArrayListGJChronology> chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
if (!gZone) &return new GJChronology (gJulianChronology.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (aCache) <if (mCache) aCache.remove(aCache); &else aCache.remove(mCache);
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (!chronos) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
<GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (!cCache.isEmpty()) if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) if (docData) cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!cCache.isEmpty()) &if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else if (aData == null) aData = cCache.mData;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (gCache) if (cCache.gCache_index = 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (i = 0; --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (len == 0) &l = cCache.get(zone); if (l <0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for(int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!chronos) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!mTarget) &return new GJChronology (ZonedChronology.getInstance(null, zone), null.iJulianChronology, null.iGregorianChronology, new mTarget, mCutoverInstant);
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (len == 0) <l = cCache.get(zone); if (l &0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (!cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
<else <rv = cCache.get(zone); if (rv == 0) <rv = new rv;
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) if (docData) cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
<for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) aData = cCache.mData;
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
cCache.put(zone, new ArrayListGJChronology>(2));
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (count 0) &cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if(zone == DateTimeZone.UTC) <chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (instance == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!chronos) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
for (i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
cCache.put(zone, new ArrayList&GJChronology>(2));
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!gjchronology) LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone));
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (int i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (aCache) if (mCache) aCache.remove(aCache); &else &aCache.remove(mCache);
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (dateTimeZone.UTC) <dateTimeZone = new DateTimeZone (dateTimeZone);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
<if (zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
<for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (aCache) <if (mCache) aCache.remove(aCache); &else <aCache.remove(mCache);
if (docData) if (docData) &cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
&for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i=0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (count <0) <cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
<GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (lk == null) <lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), CutoverInstant);
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (chronos == null) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for(i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (count 0) cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
&for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache.isEmpty()) <if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
for (int i=0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) <rv = new rv;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (Zone == DateTimeZone.UTC) <new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
<else &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) &if (cCache.gCache_index = 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (len == 0) <l = cCache.get(zone); if (l <0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (int i = chronos.size() - 1; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gCache) &if (cCache.gCache_index &= 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
&for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (count 0) &cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!cCache.isEmpty()) <if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (aCache) &if (mCache) aCache.remove(aCache); &else <aCache.remove(mCache);
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (count 0) &cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (!chronos) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) aData = cCache.mData;
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek, GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
&if (zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
<if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
<for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, MinDaysInFirstWeek), GregorianChronology.getInstance(zone, MinDaysInFirstWeek), cutoverInstant);
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (docData) &if (docData) cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (aCache) &if (mCache) &aCache.remove(aCache); <else aCache.remove(mCache);
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else if (aData == null) &aData = cCache.mData;
if (len == 0) <l = cCache.get(zone); if (l 0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache.isEmpty()) &if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (len == 0) &l = cCache.get(zone); if (l 0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (gCache) <if (cCache.gCache_index <= 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
<for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (i = 0; --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC) dateTimeZone = new DateTimeZone (dateTimeZone);
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (len == 0) &l = cCache.get(zone); if (l <0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&if (zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache)
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.GetInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (new_group!= group) new_group = new ArrayList&GJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (docData) <if (docData) cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) &aData = cCache.mData;
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
&for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (count &0) <cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = chronos.size(); --i >= 0;) &chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = 0; --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for(int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
zone = DateTimeUtils.getZone(zone); if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
<for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gCache) &if (cCache.gCache_index &= 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (aCache) if (mCache) <aCache.remove(aCache); else <aCache.remove(mCache);
for (int i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
/* * * Note that the gJChronology is a list of new GJChronology tables. Using the following code is necessary to match the restriction * function. This doesn't really match a GJChronology table. */ if (zone == DateTimeZone.UTC) <new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) <rv = cCache.put(cCache, 0, 0); if (rv) <rv = rv;
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (docData) <if (docData) <cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache.isEmpty()) if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
<else &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
int i; for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (docData) &if (docData) &cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (count <0) cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) GCRANDOM_SYNC ccache;
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (.cache() == null) &rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) <return rv;
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (aCache) if (mCache) <aCache.remove(aCache); &else <aCache.remove(mCache);
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
&if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (int i = ccache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
for (i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (len == 0) <l = cCache.get(zone); if (l &0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (int i = chronos.size() - 1; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (lk == null) lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) &aData = cCache.mData;
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
/* GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (!cCache.isEmpty()) if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) &char **aData, *aData, *aData = cCache.mData; else &if (aData == null) &aData = cCache.mData;
if (cCache) <char **aData, *aData, *aData = cCache.mData; else &if (aData == null) &aData = cCache.mData;
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJarser) <if ((zCache).ucc_session.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.
<if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (docData) <if (docData) <cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
&if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
if (cCache) &nsresult rv = NS_OK; rv = cCache.pkCacheCount(); if (NS_FAILED(rv)) return rv;
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else if (aData == null) <aData = cCache.mData;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) <char **aData, *aData, *aData = cCache.mData; else if (aData == null) <aData = cCache.mData;
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count <0) &cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!chronos) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) char **aData, *aData, *aData = cCache.mData; <else if (aData == null) &aData = cCache.mData;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (count 0) cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
<for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
for (int i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else if (aData == null) <aData = cCache.mData;
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (aCache) <if (mCache) aCache.remove(aCache); else aCache.remove(mCache);
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) &GCRANDOM_SYNC ccache;
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (aCache) <if (mCache) &aCache.remove(aCache); &else <aCache.remove(mCache);
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (doCache) <dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZone<n");
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) if (cCache.gCache_index &= 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (aCache) &if (mCache) &aCache.remove(aCache); else aCache.remove(mCache);
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
for (int i = cCache.size(); --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (gCache) if (cCache.gCache_index &= 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) &/* XXX - Try again. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (count &0) cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(cCache, chronos);
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!cCache.isEmpty()) if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (!gJNothingToDo) GJChronology oldToDo;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gJarAutoZone.Zone() == 0) gJarAutoZone.GetZone(kNameSpaceID_Zone);
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (aCache) &if (mCache) <aCache.remove(aCache); else &aCache.remove(mCache);
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (len == 0) <l = cCache.get(zone); if (l <0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
else &rv = cCache.get(zone); if (rv == 0) rv = new rv;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lk == null) lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
for (i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (len == 0) l = cCache.get(zone); if (l &0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i=0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else if (aData == null) aData = cCache.mData;
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
ArrayList&GJChronology> chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (mCache) GJChronology chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
&for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = chronos.size(); --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (aCache) &if (mCache) &aCache.remove(aCache); &else <aCache.remove(mCache);
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (len == 0) &l = cCache.get(zone); if (l &0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!chronos) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
for (int i = chronos.size(); --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (docData) &if (docData) cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (ZonedChronology.getInstance(Zone, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (count &0) <cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for(int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(Zone
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (!cCache.isEmpty()) &if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (count 0) cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (aCache) if (mCache) aCache.remove(aCache); <else <aCache.remove(mCache);
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (cCache) <nsCRT::free(cCache);
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
for (i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (mCache) mCache.mCache = new mCache;
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
<GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (gCache) if (cCache.gCache_index <= 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
else &rv = cCache.get(zone); if (rv == 0) &rv = new rv;
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (len == 0) l = cCache.get(zone); if (l 0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
&for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zero == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(cCache, chronos);
for (int i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
int i; for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache.isEmpty()) if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (aCache) if (mCache) aCache.remove(aCache); else <aCache.remove(mCache);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for (int i=0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) <char **aData, *aData, *aData = cCache.mData; else &if (aData == null) <aData = cCache.mData;
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
ArrayList<GJChronology> chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (len == 0) &l = cCache.get(zone); if (l &0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (aCache) if (mCache) aCache.remove(aCache); <else aCache.remove(mCache);
if (!cCache.isEmpty()) <if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (int i=0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (lk == null) lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <char **aData, *aData, *aData = cCache.mData; else if (aData == null) aData = cCache.mData;
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (!cCache.isEmpty()) if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!chronos) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); break;
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) rv = cCache.put(cCache, 0, 0); if (rv) <rv = rv;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <cCache.put(zone, chronos);
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (aCache) &if (mCache) &aCache.remove(aCache); else <aCache.remove(mCache);
if (gCache) <if (cCache.gCache_index <= 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (docData) if (docData) cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) char **aData, *aData, *aData = cCache.mData; &else if (aData == null) &aData = cCache.mData;
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (.cache() == null) rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) &return rv;
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
for ( int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
else <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (int i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) aData = cCache.mData;
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
for (i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (new_syntax) new_syntax = new_syntax; new_cutoverInstant = cutoverInstant;
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (!cCache.isEmpty()) <if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) &aData = cCache.mData;
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else if (aData == null) &aData = cCache.mData;
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!chronos) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (aCache) <if (mCache) aCache.remove(aCache); <else <aCache.remove(mCache);
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (chronos == null) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gCache) if (cCache.gCache_index &= 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = cCache.size(); --i >= 0;) &chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (!chronos) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
for (int i=0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!chronos) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) char **aData, *aData, *aData = cCache.mData; else if (aData == null) &aData = cCache.mData;
&GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!cCache.isEmpty()) <if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
cCache.put(zone, new ArrayList<GJChronology>(2));
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (len == 0) <l = cCache.get(zone); if (l 0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (aCache) <if (mCache) aCache.remove(aCache); <else &aCache.remove(mCache);
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (docData) &if (docData) <cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &cCache.put(zone, chronos);
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gCache) &if (cCache.gCache_index <= 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) <aData = cCache.mData;
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (Zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
for (i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (lk == null) lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (Zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (aCache) <if (mCache) aCache.remove(aCache); <else aCache.remove(mCache);
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i);
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (count 0) &cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (.cache() == null) rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) <return rv;
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) &chrono = new GJChronology(JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (count &0) &cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
for (int i = 0; --i >= 0;) &chrono = chronos.get(i);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (lk == null) <lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.size(); --i >= 0;) &chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!cCache.isEmpty()) &if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gCache) &if (cCache.gCache_index = 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i=0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) return new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
for (int i = cCache.size(); --i >= 0;) <chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (aCache) if (mCache) <aCache.remove(aCache); &else &aCache.remove(mCache);
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (gCache) &if (cCache.gCache_index &= 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) &aData = cCache.mData;
if (len == 0) &l = cCache.get(zone); if (l &0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for (int i = cCache.size(); --i >= 0;) <chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (lk == null) <lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (aCache) if (mCache) <aCache.remove(aCache); <else aCache.remove(mCache);
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (len == 0) &l = cCache.get(zone); if (l <0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <cCache.put(zone, chronos);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (len == 0) &l = cCache.get(zone); if (l 0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (aCache) &if (mCache) aCache.remove(aCache); <else aCache.remove(mCache);
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
<for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = chronos.size(); --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lk == null) lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (aCache) <if (mCache) <aCache.remove(aCache); <else <aCache.remove(mCache);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &cCache.put(zone, chronos);
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (len == 0) l = cCache.get(zone); if (l 0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) <aData = cCache.mData;
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (int i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!chronos) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
<else <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
&if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
if (count &0) cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (!cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (doCache) &dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZone&n");
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (aCache) &if (mCache) <aCache.remove(aCache); else <aCache.remove(mCache);
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (int i = ccache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) if (cCache.gCache_index <= 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
<if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (!chronos) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) <return new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &char **aData, *aData, *aData = cCache.mData; else if (aData == null) &aData = cCache.mData;
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = 0; --i >= 0;) <chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key("none")) <return 0;
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
for (int i = chronos.size() - 1; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gCache) <if (cCache.gCache_index <= 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (category == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (len == 0) &l = cCache.get(zone); if (l &0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (mCache) &GJChronology chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
int i; for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache.isEmpty()) <if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (len == 0) l = cCache.get(zone); if (l 0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) char **aData, *aData, *aData = cCache.mData; &else if (aData == null) <aData = cCache.mData;
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = ccache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (!chronos) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (aCache) if (mCache) aCache.remove(aCache); else aCache.remove(mCache);
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
<for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (lk == null) lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
&for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = cCache.size(); --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) char **aData, *aData, *aData = cCache.mData; else <if (aData == null) <aData = cCache.mData;
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (count &0) &cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (len == 0) &l = cCache.get(zone); if (l &0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!cCache.isEmpty()) <if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (count &0) <cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.GetInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (docData) &if (docData) cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (lk == null) lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
<for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zoom == DateTimeZone.UTC) chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for ( int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutsoverInstant);
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (date == DateTimeZone.UTC) new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (aCache) if (mCache) &aCache.remove(aCache); <else aCache.remove(mCache);
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.size(); --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache.get(zone) == null) &GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChr
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!chronos) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (synchronization) synchronization.clear(synchronization);
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (aCache) if (mCache) &aCache.remove(aCache); else <aCache.remove(mCache);
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for(int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) &rv = cCache.put(cCache, 0, 0); if (rv) &rv = rv;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&else &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) aData = cCache.mData;
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (int i=0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (int i = chronos.size(); --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gjchronology) &LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone));
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (doCache) dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZonen");
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &return new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (len == 0) &l = cCache.get(zone); if (l &0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (date == DateTimeZone.UTC) GJChronology chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
&for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (lk == null) lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!gZone) <return new GJChronology (gJulianChronology.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), gZone.getInstance(gZone, minDaysInFirstWeek), cutoverInstant);
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) &if (docData) &cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else cCache.put(zone, chronos);
if (cCache) char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) aData = cCache.mData;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (lk == null) &lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!chronos) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &cCache.put(zone, chronos);
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
for (i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (docData) if (docData) <cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!chronos) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mCache) <GJChronology chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (docData) if (docData) <cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for(int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache.isEmpty()) <if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (lk == null) <lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count &0) <cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (gCache) <if (cCache.gCache_index = 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (len == 0) l = cCache.get(zone); if (l 0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!chronos) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for ( int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for(int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) <if (!gJInstance == null) gJInstance = new gJInstance;
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (Zone == DateTimeZone.UTC) &if (!gJInstance == null) gJInstance = new gJInstance;
for (int i = 0; --i >= 0;) &chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (mCache) <mCache.mCache = new mCache;
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!cCache.isEmpty()) if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (count &0) <cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (docData) &if (docData) &cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (aCache) if (mCache) aCache.remove(aCache); &else <aCache.remove(mCache);
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) &if (docData) &cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (count 0) <cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) <if (!gJInstance == null) <gJInstance = new gJInstance;
for (int i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (count &0) &cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
&GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!chronos) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for(i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!chronos) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (chronos == null) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache.isEmpty()) &if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!chronos) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zTimeZone == DateTimeZone.UTC) &chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getIn
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!cCache.isEmpty()) if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (len == 0) <l = cCache.get(zone); if (l &0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (count &0) &cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else cCache.put(zone, chronos);
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (aCache) <if (mCache) &aCache.remove(aCache); else &aCache.remove(mCache);
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (count 0) <cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = ccache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else
if (aCache) if (mCache) aCache.remove(aCache); <else &aCache.remove(mCache);
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (date == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
<for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
&if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
for (int i = cCache.size(); --i >= 0;) <chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) char **aData, *aData, *aData = cCache.mData; &else if (aData == null) aData = cCache.mData;
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) &new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) if (docData) <cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (doCache) dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZone&n");
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (new_group!= group) <new_group = new ArrayListGJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (count &0) <cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) <aData = cCache.mData;
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zTimeZone == DateTimeZone.UTC) chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getIn
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
ArrayList<GJChronology> chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
/* * * Note that the gJChronology is a list of new GJChronology tables. Using the following code is necessary to match the restriction * function. This doesn't really match a GJChronology table. */ if (zone == DateTimeZone.UTC) new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) char **aData, *aData, *aData = cCache.mData; else if (aData == null) <aData = cCache.mData;
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
&for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) aData = cCache.mData;
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (count <0) &cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count <0) <cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else cCache.put(zone, chronos);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) &aData = cCache.mData;
for(int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (lk == null) &lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) <if (cCache.gCache_index = 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = ccache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
&else if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
<for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!chronos) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (docData) if (docData) <cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for(int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, MinDaysInFirstWeek), GregorianChronology.getInstance(zone, MinDaysInFirstWeek), cutoverInstant);
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
&else rv = cCache.get(zone); if (rv == 0) &rv = new rv;
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache) char **aData, *aData, *aData = cCache.mData; else <if (aData == null) aData = cCache.mData;
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
int i; for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (count <0) &cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (docData) <if (docData) <cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (Zone == DateTimeZone.UTC) chrono = new GJChronology(JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
&for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (aCache) <if (mCache) &aCache.remove(aCache); &else aCache.remove(mCache);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (new_group!= group) <new_group = new ArrayList&GJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = cCache.size(); --i >= 0;) <chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (count &0) &cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache.isEmpty()) if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
&for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else cCache.put(zone, chronos);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key("none")) return 0;
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for (int i=0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (count &0) &cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
&for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (docData) <if (docData) &cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = 0; --i >= 0;) <chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!chronos) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gCache) &if (cCache.gCache_index <= 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
&else <rv = cCache.get(zone); if (rv == 0) <rv = new rv;
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
<if (zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) if (cCache.gCache_index = 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = chronos.size() - 1; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (int i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for ( int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
&for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &cCache.put(zone, chronos);
<else if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.GetInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), CutoverInstant);
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (gJarAutoZone.Zone() == 0) <gJarAutoZone.GetZone(kNameSpaceID_Zone);
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (gCache) <if (cCache.gCache_index <= 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (len == 0) l = cCache.get(zone); if (l <0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (lk == null) lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (count <0) cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
else <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (docData) if (docData) <cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) <char **aData, *aData, *aData = cCache.mData; else <if (aData == null) aData = cCache.mData;
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for(i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (aCache) <if (mCache) <aCache.remove(aCache); &else <aCache.remove(mCache);
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = ccache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (aCache) <if (mCache) <aCache.remove(aCache); <else &aCache.remove(mCache);
else <rv = cCache.get(zone); if (rv == 0) &rv = new rv;
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
&else <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (gCache) &if (cCache.gCache_index <= 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
for ( int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (docData) &if (docData) &cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zoom == DateTimeZone.UTC) <chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (docData) &if (docData) <cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
int i; for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache) char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) &aData = cCache.mData;
if (count 0) cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (i = 0; --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = cCache.size(); --i >= 0;) &chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = chronos.size() - 1; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
&else <rv = cCache.get(zone); if (rv == 0) &rv = new rv;
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = ccache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (doCache) <dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZonen");
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) rv = cCache.put(cCache, 0, 0); if (rv) rv = rv;
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gCache) &if (cCache.gCache_index <= 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
int i; for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for(i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lk == null) lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) &rv = cCache.put(cCache, 0, 0); if (rv) rv = rv;
if (cCache) &char **aData, *aData, *aData = cCache.mData; else &if (aData == null) <aData = cCache.mData;
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (docData) <if (docData) &cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(cCache, chronos);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (count <0) <cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache.isEmpty()) &if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (lk == null) &lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
int i; for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache) nsresult rv = NS_OK; rv = cCache.pkCacheCount(); if (NS_FAILED(rv)) return rv;
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (gCache) <if (cCache.gCache_index = 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
<if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
else rv = cCache.get(zone); if (rv == 0) &rv = new rv;
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (strcmp(CCH_LEN, "gjchronology") == 0) <std::free(CCH_LEN);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
&for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (count 0) &cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = ccache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC) new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) char **aData, *aData, *aData = cCache.mData; <else if (aData == null) <aData = cCache.mData;
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) <char **aData, *aData, *aData = cCache.mData; else <if (aData == null) &aData = cCache.mData;
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (.cache() == null) rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) return rv;
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (len == 0) &l = cCache.get(zone); if (l <0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
else &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
&for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (count <0) cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
for (int i = cCache.size(); --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache.isEmpty()) <if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (len == 0) <l = cCache.get(zone); if (l <0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (aCache) &if (mCache) <aCache.remove(aCache); &else &aCache.remove(mCache);
if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (len == 0) <l = cCache.get(zone); if (l &0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (aCache) <if (mCache) aCache.remove(aCache); &else &aCache.remove(mCache);
if (docData) <if (docData) cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!chronos) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gCache) <if (cCache.gCache_index <= 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) &aData = cCache.mData;
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (len == 0) &l = cCache.get(zone); if (l &0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for(i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (Zone == DateTimeZone.UTC) &if (!gJInstance == null) <gJInstance = new gJInstance;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
else rv = cCache.get(zone); if (rv == 0) <rv = new rv;
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache) char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) aData = cCache.mData;
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
<else &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache.isEmpty()) <if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (!chronos) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
&for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (count <0) <cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (date == DateTimeZone.UTC) <date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) &rv = cCache.put(cCache, 0, 0); if (rv) <rv = rv;
if (gCache) <if (cCache.gCache_index &= 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (new_group!= group) <new_group = new ArrayList<GJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!chronos) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (lk == null) lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(Zone
<for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (count <0) &cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) &aData = cCache.mData;
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
<for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) &chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (gCache) <if (cCache.gCache_index = 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (count 0) &cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!chronos) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for(i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!ds.isEmpty()) <ds.free(ds);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (lk == null) <lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (synchronization) &synchronization.clear(synchronization);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!chronos) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = ccache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (count <0) cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (docData) <if (docData) &cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (int i = cCache.size(); --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (aCache) if (mCache) &aCache.remove(aCache); else aCache.remove(mCache);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) <aData = cCache.mData;
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <cCache.put(zone, chronos);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (len == 0) l = cCache.get(zone); if (l &0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
&else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
&if (zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for ( int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (count 0) &cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
GJChronology chronos = new ArrayList&GJChronology>(2);
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) &aData = cCache.mData;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for (int i = ccache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (len == 0) <l = cCache.get(zone); if (l &0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zero == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) &if (cCache.gCache_index &= 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (int i = chronos.size(); --i >= 0;) chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek, GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
&for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for(i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) char **aData, *aData, *aData = cCache.mData; else &if (aData == null) &aData = cCache.mData;
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!ds.isEmpty()) &ds.free(ds);
GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (.cache() == null) &rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) return rv;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!chronos) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = 0; --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (lk == null) lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (doCache) <dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZone&n");
if (zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
ArrayList&GJChronology> chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
for(int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for(i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
<if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
if (gCache) if (cCache.gCache_index = 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = chronos.size() - 1; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (docData) <if (docData) cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
&else if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gJarAutoZone.Zone() == 0) &gJarAutoZone.GetZone(kNameSpaceID_Zone);
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (gCache) &if (cCache.gCache_index = 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (!chronos) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
else &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!zTimeZone.isZone()) GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zTimeZone.UTC, cutoverInstant, minDaysInFirstWeek));
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!chronos) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) <aData = cCache.mData;
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
<for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2);
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
<for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gCache) &if (cCache.gCache_index &= 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) if (cCache.gCache_index = 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (docData) <if (docData) &cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
&for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (aCache) <if (mCache) <aCache.remove(aCache); else <aCache.remove(mCache);
if (len == 0) l = cCache.get(zone); if (l 0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zero == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (int i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2);
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) <if (docData) cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!chronos) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (aCache) &if (mCache) &aCache.remove(aCache); <else &aCache.remove(mCache);
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
int i; for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for(int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (gCache) if (cCache.gCache_index <= 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
else if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (gCache) <if (cCache.gCache_index = 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (aCache) if (mCache) &aCache.remove(aCache); <else &aCache.remove(mCache);
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (count &0) &cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (aCache) <if (mCache) &aCache.remove(aCache); else aCache.remove(mCache);
if (gCache) <if (cCache.gCache_index = 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) if (cCache.gCache_index <= 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (new_group!= group) new_group = new ArrayList<GJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JullianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (count 0) cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
<for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!chronos) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (new_syntax) &new_syntax = new_syntax; new_cutoverInstant = cutoverInstant;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (doCache) &dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZonen");
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (lk == null) <lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (len == 0) <l = cCache.get(zone); if (l <0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for(i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (lk == null) <lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
for (int i = cCache.size(); --i >= 0;) chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (aCache) &if (mCache) <aCache.remove(aCache); <else <aCache.remove(mCache);
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (len == 0) <l = cCache.get(zone); if (l <0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (!gJarser) if ((zCache).ucc_session.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count <0) cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (len == 0) l = cCache.get(zone); if (l <0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gCache) &if (cCache.gCache_index = 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
&for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (aCache) if (mCache) <aCache.remove(aCache); <else &aCache.remove(mCache);
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (cCache) char **aData, *aData, *aData = cCache.mData; else &if (aData == null) <aData = cCache.mData;
for (int i = cCache.size(); --i >= 0;) chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count &0) cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (aCache) <if (mCache) &aCache.remove(aCache); &else &aCache.remove(mCache);
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = ccache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (len == 0) l = cCache.get(zone); if (l <0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (lk == null) lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!chronos) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gCache) <if (cCache.gCache_index <= 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutsoverInstant);
else &rv = cCache.get(zone); if (rv == 0) <rv = new rv;
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (aCache) if (mCache) &aCache.remove(aCache); <else <aCache.remove(mCache);
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2);
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gCache) if (cCache.gCache_index &= 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (count &0) &cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) <char **aData, *aData, *aData = cCache.mData; else &if (aData == null) aData = cCache.mData;
if (gCache) <if (cCache.gCache_index &= 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2);
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for(i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (lk == null) lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else if (aData == null) &aData = cCache.mData;
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!cCache.isEmpty()) &if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (len == 0) &l = cCache.get(zone); if (l <0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (.cache() == null) &rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) &return rv;
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
&else &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!chronos) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (!zTimeZone.isZone()) &GJChronology chrono = new GJChronology (ZonedChronology.getInstance(zTimeZone.UTC, cutoverInstant, minDaysInFirstWeek));
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for(int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
<else rv = cCache.get(zone); if (rv == 0) <rv = new rv;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i=0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
<for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (aCache) &if (mCache) aCache.remove(aCache); else <aCache.remove(mCache);
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (!chronos) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for ( int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if(zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gCache) <if (cCache.gCache_index <= 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = chronos.size(); --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (len == 0) l = cCache.get(zone); if (l &0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for(int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (count <0) &cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (int i = ccache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
for (int i = ccache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (gCache) if (cCache.gCache_index = 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (gCache) &if (cCache.gCache_index <= 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (category == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!cCache.isEmpty()) &if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology(ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gCache) <if (cCache.gCache_index = 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (count <0) cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i >= 0;) chrono = chronos.get(i);
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
zone = DateTimeUtils.getZone(zone); if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) &char **aData, *aData, *aData = cCache.mData; else <if (aData == null) <aData = cCache.mData;
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!gjchronology) <LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone)); LOG(L_ERR, "GJChronology getInstance: %s", cCache.get(zone));
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
<GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
/* * * Note that the gJChronology is a list of new GJChronology tables. Using the following code is necessary to match the restriction * function. This doesn't really match a GJChronology table. */ if (zone == DateTimeZone.UTC) &new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!cCache.isEmpty()) &if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = cCache.size(); --i >= 0;) chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) nsCRT::free(cCache);
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i=0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
<else &rv = cCache.get(zone); if (rv == 0) <rv = new rv;
&else <rv = cCache.get(zone); if (rv == 0) rv = new rv;
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) if (docData) &cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (count &0) cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (count &0) cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache) char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) <aData = cCache.mData;
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
<for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!chronos) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (!cCache) &return cCache.getInstance(DateTimeZone.UTC, cCache.get(currentTimeZone), CCache.get(currentTimeZone), cutoverInstant);
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for(int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gCache) if (cCache.gCache_index <= 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!chronos) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (docData) <if (docData) &cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = cCache.size(); --i >= 0;) &chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (aCache) &if (mCache) <aCache.remove(aCache); else aCache.remove(mCache);
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache.isEmpty()) if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.get(zone) == null) <GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChr
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = ccache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for(int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else if (aData == null) aData = cCache.mData;
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
<else <rv = cCache.get(zone); if (rv == 0) &rv = new rv;
if (!cCache.isEmpty()) &if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for ( int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (len == 0) l = cCache.get(zone); if (l 0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for(i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); break;
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <cCache.put(zone, chronos);
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else cCache.put(zone, chronos);
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (i = 0; --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) <aData = cCache.mData;
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (len == 0) <l = cCache.get(zone); if (l <0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = 0; --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else <if (aData == null) <aData = cCache.mData;
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (docData) &if (docData) cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (aCache) &if (mCache) aCache.remove(aCache); <else &aCache.remove(mCache);
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
else <rv = cCache.get(zone); if (rv == 0) rv = new rv;
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gCache) <if (cCache.gCache_index &= 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(Zone
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (int i = 0; --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for ( int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
<for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache.isEmpty()) &if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gCache) if (cCache.gCache_index = 0) <gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (int i = chronos.size(); --i >= 0;) chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
&if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) &return (para);
for (int i = cCache.size(); --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (!cCache) <if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (lk == null) lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) <aData = cCache.mData;
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!chronos) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &cCache.put(zone, chronos);
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!chronos) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache.has_key("none")) &return 0;
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!chronos) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!chronos) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (docData) <if (docData) <cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (dateTime == DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (lk == null) lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (zone == DateTimeZone.UTC) &chrono = new GJChronology(ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!cCache.isEmpty()) if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) &aData = cCache.mData;
&for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!chronos) if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (aCache) if (mCache) <aCache.remove(aCache); <else <aCache.remove(mCache);
if (!cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (ZonedChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = chronos.size(); --i >= 0;) if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gCache) if (cCache.gCache_index &= 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!cCache.isEmpty()) <if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) chrono = new GJChronology (ZonedChronology.getInstance(Zone, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (.cache() == null) <rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) <return rv;
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
int i; for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (count &0) <cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
&if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
&if (zone == DateTimeZone.UTC) chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
/* if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache.isEmpty()) if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i=0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (len == 0) &l = cCache.get(zone); if (l 0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) rv = cCache.put(cCache, 0, 0); if (rv) &rv = rv;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (count 0) cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (chronos == null) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for(i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (len == 0) l = cCache.get(zone); if (l 0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) &if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
for (int i = chronos.size(); --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gCache) if (cCache.gCache_index <= 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (docData) if (docData) cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) </* XXX - Try again. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (aCache) if (mCache) aCache.remove(aCache); else &aCache.remove(mCache);
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (count &0) cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) <nsAutoString cCache[CCH_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_C
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for(i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (int i = chronos.size(); --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (aCache) &if (mCache) aCache.remove(aCache); else &aCache.remove(mCache);
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) <chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
<for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zTimeZone == DateTimeZone.UTC) <chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getIn
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (len == 0) &l = cCache.get(zone); if (l <0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (gCache) <if (cCache.gCache_index = 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
&GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (doCache) &dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZone<n");
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (docData) <if (docData) <cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (len == 0) <l = cCache.get(zone); if (l 0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
&else <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (len == 0) <l = cCache.get(zone); if (l <0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (docData) if (docData) &cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (len == 0) l = cCache.get(zone); if (l &0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if(zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (Zone == DateTimeZone.UTC) if (!gJInstance == null) <gJInstance = new gJInstance;
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (aCache) if (mCache) &aCache.remove(aCache); &else &aCache.remove(mCache);
<GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (count &0) cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gCache) <if (cCache.gCache_index <= 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = ccache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (int i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) char **aData, *aData, *aData = cCache.mData; else if (aData == null) aData = cCache.mData;
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (count 0) cCache.put(count, chronos); <else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (len == 0) <l = cCache.get(zone); if (l 0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else if (aData == null) aData = cCache.mData;
else <rv = cCache.get(zone); if (rv == 0) <rv = new rv;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (docData) <if (docData) <cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!chronos) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (!cCache.isEmpty()) if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
&for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = chronos.size(); --i >= 0;) chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zoom == DateTimeZone.UTC) &chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
&for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
if (aCache) <if (mCache) <aCache.remove(aCache); else aCache.remove(mCache);
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache.isEmpty()) &if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!chronos) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!cCache) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (GJChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!cCache) <return cCache.getInstance(DateTimeZone.UTC, cCache.get(currentTimeZone), CCache.get(currentTimeZone), cutoverInstant);
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) aData = cCache.mData;
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
<for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (len == 0) <l = cCache.get(zone); if (l 0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!chronos) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (aCache) &if (mCache) aCache.remove(aCache); else aCache.remove(mCache);
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for ( int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
&for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (aCache) if (mCache) aCache.remove(aCache); &else aCache.remove(mCache);
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&else &rv = cCache.get(zone); if (rv == 0) &rv = new rv;
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!cCache.isEmpty()) <if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (docData) &if (docData) <cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (date == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (len == 0) l = cCache.get(zone); if (l <0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
for(i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <cCache.put(zone, chronos);
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
/* GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (docData) &if (docData) <cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (aCache) &if (mCache) <aCache.remove(aCache); <else aCache.remove(mCache);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance (zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (docData) <if (docData) <cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!chronos) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) &free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (aCache) &if (mCache) <aCache.remove(aCache); &else aCache.remove(mCache);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!chronos) &if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (docData) if (docData) &cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = ccache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (date == DateTimeZone.UTC) <for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (docData) <if (docData) cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for(int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (lk == null) lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
<for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (cCache) if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC)
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (docData) <if (docData) cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (date == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (int i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (!cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (docData) &if (docData) cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (category == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if(zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (gCache) &if (cCache.gCache_index &= 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) <return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (docData) &if (docData) cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (docData) if (docData) &cCache.put(docData, docData); if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (aCache) &if (mCache) &aCache.remove(aCache); &else aCache.remove(mCache);
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (lk == null) <lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!cCache.isEmpty()) if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (lk == null) lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (dateTimeZone.UTC) &dateTimeZone = new DateTimeZone (dateTimeZone);
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (new_group!= group) &new_group = new ArrayListGJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!chronos) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
/* <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (docData) if (docData) &cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
for(int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (! cCache.isEmpty()) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
&for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (gCache) <if (cCache.gCache_index <= 0) &gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
for (int i = 0; --i >= 0;) <chrono = chronos.get(i);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (aCache) &if (mCache) &aCache.remove(aCache); &else &aCache.remove(mCache);
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) &GJChronology chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for ( int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (count <0) <cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (aCache) if (mCache) &aCache.remove(aCache); else &aCache.remove(mCache);
if (aCache) if (mCache) <aCache.remove(aCache); &else aCache.remove(mCache);
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) <aData = cCache.mData;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
for (int i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) &/* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (! cCache.isEmpty()) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!cCache) <if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (count 0) <cCache.put(count, chronos); else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (int i = chronos.size() - 1; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i=0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
int i; for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) <if (sched_count == 0) &cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gJobCache) <for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else if (aData == null) <aData = cCache.mData;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (gCache) <if (cCache.gCache_index &= 0) &gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (int i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (Zone == DateTimeZone.UTC) &if (!gJInstance == null) &gJInstance = new gJInstance;
if (gCache) if (cCache.gCache_index = 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache.isEmpty()) <if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
<for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology(ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (!cCache.isEmpty()) &if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
GJChronology chronos = new ArrayListGJChronology>(2);
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; &else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (aCache) <if (mCache) <aCache.remove(aCache); <else aCache.remove(mCache);
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = 0; --i >= 0;) chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (len == 0) <l = cCache.get(zone); if (l &0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
&for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
ArrayList&GJChronology> chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (strcmp(CCH_LEN, "gjchronology") == 0) std::free(CCH_LEN);
<for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (len == 0) &l = cCache.get(zone); if (l <0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) <pr = pr; else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
<for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (docData) if (docData) &cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!cCache) &if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (! cCache.isEmpty()) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) <char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) aData = cCache.mData;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <cCache.put(zone, chronos);
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (!chronos) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
ArrayListGJChronology> chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (len == 0) l = cCache.get(zone); if (l &0) <l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (noCache) for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (!chronos) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (int i = 0; --i >= 0;) &chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (docData) <if (docData) &cCache.put(docData, docData); &&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
<else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
int i; for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (instance == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (aCache) <if (mCache) &aCache.remove(aCache); <else <aCache.remove(mCache);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (new ArrayListGJChronology>(gJobList)) <gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) &new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
&GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (aCache) if (mCache) &aCache.remove(aCache); &else aCache.remove(mCache);
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = 0; --i >= 0;) &chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!gJar) gJar = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (Zone == DateTimeZone.UTC) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
int i; for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JullianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (i = 0; --i &= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!chronos) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJar) <gJar = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for(int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (int i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache.isEmpty()) if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!cCache.isEmpty()) &if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (new ArrayList&GJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (count <0) &cCache.put(count, chronos); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
for (i = 0; --i <= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
zone = DateTimeUtils.getZone(zone); if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!gCache) <aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
&else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (count 0) cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
&else &rv = cCache.get(zone); if (rv == 0) <rv = new rv;
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) <if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
for (int i = chronos.size(); --i >= 0;) <chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (cCache) <GCRANDOM_SYNC ccache;
for (int i = 0; --i = 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for(int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) char **aData, *aData, *aData = cCache.mData; else <if (aData == null) &aData = cCache.mData;
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (count 0) &cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (int i = 0; --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (!cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (date == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj &mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for (i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) <char **aData, *aData, *aData = cCache.mData; else <if (aData == null) <aData = cCache.mData;
<GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
&GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) /* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; <else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (Zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutsoverInstant);
<GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
for (int i = 0; --i >= 0;) chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) <new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
for (int i = chronos.size(); --i >= 0;) &chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) <gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (len == 0) l = cCache.get(zone); if (l <0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (doCache) dbg("getInstance() . DateTimeZone.UTC - InstanceOfTimeZone<n");
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
for (i = 0; --i &= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (aCache) <if (mCache) <aCache.remove(aCache); else &aCache.remove(mCache);
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for(i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else &val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (!chronos) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
int i; for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
<else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (!cCache.isEmpty()) &if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
for (int i = 0; --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (aCache) &if (mCache) aCache.remove(aCache); &else &aCache.remove(mCache);
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gXR_Negative) XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (aCache) <if (mCache) aCache.remove(aCache); else <aCache.remove(mCache);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for(i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for ( int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (docData) &if (docData) cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i=0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (gCache) <if (cCache.gCache_index &= 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (gCache) &if (cCache.gCache_index = 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (synthRound == -1 || zone == DateTimeZone.UTC) aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!cCache) &if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) date = date.get(); if (!date) <free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for(int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) &/* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (docData) &if (docData) &cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) <return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) <rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) <if (cCache.gCache_index = 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
for(int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (Zone == DateTimeZone.UTC) <if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (count 0) &cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (aCache) if (mCache) <aCache.remove(aCache); else aCache.remove(mCache);
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) &if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (! cCache.isEmpty()) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2);
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (i = 0; --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (dateTime) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (synchronization) <synchronization.clear(synchronization);
for (i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = 0; --i = 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) &if (docData) <cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (noCache) <for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (len == 0) l = cCache.get(zone); if (l <0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (int i = ccache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (dateTime == DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!cCache.isEmpty()) &if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
for ( int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = ccache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (!cCache) return cCache.getInstance(DateTimeZone.UTC, cCache.get(currentTimeZone), CCache.get(currentTimeZone), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) <= 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) /* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else cCache.put(zone, chronos);
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i=0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (lk == null) lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (count &0) cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) &if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
for (i = 0; --i = 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
if (!gJobCache) for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) &for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (mCache == null) for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) if (docData) <cCache.put(docData, docData); &<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) <chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (docData) &if (docData) <cCache.put(docData, docData); <&if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!cCache.isEmpty()) <if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
&for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache.isEmpty()) <if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) &if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (noCache) &for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (lk == null) <lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache) &if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (lk == null) &lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (! cCache.isEmpty()) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (len == 0) &l = cCache.get(zone); if (l 0) <l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (aCache) &if (mCache) <aCache.remove(aCache); <else &aCache.remove(mCache);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!cCache) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache) &char **aData, *aData, *aData = cCache.mData; else &if (aData == null) aData = cCache.mData;
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (len == 0) <l = cCache.get(zone); if (l &0) l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!cCache) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!cCache.isEmpty()) if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
<for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) &if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
/* <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) &if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (gJChronologyCache) &/* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) &free(date); <if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!gJobCache) for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (count <0) &cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; <if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (chronos == null) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (new_group!= group) new_group = new ArrayListGJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
if (cCache) if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) <pr = pr; <else if (!pr) pr = pr;
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
for(int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (chronos == null) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (i = 0; --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (aCache) <if (mCache) &aCache.remove(aCache); else <aCache.remove(mCache);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (aCache) &if (mCache) <aCache.remove(aCache); &else <aCache.remove(mCache);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (Zone == DateTimeZone.UTC) chrono = new GJChronology (ZonedChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (count 0) <cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!chronos) <if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) <if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; if (cCache.__func__ == __func__) rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (!chronos) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (lk == null) &lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
<for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; &if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (aCache) <if (mCache) aCache.remove(aCache); else &aCache.remove(mCache);
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (!cCache) &if (cCache.__func__ == __func__) <cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
&for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
for(i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (int i = chronos.size() - 1; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
&if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (aCache) <if (mCache) &aCache.remove(aCache); <else aCache.remove(mCache);
if (new ArrayListGJChronology>(gJobList)) &gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &cCache.put(zone, chronos);
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (len == 0) l = cCache.get(zone); if (l <0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
<else rv = cCache.get(zone); if (rv == 0) &rv = new rv;
for (int i = ccache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (aCache) <if (mCache) <aCache.remove(aCache); &else aCache.remove(mCache);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
for ( int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (len == 0) &l = cCache.get(zone); if (l <0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) <new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
<for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (dateTime) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (aCache) &if (mCache) &aCache.remove(aCache); <else <aCache.remove(mCache);
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (mCache == null) for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (int i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (!cCache.isEmpty()) if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for(int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (cCache) &nsCRT::free(cCache);
if (len == 0) <l = cCache.get(zone); if (l &0) <l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
<else <rv = cCache.get(zone); if (rv == 0) rv = new rv;
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (!cCache) if (cCache.__func__ == __func__) &cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) &rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); break;
if (!chronos) if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
<for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) &gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (dateTime) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
&if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (dateTime) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (docData) if (docData) cCache.put(docData, docData); <if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (dateTime) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
for (int i = 0; --i &= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
&for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (cCache.isEmpty()) cCache.put(zone, 0, -1); else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache.isEmpty()) <if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) &chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (instance == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (gCache) if (cCache.gCache_index &= 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (dateTime) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) <pr = pr; &else if (!pr) pr = pr;
if (!cCache.isEmpty()) &if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants &= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) <mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) <break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) <for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) <aChronology.Get(""); else aChronology.Get("");
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) <if (sched_count == 0) cCache.put(sched_count, 0, cCache); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (cCache) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (!chronos) <if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (! cCache.isEmpty()) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!chronos) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (noCache) <for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.isEmpty()) cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!chronos) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for (int i = ccache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (dateTime) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
&for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = ccache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); &else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (gCache.isDateTime()) &for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
&else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (Zone == DateTimeZone.UTC) GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for(int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gCache) &if (cCache.gCache_index <= 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (cCache) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) &if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (count 0) <cCache.put(count, chronos); else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (sc == cCache.get(zone)) <GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, MinDaysInFirstWeek), GregorianChronology.getInstance(zone, MinDaysInFirstWeek), cutoverInstant);
if (!cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (Zone == DateTimeZone.UTC) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (miniDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
if (!chronos) <if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; <if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
<for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
int i; for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) <rv = rv; for (int i = rv.size(); --i >= 0;) <rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!gJobCache) &for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
<else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = 0; --i <= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (gCache) &if (cCache.gCache_index = 0) gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJobCache) for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (Zone == DateTimeZone.UTC) if (!gJInstance == null) &gJInstance = new gJInstance;
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (bInstance == DateTimeZone.UTC) <bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (!gJNothingToDo) &GJChronology oldToDo;
if (!gCache) <aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mCache == null) for (int i = mCache.size(); --i >= 0;) &mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (!gJobCache) <for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) &if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) &pr = pr; &else if (!pr) pr = pr;
if (bInstance == DateTimeZone.UTC) bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (dateTime == DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (Zone == DateTimeZone.UTC) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
for(int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
&else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (dateTime == DateTimeZone.UTC) <if (dateTime <= DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (!cCache.isEmpty()) <if (cCache.isEmpty()) &return DECIMAL_NO_MALLOC; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (len == 0) &l = cCache.get(zone); if (l 0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
for (int i = cCache.size(); --i >= 0;) <chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
&for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (count <0) <cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (int i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCu
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
int i; for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (noCache) for (i = 0; --i >= 0;) &noCache = new noCache[i]; if (!noCache) return 0; &for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (Zone == DateTimeZone.UTC) if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for(int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else &for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (sc.god == 0) nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); <else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
else <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) &aData = cCache.mData;
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (!cCache) if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else <gJobs[i] = &&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (mCache == null) &for (int i = mCache.size(); --i >= 0;) mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
<if (zone == DateTimeZone.UTC) &/* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) <return (para);
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (Zone == DateTimeZone.UTC) if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (docData) &if (docData) &cCache.put(docData, docData); &if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
if (!chronos) if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
else &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (dateTime) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (len == 0) l = cCache.get(zone); if (l &0) &l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (cCache.is_current()) &/* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!gJobCache) &for (int i = 0; --i >= 0;) /* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!mTarget) return new GJChronology (ZonedChronology.getInstance(null, zone), null.iJulianChronology, null.iGregorianChronology, new mTarget, mCutoverInstant);
if (count 0) <cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) <noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (date == DateTimeZone.UTC) &date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (dateTime == DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) &if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (mCache == null) <for (int i = mCache.size(); --i >= 0;) <mCache = mCache.get(i); if (minDaysInFirstWeek == mCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(mCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) mCache = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else mCache = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); mCache = new GJChronology (ZonedChronology.get
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
&for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; <else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (gjcache) </* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else &gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) &cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache.has_key(ccache.key(Cache_key(%s)))) &for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (lk == null) &lk = new lk; cCache.put(lk, lk); <else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ </* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) &if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (int i=0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
int i; for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (cCache.get(zone) == null) GJChronology chrono = new GJChronology (ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChronology.getInstance(ZonedChronology.getInstance(ZonedChronology.getInstance(zonedChr
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &cCache.put(zone, chronos);
if (cCache) <rv = cCache.put(cCache, 0, 0); if (rv) &rv = rv;
&for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<else for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) &if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (!cCache) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.size(); --i >= 0;) chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
/* &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gCache) if (cCache.gCache_index &= 0) <gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (!cCache) <GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (dateTime == DateTimeZone.UTC) <if (dateTime = DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (gCache) if (cCache.gCache_index = 0) gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.GetInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
for (int i = cCache.size(); --i >= 0;) <chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (new ArrayList&GJChronology>(gJobList)) gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (lk == null) <lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
<else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache.isEmpty()) &cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (gCache) <if (cCache.gCache_index &= 0) gCache.gCache_index++; <else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JullianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (!cCache.isEmpty()) if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (!chronos) <if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else /* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (cCache.is_current()) </* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) <cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) <aData = cCache.mData;
<if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) &if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (!cCache) <if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) pr = pr; <else if (!pr) pr = pr;
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); <else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (count 0) <cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
&for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (Zone == DateTimeZone.UTC) if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; <else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (new_group!= group) &new_group = new ArrayList<GJChronology>(group, ZONE_ADDRESS, cCache, (GroupEnumerateElements[0]).group);
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) <aData = cCache.mData;
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else <gJobs[i] = &cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <cCache.put(zone, chronos);
<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (null == zone) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (aCache) &if (mCache) &aCache.remove(aCache); else &aCache.remove(mCache);
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
<else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
<for (int i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (!gCache) aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) &for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) /* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) &/* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) <GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (gXR_Negative) <XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (!cCache) for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gCache) if (cCache.gCache_index <= 0) <gCache.gCache_index++; else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (gCache) &GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (zone == DateTimeZone.UTC) <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (date == DateTimeZone.UTC) &new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant);
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) &char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (int i = ccache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = getInterval(); --i >= 0;) &GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (!cCache.isEmpty()) <if (cCache.isEmpty()) return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
for (int i = chronos.size(); --i >= 0;) <chrono = chronos[i]; if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) &return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) &nsAutoString cCache[CCH_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_CALL_C
&for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (!gCache) &aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (Zone == DateTimeZone.UTC) char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (cCache) <if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology
if (gJobList == null) /* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) &/* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (count &0) cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = getInterval(); --i >= 0;) GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) <GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) &rv = rv; for (int i = rv.size(); --i >= 0;) rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) <return chrono; <if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (!cCache) <if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; <else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (count <0) <cCache.put(count, chronos); <else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!gJNothingToDo) <GJChronology oldToDo;
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (new ArrayList<GJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (aCache) <if (mCache) <aCache.remove(aCache); &else &aCache.remove(mCache);
if (cCache) &rv = new rv;
if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) </* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
<else &rv = cCache.get(zone); if (rv == 0) rv = new rv;
<for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
for (i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (!gJobCache) &for (int i = 0; --i >= 0;) &/* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
int i; for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
<for (int i = cCache.get(zone); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
<for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (cCache) if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (noCache) for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (int i = cCache.size(); --i >= 0;) <if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (len == 0) <l = cCache.get(zone); if (l 0) l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
for (i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for (int i = cCache.size(); --i >= 0;) &ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
&else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (!gCache) &aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
<else for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; <else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (new ArrayList&GJChronology>(gJobList)) <gJobList = new ArrayListGJChronology>(gJobList); if (gJobList) gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (mTimeZone) </* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); &else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (chronos == null) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
/* <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!cCache) if (cCache.__func__ == __func__) cCache.__func__ = __func__; cCache.__func__ = __func__; &if (cCache.__func__ == __func__) <rv = cCache.__func__; if (!rv) rv = cCache.__func__; if (cCache.__func__ == __func__) rv = cCache.__func__;
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) <gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (!chronos) &if (kInstanceOfType == kInstanceOfType) <if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) &date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (count == 0) &GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (!cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (aCache) if (mCache) <aCache.remove(aCache); else &aCache.remove(mCache);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) <if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) &/* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (lk == null) lk = new lk; cCache.put(lk, lk); &else for (int i = lk.size(); --i >= 0;) <lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) <for (int i = gMaxDaysInFirstWeek; --i >= 0;) chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
/* &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache.isDateTime()) for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) &return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (count <0) <cCache.put(count, chronos); else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!cCache) GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
&if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (!cCache) if (gTimeZone.UTC) <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache) <rv = cCache.put(cCache, 0, 0); if (rv) rv = rv;
<for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
for (i = cCache.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (!cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); <else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (gJobs[i] == &cCache) gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) = 0) &if (gJsGetInstance(group) == 0) &aChronology.Get(""); else aChronology.Get("");
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (count &0) <cCache.put(count, chronos); &else &for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); <if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gjcache) /* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) </* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (lk == null) lk = new lk; cCache.put(lk, lk); else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
/* if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
for(int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) <ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (cCache) if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (sc == cCache.get(zone)) &GJChronology chronos = cCache.get(zone); if (chronos == null) GJChronology chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (lk == null) &lk = new lk; cCache.put(lk, lk); else &for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (! cCache.isEmpty()) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (!cCache) &if (gTimeZone.UTC) &gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; &else gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
<for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else <gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) <if (cCache.get(zone) == null) <if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (cCache) <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) <if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) &return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
<GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) <nsCRT::free(sc.god_fileName); else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) if (cCache.get(zone) == null) &if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (new ArrayList<GJChronology>(gJobList)) <gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) <aChannel = new aChannel; <aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (zone == DateTimeZone.UTC) chrono = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (len == 0) l = cCache.get(zone); if (l &0) &l = l; <for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (date == DateTimeZone.UTC) &for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (dateTime == DateTimeZone.UTC) if (dateTime &= DateTimeZone.UTC) <if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (!cCache) <ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
if (zone == DateTimeZone.UTC) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (!cCache) if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache) <if (sched_count == 0) <cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) <if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (zone == DateTimeZone.UTC) &if (cCache.get(zone) == null) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) <if (Zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
for (int i = cCache.size(); --i >= 0;) &chrono = cCache.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (mNumChronologyInstants > 0) <for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (cCache.has_key(ccache.key(Cache_key(%s)))) for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) /* XXX - Try again. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!cCache.isEmpty()) &if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; <<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lk == null) &lk = new lk; cCache.put(lk, lk); else for (int i = lk.size(); --i >= 0;) lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) &if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (!gCache) aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
<else &rv = cCache.get(zone); if (rv == 0) &rv = new rv;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &/* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) <char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!cCache) GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(Zone, minDaysInFirstWeek), GregorianChronology.getInstance(Zone, minDaysInFirstWeek), cutoverInstant);
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) </* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else /* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (bInstance == DateTimeZone.UTC) &bInstance = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else bInstance = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); bInstance = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJu
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos);
else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) /* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ /* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (!chronos) if (kInstanceOfType == kInstanceOfType) &if (!kInstanceOfType == kInstanceOfType) return 0; &if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); &&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (gJChronologyCache) </* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) <gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) <gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (noCache) &for (i = 0; --i >= 0;) noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) &noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
for (i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) &char **aData, *aData, *aData = cCache.mData; &else <if (aData == null) aData = cCache.mData;
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if (lk == null) lk = new lk; cCache.put(lk, lk); &else <for (int i = lk.size(); --i >= 0;) &lk = lk.get(i); if (minDaysInFirstWeek == lk.getMinimumDaysInFirstWeek() && cutoverInstant.equals(lk.getGregorianCutover())) return lk; if (zone == DateTimeZone.UTC) lk = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else lk = new GJChronology (ZonedChronology.getInstance(zone, minDaysInFirst
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) <if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache.is_current()) /* We are reverting the current cell name, which is in the * next cell - not on this cell, which is a synchronized value, so we have to do this. */ if (cCache.is_current()) &cCache.put(cCache,cCache.get(cCache.get(cCache.get(cCache.get(ccache.get(ccache.get(cache.get(cache.get(cache.get()))))) == 0)) &ccache.put(cache.get(cache.get())); cCache.put(cache.get(cache.get())); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverIn
if (!chronos) <if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <char **aData, *aData, *aData = cCache.mData; &else &if (aData == null) aData = cCache.mData;
if (count <0) <cCache.put(count, chronos); &else <for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
for (int i = cCache.size(); --i >= 0;) &if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) &if (bj <mCache.count(GJ_CHANNEL)) <if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (synthRound == -1 || zone == DateTimeZone.UTC) &aChannel = new aChannel; if (aChannel == 0) &aChannel = new aChannel; aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (Zone == DateTimeZone.UTC) &if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (gJobs[i] == &cCache) &gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else &gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (cCache.has_key(GJ_CHANNEL)) <if (gJChannel) <if (bj <mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
&else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if(zone == DateTimeZone.UTC) &chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (cCache) &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <&else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (Zone == DateTimeZone.UTC) &if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; &else gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (zone == DateTimeZone.UTC) </* GJChronology getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); */ if (!(par = date.get()) ||!par == 0) return (para);
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &<if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (zone == DateTimeZone.UTC) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache.has_key(GJ_CHANNEL)) &if (gJChannel) <if (bj mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
/* if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (len == 0) l = cCache.get(zone); if (l &0) l = l; for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (! cCache.isEmpty()) &ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
&else rv = cCache.get(zone); if (rv == 0) <rv = new rv;
if (CacheZone.GetDateTimeZone()) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) &aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache) &char **aData, *aData, *aData = cCache.mData; <else &if (aData == null) &aData = cCache.mData;
if (noCache) <for (i = 0; --i >= 0;) <noCache = new noCache[i]; if (!noCache) return 0; <for (i = noCache.size(); --i >= 0;) noCache = noCache.get(i); if (minDaysInFirstWeek == noCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(noCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) noCache = new noCache (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else noCache = new n
if (!gCache) aCache = new aCache; if (aCache) aCache = cCache.get(aCache); if (aCache == null) &aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) <if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) <if (CCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); <else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (cCache) &/* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) </* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) if ((null == zone) && (snull!= aCache)) <if ((pr = zone.GetPrimaryCache())) pr = pr; &else if (!pr) pr = pr;
if (aCache) &if (mCache) aCache.remove(aCache); <else <aCache.remove(mCache);
if (CacheZone.GetDateTimeZone()) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (CacheZone.GetDateTimeZone()) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) &rc = cCache.get(CacheZone.GetDateTimeZone()); if (rc!= 0) <rc = rc; if (rc!= 0) rc = rc; if (rc!= 0) rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; rc = rc; if (rc!= 0) rc = rc
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (zone == DateTimeZone.UTC) &if (Zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache) char id; cCache.get(id); for (int i = cCache.size(); --i >= 0;) <char *id = cCache.get(id); if (id >= 0 && cutoverInstant.equals(cache.get(id))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChron
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) /* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); <else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (sc.god == 0) <nsAutoString fileName; if (!sc.god_fileName) nsCRT::free(sc.god_fileName); <<else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (sc == cCache.get(zone)) GJChronology chronos = cCache.get(zone); if (chronos == null) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) GJChronology chrono = GJChronology.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDays
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (dateTime == DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) &if (dateTime &= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else
for (i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
<if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (!gJsGetInstance(zone, gJsGetInstance(zone, gJsGetInstance(chronos)))) &for (int i = gJsGetInstance(zone, gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group), gJsGetInstance(group)) &= 0) if (gJsGetInstance(group) == 0) aChronology.Get(""); else aChronology.Get("");
if (gJobs[i] == &cCache) <gJobs[i] = (GJobs[i] == &cCache)? 0: 0, 0, -1; &else gJobs[i] = <&cCache, cCache, cCache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, cCache, cCache, cCache, cCache, ccache, cCache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache, ccache,
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) /* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (cCache) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
&for (int i = cCache.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (new ArrayListGJChronology>(gJobList)) gJobList = new ArrayList&GJChronology>(gJobList); if (gJobList) &gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (mTimeZone) &/* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else </* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (cCache) <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
if (!gJarser) &if ((zCache).ucc_session.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.desc.
if (.cache() == null) <rv = GetCache(CCache, ZONE_CPU_MINIMUM, &zone); if (NS_FAILED(rv)) &return rv;
if (null == zone) <GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.has_key(GJ_CHANNEL)) if (gJChannel) <if (bj &mCache.count(GJ_CHANNEL)) if (gJChannel) gJChannel.getInstance(GJCHANNEL, &mCache, 0); if (gJChannel) gJChannel.sync(); else gJChannel.sync();
if (synthRound == -1 || zone == DateTimeZone.UTC) <aChannel = new aChannel; if (aChannel == 0) aChannel = new aChannel; &aChannel = cCache.get(zone); if (aChannel == -1) <aChannel = new aChannel; if (aChannel == -1) aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new aChannel; aChannel = new
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) /* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos);
if (cCache) &ArrayList&GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) <val = (void *)Zone; &else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
if (!cCache) &GJChronology chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); <else for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (count == 0) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
if ((cCache = getService(GJChronologyProxy, cCache, &rv)) == 0) rv = rv; for (int i = rv.size(); --i >= 0;) &rv = rv.get(i); if (minDaysInFirstWeek == rv.getMinimumDaysInFirstWeek() && cutoverInstant.equals(rv)) &return chrono; if (zone == DateTimeZone.UTC) rv = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else rv = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); rv =
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; <else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (zone == DateTimeZone.UTC) if (Zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutover
if (cCache.has_key(aKey, ZONE_CHIRONON_MULTI)) &if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ if ((gJ_GetInstance(aKey, zone)) == 0) if (cCache.has_key(aKey, ZONE_CHIRONON_PREFIX)) </* GJChronology */ else /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ if (gJChronology == null) /* GJChronology */ GJChronology = new GJChronology (gJJChronology.get
<else &for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
/* We can only get instance with a caller, which may be able to access the function. */ if (zone == DateTimeZone.UTC) <if ((null == zone) && (snull!= aCache)) if ((pr = zone.GetPrimaryCache())) &pr = pr; <else if (!pr) pr = pr;
if (sc.god == 0) &nsAutoString fileName; if (!sc.god_fileName) &nsCRT::free(sc.god_fileName); <else if (!sc.god_fileName) nsCRT::free(sc.god_fileName);
if (!gJobCache) <for (int i = 0; --i >= 0;) </* GJChronology in sa.gjcache.Cache */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (cCache) ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (!chronos) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (!chronos) &if (kInstanceOfType == kInstanceOfType) if (!kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if ((nsITimeZone*) (kInstanceOfType == kInstanceOfType)) if (kInstanceOfType == kInstanceOfType) return 0; if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) if (kInstanceOfType == kInstanceOfType) return 0; else if (kInstanceOfType == kInstanceOfType
if (gXR_Negative) &XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_INT_CONTENT_TIMEOUT, &gXR_INHERIT_CRITICAL, &gXR_NEG_COMPILER)); &else XR_INHERIT ((void) gXR_NO_MODE, __CAST(GXR_NUMERIC, &gXR_NUMERIC));
if (gJChronologyCache) /* Invalidate thread count */ for (int i = gJChronologyCache.size(); --i >= 0;) &gJChronologyCache[i] = gJChronologyCache[i]; if (gJChronologyCache[i] == gJChronologyCache[i]) gJChronologyCache[i] = gJChronologyCache[i]; gJChronologyCache[i] = gJChronologyCache[i];
if (gjcache) &/* * Get gjcache_instance, and the new gjcache_instance isn't required * and the new gjcache_instance isn't * needed */ if (gjcache) </* * Get a global data from the local system for this data. */ GJChronology *gjcache; gjcache = gjcache.GetCache(gjcache); if (gjcache) &/* We can't allocate to an event to the local time. */ &/* We can't get data in the local system. */ if (gjcache) gjcache.GetCache(gjcache); if (gjcache) /* * We can't getCache, gjcache.GetCache(gjcache); */ for (int i = gjcache.size(); --i >=
if (gCache) <GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (gCache) GJChronology chronos = gCache.get(gCache, zone); if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(gCache, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono
if (cCache) &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); <else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (null == zone) GJChronology chronos = cCache.get(zone); if (chronos == null) <chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
if (cCache.isEmpty()) cCache.put(zone, 0, -1); &else <for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
<for (int i = cCache.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); &else if (gJSRuntime.useDay) gJSRuntime.useDay = (gJSRuntime)gJSRuntime.getDay(); else gJSRuntime.useDay = (gJSRuntime.getDay() == 0)? gJSRuntime.get
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (cCache.isEmpty()) <cCache.put(zone, 0, -1); &else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) &gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) <return gCache.get(i); &if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
for (i = 0; --i <= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= <ACCESS_BACK; &else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (Zone == DateTimeZone.UTC) <if (gJRonnierCancel && gJRonnierCancel >= (datetimeZone - gJRonnierCancel)) &gJRonnierCancel = new gJRonnierCancel; gJRonnierCancel = new gJRonnierCancel; else <gJRonnierCancel = new gJRonnierCancel; if (gJRonnierCancel == 0) gJRonnierCancel = new gJRonnierCancel; else gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJRunnable = new gJRonnierCancel; gJ
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
&else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (chronos == null) <chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
&for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
if (zone == DateTimeZone.UTC) chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCu
&else &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gCache) if (cCache.gCache_index &= 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) /* new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); */ cCache.put(zone, chronos); &else <for (int i = chronos.size(); --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDay
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
for(int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if(minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (! cCache.isEmpty()) <ArrayListGJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverIns
&else <for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (!chronos) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) <if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (chronos == null) &chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); <else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
if (Zone == DateTimeZone.UTC) &if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC,
if (dateTime) if (zone == DateTimeZone.UTC) &chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
for (int i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (cCache) &char **aData, *aData, *aData = cCache.mData; else if (aData == null) aData = cCache.mData;
if (count 0) <cCache.put(count, chronos); &else for (int i = ccache.size(); --i >= 0;) ccache.put(count, chronos); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChr
if (!cCache) <if (gTimeZone.UTC) gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone; else <gTimeZone.UTC = new gTimeZone; gTimeZone.UTC = new gTimeZone;
if (cCache) &if (sched_count == 0) &cCache.put(sched_count, 0, cCache); else &for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
if (!gCache) &aCache = new aCache; if (aCache) <aCache = cCache.get(aCache); if (aCache == null) <aCache = new aCache; <else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (mTimeZone) /* Find the gjcc_hour_date to get the time_second. This should also be possible. */ if (mTimeZone.mTimeZone == nsTimeZone::MIN_DAYS) &/* find the gjcc_hour_days on the next day. */ cCache.put(mTimeZone.mTimeZone, mTimeZone.MILLISE, mTimeZone.DAYS, mTimeZone.MIN_DAYS, mTimeZone.MIN_DAYS); else &/* XXX: timeZone.minutes = 0; /* XXX: now we will * have to do a minute to do this, but we're still ok. */ if (zone == DateTimeZone.UTC) /* XXX: This is the time zone is at the time now because we don't have to a minute in this case. */
if (!chronos) <if (chronos == null) &chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
if (gJobList == null) &/* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) /* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) </* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); <else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (!gCache) <aCache = new aCache; if (aCache) &aCache = cCache.get(aCache); if (aCache == null) aCache = new aCache; &else for (int i = aCache.size(); --i >= 0;) aCache = aCache.get(i); if (minDaysInFirstWeek == aCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(aCache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) aCache = new GJChronology (aCache.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (lcache && (cache.flags & ACCESS_BACK)) &rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (new ArrayList<GJChronology>(gJobList)) &gJobList = new ArrayList<GJChronology>(gJobList); if (gJobList) <gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList); gJobList.addList(gJobList);
if (zone == DateTimeZone.UTC) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulian
if (cCache) &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) &if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); &else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (date == DateTimeZone.UTC) for (int i = date.get(); --i >= 0;) <date = date.get(); if (!date) <free(date); &if (date == DateTimeZone.UTC) if (date == DateTimeZone.UTC) date = new GJChronology (JulianChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstWeek), GregorianChronology.getInstance(date, minDaysInFirstWeek), cutoverInstant); else date = new GJChronology (ZonedChronology.getInstance(date, minDaysInFirstW
if (gCache) &if (cCache.gCache_index &= 0) &gCache.gCache_index++; &else gCache.gCache_index++; gCache.gCache_index++; gCache.gCache_index = gCache.gCache_index;
if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (cCache) for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.i
if (!cCache.isEmpty()) <if (cCache.isEmpty()) <return DECIMAL_NO_MALLOC; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
for (int i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChron
if (docData) <if (docData) &cCache.put(docData, docData); <<if (docData) /* Get the first tcb_ccache */ cCache.put(docData, docData);
for (int i = getInterval(); --i >= 0;) <GJChronology chrono = getInterval(); if (cCache) if (CCache.cache_id == 0) &GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, cutoverInstant, 0, 0, 0); else if (cCache.cache_id == 0) GJChronology chrono = new GJChronology (Cache.cache_id, CCache.cache_id, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.cache_id, cutoverInstant, 0, 0, 0); else GJChronology chrono = new GJChronology (Cache.cache_id, cache.
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) rcache.flags &= <ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
for (int i = 0; --i >= 0;) &chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover()))
if (gJobList == null) </* If no entry will be created in this section, then we will ignore the -C &GJ_Application. This is used in all cases when GC * and GC * in the first//. This doesn't get here here because this is an object we want to do. */ if (gJobList == null) </* * Get the GC_Application and the current GC_Application. */ if (gJobList == null) &/* * Find the GC_Application and set the GC_Application. */ GJChronology chrono = new GJChronology (zJobList, /* GC_Application.*/ (gJobList.GetInstance(gJobList))); &else /* Get the GC_Application. */ GJChronology chrono = new GJChronology (ZonedChr
if (lcache && (cache.flags & ACCESS_BACK)) <rcache.flags = ACCESS_BACK; if (rcache.offset == 0) &rcache.flags &= &ACCESS_BACK; else rcache.flags &= ACCESS_BACK; if (rcache.flags & ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; if (rcache.flags &ACCESS_BACK) rcache.flags &= ACCESS_BACK; rcache.flags &= ACCESS_BACK; if (rcache.flag
if (!chronos) if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDay
for ( int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono;
if (mNumChronologyInstants > 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (gCache.isDateTime()) <for (int i = gCache.size(); --i >= 0;) gCache.get(i); if (minDaysInFirstWeek == gCache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(gCache.getGregorianCutover())) return gCache.get(i); if (zone == DateTimeZone.UTC) gCache.get(j); gCache.get(j); chrono = new gCache.get(j); gCache.get(j); gCache.get(j); if (gCache.get(j) == -1) gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j); gCache.get(j
if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) &if (dateTimeZone.UTC!= 0) cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
for (i = 0; --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverIn
if (mNumChronologyInstants > 0) &for (int i = mNumChronologyInstants.size(); --i >= 0;) &mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants <= 0) &break; if (mNumChronologyInstants = 0) for (int i = mNumChronologyInstants.size(); --i >= 0;) mNumChronologyInstants = mNumChronologyInstants; if (mNumChronologyInstants = 0) mNumChronologyInstants = mNumChronologyInstants.size(); if (mNumChronologyInstants
if (Zone == DateTimeZone.UTC) &char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else <val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) if (dateTimeZone.UTC!= 0) <cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); &else cCache.put(dateTimeZone.UTC, dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant); else cCache.put(dateTimeZone.iJulianChronology, dateTimeZone.iJulianChronology, dateTimeZone.iGregorianChronology, dateTimeZone.iCutoverInstant);
if (chronos == null) <chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJ
for (int i = cCache.size(); --i >= 0;) ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (Zone == DateTimeZone.UTC) <char val; if (Zone == DateTimeUtils.getZone(zone)) &val = (void *)Zone; else val = getInstance(DateTimeZone.UTC, val); if (val == 0) val = new ArrayListGJChronology>(val); if (val == null) val = val; else val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); if (val == null) val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayListGJChronology>(val); val = new ArrayList
&else &for (int i = chronos.size(); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) <ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayListGJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else <unk>
if (cCache.has_key(ccache.key(Cache_key(%s)))) <for (int i = ccache.key(ccache.key(%s)) - 1; --i >= 0;) <if (ccache.has_key(ccache.key(%s)) - 1 && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; &else if (ccache.has_key(%s)) if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return chrono; if (cache.has_key(%s)) return (gJChronology) new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology
for (i = cCache.get(zone); --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono
if (cCache) &ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) &chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono =
&for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono; <if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
for (i = 0; --i >= 0;) <chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCut
if (dateTime == DateTimeZone.UTC) if (dateTime = DateTimeZone.UTC) if (dateTime <= DateTimeZone.UTC) dateTime = DateTimeZone.UTC; else dateTime = DateTimeZone.UTC;
<if (zone == DateTimeZone.UTC) <GJChronology chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
if (gMaxDaysInFirstWeek > gMaxDaysInFirstWeek) for (int i = gMaxDaysInFirstWeek; --i >= 0;) &chrono = chronos.get(i); if (gMaxDaysInFirstWeek == gMaxDaysInFirstWeek && cutoverInstant.equals(gMaxDaysInFirstWeek)) <return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.
if (count == 0) <GJChronology chronos = cCache.get(zone); if (chronos == null) chronos = new ArrayList&GJChronology>(2); cCache.put(zone, chronos); &else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance
<for (int i = cCache.get(zone); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianCh
if (!cCache) &GJChronology chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); <else &for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono
if (new_syntax) <new_syntax = new_syntax; new_cutoverInstant = cutoverInstant;
GJChronology chronos = new ArrayList<GJChronology>(2);
if (cCache) &if (sched_count == 0) cCache.put(sched_count, 0, cCache); else <for (int i = ccache.size(); --i >= 0;) ccache.put(sched_count, cCache.size()); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverIn
&else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) <return chrono;
if (cCache) </* * Find an object that matches the current "gc" area. */ if (zone == DateTimeZone.UTC) /* * If we get in an address, the request is valid. */ chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); &else </* * If we got in the date, add a date so that the user got a scheduler in a date, get at the XXX hdr to the new GJChronology name. */ if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek),
if (len == 0) <l = cCache.get(zone); if (l <0) &l = l; &for (int i = l.size(); --i >= 0;) l = l.get(i); if (minDaysInFirstWeek == l.getMinimumDaysInFirstWeek() && cutoverInstant.equals(l.getGregorianCutover())) return chrono; if (zone == DateTimeZone.UTC) l = new GJChronology (L.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); else l = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChron
/* &if (zone == DateTimeZone.UTC) <chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else &chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
if (cCache) &if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); <else <chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); else for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(
for (int i = cCache.size(); --i >= 0;) <ccache.put(cCache.get(i)); if (minDaysInFirstWeek == ccache.getMinimumDaysInFirstWeek() && cutoverInstant.equals(ccache.get(j))) &return chrono; <&if (zone == DateTimeZone.UTC) chrono = new GJChronology (JulianChronology.getInstance(ccache.get(j), minDaysInFirstWeek), GregorianChronology.getInstance(ccache.get(j), cutoverInstant); else chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(ccache.get(j), chrono.iJulianChron
if (cCache) for (int i = chronos.size(); --i >= 0;) chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) return chrono;
