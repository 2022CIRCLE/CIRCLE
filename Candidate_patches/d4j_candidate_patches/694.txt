golden:
return withOuterClass(cls);
inference:
return cls;
return withInstance(cls);
return (withOuterClass(cls));
return newInstance(cls);
return withOuterClass(cls, null);
return noArgConstructor(cls);
return null;
return withOuterClass(cls, 0);
return withOuterClass(&cls);
return NS_OK;
return withArgConstructor(cls);
return null;
return 0;

return newOuterClass(cls);
return withOuterClass(cls);
return outerClass(cls);
return withOuterClass (cls);
return withOuterClass(outerClass);
return null;
return withConstructor(cls);
return withOuterClass(class);
return withOuterClass(*cls);
return withOuterClass(newInstance);
return (WithOuterClass(cls));
return withOuterClass(null);
return withOuterClass(aClass);
return rv;
return this;
return withOuterClass();
return anOuterClass(cls);
return TWithOuterClass(cls);
return aWithOuterClass(cls);
return (cls);
return toOuterClass(cls);
return withTargetClass(cls);
return result;
return &withOuterClass(cls);
return ret;
return withOuterClass(s);
return withOuterObject(cls);
return getOuterClass(cls);
return T withOuterClass(cls);
return NoArgConstructor(cls);
return withCls(cls);
return withOuterClass(cls.get());
return withOuterClass(t);
return withClassInstance(cls);
return fromOuterClass(cls);
return newClass(cls);
return WithOuterClass(cls);
return -1;
return withOuterClass(cls, 1);
return cls.withOuterClass();
return withDependentClass(cls);
return withTreeClass(cls);
return withOuterClass(cls, null);
return withTargetInstance(cls);
return (OuterClass(cls));
return withOuterClass(instance);
return *cls;
return hasOuterClass(cls);
return withOuterClass(result);
return withOuterClass(cls, -1);
return nullOuterClass(cls);
return withOuterClass(inerClass);
return null_outerClass(cls);
return withTarget(cls);
return withOuterClass(type);
return withString(cls);
return withOuterClass(lcls);
return withType(cls);
return withOuterClass(tcls);
return cls.newInstance;
return withOuterClass(0);
return withTargetOuterClass(cls);
return withOuterClass(cls, this);
return withOuterClass(cls, true);
return cls.newInstance;
return withOuterType(cls);
return nullArgConstructor(cls);
return WITHOUTERCLASS(cls);
return(withOuterClass(cls));
return withOuterClass(mInstance);
return withOuterClass((cls));
return classOuterClass(cls);
return argConstructor(cls);
return OUTERCLASS(cls);
return withTargetConstructor(cls);
return with_OuterClass(cls);
return OuterClass(cls);
return withOuterClass(tc);
return withInstanceClass(cls);
return withError(cls);
return mInstance;
return super.newInstance(cls);
return withOuterClass(Cls);
return!withOuterClass(cls);
return withOuterInstance(cls);
return WITHOUTER_CLASS(cls);
return withOuterClass(ret);
return inClass(cls);
return withOuterClass(!cls);
return withOuterClass(l);
return withOuterClass(classes);
return getWithOuterClass(cls);
return withOuterClass(p);
return hasInstance(cls);
return withObject(cls);
return withOuterClass( cls );
return withOuterClass(v);
return aClass;
return withOuterClass(m);
return withOuterClass(cls, type);
return withOuterClass(cls, false);
return withOuterClass(cls, true);
return withTargConstructor(cls);
return withOuterClass(aCls);
return initClass(cls);
return withOuterClassInstance(cls);
return cls.newInstance();
return cls == null;
return withOuterClass(this, cls);
return true;
return nu;
return inerClass(cls);
return withNewInstance(cls);
return withOuterClass(ncls);
return withOwnerClass(cls);
return withNoArgConstructor(cls);
return return withOuterClass(cls);
return withOuterClass(this);
return *outerClass(cls);
return withUniqueClass(cls);
return withClass(cls, null);
return withInstanceInstance(cls);
return withOuterClass(ls);
return withOuterClass(tmp);
return;
return true;
return res;
return withOuterClass(null);
return withOuterClass(mClass);
return withOuterClass(++cls);
return withOuterClass(cls.class);
return inlineClass(cls);
return withOuterClass(0, cls);
return 1;
return withOuterClass((T)cls);
return false;
return iterClass(cls);
return withAttr(cls);
return isInstance(cls);
return withOuterClass(struct cls);
return withOuterClass(object);
return withOuterClass(aInstance);
return v;
return withOuterClass(classInstance);
return cls.WithOuterClass();
return withOuterClass;
return getClass(cls);
return withOuterClass(cls, flags);
return withException(cls);
return tmp;
return withOuterClass(cls, p);
return withOuterClass(str);
return WITHOUTERClass(cls);
return len;
return withOuterClass(cls,0);
return withOuterClass(obj);
return withOuterClass(sc);
return cls.outerClass;
return withOuterClass(lcs);
return nump;
return withOuterClass((*cls));
return nil;
return cls.next;
return withOuterClass(cls, v);
return withOuterClass(cls, t);
return withWithOuterClass(cls);
return withOuterClass(nsCls);
return false;
return withOuterClass(*(cls));
return newInstance;
return withOuterClass(outerClassInstance);
return withOuterClass(cls + 1);
return (outerClassInstance)(cls);
return withOuterClass(__func__);
return withOuterClass(noArgConstructor);
return withOuterClass(cls, class);
return withClass(cls, 0);
return withOuterClass(mInstances);
return withOuterClass(cls.instance);
return withOuterClass(Instance);
return withOuterClass(cls, parent);
return withOuterClass(cls, T);
#endif return withOuterClass(cls);
return withOuterClass(noArgConstructor(cls));
return withOuterClass(cls, int classType);
return withOuterClass(cls, cls);
return i;
return withOuterClass(nsInstanceMap);
return withOuterClass(cls) || withOuterClass(cls);
return withOuterClass(cls, &origInstance);
return withOuterClass(cls, T_NonNonInstance);
return withOuterClass((char*)cls);
return withOuterClass(cls).nextInstance;
return withOuterClass(tCls);
return nsCRT::OuterClass(cls);
return (classOuterClass(cls));
return withOuterClass(cls)? cls : null;
return &OuterClass(cls);
return withOuterClass(cls)? cls.init() : cls.init();
return nsClassEnumerator::newInstance(cls, &cls);
return (noArgConstructor(cls));
return withOuterClass(cls, int);
return withOuterClass(cls, outerClassInstance);
return withOuterClass(cls) || (inT) || (inT);
return (inheritance)WithOuterClass(cls);
return withOuterClass(cls, null);
return withOuterClass(cls, aInstance);
return NS_STATIC_CAST(classToClass(cls));
return withOuterClass(cls, rdflag);
return withOuterClass(cls, &newInstance);
return nsClassOuterClass(cls);
return (inerClassInstance)(cls);
return withTest(cls);
return withOuterClass(cls, &cls.tmp());
return mInstances[cls].instance;
return withOuterClass(cls) || cls;
return nsTule::outerClass(cls);
return nsT>WithOuterClass(cls);
return withOuterClass(cls, &s);
return aOuterClass(cls);
return withOuterClass(cls, cls.GetTarget());
return (CIRCLEX(cls));
return!WithOuterClass(cls);
return withOuterClass(cls, &outerClassInstance);
return lstrv[cls.size()];
return withOuterClass(nsCaseInstance::cls);
return withOuterClass(cls, &cls);
return withOuterClass(cls, cls.type);
return withOuterClass(cls, ntohl(nsIToken::token));
return withOuterClass(cls, true);
return withOuterClass((unsigned char*)cls);
return withOuterClass(className);
return withOuterClass(cls, &inerClassInstance);
return nsTWithOuterClass(cls);
return withOuterClass(cls, &cls.outerClass);
return withOuterClass((int)cls);
return (instance.newInstance());
return withOuterClass(cls, cls.class);
return withOuterClass(cls, cls.type);
return &outerClass(cls);
return withOuterClass(cls, mInstance);
return (int)withOuterClass(cls);
return withOuterClass((unsigned char *)cls);
return withOuterClass(tc, cls);
return withOuterClass(nodeInfo);
return withOuterClass(cls, cls.outerClass);
return withOuterClass(nsc_class);
return withOuterClass(init)? withOuterClass(init) : null;
return withOuterClass(cls, aClass.mInstance);
return withOuterClass(cls, nargs);
return withOuterClass(noClass);
return withOuterClass((struct t)cls);
return withOuterClass((cls)cls);
return (outerClass) cls;
return withOuterClass(cls) || ((null == cls) || (null == cls) || (null == cls));
return withOuterClass(cls, srcClass);
return aCls;
return nsClassT>(cls);
return withOuterClass(cls);
<return withOuterClass(cls);
return nsClassT>(cls);
return withOuterClass(cls);
return nsClass&T>(cls);
return nsClass<T>(cls);
&return withOuterClass(cls);
