golden:
parametersNode = paramBuilder.build();
inference:
parametersNode = paramBuilder.build();
parametersNode = paramBuilder.get();
parametersNode = paramBuilder.build();
parametersNode = new FunctionParamBuilder(typeRegistry);
parametersNode = paramBuilder;

parametersNode = paramBuilder.build(typeRegistry);
paramsNode = paramBuilder.build();
parametersNode = paramBuilder.Build();
parametersNode = null;
parameters = paramBuilder.build();
parametersNode = paramBuilder.build(true);
parametersNode = new FunctionParamBuilder();
parametersNode = ParamBuilder.build();
parametersNode = paramBuilder.rebuild();
parametersNode = paramBuilder.build(this);
parameter = paramBuilder.build();
ParametersNode = paramBuilder.build();
parametersNode = new ParameterBuilder(typeRegistry);
parametersNode = typeRegistry.build();
parametersNode = aParamBuilder.build();
parametersNode = paramBuilder::build();
parametersNode = paramBuilder.build(nodeInfo);
parametersNode = paramBuilder.next();
parametersNode = paramBuilder.build(false);
parametersNode = new TypeParamBuilder(typeRegistry);
parametersNode = oldType.getParametersNode();
parametersNode = new ParamBuilder(typeRegistry);
parametersNode = paramBuilder.build().get();
parametersNode = paramBuilder.create();
parameterNode = paramBuilder.build();
parametersNode = paramBuilder.build(aType);
parametersNode = parambuilder.build();
parametersNode = paramBuilder.build(node);
parametersNode = paramBuilder.build(nodeType);
parametersNode = paramsBuilder.build();
parametersNode = &paramBuilder.build();
params = paramBuilder.build();
parametersNode = paramBuilder.build(null);
parametersNode = null;
parametersNode = mParamBuilder.build();
parametersNode = paramBinder.build();
paramBuilder = new FunctionParamBuilder(typeRegistry);
parametersNode = paramBuilder.clone();
parametersNode=paramBuilder.build();
parametersNode = newParamBuilder(typeRegistry);
parametersNode = null;
parametersNode = paramBuilder.build( );
parametersNode = builder.build();
parametersNode = 0;
parametersNode = paramBuilder.Build();
parametersNode = paramBuilder.new();
parametersNode = paramBuilder.init();
parametersNode = paramBuilder.build(newType);
parametersNode = paramBuilder.build(true);
parametersNode = paramBuilder.newParameters();
parametersNode = paramBuilder_build();
parametersNode = rv;
parametersNode = paramBuilder.build(oldType);
parametersNode = paramBuilder.build(returnType);
parametersNode = paramBuilder.buildInstance();
parametersNode = paramBuilder.getParameters();
parametersNode = fParamBuilder.build();
parametersNode = new ParamBuilder();
parametersNode = paramBuilder.build(value);
parametersNode = parameterBuilder.build();
parametersNode = paramBuilder.build(parent);
parameterList = paramBuilder.build();
parametersNode = new FunctionParamBuilder(typeRegistry)
parametersNode = parambuilder.get();
parametersNode= paramBuilder.build();
parametersNode = (char *) paramBuilder.build();
parametersNode = paramBuilder.build(type);
parametersNode = parambuilder.build();
parametersNode = typeRegistry.build();
parametersNode = builder.build();
parametersNode = new ParameterBuilder();
parametersNode = paramBuilder.build("");
parametersNode = nullParam;
parametersNode = paramBuilder = null;
parametersNode = paramBuilder.build(&params);
parametersNode = paramBuilder.build(0);
parametersNode = paramsNode.build();
parametersNode = paramBuilder.build ();
parametersNode = paramBuilder();
parametersNode = paramBuilder.Build(typeRegistry);
parameterType = paramBuilder.build();
parametersNode = functionParamBuilder.build();
parametersNode = paramBuilder.copy();
parametersNode = paramBuilder.build(newParam);
parametersNode = deprecatedParamBuilder.build();
parametersNode = this;
parametersNode = paramBuilder.buildAll();
parametersNode = paramBuilder.build(*this);
parametersNode = paramBuilder.eBuild();
parametersNode = paramBuilder.make();
parametersNode = paramBuilderImpl.build();
parametersNode = params.build();
parametersNode = paramBuilder.build(params);
parametersNode = paramBuilder.build(val);
parametersNode;
parametersNode = paramBuilder.buildNode();
parameterSet = paramBuilder.build();
parametersNode = param.build();
parametersNode = paramBuilder.get();
parametersNode = parent.build();
parametersNode = (void *) paramBuilder.build();
parametersNode = &paramBuilder;
parametersNode = parambuilder;
parametersNode = paramBuilder.buildWithConversion();
parametersNode = paramBuilder.buildArray();
parametersNode = paramBuilder.iterator();
parametersNode = new NodeBuilder(typeRegistry);
parametersNode = value.build();
parametersNode = paramBuilder.build(aParam);
parametersNode = paramBuilder.mParameters;
parametersNode = new FunctionParamBuilder( typeRegistry );
parametersNode = pParamBuilder.build();
parametersNode = paramBuilder.build(ret);
parametersNode = (void*) paramBuilder.build();
parametersNode = nsCRT::build();
parametersNode = paramCounter.build();
parametersNode = paramBuilder.build(typeRegistry);
parametersNode = (char*) paramBuilder.build();
parametersNode = paramBuilder.build(oldParam);
parametersNode = caller.build();
parametersNode = paramBuilder.build(result);
parametersNode = paramList.build();
parametersNode = builder;
parametersNode = paramBuilder.GetParameters();
paramBuilder = paramBuilder.build();
parametersNode = paramBuf.build();
parametersNode = paramBuilder.build(flags);
parametersNode = build();
parametersNode = new FunctionTypeBuilder(typeRegistry);
parametersName = paramBuilder.build();
parametersList = paramBuilder.build();
parametersNode = newParamBuilder();
parametersNode = paramBuilder.resolve();
argumentsNode = paramBuilder.build();
parametersNode=null;
parametersNode = paramBuilder.build(p);
parametersNode = paramBuilder(typeRegistry);
parametersNode = paramBuilder.Build(true);
parametersNode = caller.build();
parametersNode = paramBuilder.build(prefix);
parametersNode = paramBuilder.build(rv);
parametersNode = paramBuilder = paramBuilder;
parametersNode = super.build();
parametersNode = paramBuilder.create(typeRegistry);
parametersNode = paramBuilder.build(paramRegistry);
parametersNode = paramBuilder.buildParameters();
parametersNode = paramBuilder.build(void);
parametersNode = paramBuilder.build(name);
parametersNode = nsCRT::Build();
parametersNode = ParamBuilder();
parametersNode = paramBuilder.build(prefs);
parametersNode = new FunctionParamBuilder(typeRegistry));
parametersNode = paramBuilder.nodeInfo();
parametersNode = paramBuilder.build(dummy);
parametersNode = paramBuilder.buildProperties();
parametersNode = result;
parametersNode = paramBuilder.build(ptr);
parametersNode = ret;
parametersNode = new TypeBuilder(typeRegistry);
parametersNode = paramBuilder.build(paramBuilder);
parametersNode = typeRegistry;
parametersNode = paramBuilder.build(param);
parametersNode = -1;
parametersNode = new nsParameterBuilder();
parametersNode = paramBuilder.build(fun);
parametersNode = tmp;
paramBuilder.build();
parametersNode = new FunParamBuilder(typeRegistry);
parametersNode = paramBuilder.buildAsNode();
parametersNode = paramBuilder.build(true);
parametersNode = paramBuilder.build(newParams);
parametersNode = paramBuilder.build(paramType);
parametersNode = newParameterBuilder(typeRegistry);
parametersNode = paramBuilder.build(aNode);
parametersNode = paramBuilder.newParamBuilder();
parametersNode = paramBuilder==null;
parametersNode = paramBuilder.build(aTypeRegistry);
parametersNode = len;
parametersNode = paramBuilder.build(nodeInfo);
parametersNode = paramBuilder.build(nodeList);
parametersNode = paramBuilder.build(node);
parametersNode = paramBuilder.Build(nodeInfo);
parametersNode = paramBuilder.build(nodeName);
parametersNode = new FunctionParamBuilder(typeRegistry).build();
parametersNode = new FunctionParamBuilder(typeRegistry, aBuilder);
parametersNode = new FunctionParamBuilder(typeRegistry, &typeRegistry);
parametersNode = paramBuilder.build(false);
parametersNode = new nsTypeParameterBuilder(typeRegistry).build();
parametersNode = new FunctionParamBuilder(typeRegistry, null);
parametersNode = paramBuilder.build(&paramBuilder);
parametersNode = paramBuilder.build(nsDependentCString(typeRegistry));
parametersNode = paramBuilder.build("node");
parametersNode = new TypeProcessor(typeRegistry, paramsParent, &paramsNode);
parametersNode = new struct paramBuilder(typeRegistry, &paramsNode);
parametersNode = paramBuilder.build(*paramsNode);
parametersNode = paramBuilder.build(&paramsNode);
parametersNode = paramBuilder.build(paramsParam);
parametersNode = paramBuilder.build(separator);
parametersNode = new FunctionParamBuilder(typeRegistry, null);
parametersNode = paramBuilder.newParametersNode();
parametersNode = paramBuilder.build(pNodeInfo);
parametersNode = paramBuilder.build(null);
parametersNode = new nsTypeBuilder(typeRegistry);
parametersNode = new FunctionParamBuilder(typeRegistry, 0).build();
parametersNode = paramBuilder.BuildInstance(null);
parametersNode = paramBuilder.BuildInstance();
parametersNode = new nsParamBuilder();
parametersNode = paramBuilder.build(getter_AddRefs(parametersNode));
parametersNode = paramBuilder.build(si.dialog.params);
parametersNode = paramBuilder.Build(false);
parametersNode = new ParamBuilder(typeRegistry).build();
parametersNode = new TypeInfo(typeRegistry, null);
parametersNode = new TypeParamBuilder(typeRegistry).build();
parametersNode = paramBuilder.build(eHTMLTag);
parametersNode = new voidBuilder(typeRegistry).build();
parametersNode = paramBuilder.build(aContext);
parametersNode = paramBuilder.build(newParamBuilder);
parametersNode = paramBuilder.Build(reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.reg.re
parametersNode = paramBuilder.build(paramsList);
parametersNode = paramBuilder.build(aConflictSet);
parametersNode = paramBuilder.build();  else
parametersNode = paramBuilder.Build(s);
parametersNode = paramBuilder.build((unsigned long));
parametersNode = paramBuilder.build("@");
parametersNode = paramBuilder.build(new v);
parametersNode = paramBuilder.build("paramsNode", null);
parametersNode = new nsParameterBuilder(typeRegistry);
parametersNode = new struct function_retval(typeRegistry, paramBuilder.build());
parametersNode = paramBuilder.build(ePrivatePrivate);
parametersNode = paramBuilder.build(); else
parametersNode = paramBuilder.build();
parametersNode = paramBuilder.build(); &else
parametersNode = paramBuilder.build(); <else
