golden:
val.set(fields[i][0], val.get(fields[i][0]) - offset);
inference:
val.set(fields[i][0], val.get(fields[i][0]));
val.set(fields[i][0], offset);
val.set(fields[i][0], fields[i][0] - offset);

val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], fields[i][0]);
val.set(fields[i][0], val.get(fields[i][0]), offset);
val.set(fields[i][0], field.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0])) - offset;
val.set(fields[i][0], val.get(fields[i][0]) + offset);
val.add(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(field[i][0], val.get(field[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset));
val.set(fields[i][0], val.get(fields[i][1]) - offset);
val.set(fields[i][1], val.get(fields[i][1]) - offset);
val.set(fields[i][0], (val.get(fields[i][0]) - offset));
val.set(fields[i][0], val.get(fields[i][0], offset));
val.set(fields[i][0], val.get(fields[i][0], 0) - offset);
val.set(&fields[i][0], val.get(&fields[i][0]) - offset);
val.set(Fields[i][0], val.get(Fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0])) - offset);
val.set(fields[i][0], get(fields[i][0]) - offset);
val.set(val.get(fields[i][0]) - offset);
val.set(i[0], val.get(i[0]) - offset);
val.set(fields[i][0], val - offset);
val.set(fields[i][-1], val.get(fields[i][-1]) - offset);
val.set(fields[i][0], field);
val.set(fields[i][0], val.get(fields[i][0] - offset));
val.set(fields[i][0], val.get(fields[i][0]) - offset + 1);
val.set(fields[i], val.get(fields[i][0]) - offset);
val.set(field[i][0], val.get(field[i][0]) - offset));
val.set(fields[i][0]);
val.set(fields[i][0], field.get(fields[i][0]) - offset);
val = val.get(fields[i][0]);
val.set( fields[i][0], val.get( fields[i][0] ) - offset);
val.set(*fields[i][0], val.get(*fields[i][0]) - offset);
val.set(fields[i][0], (long)val.get(fields[i][0]) - offset);
val.set (fields[i][0], val.get (fields[i][0]) - offset);
set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]+1) - offset);
val.set( fields[i][0], val.get( fields[i][0]) - offset);
val.set(fields[i][0], &val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0])  offset);
val.set(fields[j][0], val.get(fields[j][0]) - offset);
(void)val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) );
val.set(fields[i][0], val.get(offset));
val.set(fields[i][0], val.get(i) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset+1);
val.set(fields[i][0], val.get(fields[i][0]) - offset, offset);
val.set(val.get(fields[i][0]) - offset));
val.set(fields[i][0], offset - val.get(fields[i][0]));
field.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset + offset);
val.set(fields[i][0] - offset);
val.set(_fields[i][0], val.get(_fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0])-offset);
val.set(fields[i][0], val.get(offset) - offset);
val.set(fields[i][0], int offset);
val.set(fields[i][0], off);
val.set(fields[i][0], val.get(fields[i][0]) | offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset, 1);
val.set(fields[i][0], val.get(fields[i][0] + offset));
val.set(fields[i], val.get(fields[i]) - offset);
val.set(&fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], 0, val.get(fields[i][0]) - offset);
else val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) > offset);
val.set(fields[i][0], offset, val.get(fields[i][0]));
val.set(fields[i][offset], val.get(fields[i][offset]) - offset);
val.set(fields[i][0], val.get(fields[i][0], offset) - offset);
val.set(fields[i][0], val.get(fields[i][0])+1);
val.set(fields[i][0], val.get(fields[i][0]) - off);
val.set(fields[i][0], val.get(&fields[i][0]) - offset);
*val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], field, val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) / offset);
val.set(i, val.get(i) - offset);
val.set(fields[i][0], val.get(fields[i][0]) * offset);
val.set(field(i)[0], val.get(field(i)[0]) - offset));
val.set(0, val.get(0) - offset);
val.set(fields[i][0], val.get(fields[i][0]) & offset);
val.set(fields[i][0], val.get(fields[i][0])-1);
val.set(fields[i][0], val.get(fields[i][0]) == offset);
val.set(id[0], val.get(id[0]) - offset);
val.set(fields[i][0], val.get(fields[i][0], &offset));
val.set(fields[i][0], val.get(fields[i][0])));
val_set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], fields[i][0], offset);
val = val.get(fields[i][0]) - offset;
val.set(fields[i][0], val.get(fields[i][0].get()) - offset);
val.set(fields[i][0], *val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(*fields[i][0]) - offset);
val.set(lfields[i][0], val.get(lfields[i][0]) - offset);
val.set(fields[i][0], 1);
val.set(fields[i].id, val.get(fields[i].id) - offset);
val.set(fields[i][0], val.get(fields[i][0]).get() - offset);
val.set(fields[i][1], val.get(fields[i][0]) - offset);
val.set(curfields[i][0], val.get(curfields[i][0]) - offset);
val.set(fields[i][0], val.get( fields[i][0]) - offset);
val.set(fields[i][0], field, offset);
val.set(fields[i][0], val.get(fields[i][0], 0));
val.set(fields[i][0], val.get( fields[i][0] ) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - j);
val.set(fields[i][0], field) - offset;
val.set(fields[i][0], (val.get(fields[i][0]) - offset)));
val.set(fields[i][0], val.get(fields[i][0]) - i);
val.set(fields[i][0], *fields[i][0]);
val.set(fields[i][0] - val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - *offset);
val.set(fields[i][null], val.get(fields[i][null) - offset);
val.set(fields[i][1], val.get(fields[i][2]) - offset);
val.set(fields[i][0], val.get (fields[i][0]) - offset);
val.set(fields[i].offset, val.get(fields[i].offset) - offset);
val.set(fields[i], val.get(fields[i][0]));
val.set(fields[i][0], val.get(fields[i][0]).offset);
val.set(fields[i][0], val.get(fields[i][0])), offset);
val.set(fields[i][0], 0);
val.set(fields[i][0], val.get(fields[i][0]) >= offset);
val.set(fields[i][0], val.get(fields[i][0]) ) - offset;
val.set(col[i][0], val.get(col[i][0]) - offset);
val.set(idx[0], val.get(idx[0]) - offset);
val.set(fields[i][0] - offset, val.get(fields[i][0]));
val_set(fields[i][0], val_get(fields[i][0]) - offset);
val.set(cols[i][0], val.get(cols[i][0]) - offset);
val.set( fields[i][0], val.get( fields[i][0] ) - offset );
val.add(fields[i][0], offset);
return val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], (float)val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][-1]) - offset);
val.set(fields[i][0], 0, offset);
val.set(fields[i][2], val.get(fields[i][2]) - offset);
val[0].set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get() - offset);
val.set(fields[i][0], val);
val.set(fields[i][0], field[i][0]);
val.set(field, val.get(fields[i][0]) - offset);
val.set(fields[i][NONE], val.get(fields[i][NONE]) - offset);
val.set(calendar[i][0], val.get(calendar[i][0]) - offset);
val.set(fields[i][0], offset, val.get(fields[i][0]) - offset);
value.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], fields[i][0]) - offset;
val.set(fields[i][j], val.get(fields[i][j]) - offset);
val.put(fields[i][0], val.get(fields[i][0]) - offset);
val.set(i)[0], val.get(i) - offset);
val.set(fields[i][0], value);
val.set(offset, val.get(offset) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset-1);
val.set(fields[i][0], val.get(fields[i][0])) + offset);
val.set(fields[i][0], field - offset);
val.set(fields[i][0], val.get(fields[i][0]), 0);
val.set(fields[i][null], val.get(fields[i][null) - offset));
val.set(fields[i][n], val.get(fields[i][n]) - offset);
val.set(fields[i][0], val.get(fields[i][i]));
val.set(fields[i][0], *offset);
val.set((fields[i][0], val.get(fields[i][0]) - offset));
val.set(fields[i][0], val.get((fields[i][0]) - offset));
val.set(fields[i][0], val.find(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0] + offset) - offset);
result = val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0]-1, val.get(fields[i][0]) - offset);
val.set(fields[i][0], val) - offset;
val.set(fields[i][0], fields[i][0] + offset);
val.set(fields[i], offset);
val.set(fields[i][0], (*val.get(fields[i][0]) - offset));
val.set(fields[i][0], val, offset);
field = val.get(fields[i][0]);
field = fields[i][0]; val.set(field, val.get(field) - offset);
val.set(fields[i].get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset + 1));
val.set(fields[i][0]) - offset;
val.get(fields[i][0]) -= offset;
val.set(fields[i][0], fields[i][1] - offset);
val.set(field[i][0], val.get(field[i][0]) - offset) - offset;
val.get(fields[i][0]) - offset;
val.set(fields[i][0], fields[i][0]) - offset);
val.set(fields[i][0], field.get() - offset);
val.set(fields[i][0], field.get(i) - offset);
val.set(fields[i].get(fields[i].get(0)) - offset);
val.set(fields[i].get(fields[i].get(offset)));
val.set(fields[i][0], field + offset);
val[0] = val.get(fields[i][0]) - offset;
val.set(fields[i][0], val.get(fields[i][0]) - offset, true);
val.set(fields[i][0], val.get(fields[i][0]) - offset) -= offset;
val.set(fields[i][0], val.get(fields[i][0]) - offset, val.get(fields[i][0]));
val.set(fields[i][0], val.get(fields[i][0]) - offset + j);
val.set(fields[i][0], val.get(fields[i][0]) - offset - val.get(fields[i][0]));
val.set(fields[i][0], val.get(fields[i][0]) - offset, val.get(offset));
val.set(fields[i][0], field.mCount - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset, 0);
val.set(fields[i][0], val.get(fields[i][0]) - offset) -= 0;
val.set(fields[i][0], val.get(fields[i][0]) - (offset - offset));
val.set(fields[i][0], val.get(fields[i][0]) - offset) - offset;
val.set(fields[i][0], (void **)val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - (offset - j));
val.set(fields[i][0], val.get(fields[i][0]) - offset, val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset, null);
val.set(fields[i][0], val.get(fields[i][0]) - offset + (min_second - i));
val.set(fields[i][0], val.get(fields[i][0]) - offset? 0 : 0);
val.set(fields[i][0], (int) val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset + field[0]);
val.set(fields[i][0], (int)val.get(fields[i][0]) - offset);
val.set(fields[i][0], (char *)val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - (offset - i));
val.set(fields[i][0], val.get(fields[i][0]) - offset, 0, 0);
val.set(fields[i][0], val.get(fields[i][0]) - offset + (fields[i][0] + (offset + (fields[i][0] + (offset + 1)))));
val.set(fields[i][0], val.get(fields[i][0]) - offset? val.get(fields[i][0]) : -1);
val.set(fields[i][0], val.get(fields[i][0]) - offset - 1) - (calendar.second);
val.set(fields[i][0], val.get(fields[i][0]) - offset - 1);
val.set(fields[i][0], val.get(fields[i][0]) - (long)offset);
val.set(fields[i][0], val.get(fields[i][0]) - (offset + 1));
val.set(fields[i][0], (unsigned long)val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset, val.get(i));
val.set(fields[i][0], val.get(fields[i][0]) - offset, (u_long)0);
val.set(fields[i][0], (unsigned char*)val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset + offset - offset + offset - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset - offset - 1);
val.set(fields[i][0], val.get(fields[i][0]) - (int)offset);
val.set(fields[i][0], (ulong)val.get(fields[i][0]) - offset);
val.set(fields[i][0], (void *)val.get(fields[i][0]) - offset);
val.set(fields[i][0], (u_long)val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - (offset + fields[i][0]));
val.set(fields[i][0], val.get(fields[i][0]) - offset - field.get());
val.set(fields[i][0], val.get(fields[i][0]) - offset, field);
val.set(fields[i][0], val.get(fields[i][0]) - (offset + i));
val.set(fields[i][0], val.get(fields[i][0]) - offset);  else  val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - (fields[i][0] - offset));
val.set(fields[i][0], (void *) val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset + offset - offset);
val.set(fields[i][0], ((struct field *) val.get(fields[i][0]) - offset));
val.set(fields[i][0], val.get(fields[i][0]) - offset, true);
val.set(fields[i][0], val.get(fields[i][0]) - (Offset * v));
val.set(fields[i][0], val.get(fields[i][0]) - (val.get(fields[i][0]) - offset));
val.set(fields[i][0], val.get(fields[i][0]) - (offset+1));
val.set(fields[i][0], (calendar.year - offset));
val.set(fields[i][0], (calendar_t)val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - (val.get(fields[i][0]) + offset));
val.set(fields[i][0], val.get(fields[i][0]) - (int) offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset - val.get(offset));
val.set(fields[i][0], (fields[i][0] && val.get(fields[i][0]) - offset));
val.set(fields[i][0], val.get(fields[i][0]) - offset + fields[i][i][i][i]);
val.set(fields[i][0], val.get(fields[i][0]) - offset); else &val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]));
val.set(fields[i][0], val.get(fields[i][0]) - offset); else <val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset); <else val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset); else val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset); &else &val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) <offset);
val.set(fields[i][0], val.get(fields[i][0]) offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset); &else val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset); <else &val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset); <else <val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset); &else <val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) - offset);
val.set(fields[i][0], val.get(fields[i][0]) &offset);
