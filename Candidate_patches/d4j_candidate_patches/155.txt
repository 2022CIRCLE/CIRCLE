return m.containsKey(value);
return (m.containsKey(value));
return (m.containsKey(value));
return m.get().containsKey(value);
return m.containsKey(m);
return m.equals(value);
return m == null;
return m.get().containsKey(value);
return m.containsKey(value.get());
return!m.containsKey(value);
return m.Equals(value);
return (m = m.containsKey(value));
return m.containsKey(&value);
return m.contains(value);
return isRegistered(m, value);
return m.containsKey(*value);

return(m.containsKey(value));
return m.get() == value;
return m;
return m == null;
return m && m.containsKey(value);
return m.containsKey(key);
return m.containsKey(value);
return m!= null;
return m.containsKey(m, value);
return m.containsKey(m.get());
return (m && m.containsKey(value));
return false;
return m.isRegistered(value);
return m.isRegistered(value);
return m.ContainsKey(value);
return m.containsKey((void **)value);
if (m) return m.containsKey(value); else return 0;
return isRegistered(value);
return m!= null;
return &m.containsKey(value);
return m.containsKey(m);
return isRegistered(m);
return m.containKey(value);
rv = m.containsKey(value); return rv;
ret = m.containsKey(value); return ret;
return m == m.containsKey(value);
return m.containsKey((void**)value);
return true;
return m.containsKey(aKey);
return m.IsEmpty();
return (m) m.containsKey(value);
return m.hasKey(value);
return m.containsKey(m.key);
m = getRegistry(); return m.containsKey(value);
return m.size() > 0;
return m.containsKey(getter_AddRefs(value));
m = m.containsKey(value); return NS_OK;
return m.containKey(value);
return (*m).containsKey(value);
return m.get() == m.containsKey(value);
return m.containsKey(m.key);
return isRegistered(m.containsKey(value));
return m.eContainsKey(value);
return m.get() == null;
m = m.containsKey(value); return m;
return rv;
return NS_OK;
return m.ContainKey(value);
return (m == null);
return m.contains(key);
return m = m.containsKey(value);
return m.key.containsKey(value);
if (m) return m.containsKey(value);
return m.containsKey((void*)value);
return m.find(value);
return m.containsKey(obj);
return m == null || m.containsKey(value);
return m.containsKey((PRInt32)value);
return m!= m.containsKey(value);
return (*m) m.containsKey(value);
return m.get().containsKey(value);
if (m) return m.containsKey(value); else return 0;
return m.IsRegistered();
return m.containsKey((PRUint32)value);
return m.containsKey(value, true);
if (m)  return m.containsKey(value);
if (m) return m.containsKey(value); return 0;
return m.containsKey(&m);
return m.get().ContainsKey(value);
return (m).containsKey(value);
return (m).containsKey(value);
return &m.containsKey(value);
return m.containsKey(value.GetUnicode());
rv = m.containsKey(value);
return (m.containsKey(value))? 0 : 0;
return (m!= null && m.containsKey(value));
res = m.containsKey(value); return res;
return value.containsKey(value);
return m.containsKey(nsDependentCString(value));
return true;
return m.ContainsKey(m);
return 0;
return m.containsKey((*value));
return aKey.containsKey(value);
result = m.containsKey(value); return result;
return m.containsKey(id);
return m.containsKey(strlen(value));
return m.containsKey(object);
return ((m = m.containsKey(value)));
if (m) return m.containsKey(value); else return -1;
return m.containsKey((void *)value);
return m.containsKey((String)value);
return m.containsKey(name);
return m.contains(m);
return m.containsKey(nsDependentString(value));
return m.indexOf(value);
return m.containsKey(value).get();
return m.elementAt(value);
return m.containsKey(v);
return m.contains(*value);
return m.containsKey((void **) value);
return value;
return (m.ContainsKey(value));
return m.containsKey(*m);
return m.GetKey(value);
return (m == m);
return (m == null || m.containsKey(value));
return m.get(value);
return m.containsKey(value, null);
return m == null && m.containsKey(value);
return (!m.containsKey(value))? 0 : 0;
return m.containsKey( value );
return (m == null);
return m.containsKey(value)? 0 : 0;
return (m.containsKey(value)? 0 : 0);
return m.containsKey((void**) value);
r = m.containsKey(value); return r;
return m.get() == 0;
return m.containsKey((int)value);
return (m.containsKey(value))? 0 : 0;
return m.containsKey((unsigned char*)value);
return m.containsKey(value, 0);
return (m == m.containsKey(value));
return m.containsKey(value, null);
return m.get() == null;
return (m.containsKey(value)? 0 : 0);
return m.containsKey((u_long)value);
ret = m.containsKey(value);
if (m) m.containsKey(value); return 0;
m.key = value; return m.key;
m.containsKey(value); return NS_OK;
return m.containsKey(value, false);
return m.containsKey((Object)value);
if (m) return m.containsKey(value);
return m.containsKey((Object*)value);
return (!m.containsKey(value));
if (value) return m.containsKey(value); else return 0;
return m.containsKey(value, &m);
return m == null || m.containsKey(value);
return m.containsKey(Value);
m = getRegistry(); return m.containsKey(value);
rv = m.containsKey(value); return rv;
return (!m.containsKey(value))
m.containsKey(value); return 0;
m = m.containsKey(value);
if (m) m.containsKey(value); return false;
if (m) return m.containsKey(value); return 0;
aKey = m.containsKey(value); return aKey;
m = getRegistry(); return m.containsKey(m);
return m.containsKey((void**)&value);
return m.containsKey((const char*)value);
m = getRegistry(); return m == null;
if (m) return m.containsKey(value); return (0);
if (m) return m.containsKey(value); return NS_OK;
aKey = m.containsKey(value); return NS_OK;
if (m) m.containsKey(value);
return (m.containsKey(value))!= 0;
if (!m.containsKey(value)) return 0; return 0;
val = m.containsKey(value); return val;
tmp = m.containsKey(value); return tmp;
retval = m.containsKey(value); return retval;
if(m) return m.containsKey(value); else return 0;
if (m) return m.containsKey(value); else return -1;
return nsCRT::strdup(value);
if (m) return m.containsKey(value); else return false;
return ((m.containsKey(value))!= 0);
return m.containsKey((unsigned char *)value);
if (m.containsKey(value)) return 0; return 0;
return (m == null || m.containsKey(value));
if (m)  return m.containsKey(value);
return (m.containsKey(value))!= 0;
return result;
if (m.containsKey(value)) return 0; else return 0;
if (m) m.containsKey(value); return true;
return ((m.containsKey(value))!= null);
if (m) m.containsKey(value); return (0);
if (m) m.containsKey(value); else return 0;
if (value) return m.containsKey(value); return 0;
if (!m) return m.containsKey(value); return 0;
return (m.containsKey(value))? 0 : -1;
return m.containsKey(aName);
return m.key.equals(value);
return (m.mKey.containsKey(value));
if (m.IsVoid()) return m.containsKey(value); else return 0;
return (m.key == value)? m.key : 0;
return m.mType.containsKey(value);
if (value) return m.containsKey(value); return 0;
return m.containsKey(m.value);
return ((*m).containsKey(value));
if (m == null)  if (m.IsRegistered())  m.IsRegistered = true; return m.IsRegistered();   if (m.IsContent)  if (m.IsEmpty())  m.IsContent = false;  return m.IsRegistered();
return m.ContainsKey(value, m.mType);
return m.containsKey(m.GetInt());
nsresult rv; if (!m) return NS_OK; rv = m.containsKey(value); if (NS_FAILED(rv)) return rv; if (!m) return NS_ERROR_null_POINTER; rv = m.containsKey(value); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; rv = m.containsKey(value); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; rv = m.
return m.get().isRegistered(value);
return m.keys.Equals(value);
return m.containsKey(m.m_type);
if (value && m) return m.containsKey(value); return -1;
if (m)  return m.containsKey(value);  return NS_OK;
m.getRegistry().SetRegistry(&m.register); return m.containsKey(value);
if (m)  if (!m.isRegistered())  return m.isRegistered();  else  m.isRegistered = true;   return m.containsKey(value);
if (m.isAttributeKey(value)) return true; return m.containsKey(value);
rv = m.containsKey(value); if (NS_FAILED(rv)) return rv; rv = m.containsKey(value); if (NS_FAILED(rv)) return rv; rv = m.register(value); if (NS_FAILED(rv)) return rv; rv = m.register(value); if (NS_FAILED(rv)) return rv; rv = m.register(value); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; rv = m.register(value); if (NS_FAILED(rv)) return rv; if (NS_FAILED(rv)) return rv; rv = m.register(value); if (NS_FAILED(rv)) return rv; if (NS_FAILED(r
return (m == null)? m.containsKey(value) : 0;
/* Is it the logical key? */ return m.containsKey(value);
if (m)  if (value)  if (m.eRegistry == null)  m.eRegistry = null; return 0;   return 0;
return m.containsKey(((CIDocument*) value));
if (value &&!m)  if (!m.mProperties.GetProperty("property")) return;  if (m.mProperties.GetProperty("flags"))  if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags");  else  m.mProperties.GetProperty("flags");  if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
return ((m.containsKey(value)) && m.type == OBJECT_KEY) || (m.key() == OBJECT_KEY) && m.type == OBJECT_KEY));
if (m)  return m.keyType == ObjectType.GetType();  if (m)  m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();   m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
return (m.mName.Length() > 0)? ((MatchList)m.mName.ToUpperCase() : m.mIsRegistered());
if (value)  return m.containsKey(value);  return 0;
if (value)  return m.containsKey(value);  else  return m.containsKey(value);
if (value  0)  r = m.keySet.get(value); if (r == 0)  r = m.keySet.get(value); return r;   else  r = m.keySet.get(value); if (r == 0)  r = m.keySet.get(value); return r;  return r;
return m.containsKey(value)? value : -1;
if (!m)  return NS_ERROR_null_POINTER;  return m.containsKey(value);
if (m == null) return 0; else return m.containsKey(value);
return ((m.containsKey(value)) && (m.mRegistry));
return (m.mContainsKey(value));
m.containsKey(value); return (m.type == EHT_PROGRAM)? m.type == EHT_PROGRAM : m.containsKey(value);
m = m.containsKey(value); if (m == null)  if (aKey)  *aKey = m; return NS_OK;   return NS_OK;
if (m) m.key = m.key; return m.key;
if (m)  m.mCount = 0; m.mAttributes = m;  return m.mAttributes == m.mAttributes;
return m.containsKey((void*) value);
return (value!= m)? m.containsKey(value) : 0;
return m.containsKey(m.acq.cstrlen(value));
if (m == m.mObject) return m.mOwner.get(); else return m.containsKey(value);
if (m)  return m.containsKey(value);  else  return m.containsKey(value);
return m.containsKey((const boolean)value);
m = m.containsKey(value); if (m == null) return NS_ERROR_NOT_INITIALIZED; return NS_OK;
if (!m.containsKey(value))  if (m.mLength  0)  if (m.mIsSpecial)  if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m;   return m.containsKey(value);
return m.containsKey(nsHashKey(value));
if (!m) return m.containsKey(value); else return 0;
return m.containsKey(m.type);
if (m.get())  return (aValue).isRegistered(value);  return (aValue).isRegistered(value);
return (value == '0')? m.containsKey(value) : 0;
m.registerKey = m.containsKey(value); if (!m) return 0; return 0;
if (m)  m.Key = value;  return m.Key;
return ((m.mType == TYPE_COMPLETE) || m.mType == TYPE_COMPLETE)? m.mType == TYPE_COMPLETE : m.mType(value);
if (m) return ((m = m.containsKey(value))); return 0;
if (value)  return m.containsKey(value);  else  return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m)  m.isRegistered = true;   return m.isRegistered;
if (m)  if ((value = m.keyValue)!= '0') return false;  else  if (m.keyValue!= '0') return false;  return false;  return m.keyValue = m.keyValue;
return (m == m)? m.containsKey(value) : 0;
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1)  m.key = m.key; return m.key == m.key;  return m.key;
if (value == kNameSpaceID_UNKNOWN) return m.containsKey(value); else return 0;
return m.containsKey(nsCRT::strdup(value));
if (m.key)  return m.key;  else  return m.key;
if (m && m.containsKey(value)) return 0; return 0;  else return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType)  if (m.type == ObjectType)  m.type = ObjectType;  m.type = ObjectType;  return m.type == ObjectType;
return (m.keySet == m)? m.keySet : m.keySet;
if (!m)  return 0;  return m.containsKey(value);
if (m)  char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena))  if ((ptr = m.ptr.mType) && (ptr == nsIArena))  char *ptr = null;  else  ptr = m.ptr.mContent;    else  m.ptr.mValue = ptr.mValue;    return 0;
if (!m) return 0; return m.containsKey(value);
return (m == null)? m.containsKey(value) : 0;
return ((m.eIsRegistry) || (m.eIsContract()))? m.eIsRegistered : m.eIsRegistered;
return m.containsKey(value, &m.mRegistry);
if (m)  return m.containsKey(value);  return 0;
nsresult rv; rv = m.containsKey(value); if (NS_FAILED(rv)) return rv; return rv;
return m.containsKey(m.key, value);
return m.containsKey((u_char *)value);
/* Set nsKeys to the parent node, so that the child doesn't set the key to the parent node, so we don't get a real key to register */ if (m) m.setKey(m); return NS_OK;
return m.containsKey(m.mObject);
if (m) m.ContainsKey(value); return m;
return (value!= m.containsKey())? m.containsKey(value) : 0;
if (m)  m.key = m.key; m.key = m.key;  return m.key;
return m.containsKey((ConstString&)value);
if (m)  if (m)  m.isRegistered = true;  return m.isRegistered;
return (m == null)? m.containsKey(value) : 0;
if (m)  if (!m)  m.keyStr = m; m.keyStr = m.keyStr;  else  m.keyStr = m.keyStr;  return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) return NS_ERROR_null_POINTER; return m.containsKey(value);
return (value!= 0)? m.containsKey(value) : 0;
if (m.type == TYPE_REGION)  m.type = TYPE_REGION;  if (m.type == TYPE_REGION)  m.type = TYPE_REGION;  else  m.type = TYPE_REGION;  return m.containsKey(value);
return m.containsKey((char *)value);
if (!m) return NS_OK; if (m) return m.containsKey(value); else return NS_OK;
if (m)  if (m)  m.mKey = value;   else  m.mKey = value;    return m;
if (m)  if ((null == m) && (null == m))  return NS_ERROR_FAILURE;  if (m)  return NS_OK;  if (m.type == mType)  return NS_OK;   else  return NS_OK;  return NS_OK;  return NS_OK;
return m.get().key_type == TYPE_NONE;
if (m == null)  return NS_ERROR_null_POINTER;  if (m)  return NS_OK;  return m.containsKey(value);
if (!m.containsKey(value)) return -1; return m.containsKey(value);
if (m)  if (m.type!= ObjectType) return m.type = ObjectType; else  m.type = ObjectType;   else  m.type = ObjectType;  return m.type == ObjectType;
return m.keyOf(value);
if (m)  nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv))  return rv;   return rv;
if (m) m.key.len = m.key.len; return m.key.len = m.key.len;
if (m) <if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
if (m) &if (m) m.isRegistered = true; <return m.isRegistered;
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if (m) &m.mKey = value; <&else m.mKey = value; return m;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) <if (m.mLength &0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m.get()) <return (aValue).isRegistered(value); &return (aValue).isRegistered(value);
if (m) <if (!m.isRegistered()) <return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m) &if (m) &m.mKey = value; &&else m.mKey = value; return m;
if (m) &if (m) &m.isRegistered = true; return m.isRegistered;
if (!m.containsKey(value)) &if (m.mLength <0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) m.isRegistered = true; <&return m.isRegistered;
if (m) <return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value) <return m.containsKey(value); <else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) return m.containsKey(value); return NS_OK;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
m = m.containsKey(value); if (m == null) if (aKey) &*aKey = m; return NS_OK; <<return NS_OK;
if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
m = m.containsKey(value); if (m == null) if (aKey) *aKey = m; return NS_OK; &&return NS_OK;
if (m.key) <return m.key; &else <return m.key;
if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <return m.containsKey(value); else return m.containsKey(value);
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <return rv;
if (value) return m.containsKey(value); else <return m.containsKey(value);
if (value &0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (!m.isRegistered()) &return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
if (m == null) <if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (!m.containsKey(value)) &if (m.mLength 0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
if (m == null) return NS_ERROR_null_POINTER; <if (m) return NS_OK; <return m.containsKey(value);
if (!m.containsKey(value)) &if (m.mLength <0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value) return m.containsKey(value); &else &return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '&0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if ((value = m.keyValue)!= '0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
<if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (value) <return m.containsKey(value); else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) &if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) <m.isRegistered = true; <return m.isRegistered;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value) <return m.containsKey(value); &else return m.containsKey(value);
<if (m) if (m) &m.isRegistered = true; return m.isRegistered;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; &if (m) <return NS_OK; <return m.containsKey(value);
if (m.key) &return m.key; <else return m.key;
if (value <0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (m) <if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (m.get()) <return (aValue).isRegistered(value); return (aValue).isRegistered(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if ((value = m.keyValue)!= '&0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
if (m == null) &if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &&return rv;
if (value &0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m == null) &return NS_ERROR_null_POINTER; <if (m) <return NS_OK; <return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
m = m.containsKey(value); if (m == null) &if (aKey) &*aKey = m; return NS_OK; <&return NS_OK;
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
if (m.key) <return m.key; <else <return m.key;
if (value <0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &if (!m.isRegistered()) return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '<0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (m) &m.mKey = value; &&else m.mKey = value; return m;
if (m == null) &if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
<if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
m = m.containsKey(value); if (m == null) if (aKey) &*aKey = m; return NS_OK; &return NS_OK;
if (!m) <return 0; &return m.containsKey(value);
if (value &0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) m.Key = value; &return m.Key;
m = m.containsKey(value); if (m == null) <if (aKey) &*aKey = m; return NS_OK; <&return NS_OK;
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
if (value &0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
<if (m) if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) <if (m) m.mKey = value; <<else m.mKey = value; return m;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
&if (m) if (m) &m.isRegistered = true; &return m.isRegistered;
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (value) &return m.containsKey(value); <return 0;
if (m == null) &if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value 0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if ((value = m.keyValue)!= '&0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (m) <m.mKey = value; <else m.mKey = value; return m;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
m = m.containsKey(value); if (m == null) if (aKey) &*aKey = m; return NS_OK; <return NS_OK;
if (m) if ((value = m.keyValue)!= '<0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value) <return m.containsKey(value); &else &return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '&0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if ((value = m.keyValue)!= '&0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
m = m.containsKey(value); if (m == null) &if (aKey) <*aKey = m; return NS_OK; <<return NS_OK;
if (m && m.containsKey(value)) return 0; return 0; &else return m.containsKey(value);
if (m) &if (m) &m.mKey = value; <&else m.mKey = value; return m;
&if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value <0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) if (m.mLength 0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
m = m.containsKey(value); if (m == null) &if (aKey) *aKey = m; return NS_OK; return NS_OK;
<if (m) &if (m) m.isRegistered = true; &return m.isRegistered;
&if (m && m.containsKey(value)) return 0; return 0; &else return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m.get()) &return (aValue).isRegistered(value); return (aValue).isRegistered(value);
if (m.key) &return m.key; else &return m.key;
if (m) m.key = m.key; m.key = m.key; &return m.key;
if (m) return m.containsKey(value); <else return m.containsKey(value);
if (m) <if (!m.isRegistered()) &return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m) if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &m.mCount = 0; m.mAttributes = m; &return m.mAttributes == m.mAttributes;
if (m == null) &if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <if (m) m.mKey = value; &&else m.mKey = value; return m;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) if ((value = m.keyValue)!= '<0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (!m.isRegistered()) return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; if (m) <return NS_OK; return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &<return rv;
if (value) return m.containsKey(value); <else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &if (m) m.mKey = value; <&else m.mKey = value; return m;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if ((value = m.keyValue)!= '&0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (!m.isRegistered()) <return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; <if (m) <return NS_OK; &return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <&return rv;
if (m.key) <return m.key; &else &return m.key;
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) &m.key = m.key; return m.key == m.key; <return m.key;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) <if (m.mLength &0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
<if (m) if (m) &m.isRegistered = true; &return m.isRegistered;
m = m.containsKey(value); if (m == null) <if (aKey) *aKey = m; return NS_OK; <<return NS_OK;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <<return rv;
if (!m) <return NS_ERROR_null_POINTER; return m.containsKey(value);
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
&if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (value &0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if ((value = m.keyValue)!= '0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if (m) m.isRegistered = true; return m.isRegistered;
if (m) <return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (m) &m.mKey = value; &<else m.mKey = value; return m;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &return rv;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
if (m) <if (!m.isRegistered()) return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (m) m.isRegistered = true; &<return m.isRegistered;
if (!m.containsKey(value)) if (m.mLength 0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
if (m) if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (m) return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
m = m.containsKey(value); if (m == null) if (aKey) &*aKey = m; return NS_OK; &&return NS_OK;
if (m) if (m) &m.isRegistered = true; &return m.isRegistered;
if (value &0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
&if (m) &if (m) <m.isRegistered = true; return m.isRegistered;
if (m) &if ((value = m.keyValue)!= '&0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) &if (m.mLength &0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value 0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (m.key) &return m.key; <else <return m.key;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (value <0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &m.mCount = 0; m.mAttributes = m; <return m.mAttributes == m.mAttributes;
<if (m) <if (m) m.isRegistered = true; <return m.isRegistered;
<if (m) &if (m) m.isRegistered = true; return m.isRegistered;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (m) <m.isRegistered = true; <<return m.isRegistered;
if (value) <return m.containsKey(value); &else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m == null) &return NS_ERROR_null_POINTER; if (m) &return NS_OK; &return m.containsKey(value);
&if (m) if (m) m.isRegistered = true; return m.isRegistered;
if (m) &return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value 0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
<if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if (!m.isRegistered()) <return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
<if (m) if (m) <m.isRegistered = true; return m.isRegistered;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
if (value 0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m == null) &return NS_ERROR_null_POINTER; &if (m) &return NS_OK; &return m.containsKey(value);
if (value <0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <&return rv;
if (m) m.Key = value; <return m.Key;
if (m) <if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (m) &if (m) &m.mKey = value; &else m.mKey = value; return m;
<if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
if (m) &return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
m = m.containsKey(value); if (m == null) &if (aKey) &*aKey = m; return NS_OK; &<return NS_OK;
if (m) &if (m) <m.mKey = value; <else m.mKey = value; return m;
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value) &return m.containsKey(value); &else return m.containsKey(value);
&if (m) &if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) if ((value = m.keyValue)!= '&0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &return rv;
if (m) return m.containsKey(value); <else &return m.containsKey(value);
if (m) &if (!m.isRegistered()) <return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
m = m.containsKey(value); if (m == null) if (aKey) <*aKey = m; return NS_OK; <<return NS_OK;
if (m) &return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m == null) if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if ((value = m.keyValue)!= '&0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &return m.containsKey(value); return 0;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <return rv;
if (m.key) return m.key; else &return m.key;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (m) if ((value = m.keyValue)!= '<0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (m) <m.isRegistered = true; &<return m.isRegistered;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
m = m.containsKey(value); if (m == null) &if (aKey) *aKey = m; return NS_OK; &return NS_OK;
if (m == null) &if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m == null) <if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (value 0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) if (m.mLength &0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
if (m == null) <return NS_ERROR_null_POINTER; &if (m) return NS_OK; return m.containsKey(value);
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (value) &return m.containsKey(value); else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value) <return m.containsKey(value); else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) &if (!m.isRegistered()) &return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (value) &return m.containsKey(value); &else <return (m.flags & ACCESSIBLE)? m.flags : 0;
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) &m.key = m.key; return m.key == m.key; return m.key;
if (m) if ((value = m.keyValue)!= '0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value <0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
<if (m && m.containsKey(value)) return 0; return 0; <else return m.containsKey(value);
m = m.containsKey(value); if (m == null) if (aKey) <*aKey = m; return NS_OK; <return NS_OK;
if (m == null) &if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if (m) m.mKey = value; &&else m.mKey = value; return m;
if (!m.containsKey(value)) if (m.mLength 0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
<if (m) <if (m) m.isRegistered = true; &return m.isRegistered;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
if (m) <if (!m.isRegistered()) &return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
if (m.key) return m.key; &else return m.key;
if (m) <if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (m) return m.containsKey(value); &else <return m.containsKey(value);
if (m) if (m) <m.isRegistered = true; <return m.isRegistered;
if (m) <return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m == null) <return NS_ERROR_null_POINTER; if (m) &return NS_OK; return m.containsKey(value);
if (m) &if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) <if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) if (m) m.mKey = value; <&else m.mKey = value; return m;
if (m) return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; return rv;
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &m.isRegistered = true; <return m.isRegistered;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (m) &if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
<if (m) <if (m) &m.isRegistered = true; &return m.isRegistered;
if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (m) m.mKey = value; &<else m.mKey = value; return m;
if (m.key) <return m.key; else return m.key;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
&if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m.key) &return m.key; &else <return m.key;
if (m) if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (m) &if (!m.isRegistered()) <return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
if (!m) &return 0; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '&0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if ((value = m.keyValue)!= '0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (!m.isRegistered()) return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (value) return m.containsKey(value); else &return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if (m) m.isRegistered = true; return m.isRegistered;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m == null) &return NS_ERROR_null_POINTER; if (m) return NS_OK; return m.containsKey(value);
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) if (m) &m.mKey = value; &else m.mKey = value; return m;
if (m == null) <if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (m) &if ((value = m.keyValue)!= '0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
&if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if ((value = m.keyValue)!= '&0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (m == null) <return NS_ERROR_null_POINTER; if (m) &return NS_OK; <return m.containsKey(value);
if (m) &return m.containsKey(value); else return m.containsKey(value);
if (m) return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if ((value = m.keyValue)!= '<0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value) <return m.containsKey(value); &return 0;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
return (m = m.containsKey(value));
if (m) &if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (m) return m.containsKey(value); else <return m.containsKey(value);
if (m) <return m.containsKey(value); &else &return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; &if (m) &return NS_OK; <return m.containsKey(value);
if (!m.containsKey(value)) if (m.mLength 0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
m = m.containsKey(value); if (m == null) if (aKey) *aKey = m; return NS_OK; &<return NS_OK;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
m = m.containsKey(value); if (m == null) if (aKey) *aKey = m; return NS_OK; <return NS_OK;
if (value <0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
m = m.containsKey(value); if (m == null) &if (aKey) *aKey = m; return NS_OK; <return NS_OK;
if (m) &m.isRegistered = true; &<return m.isRegistered;
if (m) <if (!m.isRegistered()) return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &<return rv;
if (m) return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (value) <return m.containsKey(value); else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) &if (!m.isRegistered()) return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; &if (m) &return NS_OK; return m.containsKey(value);
if (m) if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &if (!m.isRegistered()) &return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (m) if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (m) <if (m) <m.isRegistered = true; <return m.isRegistered;
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) if (m) <m.mKey = value; <&else m.mKey = value; return m;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m == null) return NS_ERROR_null_POINTER; <if (m) return NS_OK; &return m.containsKey(value);
if (m) &return m.containsKey(value); return NS_OK;
if (value) return m.containsKey(value); else return m.containsKey(value);
if (!m.containsKey(value)) if (m.mLength <0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &if (!m.isRegistered()) return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '<0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value 0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &if (!m.isRegistered()) <return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <&return rv;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
m = m.containsKey(value); if (m == null) <if (aKey) <*aKey = m; return NS_OK; return NS_OK;
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (value &0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m == null) if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value) &return m.containsKey(value); <else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <return rv;
if (m) <return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value 0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value) <return m.containsKey(value); return 0;
<if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <<return rv;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <return rv;
if (m == null) return NS_ERROR_null_POINTER; &if (m) &return NS_OK; &return m.containsKey(value);
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) <m.key = m.key; return m.key == m.key; <return m.key;
if (m) <return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
m = m.containsKey(value); if (m == null) &if (aKey) <*aKey = m; return NS_OK; <&return NS_OK;
if (!m.containsKey(value)) if (m.mLength 0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value) &return m.containsKey(value); &return 0;
if (m == null) if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if (!m.isRegistered()) &return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (m) if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
if (m) return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m.key) return m.key; else return m.key;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m == null) if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) return m.containsKey(value); else &return m.containsKey(value);
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &&return rv;
if (m == null) &return NS_ERROR_null_POINTER; if (m) return NS_OK; &return m.containsKey(value);
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <&return rv;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if (!m.isRegistered()) &return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
&if (m) if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value <0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) m.Key = value; return m.Key;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &if ((value = m.keyValue)!= '0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value &0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (value <0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m == null) if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (!m.containsKey(value)) <if (m.mLength &0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
<if (m) &if (m) &m.isRegistered = true; <return m.isRegistered;
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) return NS_ERROR_null_POINTER; &if (m) &return NS_OK; <return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) if ((value = m.keyValue)!= '<0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m == null) &return NS_ERROR_null_POINTER; <if (m) &return NS_OK; return m.containsKey(value);
if (!m.containsKey(value)) &if (m.mLength &0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (m) <m.mKey = value; &else m.mKey = value; return m;
if (m) &return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
m = m.containsKey(value); if (m == null) if (aKey) &*aKey = m; return NS_OK; &<return NS_OK;
if (m.get()) <return (aValue).isRegistered(value); <return (aValue).isRegistered(value);
if (m == null) return NS_ERROR_null_POINTER; &if (m) <return NS_OK; &return m.containsKey(value);
if (m) <if (!m.isRegistered()) &return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) <if (m.mLength &0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
<if (m) &if (m) &m.isRegistered = true; return m.isRegistered;
if (m) <if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (m) <if (!m.isRegistered()) <return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
<if (m) <if (m) <m.isRegistered = true; return m.isRegistered;
if (m) &if ((value = m.keyValue)!= '<0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <if (m) &m.mKey = value; <<else m.mKey = value; return m;
&if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (!m.isRegistered()) &return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
<if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
m = m.containsKey(value); if (m == null) &if (aKey) <*aKey = m; return NS_OK; <return NS_OK;
if (m == null) return NS_ERROR_null_POINTER; <if (m) &return NS_OK; <return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
&if (m) <if (m) m.isRegistered = true; <return m.isRegistered;
if (m) &return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (!m.isRegistered()) <return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (value) <return m.containsKey(value); &else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (!m.isRegistered()) &return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
if (m && m.containsKey(value)) return 0; return 0; else return m.containsKey(value);
&if (m) if (m) <m.isRegistered = true; <return m.isRegistered;
if (m == null) &if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) if ((value = m.keyValue)!= '&0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) &if (m.mLength 0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
<if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value &0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if ((value = m.keyValue)!= '&0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value &0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; return rv;
if (m) <if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (m) <if (m) <m.isRegistered = true; return m.isRegistered;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) &m.key = m.key; return m.key == m.key; &return m.key;
if (m) &if (m) m.mKey = value; &else m.mKey = value; return m;
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if (m) <m.mKey = value; <&else m.mKey = value; return m;
if (m == null) <if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value &0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; return rv;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if (!m.isRegistered()) &return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) &if (m.mLength 0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if (!m.isRegistered()) &return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (m) return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &return m.containsKey(value);
if (!m.containsKey(value)) &if (m.mLength 0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &return m.containsKey(value); &else <return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; &if (m) &return NS_OK; <return m.containsKey(value);
<if (m) if (m) m.isRegistered = true; &return m.isRegistered;
if (m) return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <return m.containsKey(value); else <return m.containsKey(value);
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) <return NS_ERROR_null_POINTER; &if (m) return NS_OK; &return m.containsKey(value);
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value) <return m.containsKey(value); &else <return m.containsKey(value);
if (value &0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (m) &if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (value) <return m.containsKey(value); <else &return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if ((value = m.keyValue)!= '0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value) return m.containsKey(value); &else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) if (m.mLength &0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m.key) return m.key; &else &return m.key;
<if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
<if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m.key) return m.key; <else return m.key;
if (m) <return m.containsKey(value); <else &return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; &if (m) <return NS_OK; &return m.containsKey(value);
if (!m.containsKey(value)) if (m.mLength <0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value) &return m.containsKey(value); &else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) &if (!m.isRegistered()) return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m) <m.mCount = 0; m.mAttributes = m; <return m.mAttributes == m.mAttributes;
if (value <0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
m = m.containsKey(value); if (m == null) <if (aKey) *aKey = m; return NS_OK; <&return NS_OK;
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
m = m.containsKey(value); if (m == null) if (aKey) *aKey = m; return NS_OK; <&return NS_OK;
if (m) <if (m) &m.mKey = value; &<else m.mKey = value; return m;
if (m == null) <if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value) <return m.containsKey(value); <return 0;
if (value &0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
m = m.containsKey(value); if (m == null) <if (aKey) *aKey = m; return NS_OK; &return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) &return NS_ERROR_null_POINTER; if (m) &return NS_OK; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
if (m == null) &return NS_ERROR_null_POINTER; if (m) return NS_OK; <return m.containsKey(value);
if (m) &return m.containsKey(value); <else <return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; &if (m) return NS_OK; <return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; if (m) &return NS_OK; &return m.containsKey(value);
&if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <if (m) <m.mKey = value; &&else m.mKey = value; return m;
if (m == null) return NS_ERROR_null_POINTER; &if (m) return NS_OK; &return m.containsKey(value);
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
m = m.containsKey(value); if (m == null) <if (aKey) <*aKey = m; return NS_OK; <&return NS_OK;
if (m) &m.isRegistered = true; <&return m.isRegistered;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <return rv;
if (m) if (m) &m.mKey = value; &<else m.mKey = value; return m;
if (m) &if ((value = m.keyValue)!= '<0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (value 0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
m = m.containsKey(value); if (m == null) <if (aKey) &*aKey = m; return NS_OK; <return NS_OK;
if (m == null) <return NS_ERROR_null_POINTER; <if (m) return NS_OK; &return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if ((value = m.keyValue)!= '&0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
<if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &&return rv;
<if (m) &if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) if (m) <m.mKey = value; <<else m.mKey = value; return m;
if (m) &return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value) <return m.containsKey(value); <else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <m.key = m.key; m.key = m.key; &return m.key;
m = m.containsKey(value); if (m == null) &if (aKey) <*aKey = m; return NS_OK; &return NS_OK;
if (m == null) return NS_ERROR_null_POINTER; &if (m) return NS_OK; <return m.containsKey(value);
if (value 0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m == null) <return NS_ERROR_null_POINTER; <if (m) <return NS_OK; &return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value <0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
m = m.containsKey(value); if (m == null) <if (aKey) *aKey = m; return NS_OK; <return NS_OK;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
&if (m) <if (m) m.isRegistered = true; return m.isRegistered;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) return m.containsKey(value); <return NS_OK;
if (m) if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &return rv;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <m.isRegistered = true; &&return m.isRegistered;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <if (m) <m.mKey = value; &else m.mKey = value; return m;
if (m) &return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if (!m.isRegistered()) return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (m) &if (!m.isRegistered()) &return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
if (m) &if (!m.isRegistered()) return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
m = m.containsKey(value); if (m == null) if (aKey) <*aKey = m; return NS_OK; <&return NS_OK;
if (m) &return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
<if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (m) <if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (m == null) &return NS_ERROR_null_POINTER; &if (m) <return NS_OK; &return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &&return rv;
if (m) &if (m) &m.mKey = value; <else m.mKey = value; return m;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
if (m == null) return NS_ERROR_null_POINTER; <if (m) <return NS_OK; return m.containsKey(value);
if (m) if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (m) if (m) m.mKey = value; &<else m.mKey = value; return m;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &return rv;
if (m == null) <if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (m == null) <if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
return (value == '&0')? m.containsKey(value) : 0;
if (value) &return m.containsKey(value); else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
m = m.containsKey(value); if (m == null) &if (aKey) &*aKey = m; return NS_OK; return NS_OK;
if (!m.containsKey(value)) <if (m.mLength 0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m == null) &if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <<return rv;
if (value) return m.containsKey(value); &return 0;
if (m) &if ((value = m.keyValue)!= '<0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value) return m.containsKey(value); &else <return m.containsKey(value);
<if (m) <if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) if (!m.isRegistered()) &return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (m) &if (m) m.mKey = value; <else m.mKey = value; return m;
if (m == null) &if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m == null) &return NS_ERROR_null_POINTER; <if (m) <return NS_OK; return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
&if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (m) &m.isRegistered = true; &return m.isRegistered;
if (m == null) <return NS_ERROR_null_POINTER; &if (m) &return NS_OK; &return m.containsKey(value);
if (m) <if (m) m.mKey = value; <&else m.mKey = value; return m;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) if (m) &m.mKey = value; else m.mKey = value; return m;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
&if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
if (m) &if (m) m.mKey = value; else m.mKey = value; return m;
m = m.containsKey(value); if (m == null) &if (aKey) <*aKey = m; return NS_OK; &&return NS_OK;
if (m) &if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (m) if (m) m.mKey = value; <<else m.mKey = value; return m;
m = m.containsKey(value); if (m == null) &if (aKey) &*aKey = m; return NS_OK; <return NS_OK;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
if (m) <if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (m) if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
if (m) if (m) m.isRegistered = true; &return m.isRegistered;
if (m == null) return NS_ERROR_null_POINTER; if (m) <return NS_OK; return m.containsKey(value);
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &if ((value = m.keyValue)!= '<0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if (m) &m.mKey = value; <else m.mKey = value; return m;
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if ((value = m.keyValue)!= '<0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m == null) return NS_ERROR_null_POINTER; <if (m) <return NS_OK; <return m.containsKey(value);
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (!m.isRegistered()) &return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '&0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
&if (m && m.containsKey(value)) return 0; return 0; <else return m.containsKey(value);
&if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m == null) <if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (!m.containsKey(value)) if (m.mLength &0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &<return rv;
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value &0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
&if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
&if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (m == null) if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m == null) return NS_ERROR_null_POINTER; &if (m) return NS_OK; return m.containsKey(value);
m = m.containsKey(value); if (m == null) <if (aKey) <*aKey = m; return NS_OK; &&return NS_OK;
if (m) <m.Key = value; <return m.Key;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &<return rv;
if (m) &if (m) <m.mKey = value; <<else m.mKey = value; return m;
if (m) if (!m.isRegistered()) return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; <if (m) return NS_OK; &return m.containsKey(value);
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
m = m.containsKey(value); if (m == null) <if (aKey) *aKey = m; return NS_OK; &&return NS_OK;
m = m.containsKey(value); if (m == null) <if (aKey) <*aKey = m; return NS_OK; &return NS_OK;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (m) &return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
<if (m) <if (m) &m.isRegistered = true; return m.isRegistered;
&if (m) <if (m) <m.isRegistered = true; <return m.isRegistered;
if (m) &if ((value = m.keyValue)!= '<0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (m) <m.mKey = value; &<else m.mKey = value; return m;
if (value) &return m.containsKey(value); &else <return m.containsKey(value);
if (m == null) return NS_ERROR_null_POINTER; if (m) <return NS_OK; <return m.containsKey(value);
if (!m.containsKey(value)) if (m.mLength <0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if (m) <m.isRegistered = true; &return m.isRegistered;
if (!m.containsKey(value)) <if (m.mLength <0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
<if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
<if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m == null) &return NS_ERROR_null_POINTER; if (m) <return NS_OK; return m.containsKey(value);
if (!m.containsKey(value)) if (m.mLength &0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (m) if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
if (m) if (!m.isRegistered()) <return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
if (m) if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) &if (m.mLength <0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
<if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (!m.containsKey(value)) &if (m.mLength &0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (!m.containsKey(value)) if (m.mLength &0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <m.key = m.key; m.key = m.key; return m.key;
m = m.containsKey(value); if (m == null) &if (aKey) <*aKey = m; return NS_OK; &<return NS_OK;
if (m) if ((value = m.keyValue)!= '<0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) return m.containsKey(value); else return m.containsKey(value);
if (value 0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
if (m) &if (m) <m.isRegistered = true; <return m.isRegistered;
if (m == null) return NS_ERROR_null_POINTER; &if (m) &return NS_OK; return m.containsKey(value);
if (m == null) &if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m.key) <return m.key; &else return m.key;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <return rv;
if (m) &if (!m.isRegistered()) <return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (value) return m.containsKey(value); &else return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) if (!m.isRegistered()) <return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (value <0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m) &return 0; <return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) return NS_ERROR_null_POINTER; <if (m) return NS_OK; return m.containsKey(value);
m = m.containsKey(value); if (m == null) &if (aKey) *aKey = m; return NS_OK; <<return NS_OK;
if (m) <return m.containsKey(value); else &return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '<0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
<if (m && m.containsKey(value)) return 0; return 0; else return m.containsKey(value);
if (m == null) <if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
<if (m) &if (m) m.isRegistered = true; <return m.isRegistered;
if (m) <return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value 0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m.key) &return m.key; &else return m.key;
&if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
if (m == null) <if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <return m.containsKey(value); &else return m.containsKey(value);
<if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (m) <m.mKey = value; else m.mKey = value; return m;
if (m == null) &return NS_ERROR_null_POINTER; &if (m) return NS_OK; return m.containsKey(value);
if (value 0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) if (m.mLength <0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if (!m.isRegistered()) &return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (!m.containsKey(value)) if (m.mLength 0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m.get()) &return (aValue).isRegistered(value); &return (aValue).isRegistered(value);
if (m) if ((value = m.keyValue)!= '0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if ((value = m.keyValue)!= '0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) &if (m.mLength <0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '&0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (!m.containsKey(value)) <if (m.mLength 0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m) return NS_ERROR_null_POINTER; <return m.containsKey(value);
&if (m) if (m) &m.isRegistered = true; return m.isRegistered;
if (m == null) &if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) if ((value = m.keyValue)!= '&0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m == null) <return NS_ERROR_null_POINTER; <if (m) &return NS_OK; <return m.containsKey(value);
if (value 0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &return m.containsKey(value); &return 0;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value) return m.containsKey(value); <else return m.containsKey(value);
if (m == null) if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <m.mCount = 0; m.mAttributes = m; &return m.mAttributes == m.mAttributes;
if (value &0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) if (!m.isRegistered()) <return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if ((value = m.keyValue)!= '0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) <if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (!m.containsKey(value)) &if (m.mLength &0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &&return rv;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
m = m.containsKey(value); if (m == null) <if (aKey) &*aKey = m; return NS_OK; &&return NS_OK;
if (m) &if ((value = m.keyValue)!= '0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (m) if ((value = m.keyValue)!= '&0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
if (m) if (!m.isRegistered()) <return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
if (m) m.isRegistered = true; <return m.isRegistered;
if (m.key) return m.key; &else <return m.key;
if (m) &if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
m = m.containsKey(value); if (m == null) <if (aKey) *aKey = m; return NS_OK; return NS_OK;
m = m.containsKey(value); if (m == null) if (aKey) <*aKey = m; return NS_OK; &<return NS_OK;
if (value &0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (!m.isRegistered()) &return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <&return rv;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (m) <m.mCount = 0; m.mAttributes = m; return m.mAttributes == m.mAttributes;
if (m) <if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (m) return m.containsKey(value); <else <return m.containsKey(value);
if (!m.containsKey(value)) <if (m.mLength &0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &if (m) &m.mKey = value; else m.mKey = value; return m;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
<if (m) <if (m) &m.isRegistered = true; <return m.isRegistered;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
<return m.containsKey(value);
if (m) if (m) m.mKey = value; &else m.mKey = value; return m;
if (m) &return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m == null) <if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <if (m) <m.mKey = value; <else m.mKey = value; return m;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) if (!m.isRegistered()) return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
<if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value <0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
<if (m && m.containsKey(value)) return 0; return 0; &else return m.containsKey(value);
if (m) if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
if (m.get()) return (aValue).isRegistered(value); <return (aValue).isRegistered(value);
if (m) if ((value = m.keyValue)!= '0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
m = m.containsKey(value); if (m == null) if (aKey) <*aKey = m; return NS_OK; return NS_OK;
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &<return rv;
return (value == '0')? m.containsKey(value) : 0;
if (value 0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) if (m) m.mKey = value; <else m.mKey = value; return m;
if (value) &return m.containsKey(value); else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
m = m.containsKey(value); if (m == null) <if (aKey) &*aKey = m; return NS_OK; return NS_OK;
if (m) if (m) <m.isRegistered = true; return m.isRegistered;
if (!m.containsKey(value)) <if (m.mLength 0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
m = m.containsKey(value); if (m == null) if (aKey) <*aKey = m; return NS_OK; &&return NS_OK;
if (m) if (m) <m.mKey = value; &<else m.mKey = value; return m;
if (m) &if (!m.isRegistered()) return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) m.key = m.key; return m.key == m.key; return m.key;
if (m) m.isRegistered = true; &return m.isRegistered;
if (value 0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (m) m.isRegistered = true; &&return m.isRegistered;
if (!m.containsKey(value)) if (m.mLength <0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &return m.containsKey(value); &return NS_OK;
if (m) &if ((value = m.keyValue)!= '&0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (m) if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (!m.containsKey(value)) <if (m.mLength <0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
&if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
&return m.containsKey(value);
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <<return rv;
if (m) if (m) &m.isRegistered = true; <return m.isRegistered;
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) <m.key = m.key; return m.key == m.key; &return m.key;
if (m) &return m.containsKey(value); <return NS_OK;
<if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &m.Key = value; &return m.Key;
if (m) &return m.containsKey(value); else &return m.containsKey(value);
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (!m.isRegistered()) return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
if (m == null) return NS_ERROR_null_POINTER; if (m) return NS_OK; <return m.containsKey(value);
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &return rv;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (m) return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; return rv;
<if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value <0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m == null) &return NS_ERROR_null_POINTER; if (m) <return NS_OK; <return m.containsKey(value);
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (!m.containsKey(value)) <if (m.mLength 0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value) return m.containsKey(value); else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (!m.containsKey(value)) &if (m.mLength 0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '&0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (m) m.isRegistered = true; &return m.isRegistered;
if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m.containsKey(value)) if (m.mLength &0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &&return rv;
if (!m.containsKey(value)) &if (m.mLength <0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m == null) return NS_ERROR_null_POINTER; <if (m) &return NS_OK; &return m.containsKey(value);
if (value) return m.containsKey(value); <else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (!m.containsKey(value)) <if (m.mLength &0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) <if (m.mLength <0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m == null) return NS_ERROR_null_POINTER; <if (m) &return NS_OK; return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (!m.isRegistered()) <return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
&return (m = m.containsKey(value));
if (!m.containsKey(value)) <if (m.mLength <0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (value &0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m == null) <return NS_ERROR_null_POINTER; <if (m) return NS_OK; <return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (!m.containsKey(value)) &if (m.mLength &0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; <if (m) return NS_OK; <return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (value &0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m) if ((value = m.keyValue)!= '0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m == null) return NS_ERROR_null_POINTER; if (m) &return NS_OK; &return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
if (m) &if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &return rv;
if (m) m.mCount = 0; m.mAttributes = m; return m.mAttributes == m.mAttributes;
if (value) return m.containsKey(value); return 0;
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <<return rv;
if (m) &if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (m == null) return NS_ERROR_null_POINTER; if (m) return NS_OK; return m.containsKey(value);
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if ((value = m.keyValue)!= '0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (!m.isRegistered()) return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (value) return m.containsKey(value); <return 0;
if (!m.containsKey(value)) <if (m.mLength <0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
<if (m) &if (m) &m.isRegistered = true; &return m.isRegistered;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (m) <if (!m.isRegistered()) return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
if (value &0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) if (m.mLength <0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; <if (m) &return NS_OK; &return m.containsKey(value);
if (m) &m.Key = value; return m.Key;
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &return rv;
if (!m.containsKey(value)) &if (m.mLength 0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
if (m) <return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (!m.containsKey(value)) &if (m.mLength &0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (value 0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m == null) if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
&if (m) &if (m) &m.isRegistered = true; <return m.isRegistered;
if (m) &return m.containsKey(value); &else return m.containsKey(value);
<if (m) if (m) m.isRegistered = true; <return m.isRegistered;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
<if (m) &if (m) <m.isRegistered = true; <return m.isRegistered;
if (value) &return m.containsKey(value); else <return m.containsKey(value);
if (m) <if (!m.isRegistered()) return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &<return rv;
m = m.containsKey(value); if (m == null) <if (aKey) *aKey = m; return NS_OK; &<return NS_OK;
if (m) <if (m) m.mKey = value; &else m.mKey = value; return m;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) if (!m.isRegistered()) <return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
if (m == null) return NS_ERROR_null_POINTER; if (m) <return NS_OK; &return m.containsKey(value);
if (m) if (m) &m.mKey = value; <else m.mKey = value; return m;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
if (m) if ((value = m.keyValue)!= '0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (value &0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) if (m) &m.isRegistered = true; return m.isRegistered;
m = m.containsKey(value); if (m == null) &if (aKey) *aKey = m; return NS_OK; &<return NS_OK;
&if (m) if (m) m.isRegistered = true; <return m.isRegistered;
if (m) if (!m.isRegistered()) <return m.isRegistered(); <else <m.isRegistered = true; return m.containsKey(value);
if (!m) <return NS_ERROR_null_POINTER; <return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
&if (m) <if (m) m.isRegistered = true; &return m.isRegistered;
if (m) <if (m) &m.mKey = value; &else m.mKey = value; return m;
if (m) <return m.containsKey(value); return NS_OK;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
return m.containsKey(value);
if (m.key) &return m.key; else return m.key;
if (m) return m.containsKey(value); &else return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; if (m) return NS_OK; &return m.containsKey(value);
if (!m.containsKey(value)) &if (m.mLength 0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; &if (m) <return NS_OK; <return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (m.key) return m.key; <else <return m.key;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m == null) &return NS_ERROR_null_POINTER; &if (m) return NS_OK; &return m.containsKey(value);
if (m) if (!m.isRegistered()) <return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (m) &if (m) <m.isRegistered = true; return m.isRegistered;
if (m) return m.containsKey(value); <return 0;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (m) if (m) <m.mKey = value; &&else m.mKey = value; return m;
if (m) &if ((value = m.keyValue)!= '0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
if (value <0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value 0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
if (value) <return m.containsKey(value); &else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (!m.containsKey(value)) &if (m.mLength <0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
m = m.containsKey(value); if (m == null) <if (aKey) <*aKey = m; return NS_OK; <return NS_OK;
if (m == null) &if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if (!m.isRegistered()) &return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <return rv;
if (m) if (!m.isRegistered()) &return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
m = m.containsKey(value); if (m == null) if (aKey) <*aKey = m; return NS_OK; &return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
if (!m) return 0; return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) m.isRegistered = true; return m.isRegistered;
if (m) if (m) <m.mKey = value; else m.mKey = value; return m;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <return m.containsKey(value); &return 0;
if (value 0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) if (!m.isRegistered()) return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
if (value 0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (!m.isRegistered()) return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
&if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
if (m) <if ((value = m.keyValue)!= '0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
m = m.containsKey(value); if (m == null) &if (aKey) *aKey = m; return NS_OK; &&return NS_OK;
if (m) if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (!m) <return 0; return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '<0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) m.mCount = 0; m.mAttributes = m; <return m.mAttributes == m.mAttributes;
if (m) if (m) &m.mKey = value; <<else m.mKey = value; return m;
<if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &<return rv;
if (m) <if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (value) &return m.containsKey(value); <else <return m.containsKey(value);
if (m) <if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (m) <if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
if (m) m.mCount = 0; m.mAttributes = m; &return m.mAttributes == m.mAttributes;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <return m.containsKey(value); &else <return m.containsKey(value);
if (m == null) <if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
&if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
&if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value) &return m.containsKey(value); <else &return m.containsKey(value);
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m) return NS_ERROR_null_POINTER; return m.containsKey(value);
&if (m) if (m) <m.isRegistered = true; return m.isRegistered;
<if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <if (m) &m.isRegistered = true; return m.isRegistered;
if (m) &if ((value = m.keyValue)!= '0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (!m) &return NS_ERROR_null_POINTER; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '<0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
&if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
<if (m) &if (m) <m.isRegistered = true; return m.isRegistered;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; else m.type = ObjectType; return m.type == ObjectType;
<if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &m.isRegistered = true; <<return m.isRegistered;
if (m) <if (m) m.isRegistered = true; <return m.isRegistered;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (!m.containsKey(value)) <if (m.mLength <0) <if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value) &return m.containsKey(value); return 0;
if (value) return m.containsKey(value); else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) &if ((value = m.keyValue)!= '&0') return false; &else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value &0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
m = m.containsKey(value); if (m == null) <if (aKey) &*aKey = m; return NS_OK; &<return NS_OK;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <else m.type = ObjectType; return m.type == ObjectType;
if (m) <if (!m.isRegistered()) <return m.isRegistered(); <else &m.isRegistered = true; return m.containsKey(value);
if (m) return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m.key) &return m.key; &else &return m.key;
if (m) &return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m == null) &return NS_ERROR_null_POINTER; <if (m) return NS_OK; return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <<return rv;
if (m) if (!m.isRegistered()) return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (m) &if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
if (m) <m.isRegistered = true; return m.isRegistered;
if (value 0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value <0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) &if (m.mLength &0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) &if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <if (m) m.mKey = value; <else m.mKey = value; return m;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value <0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (value 0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m) &return 0; &return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <<return rv;
if (m) &return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &&return rv;
if (!m.containsKey(value)) <if (m.mLength &0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; return rv;
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
if (value) <return m.containsKey(value); <else &return (m.flags & ACCESSIBLE)? m.flags : 0;
&if (m) &if (m) &m.isRegistered = true; &return m.isRegistered;
if (m) <if (!m.isRegistered()) <return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (value <0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
m = m.containsKey(value); if (m == null) &if (aKey) &*aKey = m; return NS_OK; &return NS_OK;
if (m.key) return m.key; else <return m.key;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value <0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m.get()) return (aValue).isRegistered(value); return (aValue).isRegistered(value);
if (m) <return m.containsKey(value); <else <return m.containsKey(value);
if (m == null) if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) if (m) <m.mKey = value; &else m.mKey = value; return m;
if (value) &return m.containsKey(value); &else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) if (!m.isRegistered()) <return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (!m.containsKey(value)) &if (m.mLength 0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; <if (m) &return NS_OK; &return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
m = m.containsKey(value); if (m == null) &if (aKey) <*aKey = m; return NS_OK; return NS_OK;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; &if (m) <return NS_OK; return m.containsKey(value);
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &&return rv;
m = m.containsKey(value); if (m == null) &if (aKey) &*aKey = m; return NS_OK; <<return NS_OK;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (m) return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (!m.isRegistered()) &return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
if (value) return m.containsKey(value); else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m == null) if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value <0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value 0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m == null) &return NS_ERROR_null_POINTER; &if (m) return NS_OK; <return m.containsKey(value);
if (m) &return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if (!m.isRegistered()) return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
if (m == null) if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
&if (m) &if (m) <m.isRegistered = true; <return m.isRegistered;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) m.key = m.key; return m.key == m.key; <return m.key;
if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <return rv;
if (m) &m.mCount = 0; m.mAttributes = m; return m.mAttributes == m.mAttributes;
if (m == null) &if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <return m.keyType == ObjectType.GetType(); if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (!m.containsKey(value)) &if (m.mLength <0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) return m.keyType == ObjectType.GetType(); <if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if (m) &m.mKey = value; <&else m.mKey = value; return m;
if (m && m.containsKey(value)) return 0; return 0; <else return m.containsKey(value);
if (m == null) &return NS_ERROR_null_POINTER; if (m) <return NS_OK; &return m.containsKey(value);
if (value 0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <&return rv;
if (value 0) r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) <if (m.mLength &0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &<return rv;
if (m == null) <if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if (!m.isRegistered()) <return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
if (m) <if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m.key) &return m.key; <else &return m.key;
if (!m.containsKey(value)) if (m.mLength &0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) <if (m.mLength 0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m == null) if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) return m.keyType == ObjectType.GetType(); if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (m.key) <return m.key; else <return m.key;
if (!m.containsKey(value)) <if (m.mLength 0) <if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if (m) m.isRegistered = true; return m.isRegistered;
m = m.containsKey(value); if (m == null) if (aKey) *aKey = m; return NS_OK; return NS_OK;
if (m == null) return NS_ERROR_null_POINTER; if (m) return NS_OK; &return m.containsKey(value);
return (value == '<0')? m.containsKey(value) : 0;
&if (m) &if (m) &m.isRegistered = true; return m.isRegistered;
if (m) &if (m) m.isRegistered = true; &return m.isRegistered;
if (value <0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
if (m) <if (!m.isRegistered()) <return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
if (m.key) <return m.key; else &return m.key;
if (m) return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m.key) return m.key; <else &return m.key;
if (m) <if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if ((value = m.keyValue)!= '<0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
&if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if ((value = m.keyValue)!= '0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m.key) &return m.key; else <return m.key;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <return m.keyType == ObjectType.GetType(); <if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <m.isRegistered = true; <&return m.isRegistered;
m = m.containsKey(value); if (m == null) &if (aKey) *aKey = m; return NS_OK; <&return NS_OK;
if (m) <return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
<if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m == null) <return NS_ERROR_null_POINTER; <if (m) return NS_OK; return m.containsKey(value);
if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) if (m.mLength <0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if (!m.isRegistered()) <return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; return rv;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &if ((value = m.keyValue)!= '<0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
<return (m = m.containsKey(value));
<return m.containsKey(value);
if (m) &m.isRegistered = true; &return m.isRegistered;
if (value) return m.containsKey(value); <else <return m.containsKey(value);
if (value <0) r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value) <return m.containsKey(value); <else <return m.containsKey(value);
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
m = m.containsKey(value); if (m == null) &if (aKey) &*aKey = m; return NS_OK; &&return NS_OK;
if (m) <if ((value = m.keyValue)!= '&0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; <if (m) &return NS_OK; return m.containsKey(value);
if (!m.containsKey(value)) <if (m.mLength <0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '<0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
if (m == null) return NS_ERROR_null_POINTER; &if (m) <return NS_OK; <return m.containsKey(value);
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) m.key = m.key; m.key = m.key; return m.key;
if (value) <return m.containsKey(value); else &return m.containsKey(value);
if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) return m.containsKey(value); return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m == null) <if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) m.key = m.key; return m.key == m.key; &return m.key;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &m.isRegistered = true; &&return m.isRegistered;
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) if ((value = m.keyValue)!= '0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
&if (m) &if (m) m.isRegistered = true; <return m.isRegistered;
if (m == null) if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m == null) return NS_ERROR_null_POINTER; if (m) &return NS_OK; <return m.containsKey(value);
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if (!m.isRegistered()) <return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
m = m.containsKey(value); if (m == null) if (aKey) *aKey = m; return NS_OK; &return NS_OK;
if (m) <return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m == null) &if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <m.Key = value; &return m.Key;
if (m) &if (m) <m.mKey = value; &<else m.mKey = value; return m;
if (m == null) &return NS_ERROR_null_POINTER; <if (m) &return NS_OK; <return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) &if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m.get()) return (aValue).isRegistered(value); &return (aValue).isRegistered(value);
if (!m.containsKey(value)) if (m.mLength 0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value 0) &r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &if (m) &m.mKey = value; <<else m.mKey = value; return m;
if (m == null) <if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m == null) &if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
&if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
m = m.containsKey(value); if (m == null) if (aKey) &*aKey = m; return NS_OK; return NS_OK;
if (m) &return m.containsKey(value); <else &return m.containsKey(value);
if (m) &if ((value = m.keyValue)!= '&0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value) &return m.containsKey(value); &else &return m.containsKey(value);
if (m) if (m) m.mKey = value; &&else m.mKey = value; return m;
if (value) <return m.containsKey(value); else return m.containsKey(value);
if (m) &if (!m.isRegistered()) return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
if (m == null) if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m == null) <return NS_ERROR_null_POINTER; if (m) return NS_OK; return m.containsKey(value);
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (!m) return NS_ERROR_null_POINTER; &return m.containsKey(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value) <return m.containsKey(value); <else return m.containsKey(value);
if (m) <m.key = m.key; m.key = m.key; <return m.key;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value <0) <r = m.keySet.get(value); if (r == 0) <r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &else m.type = ObjectType; return m.type == ObjectType;
<if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
m = m.containsKey(value); if (m == null) if (aKey) *aKey = m; return NS_OK; <<return NS_OK;
if (m.key) <return m.key; <else return m.key;
if (m == null) <return NS_ERROR_null_POINTER; if (m) return NS_OK; <return m.containsKey(value);
if (!m.containsKey(value)) <if (m.mLength &0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <return m.containsKey(value); return 0;
if (m) return m.containsKey(value); &return 0;
if (m) <return m.containsKey(value); <return 0;
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if ((value = m.keyValue)!= '&0') return false; &else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
m = m.containsKey(value); if (m == null) if (aKey) &*aKey = m; return NS_OK; <&return NS_OK;
if (m) if (!m.isRegistered()) &return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
<if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value) &return m.containsKey(value); else return m.containsKey(value);
if (m) m.key = m.key; m.key = m.key; <return m.key;
if (!m) &return NS_ERROR_null_POINTER; &return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '<0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
&if (m && m.containsKey(value)) return 0; return 0; else return m.containsKey(value);
if (!m.containsKey(value)) if (m.mLength &0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (value) &return m.containsKey(value); else &return m.containsKey(value);
/* * If a valid value is in m.keys, we get a list of keys for the entry. */ if ((m.key = m.key)!= -1) <m.key = m.key; return m.key == m.key; return m.key;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '<0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) <if (m.mLength 0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
<if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (!m.isRegistered()) <return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m) <if (!m.isRegistered()) &return m.isRegistered(); else <m.isRegistered = true; return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (!m) m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) return m.containsKey(value);
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m == null) <if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
m = m.containsKey(value); if (m == null) <if (aKey) <*aKey = m; return NS_OK; &<return NS_OK;
m = m.containsKey(value); if (m == null) <if (aKey) <*aKey = m; return NS_OK; <<return NS_OK;
if (m) if (m) m.isRegistered = true; <return m.isRegistered;
if (!m) &return NS_ERROR_null_POINTER; <return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) if (m.mLength 0) if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
<if (m) <if (m) m.isRegistered = true; return m.isRegistered;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) &m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
&return m.containsKey(value);
if (value) return m.containsKey(value); <else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) if (value) if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
m = m.containsKey(value); if (m == null) <if (aKey) &*aKey = m; return NS_OK; &return NS_OK;
if (value) return m.containsKey(value); &else <return (m.flags & ACCESSIBLE)? m.flags : 0;
if (value &0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; &else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m) if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m == null) &return NS_ERROR_null_POINTER; &if (m) &return NS_OK; return m.containsKey(value);
if (m) <if (m) &m.isRegistered = true; &return m.isRegistered;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; <<return rv;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <&return rv;
if (m) <m.Key = value; return m.Key;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (m) &if (m) &m.isRegistered = true; <return m.isRegistered;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; <m.type = ObjectType; <return m.type == ObjectType;
if (value <0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <if ((value = m.keyValue)!= '0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; return m.type == ObjectType;
if (m) <return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if (value) if (m.eRegistry == null) &m.eRegistry = null; return 0; &return 0;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (value) <return m.containsKey(value); else <return m.containsKey(value);
if (m) return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (!m.containsKey(value)) &if (m.mLength &0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (!m.containsKey(value)) if (m.mLength 0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &return m.containsKey(value); &else &return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (!m.containsKey(value)) if (m.mLength <0) &if (m.mIsSpecial) if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m == null) return NS_ERROR_null_POINTER; if (m) &return NS_OK; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '0') return false; <else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &return m.keyType == ObjectType.GetType(); &if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m == null) <return NS_ERROR_null_POINTER; &if (m) <return NS_OK; return m.containsKey(value);
&if (m) <if (m) &m.isRegistered = true; return m.isRegistered;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (value <0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) <if (!m.isRegistered()) return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m == null) &if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; <<else m.type = ObjectType; return m.type == ObjectType;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m == null) return NS_ERROR_null_POINTER; <if (m) <return NS_OK; &return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; <return m.type == ObjectType;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <return m.containsKey(value); &return NS_OK;
if (value) &return m.containsKey(value); <else return m.containsKey(value);
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; &else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
&if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
&if (m) &if (m) m.isRegistered = true; return m.isRegistered;
if (m == null) &if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value &0) &r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; return 0;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <<return rv;
if (m) &if (m) m.mKey = value; <<else m.mKey = value; return m;
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
&if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (m) &if ((value = m.keyValue)!= '0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; return m.type == ObjectType;
&if (m) &if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) <if (m) m.mKey = value; &<else m.mKey = value; return m;
if (value) &return m.containsKey(value); <else &return (m.flags & ACCESSIBLE)? m.flags : 0;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; return m.type == ObjectType;
if (!m.containsKey(value)) if (m.mLength <0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) <if (!m.isRegistered()) &return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) <if ((ptr = m.ptr.mType) && (ptr == nsIArena)) <char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &return rv;
if (m == null) <return NS_ERROR_null_POINTER; <if (m) <return NS_OK; return m.containsKey(value);
if (m) &if ((value = m.keyValue)!= '&0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (!m.containsKey(value)) &if (m.mLength 0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
&if (m) <if (m) <m.isRegistered = true; return m.isRegistered;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; <return m.type == ObjectType;
&if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; &<return rv;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m) if (!m.isRegistered()) &return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
&if (m) <if (m) &m.isRegistered = true; &return m.isRegistered;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; &return rv;
if (m == null) &if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (value) &return m.containsKey(value); <else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) <return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (!m) return 0; &return m.containsKey(value);
if (m) <if (m) m.mKey = value; else m.mKey = value; return m;
<if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) &m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) if (!m.isRegistered()) &return m.isRegistered(); &else <m.isRegistered = true; return m.containsKey(value);
if (m) &return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; return rv;
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (m) &m.key = m.key; m.key = m.key; <return m.key;
if (m) <if (m) <m.mKey = value; <&else m.mKey = value; return m;
if (m) &m.key = m.key; m.key = m.key; return m.key;
if (m == null) <return NS_ERROR_null_POINTER; if (m) <return NS_OK; <return m.containsKey(value);
if (m) &if (!m.isRegistered()) <return m.isRegistered(); <else m.isRegistered = true; return m.containsKey(value);
if (m) char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) &char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
if (m) <if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
<if (m) if (m) m.isRegistered = true; return m.isRegistered;
if (m) &if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (value <0) <r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m.containsKey(value)) &if (m.mLength <0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if ((value = m.keyValue)!= '<0') return false; else &if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (!m) return 0; <return m.containsKey(value);
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (m) &if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; return 0;
if (m) if (!m.isRegistered()) return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m) <if (m) <m.mKey = value; <<else m.mKey = value; return m;
if (m) <if ((value = m.keyValue)!= '0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) <if (m) &m.mKey = value; &&else m.mKey = value; return m;
if (m) &if (!m.isRegistered()) return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (m) &if (!m) <m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else &m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
if (value &0) <r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
<if (m) <if ((null == m) && (null == m)) <return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) &return rv; <&return rv;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &if (!m.isRegistered()) <return m.isRegistered(); &else m.isRegistered = true; return m.containsKey(value);
if (m) &if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; <return 0;
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) &if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m) if (!m.isRegistered()) &return m.isRegistered(); &else &m.isRegistered = true; return m.containsKey(value);
if (m) <if ((value = m.keyValue)!= '<0') return false; else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) return m.containsKey(value); &else &return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; <if (m) <return NS_OK; <return m.containsKey(value);
if (m) &if (m) <m.mKey = value; &&else m.mKey = value; return m;
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) <if ((value = m.keyValue)!= '&0') return false; &else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) &return m.containsKey(value); <else return m.containsKey(value);
if (m) m.isRegistered = true; <<return m.isRegistered;
if (m) <if (m) &m.mKey = value; else m.mKey = value; return m;
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
if (m) &m.key = m.key; m.key = m.key; &return m.key;
if (m) if (!m.isRegistered()) return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (m.get()) &return (aValue).isRegistered(value); <return (aValue).isRegistered(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m) &return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) &if ((value = m.keyValue)!= '<0') return false; else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m == null) <if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) if ((value = m.keyValue)!= '<0') return false; <else if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m == null) &if (m.IsRegistered()) <m.IsRegistered = true; return m.IsRegistered(); <&if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) &if (!m) &m.keyStr = m; m.keyStr = m.keyStr; else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &m.isRegistered = true; return m.isRegistered;
if (m == null) if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); <if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) <return m.containsKey(value); <else return m.containsKey(value);
&if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &return m.keyType == ObjectType.GetType(); <if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (!m.isRegistered()) return m.isRegistered(); else m.isRegistered = true; return m.containsKey(value);
if (value &&!m) if (!m.mProperties.GetProperty("property")) return; &if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
<if (m) if (m) &m.isRegistered = true; <return m.isRegistered;
if (!m.containsKey(value)) &if (m.mLength &0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) <if (m.mLength <0) &if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) if (m.type!= ObjectType) return m.type = ObjectType; else m.type = ObjectType; &&else m.type = ObjectType; return m.type == ObjectType;
if (!m.containsKey(value)) <if (m.mLength 0) <if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) <m.type = ObjectType; &m.type = ObjectType; &return m.type == ObjectType;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) &char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) &if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
&if (m) if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value &0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (!m) <return 0; <return m.containsKey(value);
if (m) &m.Key = value; <return m.Key;
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; <&else m.type = ObjectType; return m.type == ObjectType;
m = m.containsKey(value); if (m == null) <if (aKey) &*aKey = m; return NS_OK; <<return NS_OK;
if (m) if (m) m.mKey = value; else m.mKey = value; return m;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <return rv;
if (value) return m.containsKey(value); <else &return m.containsKey(value);
if (m) <if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
&if (m) <if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) if ((value = m.keyValue)!= '&0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m) if ((null == m) && (null == m)) return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &return m.keyType == ObjectType.GetType(); if (m) m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) if (value) if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (m) <return m.containsKey(value); <return NS_OK;
if (m) return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m == null) if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); &if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
return m.containsKey(value);
if (m == null) <if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); &<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (m) return m.containsKey(value); &return NS_OK;
if (m) &return m.containsKey(value); else <return m.containsKey(value);
if (m) &if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (m) &if (value) <if (m.eRegistry == null) <m.eRegistry = null; return 0; <return 0;
if (value 0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m == null) &return NS_ERROR_null_POINTER; if (m) &return NS_OK; <return m.containsKey(value);
&if (m) if (m) &m.isRegistered = true; <return m.isRegistered;
if (m) return m.containsKey(value);
if (m == null) <return NS_ERROR_null_POINTER; if (m) <return NS_OK; &return m.containsKey(value);
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) <if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) &nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; <&return rv;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; &if (m.type == TYPE_REGION) &m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
&if (m) &if (m) m.isRegistered = true; &return m.isRegistered;
if (m == null) return NS_ERROR_null_POINTER; &if (m) <return NS_OK; return m.containsKey(value);
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) if (m.type == ObjectType) m.type = ObjectType; <m.type = ObjectType; &return m.type == ObjectType;
if (m) <if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) &return m.containsKey(value);
if (m == null) <if (m.IsRegistered()) m.IsRegistered = true; return m.IsRegistered(); if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (!m) <return NS_ERROR_null_POINTER; &return m.containsKey(value);
if (value) return m.containsKey(value); &else return (m.flags & ACCESSIBLE)? m.flags : 0;
if (m) &if ((null == m) && (null == m)) return NS_ERROR_FAILURE; &if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
if (value <0) &r = m.keySet.get(value); if (r == 0) &r = m.keySet.get(value); return r; else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) &if (!m.isRegistered()) &return m.isRegistered(); else &m.isRegistered = true; return m.containsKey(value);
<if (m) <if (m) <m.isRegistered = true; <return m.isRegistered;
if (m == null) if (m.IsRegistered()) &m.IsRegistered = true; return m.IsRegistered(); <<if (m.IsContent) if (m.IsEmpty()) m.IsContent = false; return m.IsRegistered();
if (!m.containsKey(value)) if (m.mLength &0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) <if (m.mLength <0) if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
&if (m) <if ((null == m) && (null == m)) &return NS_ERROR_FAILURE; <if (m) return NS_OK; if (m.type == mType) return NS_OK; else return NS_OK; return NS_OK; return NS_OK;
&if (m) if (m) m.isRegistered = true; &return m.isRegistered;
if (m) <if (!m) m.keyStr = m; m.keyStr = m.keyStr; <else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) &if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) <if (!m) <m.keyStr = m; m.keyStr = m.keyStr; <else &m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) if (value) <if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (m) <if (m) <m.mKey = value; else m.mKey = value; return m;
if (m) <nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; return rv;
if (m) if (value) &if (m.eRegistry == null) &m.eRegistry = null; return 0; return 0;
if (m) if (!m) &m.keyStr = m; m.keyStr = m.keyStr; <else <m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if ((value = m.keyValue)!= '<0') return false; <else <if (m.keyValue!= '0') return false; return false; return m.keyValue = m.keyValue;
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m.type == TYPE_REGION) m.type = TYPE_REGION; <if (m.type == TYPE_REGION) m.type = TYPE_REGION; &else m.type = TYPE_REGION; return m.containsKey(value);
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) return rv; &&return rv;
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; <if (m.type == TYPE_REGION) <m.type = TYPE_REGION; else m.type = TYPE_REGION; return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; &if (m.type == TYPE_REGION) m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
<if (m) if (m) <m.isRegistered = true; <return m.isRegistered;
if (m) <if (m) &m.isRegistered = true; <return m.isRegistered;
if (value &&!m) <if (!m.mProperties.GetProperty("property")) return; <if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); <else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
&if (m) <if (m) &m.isRegistered = true; <return m.isRegistered;
if (m) if (!m) m.keyStr = m; m.keyStr = m.keyStr; &else m.keyStr = m.keyStr; return m.keyStr.Equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(m.keyStr.equals(value))))))))))))
if (m) &if (value) &if (m.eRegistry == null) <m.eRegistry = null; return 0; &return 0;
if (m) &return m.keyType == ObjectType.GetType(); &if (m) <m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (value) &if (m.eRegistry == null) m.eRegistry = null; return 0; &return 0;
if (m.key) <return m.key; <else &return m.key;
if (m) <char *ptr; if (((ptr = m.ptr) && (m.ptr.mType!= nsIArena)) && (ptr == nsIArena)) if ((ptr = m.ptr.mType) && (ptr == nsIArena)) char *ptr = null; <else ptr = m.ptr.mContent; else m.ptr.mValue = ptr.mValue; return 0;
&if (m) <if (m) <m.isRegistered = true; &return m.isRegistered;
if (m) <return m.containsKey(value);
if (m.type == TYPE_REGION) <m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) &if (m.mLength <0) &if (m.mIsSpecial) <if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (m) &return m.keyType == ObjectType.GetType(); &if (m) &m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType(); m.keyType = ObjectType.GetType(); return m.keyType == ObjectType.GetType();
if (m) <if (m.type!= ObjectType) return m.type = ObjectType; else <m.type = ObjectType; &<else m.type = ObjectType; return m.type == ObjectType;
if (value &&!m) &if (!m.mProperties.GetProperty("property")) return; if (m.mProperties.GetProperty("flags")) if (m.mProperties.GetProperty("flags")) return m.mProperties.GetProperty("flags"); &else m.mProperties.GetProperty("flags"); if (m.mProperties.GetProperty("flags").GetProperty("flags"))) return m.mProperties.GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetProperty("flags").GetPropert
if (m.type == TYPE_REGION) &m.type = TYPE_REGION; if (m.type == TYPE_REGION) <m.type = TYPE_REGION; <else m.type = TYPE_REGION; return m.containsKey(value);
if (!m.containsKey(value)) <if (m.mLength 0) if (m.mIsSpecial) &if (m.mClass) m.mClass.GetSubclass(m); m.mOwner = m; return m.containsKey(value);
if (!m.containsKey(value)) return NS_ERROR_null_POINTER; if (m.type == ObjectType) <if (m.type == ObjectType) &m.type = ObjectType; m.type = ObjectType; &return m.type == ObjectType;
if (m) &return m.containsKey(value); <return 0;
if (m) <if (value) <if (m.eRegistry == null) &m.eRegistry = null; return 0; <return 0;
if (value 0) r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; <else r = m.keySet.get(value); if (r == 0) r = m.keySet.get(value); return r; return r;
if (m) nsresult rv = m.GetRegistry().GetRegistry().GetRegister(&rv); if (NS_FAILED(rv)) <return rv; return rv;
