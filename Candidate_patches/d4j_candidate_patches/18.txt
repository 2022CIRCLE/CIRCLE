golden:
int indexOfDot = namespace.indexOf('.');
inference:
int indexOfDot = namespace.indexOf('.');
long indexOfDot = namespace.indexOf('.');

int indexOfDot;
int indexOfDot = name.indexOf('.');
int indexOfDot = nameSpace.indexOf('.');
int indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.find('.');
int indexOfDot = namespace.indexOf('0');
int indexOfDot = namespace.Length();
int indexOfDot = namespace.IndexOf('.');
int indexOfDot = name.get().indexOf('.');
static int indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace;
int indexOfDot = namespace.indexOf('/');
int indexOfDot = namespace.indexOf('.', 1);
int indexOfDot = namespace.get();
int indexOfDot = namespace.indexOf(null);
int index = namespace.indexOf('.');
int indexOfDot = nameSpace.indexOf('.');
int indexOfDot = namespace.indexOf(' ');
int indexOfDot = namespace.indexOf(name);
int indexOfDot = namespace.indexOf( '.' );
int indexOfDot = namespace.startsWith('.');
unsigned int indexOfDot = namespace.indexOf('.');
size_t indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('[');
int indexOfDot = '.';
int indexOfDot=namespace.indexOf('.');
Int indexOfDot = namespace.indexOf('.');
int indexOfDot = name_space.indexOf('.');
int indexOfDot = namespace.Find('.');
unsigned long indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.endsWith('.');
int indexOfDot = 0;
int indexOfDot = namespace[indexOf('.')];
indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('(');
int indexOfDot = namespaceIndexOf('.');
int indexOfDot = namespace.indexOf(u'.');
int indexOfDot = namespace.last();
int indexOfDot = namespace.Empty();
int indexOfDot = namespace.indexOf(name.get());
int indexOfDot = namespace.indexOf('$');
int indexOfDot = namespace.indexOf(".");
int indexOfDot = nameSpace.IndexOf('.');
int indexOfDot = namespace.lastIndexOf('.');
int indexOfDot = namespace_indexOf('.');
u_long indexOfDot = namespace.indexOf('.');
short indexOfDot = namespace.indexOf('.');
int indexOfDot = nameSpace.Length();
int indexOfDot = namespace.indexOf('.'+1);
int indexOfDot = namespace.indexOf('.')-1;
int indexOfDot = namespace.indexOf(',');
int indexOfDot = nameSpaceIndexOf('.');
int indexOfDot = &namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.', name);
char* indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.Equals('.');
int indexOfDot = indexOf('.');
int indexOfDot = path.indexOf('.');
int indexOfDot = nameSpace.indexOf('0');
int indexOfDot = name;
int indexOfDot = namespace.indexOf('.' + 1);
int indexOfDot = namespace.indexOf('.', true);
int indexOfDot = name.get();
int i;
int indexOfDot = namespace.indexOf('=');
int indexOfDot = *namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'+name);
int indexOfDot = namespace.indexOf('.'++);
int indexOfDot = nameSpace;
int indexOfDot = -1;
int indexOfDot = nameSpace.find('.');
int indexOfDot = namespace.indexOf('?');
int indexOfDot = namespace.indexOf(';');
int indexOfDot = nameScope.indexOf('.');
int indexOfDot = namespace.indexOf('-');
int indexOfDot = namespace[0].indexOf('.');
int indexOfDot = namespace.indexOf('_');
int indexOfDot = namePtr.indexOf('.');
IndexOfDot = namespace.indexOf('.');
namespace.indexOf('.');
int indexOfDot = namespace.GetIndexOf('.');
const int indexOfDot = namespace.indexOf('.');
int indexOfDot = const namespace.indexOf('.');
int indexOfDot = namespace.lindexOf('.');
int indexOfDot = namespace.Count();
uint indexOfDot = namespace.indexOf('.');
int indexOfDot = name.indexOf('.');
int indexOfDot = namespace == '.';
int indexOfDot = namespace().indexOf('.');
int indexOfDot; namespace.indexOf('.');
int indexOfDot = namespace.indexOf('n');
int indexOfDot = name);
int indexOfDot = name.find('.');
int indexOfDot = namespace.indexOf('.'); */
int indexOfDot = nameSpace.indexOf('/');
int indexOfDot = namespace.trim();
int indexOfDot = flags.indexOf('.');
int indexOfDot = namespace.indexOf(':');
int indexOfDot = namespace.eInt();
int indexOfDot = namespace.cstr_oneuse();
int indexOfDot = namespace.len();
int indexOfDot = nameSpace.indexOf('.', 1);
int indexOfDot = indexOf(namespace);
int indexOfDot = namespace.indexOf('
int indexOfDot = nameSpace_indexOf('.');
int i = namespace.indexOf('.');
int indexOfDot = namespace::indexOf('.');
int indexOfDot = namespace.indexOf('[.');
int indexOfDot = namespace.eIndexOf('.');
int indexOfDot = namespace[1].indexOf('.');
char *indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.StartWith('.');
int indexOfDot = namespace.indexOf('.' + name);
int indexOfDot = namespace.indexOf(b'.');
int indexOfDot = nameSpace.Find('.');
int indexOfDot = namespace.indexOf('.')+1;
int indexOfDot = namespace.indexOf(namespace);
int indexOfDot = aNamespace.indexOf('.');
int indexOfDot = names.indexOf('.');
int indexOfDot = namespace.size();
int indexOfDot = namespace.IsEmpty();
int indexOfDot = namespace.indexOf('&');
int indexOfDot = nameSpace.indexOf(null);
int indexOfDot = nameSpace.indexOf(' ');
double indexOfDot = namespace.indexOf('.');
int indexOfDot = nameSpace.indexOf( '.' );
int indexOfDot = namespace.indexOf(true);
int indexOfDot = namespace.indexOf('"');
int indexOfDot = namespace.count();
int indexOfDot = namespace.FindChar('.');
int count = namespace.indexOf('.');
int indexOfDot = nameSpace.indexOf(name);
int indexOfDot = nameSpace.indexOf('[');
int indexOfDot = namespace.indexOf('.'|');
int indexOfDot = NameSpace.indexOf('.');
int indexOfDot = namespace.indexOf('+');
int indexOfDot = NS_LITERAL_STRING(namespace);
int indexOfDot = getattr(namespace, '.');
int indexOfDot = namespace.length();
int oldIndexOfDot = namespace.indexOf('.');
int indexOfDot = nodeInfo.indexOf('.');
int indexOfDot = &namespace;
int result = namespace.indexOf('.');
int nameSpaceIndex = namespace.indexOf('.');
int indexOfDot = namespace.ElementAt(index);
JSInt indexOfDot = namespace.indexOf('.');
int indexInDot = namespace.indexOf('.');
int indexOfDot = namespaceRoot.indexOf('.');
int indexOfDot = namespace.rindexOf('.');
int indexOfDot = namespace.indexOf(''');
int *indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf(namespace.get());
int indexOfDot = entry.indexOf('.');
int indexOfDot = name.endsWith('.');
int indexOfDot = '0';
int indexOfDot = result.indexOf('.');
int idx = namespace.indexOf('.');
int indexOfDot = namespace.toLowerCase();
int indexOfDot = namespace);
int indexOfDot = namespace.indexOf('.' );
int indexOfDot = nsDependentString(namespace);
int indexOfDot = strlen(namespace);
int indexOfDot = null;
int indexOfDot = namespace.indexOf('.'-1');
int indexOfDot = namespaceOf('.');
int indexOfDot = *namespace;
int indexOfDot = namespace.indexOf('.', false);
int indexOfDot = len;
int indexOfDot = namespace.indexOf('.') ;
int indexOfDot = rv;
int indexOfDot = namespace.first();
int indexOfDot = name.Length();
int indexOfDot = namespaceIndex;
int indexOfDot = ".";
int indexOfDot = nameSpace.get();
int indexOfDot = namespace[0];
int indexOfDot = 1;
int indexOfDot = namespace.First();
int indexOfDot = nameSpace.last();
int indexOfDot = namespace[1];
int index;
long indexOfDot;
namespace = namespace;
int indexOfDot = namespace.indexOf('.') - 1;
int indexOfDot = namespace.indexOf('.', 0);
int indexOfDot = namespace.get().indexOf('.');
int indexOfDot = namespace.indexOf('.' + varNode.getName());
int indexOfDot = namespace.indexOf('.'); if (indexOfDot!= -1) indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.')  0;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot) indexOfDot = indexOfDot;
int indexOfDot = namespace.indexOf('.', &nodeType);
int indexOfDot = namespace.indexOf('.' + nameSpace.separator());
int indexOfDot = namespace.indexOf('.', &firstNode);
int indexOfDot = namespace.indexOf('.', -1);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot  0) indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.') + 1;
int indexOfDot = namespace.indexOf('.', &indexOfDot);
int indexOfDot = namespace.indexOf('.', &currentIndex);
int indexOfDot = namespace.indexOf('.' + namespace.indexOf('.'));
int indexOfDot = namespace.indexOf('.', '.');
int indexOfDot = namespace.indexOf('.' + nameSpace.find('.'));
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1)  /* XXX fixup */ continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot  0)  namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.' + varNode.getFullPath());
int indexOfDot = namespace.indexOf('.' + varName);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot = 0)  /* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.', &(namespace.indexOf('.')));
int indexOfDot = namespace.indexOf('.'); if (indexOfDot = 0) indexOfDot = namespace.indexOf('.'); else indexOfDot = '.';
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1)  if (node == null)  /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node)))  continue;
int indexOfDot = namespace.indexOf('.');  else  /* XXX */
int indexOfDot = namespace.indexOf('.'); if (namespace!= null) return;
int indexOfDot = namespace.indexOf('.' + '.');
int indexOfDot = namespace.indexOf('.' + namespace.get());
int indexOfDot = namespace.indexOf('.'); /* Note that the literal literal for this var definition is always "single" and "single" */
int indexOfDot = namespace.indexOf('.'); if (namespace.isEmpty())  namespace = namespace.indexOf('.'); namespace = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot) indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); /* XXX: nsCSSDeclaration - a null object in the package. */
int indexOfDot = namespace.indexOf('.'); if (!indexOfDot) return;
int indexOfDot = namespace.indexOf('.'); /* Not found */
int indexOfDot = namespace.indexOf('.'); /* XXX */
int indexOfDot = namespace.indexOf('.' + nameSpace);
int indexOfDot = namespace.indexOf('.'); /* * XXX */
int indexOfDot = namespace.indexOf('.' + nameSpace.Length());
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.', &result);
int indexOfDot = namespace.indexOf('.' + aDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDependentDep
int indexOfDot = namespace.indexOf('.', '0');
int indexOfDot = namespace.indexOf('.' + namespace.cstrlen('.'));
int indexOfDot = namespace.indexOf('.', namespace.indexOf('.'));
int indexOfDot = namespace.indexOf('.', &ret);
int indexOfDot = namespace.indexOf('.'); /* XXX - The first argument is not always '.', since it doesn't use it explicitly. */
int indexOfDot = namespace.indexOf('.', &namespace);
int indexOfDot = namespace.indexOf('&.');
int indexOfDot = namespace.indexOf('.'<);
int indexOfDot = namespace.indexOf(&'.'<);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('n');
int indexOfDot = namespace.indexOf(''');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &= 0) /* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.', '<0');
int indexOfDot = namespace.indexOf('.'); if (namespace.isEmpty()) namespace = namespace.indexOf('.'); namespace = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot = 0) </* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <= 0) &/* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = '0';
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &/* XXX fixup */ continue;
int indexOfDot = namespace.indexOf(<'.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &0) <namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); &else /* XXX */
int indexOfDot = namespace.indexOf('.'); if (namespace.isEmpty()) &namespace = namespace.indexOf('.'); namespace = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('&0');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot 0) namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = namespace.indexOf(&'.'&);
int indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = namespace.indexOf('.'); else </* XXX */
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('.'); &else &/* XXX */
int indexOfDot = namespace.indexOf('0');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &= 0) &/* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot = 0) /* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('<'');
int indexOfDot = namespace.indexOf('&'');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('.'); &else </* XXX */
int indexOfDot = namespace.indexOf(<'.'<);
int indexOfDot = namespace.indexOf('&n');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &= 0) indexOfDot = namespace.indexOf('.'); else indexOfDot = '.';
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('<n');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot = 0) &/* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <0) <namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) </* XXX fixup */ continue;
int indexOfDot = namespace.indexOf('.', '&0');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot 0) <namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = nameSpace.indexOf('.');
int indexOfDot = namespace.indexOf('.'&);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <0) namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.') <0;
int indexOfDot = namespace.indexOf(<'.'&);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot = 0) indexOfDot = namespace.indexOf('.'); else indexOfDot = '.';
int indexOfDot = '<0';
int indexOfDot = namespace.indexOf('<.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot 0) &namespace.indexOf('.');
int indexOfDot = namespace.indexOf('<0');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <= 0) indexOfDot = namespace.indexOf('.'); else indexOfDot = '.';
int indexOfDot = nameSpace.indexOf('&0');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot 0) indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <= 0) /* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = namespace.indexOf('.'); <else </* XXX */
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <0) &namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) /* XXX fixup */ continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = namespace.indexOf('.') 0;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) </* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('.') &0;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <0) indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = nameSpace.indexOf('<0');
int indexOfDot = nameSpace.indexOf('0');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = '&0';
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) &if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) continue;
int indexOfDot = namespace.indexOf('.', '0');
int indexOfDot = namespace.indexOf('.'); <else /* XXX */
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) &/* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) <continue;
int indexOfDot = namespace.indexOf('.'); <else &/* XXX */
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &0) &namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); else &/* XXX */
int indexOfDot = namespace.indexOf('.'); if (indexOfDot == -1) <if (node == null) /* Do nothing else if it's an unknown variable, then replace this. */ if (NS_FAILED(replaceChild(name, node))) &continue;
int indexOfDot = namespace.indexOf('.'); if (namespace.isEmpty()) <namespace = namespace.indexOf('.'); namespace = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot <= 0) </* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &0) indexOfDot = namespace.indexOf('.');
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &= 0) </* * If we have an index, we * have to specify a number of names to replace. */ nameNode = namespace.replaceElement(&indexOfDot);
int indexOfDot = namespace.indexOf('.'); if (indexOfDot &0) namespace.indexOf('.');
int indexOfDot = namespace.indexOf(&'.');
int indexOfDot = namespace.indexOf('.'); else /* XXX */
