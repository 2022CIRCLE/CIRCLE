golden:
escapeJavaStyleString(out, str, false);
inference:
escapeJavaStyleString(out, str);
escapeJavaStyleString(out, str, 0);
escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, str, false, 0);
escapeJavaStyleString(out, str, true);
escapeJavaStyleString(out, str, true);
escapeJavaStyleString(out, str, false, true);
return escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, str, false);
escapeJavaStyleString(in, str, false);
escapeJavaStyleString(out, str.get(), false);
escapeJavaStyleString(out, s, false);
escapeJavaStyleString(out, str, false);
escapeJavaStyleString(str, false);
escapeJavaStyleString(out, &str, false);
escapeJavaStyleString(out, str, -1);
EscapeJavaStyleString(out, str, false);
escapeJavaStyleString(string, false);
escapeJavaStyleString(out, str, null);
escapeJavaStyleString(out, newStr, false);
escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, "", false);
escapeJavaStyleString(out, str, true);
escapeJavaStyleString(out, str, false, null);
escapeJavaStyleString(out, text, false);
escapeJavaStyleString(out, *str, false);
escapeJavaStyleString(out, value, false);
escapeJavaStyleString(out, sizeof(out), str, false);
escapeJavaStyleString(out, string, false, 0);
escapeJavaStyleString(out, "");
escapeJavaStyleString(out, str, "");
escapeJavaStyleString(out, str, true, false);
escapeJavaStyleString(out, str, true, false);
escapeJavaStyleString(out, str, 1);
escapeJavaStyleString(out, str, true);
escapeJavaStyleString(out, data, false);
escapeJavaStyleString(out, type, false);
escapeJavaStyleString(out, aStr, false);
escapeJavaStyleString(out, len, false);
escapeJavaStyleString(&out, str, false);
escapeJavaStyleString(out, str, '0');
escapeJavaStyleString(out, string, false);
escapeJavaStyleString(out, str, true, 0);
escapeJavaStyleString(out, unicode, false);
escapeJavaStyleString(out, outStr, false);
escapeJavaStyleString (out, str, false);
escapeJavaStyleString(out, i, false);
escapeJavaStyleString(out, buf, false);
escapeJavaStyleString(out, name, false);
escapeJavaStyleString(out);
escapeJavaStyleString(out, true, false);
escapeJavaStyleString(out, str, true, true);
escapeJavaStyleString(out, str, EINVAL);
escapeJavaStyleString(out, unicodeStr, false);
escapeJavaStyleString(out, out, str, false);
escapeJavaStyleString(out, string);
escapeJavaStyleString(out, str, flags);
escapeJavaStyleString(out, key, false);
escapedJavaStyleString(out, str, false);
escapeJavaStyleString(out, str)
escapeJavaStyleString((int)out, str, false);
escapeJavaStyleString(out, str, false, true);
escapeJavaStyleString(out, str, false, -1);
escape(out, str, false);
escapeJavaStyleString(out, line, false);
escapeJavaStyleString(out, inStr, false);
escapeJavaStyleString(out, str, false, false);
escapeJavaStyleString(out, src, false);
escapeJavaStyleString(out, code, false);
escapeJavaStyleString(out, nu, false);
escapeJavaStyleString(out, String(str), false);
escapeJavaStyleString(out, string, false, true);
escapeJavaStyleString( out, str, false );
escapeJavaStyleString(out.get(), str, false);
escapeJavaStyleString(out, charset, false);
escapeJavaStyleString(out, str, null, false);
escapeJavaStyleString(out, str, "", false);
escapeJavaStyleString(out, str, 0, 0);
escapeJavaStyleString((void *)out, str, false);
escapeJavaStyleString(out, val, false);
escapeJavaStyleString(out, null, false);
escapeJavaStyleString(out, null, false);
escapeJavaStyleString(out, '0', false);
escapeJavaStyleString(out, result, false);
escapeJSStyleString(out, str, false);
e escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, str, false)
escapeJavaStyleUnicode(out, str, false);
escapeJavaStyleString(out, path, false);
escapeJavaStyleString(out, string, true);
escapeJavaStyleString(out,str,false);
escapeJavaStyleString(out, flags, false);
escapeJavaStyleString(out, str, false, false);
escapeJavaStyleString(out, str1, false);
escapeJavaStyleString(out, st, false);
escapeJavaStyleString(out, str, value);
escapeJavaStyleString();
escapeJavaStyleString(out, null, false);
escapeJavaStyleString(out, str, &false);
(void) escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, string, 0);
escapeJavaStyleString(out, str, null);
escapeJavaStyleString(out, str, false, 1);
escapeJavaStyleString(out, verbose, false);
escapeJavaStyleString(out, unicodeString, false);
escapeJavaStyleString((void **)out, str, false);
escapeJavaStyleString(out, newStr);
escapeJavaStyleString(out, char, false);
escapeJavaStyleString(out, this, str, false);
escapeJavaStyleString(out, u, false);
escapeJavaStyleString(out, fstr, false);
escapeJavaStyleString(out, sStr, false);
escapeJavaStyleString((void*)out, str, false);
escapeJavaStyleString(out, str, false, flags);
escapeJavaStyleString((char *)out, str, false);
escapeJavaStyleString(out, str, false, 0, 0);
escapeJavaStyleString(out, stdout, false);
escapeJavaStyleString(out, str, 0, false);
escapeJavaStyleString(out, str.Length(), false);
escapeJavaStyleString(out, url, false);
escapeJavaStyleString(out, str, ENXIO);
escapeJavaStyleString(out, style, false);
escapeJavaStyleString(out, false);
escapeJavaStyleString(out, int, false);
escapeJavaStyleString(out, "%s", str, false);
escapeJavaStyleString(out, string.get(), false);
char* escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, s);
escapeJavaStyleString(out, str, true, true);
escapeJavaStyleString(out, str, ENOMEM);
escapeJavaStyleString(out, str, type);
escapeJavaStyleString(out, p, false);
escapeJavaStyleString(out, str, (void **) false);
escapeJavaStyleString(out, str, (void *) false);
escapeJavaStyleString(out, true, false);
escapeJavaStyleString(out, nodeInfo, false);
escapeJavaStyleString(out, source, false);
escapeJavaStyleString(out, rawStr, false);
escapeJavaStyleString(out, buffer, false);
escapeJavaStyleString(out, string, false);
escapeJavaStyleString(out, prefix, false);
escapeJavaStyleString(unicode(out), str, false);
escapeJavaStyleString(out, str, offset, false);
escapeJavaStyleString(out, str, null, 0);
escapeString(out, str);
EscapeJavaStyleString(out, str);
escapeJavaStyleString(out, &str);
escapeJavaStyleString(out, str, -1, -1);
escapeJavaStyleString(out, str, flags, false);
escapeJavaStyleString(out, string, false, null);
escapeJavaStyleString(out, str, false, true);
escapeJavaStyleString(out, (char *) str, false);
escapeJavaStyleString(out, str, i, false);
escapeJavaStyleStruct(out, str, false);
escapeJavaStyleString(out, str, 0, false);
escapeJavaStyleString(out, str, -1, false);
escapeJavaStyleString(out, str, false));
escapeJavaStyleString(out, str, true, false);
escapeJavaStyleString(out, str, true, true);
escapeJavaStyleString(out, str, null, false);
escapeJavaStyleString(out, str, (char *) false);
escapeJavaStyleString(out, str, false, "");
escapeJavaStyleString(out, str, false, false, 0);
escapeJavaStyleString(out, str, null, false);
escape(out, str);
escapeJavaStyleString(out, str, 0, true);
escapeJavaStyleString(out, string, true);
escapeJavaStyleString(out, str, (int) false);
escapeJavaStyleString(out, str, true, true);
escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, false, offset);
escapeJavaStyleString(out, str, encoding);
escapeJavaStyleString(out, str, false, ENXIO);
escapeJavaStyleString(out, str, "%s", false);

escapeJavaStyleString(out, str, false, p);
escapeJavaStyleString(out, str, sizeof(out), false);
escapeJavaStyleString(out, str, 0xff);
escapeJavaStyleString(out, str, &str);
escapeJavaStyleString(out, str, (int)0);
escapeJavaStyleString(out, str, false, encoding);
escapeJavaStyleString( out, str, false, 0);
escapeJavaStyleString(out, str, false, 0);
escapedJavaStyleString(out, str, false, 0);
escapeJavaStyleString(out, str, (void**) false);
break;
escapeJavaStyleString(out, str, (char*) false);
escapeJavaStyleString(out, str, false, &rv);
escapeJavaStyleString(out, str, DEFAULT_STR);
escapeJavaStyleString(out, str, false, 0);
escapeJavaStyleString(out, str, false, false);
escapeJavaStyleString(out, str, false, false);
escapeJavaStyleString(out, "nsXUL");
escapeJavaStyleString(out, str, aValue);
escapeJavaStyleString(out, nsCRT::strdup(str), false);
escapeJavaStyleString(out, "")
escapeJavaStyleString(out, str, "text/html");
escapeJavaStyleString(out, str, IOException.IID_NOT_THERE);
escapeJavaStyleString(out, str, "n", false);
escapeJavaStyleString(out, str, false, integer);
escapeJavaStyleString(out, str, null, false);
escapeJavaStyleString(out, str, ((unsigned char *) '0'));
escapeJavaStyleString(out, str, &(unsigned char *)'0');
escapeJavaStyleString(out, "utf-8", false);
escapeJavaStyleString(out, str, ufs_dtype);
escapeJavaStyleString(out, str, false, &s);
escapeJavaStyleString(out, str, false, isReflowing);
escapeJavaStyleString(out, str, false, interror);
escapeJavaStyleString(out, std::str, false);
escapeJavaStyleString(out, str, false, aStr);
escapeJavaStyleString(out, "".equals(str), false);
escapeJavaStyleString(out, str, true, false);
escapeJavaStyleString(out, str, io, false);
escapeJavaStyleString(out, c.toUpperCase(), false);
escapeJavaStyleString(out, str, (char*)false);
escapeJavaStyleString(out, str, "")
escapeJavaStyleString(out, str, (int)false);
escapeJavaStyleString(out, str, (int)false);
escapeJavaStyleString(out, __unused, false);
escapeJavaStyleString(out, ps, false);
escapeJavaStyleString(out, "../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../..//../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../.
escapeJavaStyleString(out, lun, false);
escapeJavaStyleString(out, str, aStr);
escapeJavaStyleString(out, str, id(id), false);
escapeJavaStyleString(out, str, IOException.false);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv  0)  escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, false, int i);
escapeJavaStyleString(out, str, false, int i, int i, IO_STYLE_OFFSET);
escapeJavaStyleString(out, str, false, &bLimiter);
escapeJavaStyleString(out, str, false, &ret);
escapeJavaStyleString(out, """);
escapeJavaStyleString(out, str, false, &tx);
escapeJavaStyleString(out, n, false);
escapeJavaStyleString(out, str, _("escapeJava"));
escapeJavaStyleString(out, str, &result);
escapeJavaStyleString(out, str, true, true);
escapeJavaStyleString(out, str, false, sizeof(out), -1);
escapeJavaStyleString(out, str, IOException.f_type);
escapeJavaStyleString(out, "unsigned char");
escapeJavaStyleString(out, str, false, false, true);
escapeJavaStyleString(out, str, (void **)false);
escapeJavaStyleString(out, nsCRT::str, false);
escapeJavaStyleString(out, str, &expireJava);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv <0) &escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, 0);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv 0) &escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
<escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, str, "&n", false);
&escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv <0) escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, '<0');
escapeJavaStyleString(out, str, false);
escapeJavaStyleString(out, '&0', false);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv &0) <escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv 0) escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, &(unsigned char *)'&0');
escapeJavaStyleString(out, str, &(unsigned char *)'0');
escapeJavaStyleString(out, str, false, 0);
escapeJavaStyleString(out, str, "<n", false);
escapeJavaStyleString(out, str, ((unsigned char *) '&0'));
escapeJavaStyleString(out, str, "n", false);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv &0) &escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, """);
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv <0) <escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, '0');
escapeJavaStyleString(out, str);
escapeJavaStyleString(out, str, ((unsigned char *) '0'));
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv &0) escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, str, &(unsigned char *)'<0');
escapeJavaStyleString(out, str, false, int), int rv = escapeJavaStyleString(out, str, rv); if (rv 0) <escapeJavaStyleString(out, str, false, int rv); escapeJavaStyleString(out, str, false, rv);
escapeJavaStyleString(out, "&"");
escapeJavaStyleString(out, str, '&0');
escapeJavaStyleString(out, '0', false);
escapeJavaStyleString(out, str, ((unsigned char *) '<0'));
escapeJavaStyleString(out, '<0', false);
escapeJavaStyleString(out, "<"");
