golden:
callback(null);
inference:
_callback();
callback ();

callback(null);
callback(0);
return callback();
callback(false);
callback(void);
__callback();
callback(-1);
callback();
callback(1);
callback(true);
callback(callback);
rv = callback();
callback(null);
callback(ret);
const callback();
callback(s);
int callback();
callback(false);
_callback(callback);
callback(*this);
callback(true);
ret = callback();
callback(this);
callback(err);
void callback();
callback(c);
callback(*args);
result = callback();
callback(buf);
*callback();
callback(a);
callback_stop();
callback_interrupt();
callback(e);
callback(return);
callback_empty();
callback(ERR);
callback(*arg);
callback_clear();
debug_callback();
callback(arena);
return 0;
callback(empty);
callback(arg);
(void) callback();
_callback ();
callback(ev);
callback(arr);
callback_notify();
callback(&callback);
callback(dummy);
callback(n);
return (0);
_done();
callback(;
callback(p);
callback(ep);
callback(&err);
function();
callback(rv);
callback(0, 0);
err = callback();
callback(res);
callback_done();
callback(end);
fcallback();
getcallback();
_callback(null);
Callback();
callbacks();
_return callback();
callback1();
callback( null);
callback_init();
callback2();
callback(event);
callback(args);
callback_release();
callback = 0;
callback(result);
callback(*argv);
callback(true);
_callback(*this);
callback = callback();
callback(2);
callback (1);
callback = null;
callback(v);
callback(d);
self.callback();
else callback();
void* callback();
callback(r);
callback(pending);
callback( 0 );
callback(id);
callback(]);
CALLback();
callback(val);
callback("");
callback(&arg);
callback(*callback);
pkg_callback();
callback_remove();
do_callback();
callback(dev);
callback_update();
callback(__unused);
callback(td);
_callback(c);
callback(context);
_callback(buf);
callback(t);
callback(close);
_Callback();
callback(u);
_callback(*arg);
callback(--);
cvscallback();
callback(rval);
callback(avoid);
return -1;
_callback(err);
_callback("");
callback(NONE);
callback(3);
void *callback();
void *callback;
callback(off);
callback(disabled);
int i;
callback(wait);
callback(retval);
callback('0');
callback(eval);
/* callback() */
callback_cnt++;
callback(ds);
callback(argv);
_check_callback();
callback(request);
callback(DELAY);
_callback()
break;
callback(set);
_callback(-1);
_callback(());
callback(ac);
_callback(this);
callback(); return (0);
_callback(arg);
_callback(void);
callback((void));
callback(db);
continue;
callback(&args);
callback(0, -1);
callback(); return 0;
callback(advance);
callback(dbg);
callback(disable);
callback(debug);
callback((void *));
callback(address);
callback(int);
_callback(p);
callback(ap);
_callback(ev);
callback(node);
_callback(e);
callback(*argc);
_callback(a);
callback(nodeInfo);
_callback(id);
return;
_callback(argv);
__callback(());
_callback(ep);
/* Callback() */
_callback(n);
callback(cp);
callback(cnt);
if (callback)  callback();
callback(async);
/* do callback(), */
/* * Now we have a callback for a function that * contains * args based on * * args that may be * called from the args. */ _callback(arg);
/* do nothing if called. */ callback();
retval = callback();
callback("%s", __func__);
_callback(false);
callback(null);
callback(&this);
callback(0, 0, 0);
callback(&cmd);
callback(_FALSE);
callback("0x%08x", function (argp));
_wait(&callback);
if (callback) callback();
callback(false);
callback(inet);
callback("none");
callback(*arr);
/* * If no callback occurred, callback returned in this callback. */ callback();
/* * We must get a function for the end of a __proc */ char msg;
callback(rdf_dev);
/* wait until callback can be * closed. */
callback(nsCallback);
/* * Callback() returns false for this function. */
callback(*(args));

_callback();
<_callback();
<_wait(&callback);
callback('0');
&callback();
if (callback) &callback();
<callback();
callback('<0');
if (callback) callback();
callback();
&callback();
callback();
&_wait(&callback);
_wait(&callback);
&_callback();
_callback();
callback(null);
<callback();
if (callback) <callback();
callback('&0');
