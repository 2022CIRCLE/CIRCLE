golden:
yield x
inference:
yield flatten((int)x)
yield flatten(y)
yield (flatten(x))
yield flatten((u_long)x)
return flatten((int)x)
yield (x)
yield flatten((unsigned char)x)
yield flatten((unsigned long)x)
yield flatten(x, 0)
yield flatten((u_int)x)
yield flat((int)x)
yield flatten(int(x))
yield flatten(y);
yield x;
yield flatten(x, -1)
yield (flatten (x))
yield flatten((ulong)x)
return flatten(y)
yield flatten((long)x)
yield flatten(y, x)
yield flatten((unsigned int)x)
y = flatten(x)
return (flatten(x))
yield (y) flatten(x)
yield flatten(x, y)
yield flat(y)
yield flatten(x, '0')
return flatten((u_long)x)
yield flatten((char *)x)
yield flatten((int)y)
yield flaten((int)x)
yield flatten(x--)
yield flatten(x, int)
yield flatten(*x)
yield flatten(x + 1)
yield flatten(x--);
yield flatten((int)(x))
yield x
yield flatten(arr, x)
yield flatten (x)
yield flatten(arr[x])
yield y;
yield (int) flatten(x)
yield flatten(a, x)
yield flatten([x])
yield (y) flatten (x)
yield flatten(x, n)
yield flatten((int) x)
yield flatten(x >= 0)
yield flatten(arr.x)
return flatten((unsigned char)x)
yield flatten((list_t)x)
yield flatten(x, 1);
yield Flatten(x)
yield flatten(((int)x))
yield flatten(arr)
yield flatten(x, arr)
yield flat (x)
yield flatten(x, v)
rv = flatten(x)
return flatten((unsigned long)x)
yield flatten(int)x
yield flatten(y, 0)
yield flatten(r)
yield y
yield flatten((off_t)x)
yield flatten(x, sizeof(x))
yield flatten((void *)x)
yield y in flatten(x)
result = flatten(x)
yield flatten(x-1)
yield flaten(y)
yield flatten(x, a)
yield flatten(x + 1);
yield flatten((u_char *)x)
result = flatten(x);
yield flatten(x, len)
yield flat_(x)
yield flatten([y])
return flatten((u_int)x)
yield (x);
yield flatten(val)
yield flatten((int)x))
yield flatten(a)
yield flatten((double)x)
yield sizeof(flatten(x))
y = flatten(x); yield y
yield flatten(x.get())
yield flat(x);
yield flatten(x);
yield flatten(z)
yield flatten(*(int)x)
yield flatten((char*)x)
yield list(flatten(x))
yield flat(x, 0)
yield flatten(i)
yield flatten(hex)
yield flatten(x, -1);
y += flatten(x)
yield flatten(s)
yield flatten( (int)x)
yield flatten(x+1)
yield (flatten)(x)
yield flatten(x - 1);
yield flatten((short)x)
yield flatten(l)
yield flatten(x, m)
break;
yield (short) flatten(x)
yield flatten(x, verbose)
output(flatten(x))
yield flatten(x.x)
yield flatten(x) + 1
yield flatten(arena)
yield flatten((void **)x)
yield flatten((int)x));
yield flatten((unsigned)x)
yield flatten((u_char)x)
yield flatten((y--)x)
yield y.flatten(x)
yield flatten(x > 0)
yield flatten(x - 1)
yield flat((u_long)x)
yield flat((unsigned char)x)
yield flatten(x * arr)
yield (int) flatten (x)
yield (y)flatten(x)
/* yield flatten(x) */
yield flatten(x * 3)
yield flatten(y, sizeof(y))
yield int(x)
yield int(flatten(x))
yield flatten(x, hash)
yield flatten((int32)x)
yield flatten(alpha)
yield flatten(m)
yield flatten(x, dtype)
yield y(x)
yield flatten(x-1);
yield (y + x)
yield y, flatten(x)
yield flatten(y.x)
yield flatten(abs(x))
yield flatten(x, width)
yield flatten(m, x)
return flatten(x, 0)
yield flatten((u_char*)x)
yield flatten(b)
yield flatten(((int)x));
yield flatten(x + '0')
yield flatten(-x)
yield y(flatten(x))
yield flatten(x2)
yield flatten(x * 4)
yield flat((unsigned long)x)
yield flatten((*x))
yield flatten(int)
yield flatten(x - y)
yield flatten(y, x--)
yield flatten(y, (int)x)
yield y/flatten(x)
y = flatten(x); yield y;
yield flatten(x * 5)
yield flatten(x, c)
yield y + flatten(x)
yield flatten(arr.y)
yield flatten(n)
yield flatten(x, abort)
yield flatten(y--)
yield flatten(x, i)
yield flatten(x, p)
yield flatten(x, (int)0)
yield flatten(x, b)
yield flatten(x, y--)
yield flatten_(x)
yield flatten((y+)x)
if (x) yield flatten(x)
yield flatten(x * sizeof(x))
yield (y--);
yield(flatten(x))
yield flatten(x,arr)
yield flatten(x, ep)
yield flatten(y, n)
yield flatten(x, '0');
yield flatten(var)
return x;
yield (spacing(x))
l = flatten(x); yield l
yield flatten((unsigned long long)x)
s = flatten(x); yield s;
yield flatten(x, sizeof(y))
yield flatten(x+(int)x)
yield flat((unsigned char*)x)
yield flatten(x - x)
return flatten((int)(x))
y = flatten(x); yield (y)
yield flatten(x, nil)
yield flatten(x, s)
yield flatten(x, y--);
return flatten((int)y)
yield flatten(x + b)
yield flatten(x, br)
yield flatten(x.size())
yield flatten(x, ints)
yield flatten(x, max_cur)
yield flatten(x * 0)
yield flatten(x + '&0')
yield flatten(x, '&0');
yield flatten(x + '<0')
yield flatten(x, '&0')
yield flatten(x, '<0');
yield flatten(x<2)
yield flatten(x, '<0')
yield flatten(x2)
yield flatten(x, '0')
yield flatten(x&2)
yield flatten(x, '0');
yield flatten(x + '0')
