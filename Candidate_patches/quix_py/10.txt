golden:
steps.append((start, end))
inference:
steps.append((start, helper));
steps.append((start, &helper))
steps.append((start, helper))
steps.append((start, helper, 0))
steps.append((start, *helper))
steps.append((start-start, helper))
steps.append((start, helper))
steps.append((start))
steps.append((start, addr))
steps.append((start, end))
steps.append(helper)
steps.append((start, h))
steps.append((*start, helper))
steps.append((start - start, helper))
steps[start] = helper;
steps.append((Start, helper))
steps.append((start, helper, size))
steps.append((start,))
steps.append((start - 1, helper))
steps += (start, helper)
steps.append((start, (long)helper))
steps.append ((start, helper))
steps.append((start, m))
steps[start].append(helper)
steps.append((start, helper, 1))
steps.append((height-start, helper))
steps.append((int)start, helper))
steps.append((start, helper, end))
steps.append((height, start, helper))
steps = (start, helper);
steps.append(((start, helper)))
steps.append((start, helper).get())
steps.append((start, helper, height))
steps.append((start, a))
steps.append((lstart, helper))
steps.append((start+1, helper))
steps.append((*start))
steps.append((start, helper, start))
steps.append((start, helper) - 1);
steps.append((start, len))
steps.append((start, list))
steps.append((hi, start, helper))
steps.append((start, helper, len))
steps.append((int, helper))
steps.append((start-1, helper))
steps += (start, helper);
steps.append((start, key))
steps.append((start, 0))
steps.append((start, helper) - start)
steps.append((start, map))
steps.append((height - 1, helper))
steps.append((start, p))
steps.append((start, helper)) - 1
steps.append(helper))
steps.append((start, helper, h))
steps.append((start, type))
steps.append((n, helper))
steps.append((start, l))
steps.append((start + start, helper))
steps.append((start, helper)))
steps.append((start, err))
steps.append((start, (long) helper))
steps.append((start, helper, p))
steps.append((start, -1, helper))
steps.append((start, n))
steps.append((start, s))
stepsappend((start, helper))
steps.append((start, helper, step))
steps.append((i, start, helper))
steps.append((start, helper.get()))
steps.append((start, i))
steps.append( (start, helper) )
steps.append((start, start))
steps.append((start, t))
steps.append((start + 1, helper))
steps_append((start, helper))
steps.append((start, result))
steps.append((prev, helper))
steps.append((nstart, helper))
steps.append((middle, helper))
steps.append((start, helper, i))
steps.append((page, start, helper))
steps.append((start, str))
steps.append((cstart, helper))
steps.append((0, start, helper))
steps[start].append((helper))
steps.append((start, helper)) + 1
steps.append((start, self))
steps.append((type, start, helper))
steps.append((a, helper))
steps[start].append(helper)
steps.append((start, support))
steps.append((m, start, helper))
steps.append((start, he))
steps.append((start, helper, length))
steps.append((*start, *helper))
steps.append(((start-1, helper)))
steps.append((start, c))
steps.add((start, helper))
steps.append((start, helper)+1)
steps.append((start, proc))
steps = steps.append((start, helper))
steps.append((end, helper))
steps.append((h, start, helper))
steps.append((n, start, helper))
steps.append((from, helper))
steps.append((start, pointer))
steps.append((hi, helper))
steps.append((start-start))
steps.append((helper, start))
steps.append((helper))
steps.append((start, helper - 1))
steps.append((height, helper))
steps.append((start, a, helper))
steps.append((start, helper, l))
steps.append((mi, start, helper))
steps.append((start, helper) + 1);
steps.append((start,, helper))
steps.append((max_start, helper))
steps.append((start, child))
steps.append((start, cm))
steps.append((start, helper, buf))
steps.append((start, helper)).get())
steps.append((end, start, helper))
steps.append(((start+1, helper)))
steps.append((start, name))
steps.append((start, helper, n))
steps.append((start, helper, top))
steps.append((head, helper))
steps.append((start, helper, m))
steps.append(hanoi(start, helper))
steps.append((start--, helper))
steps.append((start, helper, 2))
steps.append((this.start, helper))
steps.append((addr, helper))
steps.append((hist, helper))
steps.append((start, frame))
steps.append((start, hp))
steps.append((start-helper))
step_list.append((start, helper))
steps.append((start, u))
steps.append((ni, start, helper))
steps.append((start, hdr))
steps.append((start, -1))
steps.append(((start-start), helper))
steps.append((-start, helper))
steps.append((buf, helper))
steps.append((start, buf))
steps.append((start,*helper))
steps.append((start, hint))
steps.append((start, helper, count))
steps.append((p, helper))
steps.append(hnoi(start, helper))
steps.append((start2))
steps.append((start, d))
steps.append((start, mem))
steps.append((start, helper, addr))
steps.append((start, 0, helper))
steps.append((start, count))
steps.append((start, helper), end)
steps.append((&start, helper))
steps.append((long)start, helper))
steps.append((start, '0'))
steps.append((start, helper, helper))
steps.append((start, helper, max))
steps.append((start, line))
steps.append((start, ))
steps.append((start,,helper))
steps.append((start, helper))  1
steps.append((start, helper, -1))
steps.append((start, helper, 3))
steps.append((start, helper)-1)
steps.append((start, helper, v))
steps.append((start, helper, me))
steps.append((start-start, helper-1))
steps.append((start, helper, t))
steps.append((start, helper, a))
steps.append((start, helper) + 1)
steps[start] = helper
steps.append((start, helper)));
steps.append((start, helper) - 1)
steps.append((start, helper))  1)
steps = (start, helper)
steps.append((start, helper, e))
steps.append((start, helper, int))
steps = (start, helper)? steps : steps;

steps.append((start, helper)).pop())
steps.append((start, helper, start-1))
steps.append(start)
steps.append((start, helper, s))
steps.append((start, helper, c))
steps.append((start, helper, x))
steps.append((start, helper, b))
steps.append((hi.hi.start, helper))
steps.append((start, helper))  0  (height - start) / sizeof(start); steps.append(helper))  0  (height - end) / sizeof(end); steps.append((start, helper))  0  (height - start) / sizeof(end); steps.append((start, helper))  0  (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper))  0  (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append(((middle, start, helper)))
steps.append((start, (int)helper))
steps.append((start, helper))  2  2  5  4  5  5  6  5  5  5  5  6  6  7  8  10  5  5  8  9  6  6  7  6  7  8  8  8  9  9  10  10  8  10  9  10  10  11  8  10  11  12  13  16  10  16  10  11  16  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10
steps.append((start, helper, start + 3))
steps.append((start, nr))
steps.append((start, helper)? 0 : 0)
steps.append((start, helper))  0)
steps.append((start, helper, a[len - 1])))
steps.append((start, helper, hs))
steps.append((start, helper)) /* end */
steps.append((start, sp))
steps.append((start, helper))  3 * 3 - start - end) * 2 * 3 - start;  * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper))  sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start));  else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) - start;
steps.append((start, helper))  2  2  3  5  5  6  7  7   6  7  7  6  7  8  7  9  5  8  10  6  8  8  7  8  9  9  10  11  11  10  10  8  10  11  11  11  10  8  10  11  10  11  11  11  11  11  11  11  10  11  11  11  11  11  11  11  11  11  10  11  10  10  11  11  11  11  10  11  11  11  11  11  11  11  11  11  11  11  11  11
steps.append((start, helper))  0 - start; steps.append((helper))  0 - end; steps.append(hanoi(height - 1, helper, end))  0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end))  0 - start; steps.append((start, helper))
steps.append((start, helper))  0 : 0; steps.append((start - start))  0)
steps.append((start, n, helper))
steps.append((start, helper, &line))
steps.append((start, helper))  1 /* See if we can't set the height for * the length of the work. */ steps.append(HAVE_Mask(height - 1, start))
steps.append((start, m, helper))
steps.append((start, helper))  2  len - start; steps.append(helper)  2  len - end; steps.append((start, helper))  2  len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len))  3  len - start; steps.append(helper)  2  len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper, sizeof(start)))
steps.append((start, helper, (void **)&line))
steps.append((start, helper, ret))
steps.append((start, helper, memset(height - 1, (HEIGHT *)0)))
steps.append((start, helper))  (*(start) = end)? 0 : 1; steps.append((start, helper)))
steps.append(((start, helper, height)))
steps.append((start, helper, sizeof(start))))
steps.append((start, helper))  sizeof(start); steps.append(helper)
steps.append((hover, helper))
steps.append((start, helper, maxeudo))
steps.append((start, helper) - (start - 1))
steps.append((start, helper)) /* XXX */
steps.append((start, htole32(helper)))
steps.append((start, helper))  0;
steps.append((start, helper))  0 : step_data[0]; steps.append(ho, ho))
steps.append(((start+height)-1))
steps.append((hi))
steps.append(((height - 1, start, helper)))
steps.append((height - 1, start, helper))
steps.append((start, helper)? (height-1) : (hspan(height-1))))
steps.append((start, helper, start + sizeof(start))))
steps.append((start, helper, (swap_t)&ms))
steps.append((start, helper)) /* pointer */
steps.append((start, helper))  0 - start; steps.append(*helper)
steps.append((start, (u_long)helper))
steps.append((start, helper, MA_HEAP))
steps.append((start, ((bp))))
steps.append((start, helper, dummy))
steps.append((start, helper))  2 - start;  else  steps.append((start, helper))  2 - start; steps.append((start, helper));
steps.append((start, (u_int) helper))
steps.append((hwnd_start, helper))
steps.append((start, __func__))
steps.append((start, helper, sizeof(start)-1))
steps.append((start, hp, helper))
steps.append((htol(start), helper))
steps.append((start, (u_long) helper))
steps.append((start, (void *) helper))
steps.append((start, helper, rv))
steps.append((start, helper, ni))
steps.append((start, helper))  0 - start; steps.append(helper); steps.append((start, helper))  0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper, ap))
steps.append((start, helper))  0? 1 : 0;
steps.append(((start, helper)) - start)
steps.append((start, helper))  1  height; steps.append(macro);
steps.append((start, (void *)helper))
steps.append((start, helper))  size() - (start - start);
steps.append((start, helper, ah))
steps.append((start, helper, cnt))
steps.append((start, ai))
steps.append((start, (unsigned long) helper))
steps.append((start, nbspr))
steps.append(((start, helper)) /* * The 'h' initialization should be done before */)
steps.append((start, (int) helper))
steps.append((start, helper))  0  0? '0' : '0';
steps.append((start, helper))  0? 0 : 0;
steps.append((start, hstr))
steps.append((start, helper, &handle))
steps.append((start, helper)) /* This is why we've only got a hint. */
steps.append((start, helper))  0)  splx(s); steps.append(s);
steps.append(((size_t) start, helper))
steps.append(((start, helper) - 1))
steps.append((start, helper))  0  start; steps.append(((n)start))  0  end; steps.append((n)end))
steps.append((start, helper))  1 /* XXX */
steps.append((start, -)helper))
steps.append((start, helper))  0? ((height - 1)/macro) : 0)  0 : 0;
steps.append(((start-start)-start, helper))
steps.append((start, helper, (int)))
steps.append((start, helper, start--))
steps.append((start, helper))  sizeof(start) - start; steps.append(helper)
steps.append((start, helper)) 2 &len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0? ((height - 1)/macro) : 0) 0 : 0;
steps.append((start, helper)) &2 <2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 2 <2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 &len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 <start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) <0? ((height - 1)/macro) : 0) &0 : 0;
steps.append((start, helper)) &0 : 0; steps.append((start - <start&)) <0)
steps.append((start, helper)) <2 - &start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0;
steps.append((start, helper)) &0 : 0; steps.append((start - &start&)) &0)
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 <len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 : 0; steps.append((start - start&)) <0)
steps.append((start, helper)) <2 &2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 : 0; steps.append((start - start<)) <0)
steps.append((start, helper)) &0 start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) 2 2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 - start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 2 - &start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 &0? '0' : '0';
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 <0? '&0' : '0';
steps.append((start, helper)) <sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &0 : step_data[0]; steps.append(ho, ho))
steps.append((start, helper)) &0 <start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) &2 &2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 &2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 - start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 &len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0)
steps.append((start, helper)) 3 * 3 - <start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 <start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) 2 len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 0? '0' : '&0';
steps.append((start, helper)) <0 - start; steps.append(helper); steps.append((start, helper)) 0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start&, helper))
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 <len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 - &start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 - &start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 : 0; steps.append((start - <start&)) &0)
steps.append((start, helper)) <2 2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 &2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 2 2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &3 * 3 - <start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 &start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) <2 2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 <start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) &2 <len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <3 * 3 - <start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 : 0; steps.append((start - start)) <0)
steps.append((start, helper)) 2 <2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 : 0; steps.append((start - <start)) &0)
steps.append((start, helper)) 0 <start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) &3 * 3 - &start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 - start; steps.append(helper); steps.append((start, helper)) &0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) 0 start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) <2 &2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 0? '&0' : '<0';
steps.append((start, helper)) &sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &2 - &start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 <2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0) &splx(s); steps.append(s);
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 &0? '0' : '&0';
steps.append((start, helper)) &0 &start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) <0)
steps.append((start, helper)) <2 &len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 3 * 3 - &start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 0? '0' : '<0';
steps.append((start, helper)) <0 start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) <3 * 3 - start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 &len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 - <start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 : 0; steps.append((start - <start)) <0)
steps.append((start, helper)) <2 - <start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &3 * 3 - &start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 - <start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) 0 0? '&0' : '<0';
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 : 0; steps.append((start - &start&)) 0)
steps.append((start, helper)) &2 2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 : 0; steps.append((start - &start)) &0)
steps.append((start, helper)) &2 - &start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <2 <2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 &2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &(*(start) &= end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) <0 &start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 &len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 2 2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0 <0? '<0' : '0';
steps.append((start, helper)) &2 <2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 - <start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &2 2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 <2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 <start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) <0 start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) &0 : 0; steps.append((start - &start)) 0)
steps.append((start, helper)) <1 <height; steps.append(macro);
steps.append((start, helper)) <2 len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 2 - start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 : 0; steps.append((start - <start&)) <0)
steps.append((start, helper)) <0 &start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 <2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 &len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 2 &2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 &2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &sizeof(start); steps.append(helper)
steps.append((start, helper)) 3 * 3 - &start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0) splx(s); steps.append(s);
steps.append((start, helper)) <2 <2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 <len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 &start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) &2 len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) 1 /* See if we can't set the height for * the length of the work. */ steps.append(HAVE_Mask(height - 1, start))
steps.append((start, helper)) &0? ((height - 1)/macro) : 0) &0 : 0;
steps.append((start, helper)) 2 - start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) 0? ((height - 1)/macro) : 0) <0 : 0;
steps.append((start, helper)) 2 2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 <start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) <0 &start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) &2 &2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 - <start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 &2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 <len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 <2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 1 <height; steps.append(macro);
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 &2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &3 * 3 - start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 <len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 2 - start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &3 * 3 - start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) &2 2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 2 2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 <len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 &2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 0? '<0' : '0';
steps.append((start, helper)) <0 : 0; steps.append((start - &start<)) 0)
steps.append((start, helper)) 0 : 0; steps.append((start - <start)) <0)
steps.append((start, helper)) &2 &2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <1
steps.append((start, helper)) 2 &2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 &start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) <2 2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 - <start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 : 0; steps.append((start - &start)) <0)
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 1
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 3 * 3 - <start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 1 height; steps.append(macro);
steps.append((start, helper)) <0 start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) (*(start) = end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) 2 <2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &size() - (start - start);
steps.append((start, helper)) <0 <start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) &0 : 0; steps.append((start - <start)) 0)
steps.append((start, helper)) 2 len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0? ((height - 1)/macro) : 0) <0 : 0;
steps.append((start, helper)) &3 * 3 - &start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 - &start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <2 &2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 : 0; steps.append((start - &start&)) &0)
steps.append((start, helper)) 3 * 3 - &start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 0? '<0' : '&0';
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 <len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <1 /* XXX */
steps.append((start, helper)) <3 * 3 - &start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 &0? '<0' : '0';
steps.append((start, helper)) &2 len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 - <start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 2 &2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 &2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 <2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 <start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) <0 - start; steps.append(helper); steps.append((start, helper)) &0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) 3 * 3 - start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 - <start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start&2))
steps.append((start, helper)) <sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <2 &2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((&start&, helper))
steps.append((start, helper)) <2 - start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0;
steps.append((start, helper)) 2 <len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 <start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) <0 &start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) 3 * 3 - <start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <(*(start) <= end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) &2 - <start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 2 &2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 0? '<0' : '<0';
steps.append((start, helper)) 0 <0? '&0' : '&0';
steps.append((start, helper)) &0 0? '<0' : '<0';
steps.append((start, helper)) &0 start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) &2 <2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) &2 &2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 &2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &2 <len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 <2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start<2))
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 : 0; steps.append((start - &start<)) &0)
steps.append((start, helper)) <0 0? '<0' : '<0';
steps.append((start, helper)) &sizeof(start) - start; steps.append(helper)
steps.append((start, helper)) &2 2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 &len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 <start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) <2 2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <2 2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <3 * 3 - start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &2 &len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <3 * 3 - <start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 - &start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 &2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <3 * 3 - start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 - &start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 - start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 - start; steps.append(helper); steps.append((start, helper)) 0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) <0 0? '0' : '&0';
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 &2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0 - start; steps.append(helper); steps.append((start, helper)) &0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) &2 - &start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &2 - &start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 : 0; steps.append((start - start&)) 0)
steps.append((start, helper)) <2 &len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 <start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) 2 - &start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 : 0; steps.append((start - <start<)) <0)
steps.append((start, helper)) <0 &0? '&0' : '<0';
steps.append((start, helper)) 0 <0? '<0' : '<0';
steps.append((start, helper)) &3 * 3 - start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <0? 1 : 0;
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 <2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 - &start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 <start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) <2 len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0 <start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) &2 - start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &1)
steps.append((start, helper)) <0 : 0; steps.append((start - <start)) <0)
steps.append((start2))
steps.append((start, helper)) <2 - <start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <3 * 3 - &start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &2 - <start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &3 * 3 - &start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 <len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 2 2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <2 - &start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 3 * 3 - <start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <3 * 3 - start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0) splx(s); steps.append(s);
steps.append((start, helper)) &2 - <start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <3 * 3 - &start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &2 <2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 - <start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <2 &2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <1 height; steps.append(macro);
steps.append((start, helper)) <0 &start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) 0 : 0; steps.append((start - start)) 0)
steps.append((start, helper)) &3 * 3 - &start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 - start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <2 2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 3 * 3 - <start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <1)
steps.append((start, helper)) <2 &len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 1)
steps.append((start, helper)) &2 <len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 0? '<0' : '&0';
steps.append((start, helper)) 0 <start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 <0? '&0' : '<0';
steps.append((start, helper)) &0 &start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) 3 * 3 - start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 &2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 2 &len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 &2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <3 * 3 - &start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 3 * 3 - start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 - start; steps.append(helper); steps.append((start, helper)) <0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) 0 start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) <2 - <start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 3 * 3 - <start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 &2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 : 0; steps.append((start - <start&)) 0)
steps.append((start, helper)) <0 : 0; steps.append((start - <start)) &0)
steps.append((start, helper)) 2 - start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <3 * 3 - start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 : 0; steps.append((start - start<)) <0)
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 0? '0' : '<0';
steps.append((start, helper)) <2 <2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 2 &len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 &0? '&0' : '0';
steps.append((start, helper)) 3 * 3 - &start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 - <start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 : 0; steps.append((start - start)) &0)
steps.append((start, helper)) <2 - <start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 <len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 : 0; steps.append((start - <start<)) <0)
steps.append((start, helper)) <(*(start) = end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) &2 len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 - start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 2 - &start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 &0? '&0' : '&0';
steps.append((start, helper)) <3 * 3 - <start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) 2 <2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 <2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 : 0; steps.append((start - &start)) <0)
steps.append((start, helper)) &0 : 0; steps.append((start - start&)) 0)
steps.append((start, helper)) &2 len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &3 * 3 - <start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 : 0; steps.append((start - start&)) &0)
steps.append((start, helper)) &3 * 3 - start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &(*(start) = end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) 2 len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0 <0? '<0' : '0';
steps.append((start, helper)) &0 &0? '0' : '0';
steps.append((start, helper)) 0 &start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) <2 <2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 <0? '0' : '<0';
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 <len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <3 * 3 - start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 : 0; steps.append((start - start&)) &0)
steps.append((start, helper)) 0 : 0; steps.append((start - <start)) &0)
steps.append((start, helper)) <2 <2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0 : 0; steps.append((start - <start<)) &0)
steps.append((start, helper)) 2 - &start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &1 <height; steps.append(macro);
steps.append((start, helper)) <0 &0? '0' : '&0';
steps.append((start, helper)) 0? 1 : 0;
steps.append((start, helper)) &3 * 3 - &start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 - start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0) <splx(s); steps.append(s);
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 : 0; steps.append((start - <start<)) 0)
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 - &start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <3 * 3 - <start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 <0? '0' : '0';
steps.append((start, helper)) sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) 2 - <start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &3 * 3 - start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 : 0; steps.append((start - <start<)) 0)
steps.append((start, helper)) <3 * 3 - <start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &3 * 3 - <start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 &0? '0' : '<0';
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 <start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) &0 &start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) 0 &start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) 0 : 0; steps.append((start - &start)) &0)
steps.append((start, helper)) 0 : step_data[0]; steps.append(ho, ho))
steps.append((start, helper)) 2 - <start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 : 0; steps.append((start - <start&)) 0)
steps.append((start, helper)) &2 2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 &2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 0? '&0' : '&0';
steps.append((start, helper)) sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) 0 : 0; steps.append((start - start<)) &0)
steps.append((start, helper)) 2 - <start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 &start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &3 * 3 - <start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <sizeof(start); steps.append(helper)
steps.append((start, helper)) <size() - (start - start);
steps.append((start, helper)) <2 len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 &0? '&0' : '0';
steps.append((start, helper)) 2 2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 &len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 - &start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 &2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 3 * 3 - start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 0? '&0' : '&0';
steps.append((start, helper)) <0;
steps.append((start, helper)) &2 &len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 - start; steps.append(helper); steps.append((start, helper)) <0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) <2 <2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) &2 &len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) &3 * 3 - start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 <2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 : step_data[0]; steps.append(ho, ho))
steps.append((start, helper)) <0 &0? '0' : '0';
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <3 * 3 - &start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) (*(start) <= end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 - start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) <2 <2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &1
steps.append((start, helper)) 3 * 3 - <start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 : 0; steps.append((start - start&)) &0)
steps.append((start, helper)) &(*(start) <= end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) <2 - <start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 0? '0' : '0';
steps.append((start, helper)) &0 : 0; steps.append((start - <start&)) &0)
steps.append((start, helper)) 0 : 0; steps.append((start - <start<)) 0)
steps.append((start, helper)) &sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &2 &len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 0? '0' : '&0';
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <3 * 3 - &start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 : 0; steps.append((start - start<)) &0)
steps.append((start, helper)) <0 start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper))
steps.append((start, helper)) &2 <len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 - start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0) &splx(s); steps.append(s);
steps.append((start, helper)) <0 &start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 &2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 &0? '0' : '&0';
steps.append((start, helper)) &0 <start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, '0'))
steps.append((start, helper)) &sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <2 - start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 : 0; steps.append((start - &start<)) 0)
steps.append((start, helper)) 0 &start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) &2 &2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 : 0; steps.append((start - &start<)) 0)
steps.append((start, helper)) 0 &0? '<0' : '&0';
steps.append((start, helper)) 2 <2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 - <start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 : 0; steps.append((start - start<)) 0)
steps.append((start, helper)) 3 * 3 - start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 <2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 : 0; steps.append((start - <start<)) &0)
steps.append((start, helper)) <2 - &start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 0)
steps.append((start, helper)) <3 * 3 - &start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <2 2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 1 &height; steps.append(macro);
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 <2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 <len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 <2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &3 * 3 - start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 &start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) <0) &splx(s); steps.append(s);
steps.append((start, helper)) <0 &0? '<0' : '&0';
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 - &start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 : 0; steps.append((start - &start&)) 0)
steps.append((start, helper)) 2 - <start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 <2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 &start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) 3 * 3 - &start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 &len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 &len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 : 0; steps.append((start - start<)) 0)
steps.append((start, helper)) <0 <0? '<0' : '0';
steps.append((start, helper)) 0 : 0; steps.append((start - &start&)) 0)
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <3 * 3 - &start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 - start; steps.append(helper); steps.append((start, helper)) 0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) 3 * 3 - start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <3 * 3 - <start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 - &start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper));
steps.append((start, helper)) <2 2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0 start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) 2 2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0? 0 : 0;
steps.append((start, helper)) <2 2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &3 * 3 - &start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0 <start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 <0? '<0' : '<0';
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 <2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 2 &2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 : 0; steps.append((start - start)) &0)
steps.append((start, helper)) &0 - start; steps.append(*helper)
steps.append((start, helper)) <2 - start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 3 * 3 - <start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 0? '<0' : '0';
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <(*(start) &= end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) &0 start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) &0 start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) &2 2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 &2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &3 * 3 - <start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0? 1 : 0;
steps.append((start, helper)) <3 * 3 - <start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 <0? '&0' : '&0';
steps.append((start, helper)) <0 - start; steps.append(*helper)
steps.append((start, helper)) <0) <splx(s); steps.append(s);
steps.append((start, helper)) <2 <2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 <len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 &len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 <0? '&0' : '<0';
steps.append((start, helper)) 2 <len - start; steps.append(helper) <2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 &0? '<0' : '&0';
steps.append((start, helper)) <0) splx(s); steps.append(s);
steps.append((start, helper)) <2 <2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 0? '&0' : '<0';
steps.append((start, helper)) &2 2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) sizeof(start) - start; steps.append(helper)
steps.append((start, helper)) &2 <len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 &0? '0' : '<0';
steps.append((start, helper)) <3 * 3 - start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 - &start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 <start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) &0 <start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) <0 <0? '&0' : '0';
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 : 0; steps.append((start - &start)) 0)
steps.append((start, helper)) 0 - start; steps.append(*helper)
steps.append((start, helper)) 2 <2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <2 - start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 <0? '<0' : '&0';
steps.append((start, helper)) &0 0? '0' : '<0';
steps.append((start, helper)) &0 &0? '<0' : '0';
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 <len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <2 <len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 2 <len - start; steps.append(helper) &2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 3 * 3 - &start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 : 0; steps.append((start - <start<)) &0)
steps.append((start, helper)) &2 &2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 - start; steps.append(helper); steps.append((start, helper)) <0 - end; steps.append(helper); steps.append(hanoi(height - 1, helper, end))
steps.append((start, helper)) 0 start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) &0 : 0; steps.append((start - &start)) &0)
steps.append((start, helper)) &2 - start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((<start&, helper))
steps.append((start, helper)) 0 start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) &2 - &start&; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 : 0; steps.append((start - start)) <0)
steps.append((start, helper)) <2 len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &2 len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 2 - start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 <0? '0' : '<0';
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 : 0; steps.append((start - <start&)) &0)
steps.append((start, helper)) 2 2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) <2 - &start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 &2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 <2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 <2 &3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 - start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 0? '&0' : '&0';
steps.append((start, helper)) &2 &len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 <0? '<0' : '<0';
steps.append((start, helper)) 0 &0? '&0' : '&0';
steps.append((start, helper)) &sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 &start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) &0 : 0; steps.append((start - &start)) <0)
steps.append((start, helper)) 0 &start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 &2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 - <start<; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0? 0 : 0;
steps.append((start, helper)) 2 &2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0 &start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 : 0; steps.append((start - start<)) <0)
steps.append((start, helper)) (*(start) &= end)? 0 : 1; steps.append((start, helper)))
steps.append((start, helper)) &3 * 3 - <start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &1 height; steps.append(macro);
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <3 * 3 - <start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &3 * 3 - <start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) &2 <len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) <0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 &len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 &start; steps.append(((n)start)) <0 <end; steps.append((n)end))
steps.append((start, helper)) &2 - start; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &1 /* XXX */
steps.append((start, helper)) <2 &2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 : 0; steps.append((start - &start<)) &0)
steps.append((start, helper)) 2 2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &3 * 3 - &start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 2 <2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 <2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <3 * 3 - start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 &0? '<0' : '0';
steps.append((start, helper)) &0 start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) 2 2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start<, helper))
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &3 * 3 - start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &2 2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <2 - start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 <start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) 0 <start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) 3 * 3 - start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 <(height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) <3 * 3 - &start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 &0? '&0' : '0';
steps.append((start, helper)) 3 * 3 - &start&- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <2 &2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 - start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 <start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) &sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <0 : 0; steps.append((start - &start&)) <0)
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <sizeof(start); if(start&1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) 2 <2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 &len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((&start, helper))
steps.append((start, helper)) <2 - start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 : 0; steps.append((start - start)) 0)
steps.append((start, helper)) 0 <start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) 0 : 0; steps.append((start - &start&)) <0)
steps.append((start, helper)) &0 &0? '<0' : '<0';
steps.append((start, helper)) 0 : 0; steps.append((start - &start<)) <0)
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &0 start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) sizeof(start); steps.append(helper)
steps.append((start, helper)) <0 : 0; steps.append((start - &start<)) <0)
steps.append((start, helper)) &2 - start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <3 * 3 - start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 3 * 3 - start&- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &2 2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 &start; steps.append(((n)start)) <0 &end; steps.append((n)end))
steps.append((start, helper)) 0 <0? '&0' : '0';
steps.append((start, helper)) <2 <2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 0? '0' : '0';
steps.append((start, helper)) 2 2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 &2 <3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 : 0; steps.append((start - start)) &0)
steps.append((start, helper)) &0 : 0; steps.append((start - start<)) 0)
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 : 0; steps.append((start - &start)) 0)
steps.append((start, helper)) &0 <0? '0' : '&0';
steps.append((start, helper)) &sizeof(start); if(start<1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <2 2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 0? '0' : '0';
steps.append((start, helper)) <2 len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &2 <2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <1 /* See if we can't set the height for * the length of the work. */ steps.append(HAVE_Mask(height - 1, start))
steps.append((start, helper)) 2 &len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <2 - <start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 0? '&0' : '0';
steps.append((start, helper)) <2 2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); <else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <0? 0 : 0;
steps.append((start, helper)) 0 <start; steps.append(((n)start)) 0 &end; steps.append((n)end))
steps.append((start, helper)) 0 (height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 len - start; steps.append(helper) 2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &3 * 3 - <start<- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &2 &2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &2 - <start&; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 <0? '&0' : '<0';
steps.append((start, helper)) <0 <0? '0' : '&0';
steps.append((start, helper)) &3 * 3 - &start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) &0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 &2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 - <start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 &0? '&0' : '<0';
steps.append((start, helper)) 0 &start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) 2 <2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 &start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 : 0; steps.append((start - <start)) 0)
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 &2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &3 * 3 - start- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper))
steps.append((start, helper)) 2 &2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 : 0; steps.append((start - &start&)) <0)
steps.append((start, helper)) <0 0? '&0' : '0';
steps.append((start, helper)) 2 <len - start; steps.append(helper) &2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 (height - start) / sizeof(start); steps.append(helper)) &0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 - &start<; &else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 2 &2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 <2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) 2 &2 <3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 : 0; steps.append((start - start&)) <0)
steps.append((start, helper)) &2 <len - start; steps.append(helper) <2 len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 <start; steps.append(((n)start)) &0 <end; steps.append((n)end))
steps.append((start, helper)) 2 - start<; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) <sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); &else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) <sizeof(start) - start; steps.append(helper)
steps.append((<start, helper))
steps.append((start, helper)) &0 &0? '0' : '<0';
steps.append((start, helper)) <2 2 <5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 &2 &5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 2 <2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 <2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &1 &height; steps.append(macro);
steps.append((start, helper)) &0 0? '<0' : '&0';
steps.append((start, helper)) &0 start; steps.append(((n)start)) &0 &end; steps.append((n)end))
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) &2 len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 - &start; <else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0 &0? '<0' : '<0';
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 &len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((<start<, helper))
steps.append((start, helper)) 2 &2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 <len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <1 &height; steps.append(macro);
steps.append((start, helper)) size() - (start - start);
steps.append((start, helper)) 3 * 3 - &start<- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((&start<, helper))
steps.append((start, helper)) &2 <2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) 2 &2 3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 <2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &2 &2 &3 5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) <2 &2 <5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 : 0; steps.append((start - &start<)) <0)
steps.append((start, helper)) 3 * 3 - <start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &2 &len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 <0? '0' : '&0';
steps.append((start, helper)) 2 2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <2 - <start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 0? ((height - 1)/macro) : 0) &0 : 0;
steps.append((start, helper)) &0 - start; steps.append((helper)) <0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) <0 - start; steps.append((start, helper))
steps.append((start, helper)) <0 &0? '<0' : '<0';
steps.append((start, helper)) <0 : 0; steps.append((start - <start&)) <0)
steps.append((start, '<0'))
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 <0? '0' : '0';
steps.append((start, helper)) &2 len - start; steps.append(helper) &2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0 &start; steps.append(((n)start)) <0 end; steps.append((n)end))
steps.append((start, helper)) &0 <0? '&0' : '&0';
steps.append((start, helper)) <2 <2 <5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 <0? '0' : '<0';
steps.append((start, helper)) 0 &0? '&0' : '<0';
steps.append((start, helper)) 0 <(height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <0 : 0; steps.append((start - start)) <0)
steps.append((start, helper)) 3 * 3 - start<- <end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0? ((height - 1)/macro) : 0) 0 : 0;
steps.append((start, helper)) 2 <2 3 <5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 : 0; steps.append((start - <start<)) <0)
steps.append((start, helper)) &0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) &0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) 0 : 0; steps.append((start - <start&)) 0)
steps.append((start, helper)) <0 <0? '<0' : '&0';
steps.append((start, helper)) &0 <0? '0' : '0';
steps.append((start, helper)) 2 2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 : 0; steps.append((start - &start&)) &0)
steps.append((start, helper)) 0 0? '&0' : '0';
steps.append((start, helper)) 0 start; steps.append(((n)start)) 0 <end; steps.append((n)end))
steps.append((start, helper)) &2 &2 <3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0 (height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) <2 <2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 <2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &1 /* See if we can't set the height for * the length of the work. */ steps.append(HAVE_Mask(height - 1, start))
steps.append((start, helper)) &0 &0? '&0' : '&0';
steps.append((start, helper)) <sizeof(start); if(start1) steps.append(HEANE_HEAUSE(start, start)); else steps.append(HEANE_HEAUSE(start)))
steps.append((start, helper)) &2 &2 3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0) <splx(s); steps.append(s);
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) &0 - start; steps.append((start, helper))
steps.append((start, helper)) 1 /* XXX */
steps.append((start, helper)) 2 &2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) &0? ((height - 1)/macro) : 0) 0 : 0;
steps.append((start, helper)) 2 2 &3 &5 5 6 7 7 6 7 7 6 7 8 7 9 5 8 10 6 8 8 7 8 9 9 10 11 11 10 10 8 10 11 11 11 10 8 10 11 10 11 11 11 11 11 11 11 10 11 11 11 11 11 11 11 11 11 10 11 10 10 11 11 11 11 10 11 11 11 11 11 11 11 11 11 11 11 11 11
steps.append((start, helper)) <0 <(height - start) / sizeof(start); steps.append(helper)) 0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 - start&; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) 3 * 3 - &start- end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) &0 &(height - start) / sizeof(start); steps.append(helper)) <0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 : 0; steps.append((start - start&)) 0)
steps.append((start, helper)) <0 <start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) <0 &(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 <2 &5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <0 : 0; steps.append((start - start<)) &0)
steps.append((start, helper)) &0 : 0; steps.append((start - &start<)) &0)
steps.append((start, helper)) 2 <2 &5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) &0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) &0 : 0; steps.append((start - start)) 0)
steps.append((start, helper)) &0 0? '<0' : '0';
steps.append((start, helper)) &0 <0? '<0' : '&0';
steps.append((start, helper)) <3 * 3 - <start&- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) 0 : 0; steps.append((start - <start)) 0)
steps.append((start, '&0'))
steps.append((start, helper)) &0 start; steps.append(((n)start)) &0 end; steps.append((n)end))
steps.append((start, helper)) &2 <2 5 &4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 &len - start; steps.append(helper) 2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) <0? ((height - 1)/macro) : 0) <0 : 0;
steps.append((start, helper)) &0 start; steps.append(((n)start)) 0 end; steps.append((n)end))
steps.append((start, helper)) 0 &(height - start) / sizeof(start); steps.append(helper)) 0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 0 - start; steps.append((helper)) 0 - end; steps.append(hanoi(height - 1, helper, end)) 0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) 2 len - start; steps.append(helper) 2 &len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) &0 : 0; steps.append((start - start&)) <0)
steps.append((start, helper)) <2 - &start; else steps.append((start, helper)) 2 - start; steps.append((start, helper));
steps.append((start, helper)) &2 2 5 4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) <2 <len - start; steps.append(helper) <2 <len - end; steps.append((start, helper)) 2 len - end; steps.append(hanoi(height - 1, start, helper)); steps.append(len)) 3 len - start; steps.append(helper) 2 len - end; steps.append(hanoi(height - 1, helper, end));
steps.append((start, helper)) 0 - start; steps.append((helper)) &0 - end; steps.append(hanoi(height - 1, helper, end)) <0 - end; steps.append(hanoi(height - 1, helper, end)); steps.append(hanoi(height - 1, helper, end)) 0 - start; steps.append((start, helper))
steps.append((start, helper)) &3 * 3 - <start- &end) * 2 * 3 - start; * 2 * 3 * end; steps.append((start, helper)) * 2 * 3 * 3 * 3 * 3 * end;
steps.append((start, helper)) <0 &(height - start) / sizeof(start); steps.append(helper)) &0 <(height - end) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) 0 (height - start) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) 0 (height - end) / sizeof(end); steps.append((start, helper)) / sizeof(end); steps.append((start, helper)) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end) / sizeof(end
steps.append((start, helper)) 2 <2 5 <4 5 5 6 5 5 5 5 6 6 7 8 10 5 5 8 9 6 6 7 6 7 8 8 8 9 9 10 10 8 10 9 10 10 11 8 10 11 12 13 16 10 16 10 11 16 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
steps.append((start, helper)) 0 &start; steps.append(((n)start)) <0 end; steps.append((n)end))
