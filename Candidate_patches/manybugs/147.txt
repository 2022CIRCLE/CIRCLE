golden:
<extra_id_0>
inference:
xmlFree(mem);

xfree(mem);
xmlFree(mem, size);
if (mem) xmlFree(mem);
mem = RETVAL_STRINGL(mem, size, 1);
mem_free(mem);
retval_string(mem, size, 1);
xmlfree(mem);
xmlFree(mem, 0);
xmlFree (mem);
mem = mem; xmlFree(mem);
if (!mem) xmlFree(mem);
RETVAL_STRINGL(mem, size, 1);
xmlFree(mem, mem);
RETVAL_STRINGL(mem, size);
xmlFree(mem, size, 1);
xmlFree(mem, 1);
mem = mem;
xmlFree(xmlChar);
return RETVAL_STRINGL(mem, size, 1);
RETURN_FALSE;
nsCRT::free(mem);
(void) RETVAL_STRINGL(mem, size, 1);
xmlFree(intern->document);
return retval;
xmlFree_string(mem);
xmlFree(m);
XML_RELEASE(mem);
retval = mem;
xml_free(mem);
if (mem)  xmlFree(mem);
ret = RETVAL_STRINGL(mem, size, 1);
xmlFree(mem, 0, size);
retval = mem; xmlFree(mem);
xmlFree(mem); return 0;
xfree(mem, size);
xmlFree(mem.get());
xmlFree(mem, sizeof(mem));
mem = retval;
RETVAL_STRINGL(mem, size, 0);
xmlFreeString(mem);
xmlFree(mem, size, 0);
xmlFree(&mem);
mem = retval; xmlFree(mem);
free(mem);
xfree_string(mem);
mtx_free(mem);
xmlFree(mem, NULL);
rv = RETVAL_STRINGL(mem, size, 1);
if (mem) xfree(mem);
mem.xmlFree(mem);
xmlFree(mem); xmlFree(mem);
RETVAL_STRINGL(mem, size, mem);
xmlFree(strlen(mem));
memlFree(mem);
if (mem == NULL) xmlFree(mem);
xmlFree_string(mem, size, 1);
retval = mem; xmlFree(retval);
xfree (mem);
xmlFree(mem); return;
mem.free(mem);
XmlFree(mem);
xmlFree(mem, &mem);
XML_RETVAL_STRINGL(mem, size, 1);
if(mem) xmlFree(mem);
retval(mem, size, 1);
xmlFree();
xmlFree_mem(mem);
splx(s);
mem = retval_string(mem, size, 1);
xmlFree(retval);
RTVAL_STRINGL(mem, size, 1);
xmlFree(id);
xmlFree(mem); return retval;
xmlFree_string(mem, size);
mem = RETVAL_STRINGL(size, 1);
XMLFree(mem);
mem += size; xmlFree(mem);
mem++;
return 0;
xmlFree(*mem);
xmlFree((char *)mem);
mem = RETVAL_STRINGL(mem, size);
xmlfree(mem, size);
xmlFree(mem, size - 1);
xmlFree(ret);
return xmlFree(mem);
RETVAL_STRINGL(mem);
mem.xmlFree();
break;
xmlFree(mem); break;
mem.xml_free(mem);
xmlFree(mem, PR_TRUE);
mem += size;
xfree_mem(mem);
xmlFree(mem, -1);
if (*mem) xmlFree(mem);
xmlFreeString(mem, size);
xFree(mem);
mem++; xmlFree(mem);
NS_RELEASE(mem);
xmlFree(mem, mem, size);
memFree(mem);
xmlFree(mem, size, mem);
return;
RETVAL_STRINGL(mem, 1);
xmlGetString(mem, size, 1);
if (m) xmlFree(mem);
xmlFree(xmlDocPtr, mem);
xmlFree(nsnull);
mem += mem; xmlFree(mem);
xmlFree(mem)
xmlFreeString(mem, size, 1);
xmlFree(xmlString(mem), size);
retval = retval;
mem = RETVAL_STRINGL(mem);
res = RETVAL_STRINGL(mem, size, 1);
xmlGetString(mem);
mem.free();
xfree(mem, mem);
mem->free(mem);
xmlDestroy(mem);
xmlFree(mem); #endif
xmlFreemem(mem);
retval = RETURN_FALSE;
xmlFree(mem); return NULL;
xfree(xmlChar);
retval_string(mem, size, 1); free(mem);
mem += mem;
PZ_RETVAL_STRINGL(mem, size, 1);
xmlFree(mem, &size);
retval = xmlFree(mem);
xmlFree(mem, 0, 0);
mem_free(mem); xmlFree(mem_free);
retval += mem;
xmlFree(mem, len);
if (mem) xmlFree(mem); return;
/* xmlFree(mem); */
xmlFree(xmlChar, mem);
mem->size = size; xmlFree(mem);
mem->xmlChar = mem;
mem->mem_free(mem);
xmlFree(dom_document_save_html);
xmlFree(xmlString(mem), size, 1);
xmlFree(mem, mem->size);
xmlFree(mem, PR_FALSE);
RETVAL_STRINGL(mem, size, 1, 0);
if (!mem) xmlFree(mem); return;
RETVAL_STRINGL(mem, size, xmlChar);
xmlFree(mem); mem = mem;
xmlFree(mem, sizeof(mem), mem);
RETVAL_STRINGL(mem, size, &mem);
xmlFree(xmlString(mem), mem);
XML_REMOVE_STRINGL(mem, size, 1);
XMLFreeString(mem, size, 1);
xmlGetString(mem, size);
mem |= RETVAL_STRINGL(mem, size, 1);
xmlFree((char *)mem, size, 1);
xmlFree((u_long)mem);
*mem = RETVAL_STRINGL(mem, size, 1);
retval_string = mem; xmlFree(mem);
/* XXX */ xmlFree(mem);
err = RETVAL_STRINGL(mem, size, 1);
GET_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 2);
retval = RETVAL_STRINGL(mem, size);
mem.append(size); xmlFree(mem);
RETVAL_STRINGL(mem, &size, 1);
_retval_string(mem, size, 1);
xmlFree(xmlString(mem));
RETVAL_STRINGL(&mem, size, 1);
if (xmlChar) xmlFree(mem);
xmlFree(xmlChar(mem), size);
__retval_string(mem, size, 1);
xmlFree(strlen(mem), size);
val = RETVAL_STRINGL(mem, size, 1);
mem.len = size; xmlFree(mem);
RETVAL_STRINGL(mem, size, 1, mem);
if (mem) xmlFree(mem, size);
xmlFree(mem); /* XXX */
RETVAL_STRINGL(mem, size, 0, 0);
mem = RETVAL_StrINGL(mem, size, 1);
if (mem) xmlFree(mem); return 0;
retval = retval_string(mem, size, 1);
retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if (ret == NULL) xmlFree(mem);
mem = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if (n  0)  n = 0; return;
if (xmlFree(mem)) xmlFree(mem);
mem->getString(&mem, size, 1); xmlFree(mem);
RETVAL_STRINGL(mem, size, 1, 0); xmlFree(mem, 0);
if (mem!= NULL)  RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
mem->msg->size = msg->size; xmlFree(mem->msg);
retval_string(mem, size, 1); xmlFree(mem);
if (mem && mem->size == 0)  xmlFree(mem); return 0;
RETVAL_STRINGL(mem, size, mem_offset); xmlFree(mem_offset);
/* RETVAL_STRINGL(mem, size, 1); */ xmlFree(mem);
if (!XUL_EMPTY_SEPARATOR)  if (mem) xmlFree(mem); return;
mem->xml = xmlChar; xmlFree(mem->xml);
if ((ret = retval) &&!ret)  ret = retval;  /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0))  xmlFree(caddr); return ret;   xmlFree(caddr);
/* * XXX the doc, with the name is '0', it is an XML document. */ xmlFree(mem);
if (xmlChar_length == 0) xmlFree(xmlChar_length); else xmlFree(xmlChar_length);
XML_RETURN(mem, 0, size, 1);
mem = retval_string(mem, size, 1); xmlFree(mem);
mem.xmlChar = '0'; mem.xmlChar = '0';
RETVAL_STRINGL(mem, size, 1); xfree(mem);
RETVAL_STRINGL(mem, size, 0, PR_TRUE);
mem.remove(); mem.free();
RETVAL_STRINGL(mem, size, 0); xmlFree(mem, size);
mem->xmlChar = '0';
XMLElement *xml = xmlGetXMLFormElement(intern->document); if (xml) xmlFreeXML(xml);
RETVAL_STRINGL(mem, size, &mem->id);
mem->mem = XML_LENGTH(&mem->mem->mem->mem->size, 1); xmlFree(mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem->mem
mem->rcs.ts_string = mem;
if (!save)  if (mem) xmlFree(mem); return;   if (mem) xmlFree(mem);
if (!size)  xmlFree(mem); return;  /* * If we have to do the xml step in the * prefix. */
if (!is_cmp_string) xmlFree(mem);
if (xmlChar_HASH(mem) == 0)  retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);  else  retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
mem.m().size = 1; mem.m().length = 1; xmlFree(mem);
mem.advance(retval);
mem.mtx_flags |= TSRMLS_CC; /* * We should no more than one to remove mem, if we can see it here. */ XMLFree(mem);
if (!size)  if (mem) xmlFree(mem);
mem->mem_free = 0;
XMLElement* mem = xmlGetString(mem, size, 1);
RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if ((mem = retval) &&!mem)  xmlFree(mem);
mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
RETVAL_STRINGL(mem, size, '0'); xmlFree(mem);
if (retval!= 0)  /* XXX */ xmlFree(retval);
retval = RETVAL_STRINGL(mem, size, 1); if (mem) xmlFree(mem);
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull)  xmlFree(mem); return;  DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
mem.get().xmlChar = '0';
if (mem)  RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if (id == NULL)  /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL)  /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
xmlFree(mem, mem->formatoutput);
RETVAL_STRINGL(mem, size, 1); xfree(mem, size);
RETVAL_STRINGL(mem, size, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
mem->xmlChar = XML_STATIC_CAST(nsIXMLConverter*, mem); xmlFree(mem->xmlChar);
RETVAL_STRINGL(mem, size, 1); xmlFree(mem, 0);
mem.save_size = size; xmlFree(mem);
if (return!= 0)  ret = RETVAL_STRINGL(mem, size, 1); if (ret) xmlFree(mem); return ret;
XMLElement *mem = xmlDoc();
XML_PRECONDITION(retval, "bad retval"); if (retval == 0)  return;  xmlFree(retval);
mem->xmlChar = nsDependentString(mem); xmlFree(mem->xmlChar);
RETVAL_STRINGL(mem, size, 1, 0); xmlFree(mem, 0, 0);
if (retval)  retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
mem.cstr_oneuse();

mem.replace('0', '&0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('0', '<0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
<if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
<RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
<if (mem) xmlFree(mem); return;
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
if (return!= 0) &ret = RETVAL_STRINGL(mem, size, 1); if (ret) xmlFree(mem); return ret;
mem.replace('&0', '&0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('&0', '&0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('&0', '&0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!save) <if (mem) xmlFree(mem); return; &if (mem) xmlFree(mem);
mem.replace('<0', '&0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
mem->xmlChar = '&0';
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) <return; &xmlFree(retval);
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('<0', '&0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('&0', '<0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!size) &xmlFree(mem); return; &/* * If we have to do the xml step in the * prefix. */
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
&if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (!size) <xmlFree(mem); return; /* * If we have to do the xml step in the * prefix. */
mem.replace('0', '<0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('0', '0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!size) xmlFree(mem); return; /* * If we have to do the xml step in the * prefix. */
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) return; xmlFree(retval);
mem.replace('<0', '<0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (mem) xmlFree(mem); return;
mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
&if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
mem.replace('<0', '&0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
mem = mem; xmlFree(mem);
if (!mem) xmlFree(mem);
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
/* * XXX the doc, with the name is '0', it is an XML document. */ xmlFree(mem);
mem.replace('<0', '0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
<RETVAL_STRINGL(mem, size, 1);
if (!save) &if (mem) xmlFree(mem); return; &&if (mem) xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
mem.replace('<0', '<0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (mem && mem->size == 0) <xmlFree(mem); return 0;
if (n <0) &n = 0; return;
mem.replace('&0', '0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
xmlFree(mem);
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) &xmlFree(mem); return; <DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
mem.xmlChar = '&0'; mem.xmlChar = '<0';
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
if (retval!= 0) </* XXX */ xmlFree(retval);
&RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
mem.replace('&0', '<0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!size) xmlFree(mem); return; </* * If we have to do the xml step in the * prefix. */
mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('&0', '<0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.xmlChar = '0'; mem.xmlChar = '&0';
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
mem->xmlChar = '<0';
mem.replace('&0', '0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
<if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((mem = retval) &&!mem) &xmlFree(mem);
mem.replace('&0', '&0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (mem) xmlFree(mem);
mem.replace('0', '0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
&if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (!size) &if (mem) xmlFree(mem);
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
mem.replace('0', '<0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
if (n 0) <n = 0; return;
if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (n &0) <n = 0; return;
if (!save) if (mem) xmlFree(mem); return; if (mem) xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
mem.replace('<0', '&0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!save) <if (mem) xmlFree(mem); return; &<if (mem) xmlFree(mem);
<xmlFree(mem);
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
mem.replace('&0', '&0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) &return; xmlFree(retval);
if (mem && mem->size == 0) xmlFree(mem); return 0;
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
xfree(mem);
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
mem.replace('<0', '&0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!save) &if (mem) xmlFree(mem); return; <if (mem) xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
&RETVAL_STRINGL(mem, size, 1);
if (!save) if (mem) xmlFree(mem); return; &<if (mem) xmlFree(mem);
if (mem!= NULL) <RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
mem.replace('<0', '0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
<if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
/* * XXX the doc, with the name is '<0', it is an XML document. */ xmlFree(mem);
&if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (retval!= 0) /* XXX */ xmlFree(retval);
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
/* * XXX the doc, with the name is '&0', it is an XML document. */ xmlFree(mem);
mem.replace('<0', '0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
xmlFree(mem, size);
if (!size) <xmlFree(mem); return; &/* * If we have to do the xml step in the * prefix. */
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) <xmlFree(mem); return; &DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
<if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
mem.replace('&0', '&0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
&if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
mem.replace('<0', '<0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.xmlChar = '<0'; mem.xmlChar = '0';
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
mem.replace('&0', '<0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
mem.replace('<0', '<0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
<if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
mem.replace('<0', '<0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
<if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
if (return!= 0) <ret = RETVAL_STRINGL(mem, size, 1); if (ret) xmlFree(mem); return ret;
if (!size) xmlFree(mem); return; &/* * If we have to do the xml step in the * prefix. */
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) <return; xmlFree(retval);
mem.replace('0', '&0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.xmlChar = '<0'; mem.xmlChar = '&0';
if (retval) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if (!XUL_EMPTY_SEPARATOR) <if (mem) xmlFree(mem); return;
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
if (!size) &xmlFree(mem); return; /* * If we have to do the xml step in the * prefix. */
mem.replace('0', '0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (n &0) &n = 0; return;
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
mem.xmlChar = '&0'; mem.xmlChar = '0';
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) <xmlFree(mem); return; <DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
mem.get().xmlChar = '<0';
<if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
&if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((mem = retval) &&!mem) <xmlFree(mem);
if (mem) &RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (!size) &xmlFree(mem); return; </* * If we have to do the xml step in the * prefix. */
if (!save) &if (mem) xmlFree(mem); return; <&if (mem) xmlFree(mem);
&if (mem) xmlFree(mem);
&if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (!save) if (mem) xmlFree(mem); return; &if (mem) xmlFree(mem);
mem.get().xmlChar = '0';
if (!size) <xmlFree(mem); return; </* * If we have to do the xml step in the * prefix. */
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) &return; &xmlFree(retval);
&mem = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
if (retval) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
<xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) xmlFree(mem); return; <DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
mem = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if (!size) if (mem) xmlFree(mem);
mem.replace('<0', '0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
<mem = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (mem) RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
&if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
<if (mem) xmlFree(mem);
mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('<0', '0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!save) <if (mem) xmlFree(mem); return; <&if (mem) xmlFree(mem);
mem.replace('0', '<0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (!save) if (mem) xmlFree(mem); return; <<if (mem) xmlFree(mem);
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
mem.replace('<0', '0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('<0', '0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
RETVAL_STRINGL(mem, size, '0'); xmlFree(mem);
if (!XUL_EMPTY_SEPARATOR) &if (mem) xmlFree(mem); return;
if (mem) <xmlFree(mem);
mem.replace('0', '0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
if (!save) <if (mem) xmlFree(mem); return; <<if (mem) xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('&0', '0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (mem) <RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
&if (mem) xmlFree(mem); return;
if (!save) if (mem) xmlFree(mem); return; <&if (mem) xmlFree(mem);
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) <xmlFree(mem); return; DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if (!save) &if (mem) xmlFree(mem); return; &if (mem) xmlFree(mem);
mem.replace('0', '<0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('0', '0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('<0', '&0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) &xmlFree(mem); return; DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
<if (id == NULL) </* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) /* use the " " element of the XML property. */ xmlFree(id, mem); return id;
mem.replace('0', '&0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('0', '&0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((mem = retval) &&!mem) xmlFree(mem);
mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.xmlChar = '0'; mem.xmlChar = '0';
RETVAL_STRINGL(mem, size, 1);
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('0', '&0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
&xmlFree(mem);
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
mem->xmlChar = '0';
mem.replace('0', '&0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
if (!save) <if (mem) xmlFree(mem); return; &&if (mem) xmlFree(mem);
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) return; <xmlFree(retval);
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
if (!XUL_EMPTY_SEPARATOR) if (mem) xmlFree(mem); return;
mem.replace('0', '0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('<0', '<0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
mem.replace('<0', '&0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
if (n <0) <n = 0; return;
RETVAL_STRINGL(mem, size, '<0'); xmlFree(mem);
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (id == NULL) &/* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) </* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
if (n 0) &n = 0; return;
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
mem.replace('<0', '<0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
if (n 0) n = 0; return;
if (!save) if (mem) xmlFree(mem); return; <if (mem) xmlFree(mem);
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('&0', '0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
if ((ret = retval) &&!ret) ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; &xmlFree(caddr);
if (retval) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
mem.replace('0', '&0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.get().xmlChar = '&0';
mem.replace('&0', '<0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('&0', '&0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (xmlChar_HASH(mem) == 0) &retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (mem) &xmlFree(mem);
mem.replace('&0', '0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('&0', '&0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) xmlFree(mem); return; &DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
<if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) &xmlFree(mem); return; &DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
if (!save) <if (mem) xmlFree(mem); return; if (mem) xmlFree(mem);
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if (!save) &if (mem) xmlFree(mem); return; if (mem) xmlFree(mem);
if (!save) if (mem) xmlFree(mem); return; &&if (mem) xmlFree(mem);
&xmlFree(mem);
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
mem.replace('&0', '<0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
if (retval!= 0) &/* XXX */ xmlFree(retval);
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('0', '0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.xmlChar = '&0'; mem.xmlChar = '&0';
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); <else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
&if (mem) xmlFree(mem);
if (mem!= NULL) &RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
mem.replace('&0', '<0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('&0', '<0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (return!= 0) ret = RETVAL_STRINGL(mem, size, 1); if (ret) xmlFree(mem); return ret;
mem.replace('0', '<0'); mem.replace('<0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
XML_ASSERT(mem!= nsnull, ("null mem")); if (mem!= nsnull) xmlFree(mem); return; DOM_GET_OBJ(docp, id, xmlDocPtr, intern); if (ZERBXML_VERSION >= 20623 doc_props = dom_get_doc_props(intern->document); format = doc_props->formatoutput; htmlDocDumpMemoryFormat(docp, &mem, &size, format); htmlDocDumpMemory(docp, &mem, &size); xmlFree(mem);
if (!save) &if (mem) xmlFree(mem); return; &<if (mem) xmlFree(mem);
if (!size) <if (mem) xmlFree(mem);
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) <return; <xmlFree(retval);
if ((ret = retval) &&!ret) &ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
if ((ret = retval) &&!ret) &ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
if (mem) xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
mem.replace('&0', '0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('0', '<0'); mem.replace('&0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; <xmlFree(caddr);
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
<if (mem) xmlFree(mem);
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) return; &xmlFree(retval);
RETVAL_STRINGL(mem, size, '&0'); xmlFree(mem);
mem.replace('0', '<0'); mem.replace('0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
XML_PRECONDITION(retval, "bad retval"); if (retval == 0) &return; <xmlFree(retval);
mem.xmlChar = '<0'; mem.xmlChar = '<0';
mem.xmlChar = '0'; mem.xmlChar = '<0';
mem.replace('&0', '0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('<0', '0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if (!save) &if (mem) xmlFree(mem); return; <<if (mem) xmlFree(mem);
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else <retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; &xmlFree(caddr);
if (n &0) n = 0; return;
if (xmlChar_HASH(mem) == 0) <retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); &else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
&if (id == NULL) /* * do not make this a string, because the user cannot use the "" option to use '"'. */ if (id == NULL) &/* use the " " element of the XML property. */ xmlFree(id, mem); return id;
if ((ret = retval) &&!ret) <ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
if (n <0) n = 0; return;
mem.replace('&0', '0'); mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('&0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; xmlFree(caddr);
if (xmlChar_HASH(mem) == 0) retval = RETVAL_STRINGL(mem, size, 1); xmlFree(mem); else &retval = xmlChar_HASH_FOR_HASH_NAME(mem); xmlFree(mem);
if ((ret = retval) &&!ret) <ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; <xmlFree(caddr);
if ((ret = retval) &&!ret) <ret = retval; /* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
if (!save) <if (mem) xmlFree(mem); return; <if (mem) xmlFree(mem);
xmlFree(mem);
if ((ret = retval) &&!ret) ret = retval; </* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) <xmlFree(caddr); return ret; <xmlFree(caddr);
if (mem!= NULL) RETVAL_STRINGL(mem, size, 1); xmlFree(mem);
mem.replace('0', '&0'); mem.replace('<0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) xmlFree(caddr); return ret; xmlFree(caddr);
mem.replace('<0', '<0'); mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('0', '0'); mem.replace('<0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('<0', '&0'); mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('0', '&0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
mem.replace('&0', '<0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); mem.replace('0', '0'); xmlFree(mem.replace('0', '0'));
if ((ret = retval) &&!ret) &ret = retval; &/* XXX */ if ((caddr = retval->m_flags) && (caddr == 0)) &xmlFree(caddr); return ret; &xmlFree(caddr);
if (mem && mem->size == 0) &xmlFree(mem); return 0;
