golden:
RETVAL_STRINGL((const char*) mem, size, 1);
inference:
RETVAL_STRINGL(mem, size);
RETVAL_STRINGL(mem, size, 0);
mem = RETVAL_STRINGL(mem, size, 1);

RETVAL_STRINGL(mem, size, 0, 0);
RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 1, 0);
retval_string(mem, size, 1);
mem = RETVAL_STRINGL(size, 1);
RETVAL_STRINGL(mem, size, 2);
RETVAL_STRINGL(mem, 0, size, 1);
RETVAL_STRINGL(mem, size, '0');
RETVAL_STRINGL(mem, 1);
RETVAL_STRINGL(mem, size-1, 1);
RETVAL_STRINGL(mem, size, 0, size);
RETVAL_STRINGL(mem);
RETVAL_STRINGL(mem, size - 1, 1);
RETVAL_STRINGL(mem, size, -1);
RETVAL_STRINGL(mem, sizeof(mem), 1);
RETVAL_STRINGL(mem, mem_size, 1);
RETVAL_STRINGL(mem, size, len);
RETVAL_STRINGL(mem, size_t, 1);
RETVAL_STRINGL (mem, size, 1);
RETVAL_STRINGL(mem, size, 0, 1);
RETVAL_STRINGL(mem, size, size);
RETVAL_STRINGL(mem, &size, 1);
RETVAL_STRINGL(mem, size, NULL);
RETVAL_STRINGL(mem, size, 0, NULL);
RETVAL_STRINGL(mem, 0);
RETVAL_STRINGL(mem, size, 2, 0);
return RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, 0, size);
RETVAL_STRINGL(mem, size, 1, 1);
RETVAL_STRINGL(mem, size, 1, NULL);
RETURN_STRINGL(mem, size, 1);
RETVAL_STRINGL((char *)mem, size, 1);
RETVAL_STRINGL(mem, size + 1, 1);
RETVAL_STRINGL(&mem, size, 1);
(void) RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, memlen);
RETVAL_STRINGL(mem, 1, size);
RETVAL_STRINGL(mem, size, 0, 0, 0);
RETVAL_STRINGL(mem, size-1);
RETVAL_STRINGL(mem, size, str);
RETVAL_INT32(mem, size, 1);
RETVAL_STRINGL(mem, strlen(size), 1);
RETVAL_STRINGL(mem, memsize, 1);
RETVAL_STRINGL(mem, size - 1);
RETVAL_STRINGL(mem, len, 1);
RETVAL_STRINGL(mem, size, 4);
RTVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem.get(), size, 1);
RETVAL_STRINGL(mem, size, 0, -1);
RETVAL_STRINGL(mem, size, 32);
RETVAL_STRINGL(mem, memlen, 1);
RETVAL_STRINGL(mem, size, 1, PR_TRUE);
RETVAL_STRINGL(mem, size, 1, size);
RETVAL_STRINGL(mem, size, true);
RETVAL_CSTRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, FALSE);
RETVAL_STRINGL(mem, mem, size, 1);
RETVAL_STRINGL(mem, size+1, 1);
RETVAL_STRINGL(mem, size_t);
RETVAL_STRINGL(mem, size, format);
RETVAL_STRINGL(mem, size, 1, 0, 0);
RETVAL_STRINGL(mem, size, PR_TRUE);
mem = RETVAL_STRINGL(mem, size);
RETVAL_STRINGL(mem, size, 1.);
RETVAL_STRINGL(mem, size;
RETVAL_STRINGL(mem, size, mem);
RETVAL_STRINGL(m, size, 1);
RETVAL_STRINGL(mem, size, type);
RETVAL_STRINGL(mem, size, meml);
RETVAL_STRINGL(mem, size, ret);
RETVAL_STRINGL(mem, size, 8);
RETVAL_STRINGL(mem, size, p);
RETVAL_STRINGL(mem, -1, size, 1);
RETVAL_STRINGL(mem, (int)size, 1);
RETVAL_STRINGL(mem, size, 16);
RETVAL_STRINGL(mem, size, size_t);
RETVAL_STRINGL(mem, size, 1, "");
RETVAL_STRINGL(mem, size, "");
RETVAL_STRINGL(mem, size, 100);
RETVAL_STRINGL(mem, len, size, 1);
RETVAL_StrINGL(mem, size);
RETVAL_STRINGL(mem, size, 1, -1);
(void)RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, l);
RETVAL_STRINGL(mem, size, True);
RETVAL_STRINGL(mem, size, 0, flags);
RETVAL_STRING(mem, size);
RETVAL_STRINGL(mem, size, 0, len);
RETVAL_STRINGL(mem, size, encoding);
RETVAL_STRINGL(mem, size, TRUE);
RETVAL_STRINGL((int)mem, size, 1);
RETVAL_STRINGL(mem, size, 2, 1);
RETVAL_STRINGL(mem, size, PR_FALSE);
RETVAL_STRINGL(size, 1);
RETVAL_STRINGL(mem, size, 0, memlen);
mem = retval_string(mem, size, 1);
RETVAL_STRINGL(mem, size, (int)1);
RETVAL_STRINGL(mem, size, retval);
RETVAL_STRINGL(*mem, size, 1);
RETVAL_STRINGL(mem, size, 3);
RETVAL_STRINGL(mem, size, 1 - 1);
RETVAL_STRINGL(mem, size, m);
RETVAL_STRINGL(mem, size, 1 + size);
RETVAL_STRINGL();
RETVAL_STRINGL(mem, size, file_len);
RETVAL_STRINGL(id, size, 1);
RETVAL_STRINGL(mem, size, mem_len);
RETVAL_STRINGL(mem, size, 1); return 0;
RETVAL_STRINGL(mem, mem_len, 1);
_RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, nsize, 1);
RETVAL_STRINGL(mem, size, u);
RETVAL_STRINGL(mym, size, 1);
PZ_RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, size, 1);
__RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 0, "");
RETVAL_STRINGL(mem, -1, 1);
RETVAL_STRINGL(mem, size, 0, PR_TRUE);
RETVAL_STRINGL(mem, size));
RETVAL_STRINGL("%s", mem, size, 1);
RETVAL_STRINGL(mem, size, n);
RETVAL_STRINGL(mem, size.get(), 1);
RETVAL_STRINGL(mem, size, flags);
RETVAL_STRINGL(mem, size, 1, len);
RETVAL_STRINGL(mem, 1, 0);
RETVAL_STRINGL(mem, size, 1); #endif
RETVAL_STRINGL(mem, size, NULL, 1);
RETVAL_STRINGL(mem, size, ZERO);
RETVAL_STATIC_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, &size);
RETVAL_STRINGL(mem, size, 1 + 1);
RETVAL_STRINGL(mem, size, url);
RETVAL_STRINGL(mem, size * size, 1);
RETVAL_STRINGL(mem, size, mem_size);
HT_RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size,'');
RETVAL_STRINGL(mem, mem_size, 1, 1);
ret = RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, buf);
RETVAL_STRINGL(mem, size, M_SIZE);
RETVAL_STRINGL(mem, size, ch);
RETVAL_STRINGL(mem, size, 0, size, 1);
RETVAL_STRINGL(mem, size, htonl);
RETVAL_STRINGL(mem, size, i);
RETVAL_STRINGL(mem, size, unsigned long);
RETVAL_STRINGL(mem, size, s);
RETVAL_STRINGL(mem, size, 1, mem);
res = RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 1, 1, 0);
RETVAL_STRINGL(mem, size, &mem);
RETVAL_STRINGL(mem, size, len, 1);
RETVAL_STRINGL(mem, size, 1, meml);
RETVAL_STRINGL("");
RETVAL_STRINGL(mem, size, &file);
RETVAL_STRINGL(mem, size, "%s", 1);
mem = RETVAL_STRINGL(mem, size, 0);
RETVAL_STRINGL(mem, size, (int)0);
RETVAL_STRINGL(mem, memsize, size, 1);
RETVAL_STRINGL(mem, size, unsigned int);
rv = RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, NULL, 0);
RETVAL_STRINGL(mem, size, unsigned char);
RETVAL_STRINGL(mem, size, 0, mem);
RETVAL_STRINGL(mem, size, 0, 0, 0, 0);
RETVAL_STRINGL(mem, size, 1, memlen);
RETVAL_STRINGL(mem, mem_size, size);
RETVAL_STRINGL(mem, memlen, 1, 1);
RETVAL_STRINGL(mem, size, 0, size, 0);
RETVAL_STRINGL(mem, size, id);
RETVAL_STRINGL(mem, size, 'n');
RETVAL_STRINGL(mem, size, (char *)1);
RETVAL_STRINGL(mem, size, 0, mem_size);
RETVAL_STRINGL(mem, size, 0, meml);
RETVAL_STRINGL(mem, size, &ret);
RETVAL_STRINGL(mem, size, 0, buf);
mem += size;
RETVAL_STRINGL(mem, size, 0, ret);
retval(mem, size, 1);
RETVAL_STRINGL(mem, size, 0, sizeof mem);
RETVAL_STRINGL(mem, sizeof(mem));
RETVAL_STRINGL(mem, &size, 1, 0);
RETVAL_STRINGL(mem, size, mem_offset);
RETVAL_STRINGL(mem, size, 0xff);
RETVAL_STRINGL(mem, size, 0, sizeof(mem), &num, 1);
RETVAL_STRINGL(mem, size, 1); /* * XXX FIXME: XXX FIXME: XXX FIXME: XXX FIXME: XXX */
RETVAL_STRINGL(mem, size, strlen(size));
RETVAL_STRINGL(mem, size, 1, u);
RETVAL_STRINGL(mem, size, 0, "%s", mem, mem_offset);
RETVAL_STRINGL(mem, size, 0, 0, NULL);
RETVAL_STRINGL(mem, size, 2, sizeof(mem));
RETVAL_STRINGL(mem, size, 1, &bytes);
RETVAL_STRINGL(mem, size, 1, p);
RETVAL_STRINGL(mem, size, sizeof(mem));
RETVAL_STRINGL(mem, size, 1, mem_offset);
RETVAL_STRINGL(mem, size, mem->num_short, 1);
RETVAL_STRINGL(mem, size, id, p, n);
RETVAL_STRINGL(mem, size, 1, &err);
RETVAL_STRINGL(mem, size, 1);  else  if (__flags & TSRMLS_DEBUG)  fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1, PR_FALSE);
RETVAL_STRINGL(mem, size, 1); /* * We should not try to set an inline feature, if it is not possible, then use the '/' interface. */
RETVAL_STRINGL(mem, size, mem->len, mem->size, mem->len);
RETVAL_STRINGL(mem, size, 0, sizeof(mem));
RETVAL_STRINGL(mem, size, &file, &file_len);
RETVAL_STRINGL(mem, size, sizeof(mem), 0);
RETVAL_STRINGL(mem, size, sizeof(mem), 1);
RETVAL_STRINGL(mem, size, 1, sizeof(mem));
RETVAL_STRINGL(mem, size, 1, '0');
RETVAL_STRINGL(mem, size, mem->max_bytes);
RETVAL_STRINGL(mem, size, 1); /* * The path must be used for the * file. */ ret = stdout;
RETVAL_STRINGL(mem, size, &retval);
RETVAL_STRINGL(mem, size, m_c);
RETVAL_STRINGL(mem, size, mem_offset, 1);
RETVAL_STRINGL(mem, size, 0, mem->size);
RETVAL_STRINGL(mem, size, 0, 0, 0, 1);
RETVAL_STRINGL(mem, size, 1);  else  nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, sizeof(mem), sizeof(mem), 1);
RETVAL_STRINGL(mem, size, &mem->cstrlen);
RETVAL_STRINGL(mem, size, 1, "%s", mem);
RETVAL_STRINGL(mem, size, 2, m_in_cnt);
RETVAL_STRINGL(mem, size, strlen(mem)-1);
RETVAL_STRINGL(mem, size, mem_format);
RETVAL_STRINGL(mem, size, m_size);
RETVAL_STRINGL(mem, size, 1, &ch);
RETVAL_STRINGL(mem, size, xp, s);
RETVAL_STRINGL(mem, size, memlen, 0);
RETVAL_STRINGL(mem, size, 1); else if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else &nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size);
RETVAL_STRINGL(mem, size, '&n');
RETVAL_STRINGL(mem, size, 1); else <nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, '<n');
RETVAL_STRINGL(mem, size, 1); else if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); else nsCRT::free(mem); return 0;
&RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, '<0');
RETVAL_STRINGL(mem, size, 1); <else nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, 1); else &if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else <nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, 1); else &if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 1, '&0');
&RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, '0');
RETVAL_STRINGL(mem, size, 1); <else &if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); <else &if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); else &if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); <else &if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); <else if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); <else <nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, 1); else <if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1, '0');
RETVAL_STRINGL(mem, size, 1); &else nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, '&0');
RETVAL_STRINGL(mem, size, 1); <else if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else <if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); <else <if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); else <if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else <if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
<RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 1); &else &if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); else <if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); <else if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
<RETVAL_STRINGL(mem, size, 1);
RETVAL_STRINGL(mem, size, 1); <else <if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); else if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else <if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); <else <if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else &if (__flags & TSRMLS_DEBUG) <fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1); &else &if (__flags & TSRMLS_DEBUG) &fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 1, '<0');
RETVAL_STRINGL(mem, size, 'n');
RETVAL_STRINGL(mem, size, 1); <else &nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, 1); else &nsCRT::free(mem); return 0;
RETVAL_STRINGL(mem, size, 1); &else if (__flags & TSRMLS_DEBUG) fprintf(stderr, "WARNING: %s is no longer a valid ptr");
RETVAL_STRINGL(mem, size, 0);
