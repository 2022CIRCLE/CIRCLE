golden:
php_error_docref(NULL TSRMLS_CC, E_WARNING, "Error dumping HTML node"); RETVAL_FALSE;
inference:
RETVAL_STRING(mem, 0);
RETVAL_STRING(mem);

mem = RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, '0');
retval_string(mem, 1);
RETVAL_STRING(mem, NULL);
RETVAL_STRING(mem, 0, 0);
mem = RETVAL_STRING(mem);
RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, 2);
RETVAL_STRING(mem, "");
RETVAL_STRING(mem, -1);
RETVAL_STRING(mem, 1, 0);
RETVAL_STRING((char *)mem, 1);
RETVAL_STRING(mem, sizeof mem);
return RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, 0, sizeof mem);
RETVAL_STRING(&mem, 1);
RETVAL_STRING(mem.get(), 1);
RETVAL_STRING(mem, len);
RETVAL_STRING(mem, PR_TRUE);
(void) RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, 0, 1);
RETVAL_STRING(mem, FALSE);
RETVAL_STRING(mem, 0, NULL);
RETURN_STRING(mem, 1);
RETVAL_STRING(mem, 1, "");
ret = RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, sizeofmem);
RETVAL_STRING(mem, 1, NULL);
RETVAL_STRING(mem, ret);
RETVAL_STRING(mem, encoding);
RETVAL_STRING(mem, 2, 0);
RETVAL_STRING("");
RETVAL_STRING(mem, 4);
RETVAL_STRING(mem, PR_FALSE);
RETVAL_STRING(mem, TRUE);
RETVAL_STRING(mem, True);
RTVAL_STRING(mem, 1);
RETVAL_CSTRING(mem, 1);
mem = mem;
RETVAL_STRING(mem, retval);
RETVAL_STRING (mem, 1);
RETVAL_STRING(m, 1);
RETVAL_INT32(mem, 1);
RETVAL_STRING(mem, format);
RETVAL_STRING((int)mem, 1);
RETVAL_STRING(mem, 1.);
RETVAL_STRING(mem, true);
RETVAL_STRING(mem, NULL, 1);
RETVAL_STRING(mem, 0, sizeofmem);
retval = mem;
RETVAL_STRING("%s", mem, 1);
RETVAL_STRING(mem, 1, 1);
RETVAL_STRING(mem, name);
RETVAL_STRING(mem, 0, -1);
mem = RETVAL_STRING(mem, 0);
GET_STRING(mem, 1);
RETVAL_STRING(*mem, 1);
RETVAL_STRING(mem, "UTF-8");
RETVAL_STRING(mem, 0, "");
RETVAL_STRING(mem, memlen);
RETVAL_STRING(mem, 8);
RETVAL_STRING(mem, file_len);
RETVAL_STRING(mem,'');
RETVAL_STRING(*mem);
RETVAL_STRING(mem, 32);
RETVAL_STRING(mem, &ret);
RETVAL_STRING(mem, ch);
RETVAL_STRING(mem, &mem);
RETVAL_STRING(mem, 'n');
RETVAL_STRING(mem, 0, 0, 0);
mem = 1;
RETVAL_STRING(mem, """);
RETVAL_STRING(mem, u);
RETVAL_STRING(mem, NULL, 0);
RETVAL_STRING(mem, url);
RETVAL_STRING(retval, 1);
RETVAL_STRING(mem, 16);
RETVAL_STRING((char*)mem, 1);
RETVAL_STRING();
RETVAL_STRING(mem, 3);
RETVAL_STRING(mem, 0, memlen);
RETVAL_STRING(mem, "0");
RETVAL_STRING(mem, meml);
RETVAL_INT(mem, 1);
RETVAL_STRING((void *)mem, 1);
RETVAL_STRING(mem, &file);
RETVAL_STRING(memp, 1);
RETVAL_STRING(mem, p);
RETVAL_STRING((char **)mem, 1);
__RETVAL_STRING(mem, 1);
HT_RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, '.');
RETVAL_STRING(mem, 0, len);
(void)RETVAL_STRING(mem, 1);
PZ_RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, l);
RETVAL_STRING("%s", mem);
mem += 1;
res = RETVAL_STRING(mem, 1);
mem = retval_string(mem, 1);
RETVAL_STRING(&mem);
RETVAL_STRING(mem, 10);
RETVAL_STRING(mem, 1); return 0;
RETVAL_STRING(mem, "", 1);
RETVAL_STRING(mem, param);
RETVAL_STRING("%s",mem);
RETVAL_STRING(mem, id);
RETVAL_STRING(mem, rv);
RETVAL_STRING(cp, 1);
RETVAL_STRING(mem, htonl);
RETVAL_STRING( mem, 1 );
RETVAL_STRING(mem, 1, sizeof mem);
RETVAL_STRING(mem, m);
_RETVAL_STRING(mem, 1);
RETVAL_STRING(name, 1);
RETVAL_STRING("%s",mem, 1);
RETVAL_STRING(tmp, 1);
RETVAL_STRING(mem, 0xff);
RETVAL_StrING(mem, 0);
RETVAL_StrING(mem);
RETVAL_STRING(mem, 1 + 1);
RETVAL_STRING(mem, "%s", 1);
RETVAL_STRING(mem, &retval);
RETVAL_STRING(mem, 1, PR_TRUE);
RETVAL_STRING(mem, &len);
RETVAL_STRING(mem, mem);
RETVAL_STRING('0', 1);
RETVAL_STRING(mem, "n");
RETVAL_STRING(mem, type);
RETVAL_STRING(mem->name, 1);
RETVAL_STRING(mem, ';');
RETVAL_STRING(mem, "1");
RETVAL_STRING(mem, flags);
SET_STRING(mem, 1);
RETVAL_STRING(__func__, 1);
RETVAL_STRING(mem, 1, -1);
RETURN_FALSE;
RESULT RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, (int)1);
RETVAL_STRING(mem, &string);
RETVAL_STRING(mem, 1); #endif
rv = RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, 0, PR_TRUE);
RETVAL_STRING(mem->mem, 1);
RETVAL_STRING(mem, 0, mem);
RETVAL_STRING(0);
RETVAL_STRING(mem, NULL, NULL);
RETVAL_STRING(mem, "%s");
mem++;
RETVAL_STRING(mem, &format);
RETVAL_STRING(mem, (char *)1);
RETVAL_STRING(mem, 1, 0, 0);
*mem = RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, 0, meml);
*mem = RETVAL_STRING(mem);
mem->string = 1;
RETVAL_STRING(mem, tmp);
RETVAL_STRING(mem, MAX_STRING);
mem.Truncate();
retval = RETVAL_STRING(mem);
RETVAL_STRING(1);
RETVAL_STRING(mem, '');
RETVAL_STRING(mem, charset);
RETVAL_STRING(mem, err);
RETVAL_STRING(mem, 0x1f);
return retval;
RETVAL_STRING(mem, mem_len);
RETVAL_STRING(mem, 1, "n");
RETVAL_STRING(m);
mem = RETVAL_STRING(mem, -1);
RETVAL_STRING(mem, 0, ret);
mem = RETVAL_STRING(mem, 2);
RETVAL_STRING(mem, 2, sizeof mem);
RETVAL_STRING(mem, 0, mem_size);
mem.append(mem);
mem->string = RETVAL_STRING(mem);
RETVAL_STRING(mem, (char *) 1);
RETVAL_STRING(mem, 1, """);
RETVAL_STRING(mem, 1, "0");
RETVAL_STRING(mem, encoding, 1);
RETVAL_STRING(mem, ptr);
RETVAL_STRING(mem, M_STRING);
RETVAL_STRING(mem, (int)0);
retval = 1;
RETVAL_STRING(mem, 0, retval);
mem->string = mem;
mem->retval = 1;
RETVAL_STRING(mem, 0, n);
RETVAL_STRING(mem, NS_GET_IID(nsIDOMNode), 1);
RETVAL_STRING(mem, 1, "%s", errno);
RETVAL_STRING(mem, 0, mem_len);
RETVAL_STRING(mem, 1, "", 1);
RETVAL_STRING(mem, &cmd);
mem->prop = mem;
mem.strdup("n");
RETVAL_STRING(mem, sizeof(mem));
RETVAL_STRING(mem, M_STRING_STRING(""), 1);
RETVAL_STRING(mem, "")
RETVAL_STRING(mem, sizeof(mem), 1);
RETVAL_STRING(mem, &blk_class);
RETVAL_STRING(mem, 0, sizeof(mem), 1);
RETVAL_STRING(mem, 1);  else  return;
RETVAL_STRING(mem, M_IN_ARGS);
RETVAL_STRING(mem, 0, sizeof(mem));
RETVAL_STRING(mem, msg);
RETVAL_STRING(mem, 1, &file_len);
RETVAL_STRING(mem, nsnull);
RETVAL_STRING(mem, 1, NS_STATIC_CAST(char *, '0'));
RETVAL_STRING(mem, NULL, NULL, 1);
RETVAL_STRING(mem, "%s", mem->filename);
RETVAL_STRING(mem, &num);
mem->retval = RETVAL_STRING(mem, 1);
mem.replaceWithConversion(mem, '0'); RETVAL_STRING(mem, 1, 1);
RETVAL_STRING(mem, "#");
RETVAL_STRING(mem, &mem->td_mem);
mem->tmp_length = 1;
RETVAL_STRING(mem, 1, &mem->ab);
mem->td_u.td_uname.len = RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, "%s", mem);
RETVAL_STRING(mem, 0, sizeof(mem), '0');
RETVAL_STRING(mem, M_DEFAULT_STRING);
RETVAL_STRING(mem, M_LINE);
RETVAL_STRING(mem, 1, """));
RETVAL_STRING(mem, &char);
mem.tql_length = 1; RETVAL_STRING(mem, mem.tql);
RETVAL_STRING(mem, nsCRT::strlen(mem));
RETVAL_STRING(mem, &err);
RETVAL_STRING(mem, &mem->size);
mem->save_html_file = &mem;
RETVAL_STRING(mem, 0, "", &url);
mem = mem.rstrdup(mem);
RETVAL_STRING(mem, &maxptr);
RETVAL_STRING(mem, 1, ".");
mem->string_fix = 0; retval = RETVAL_STRING(mem, 1);
mem->value = 1;
RETVAL_STRING(mem, 0, id);
RETVAL_STRING(mem, M_TEMPLATE_NAMESPACE);
RETVAL_STRING(mem, 1, "%s", mem);
RETVAL_STRING(mem, 1 + sizeof(mem));
RETVAL_STRING(mem, nsCRT::strdup(mem));
RETVAL_STRING(mem, &max_url);
RETVAL_STRING(mem, 0, mem->file_size);
RETVAL_STRING(mem, 0, mem_long);
RETVAL_STRING(mem, "--");
RETVAL_STRING(mem, 1); /* Is the URL on the filename? */ if (id == 0)  /* No pointer for mem or htmlSaveFileFormat. */
RETVAL_STRING(mem, "%s", __username);
RETVAL_STRING(mem, 1, retry);
RETVAL_STRING(mem, 1, "%s", __func__);
RETVAL_STRING(mem, charstr);
RETVAL_STRING(mem, M_CONST_STRING("%s", m_document));
RETVAL_STRING(mem, 1);  else  np = 0;
RETVAL_STRING(mem, "U");
RETVAL_STRING(mem, href);
RETVAL_STRING(mem, 1, &len);
RETVAL_STRING(mem, "n");
RETVAL_STRING(mem, 1); <else &np = 0;
mem.strdup("n");
&RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, '&n');
RETVAL_STRING(mem, "&0");
RETVAL_STRING(mem, "&n");
RETVAL_STRING(mem, "<0");
RETVAL_STRING(mem, 1); <else np = 0;
RETVAL_STRING(mem, 1); /* Is the URL on the filename? */ if (id == 0) </* No pointer for mem or htmlSaveFileFormat. */
RETVAL_STRING(mem, 0);
RETVAL_STRING(mem, 1, """));
RETVAL_STRING(mem, 1); &else <return;
mem.strdup("&n");
RETVAL_STRING(mem, """);
RETVAL_STRING(mem, 0, sizeof(mem), '&0');
RETVAL_STRING(mem, 1); else <return;
RETVAL_STRING(mem, 1); <else <return;
RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, 1); <else &return;
RETVAL_STRING(mem, 1, "<"");
RETVAL_STRING(mem, '<n');
RETVAL_STRING(mem, 1); &else return;
mem.replaceWithConversion(mem, '0'); RETVAL_STRING(mem, 1, 1);
RETVAL_STRING(mem, 1); &else np = 0;
mem = RETVAL_STRING(mem);
RETVAL_STRING(mem, 1, "0");
RETVAL_STRING(mem, 1, "&n");
RETVAL_STRING(mem, 1, NS_STATIC_CAST(char *, '<0'));
RETVAL_STRING(mem, 1, "&""));
RETVAL_STRING(mem, 1, "&0");
&RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, 0, sizeof(mem), '<0');
RETVAL_STRING(mem, 1); <else <np = 0;
RETVAL_STRING(mem, 1); &else &return;
RETVAL_STRING(mem, 1); else np = 0;
RETVAL_STRING(mem, 1, NS_STATIC_CAST(char *, '&0'));
RETVAL_STRING(mem, "&"");
RETVAL_STRING(mem, 1, "<n");
RETVAL_STRING(mem, 1); /* Is the URL on the filename? */ if (id == 0) &/* No pointer for mem or htmlSaveFileFormat. */
RETVAL_STRING(mem, 0, sizeof(mem), '0');
RETVAL_STRING(mem, '&0');
RETVAL_STRING(mem, 1); <else return;
RETVAL_STRING(mem, 1, NS_STATIC_CAST(char *, '0'));
RETVAL_STRING(mem, 1); &else <np = 0;
RETVAL_STRING(mem, '0');
<RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, "<"");
RETVAL_STRING(mem, 'n');
RETVAL_STRING(mem, 1); else return;
RETVAL_STRING(mem, 1); else &np = 0;
mem.replaceWithConversion(mem, '<0'); RETVAL_STRING(mem, 1, 1);
RETVAL_STRING(mem, 1, """);
RETVAL_STRING(mem, "0");
RETVAL_STRING(mem, "<n");
RETVAL_STRING(mem, 1); /* Is the URL on the filename? */ if (id == 0) /* No pointer for mem or htmlSaveFileFormat. */
RETVAL_STRING(mem, '');
RETVAL_STRING(mem, 1, "n");
RETVAL_STRING(mem, 1); &else &np = 0;
RETVAL_STRING(mem, 1, "&"");
RETVAL_STRING(mem, '<0');
RETVAL_STRING(mem, 1, "<""));
mem.replaceWithConversion(mem, '&0'); RETVAL_STRING(mem, 1, 1);
mem.strdup("<n");
RETVAL_STRING(mem, 1, "<0");
RETVAL_STRING(mem, 1);
RETVAL_STRING('0', 1);
RETVAL_STRING(mem, 1); else <np = 0;
RETVAL_STRING(mem, '&');
RETVAL_STRING(mem);
RETVAL_STRING(mem, 1); else &return;
RETVAL_STRING('<0', 1);
<RETVAL_STRING(mem, 1);
RETVAL_STRING(mem, '<');
RETVAL_STRING('&0', 1);
