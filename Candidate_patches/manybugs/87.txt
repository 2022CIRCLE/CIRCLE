golden:
for (p=0; p < tif->tif_dir.td_nsubifd; p++)
inference:
for (p=0; pdir; p++)
for (p=0; p  tif->tif_dir.td_nsubifd; p++)
for (p=0; pdir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++)
for (i=0; itif->tif_dir.td_nsubifd; i++)
for (p=0; pdir->tif_dir.td_nsubifd; p++)
for (p=0; p(tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_subifd; p++)
for (p=0; p=tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; ++p)
for (p=0; (ptif->tif_dir.td_nsubifd); p++)
for (p=0; pnsubifd; p++)
for (p=0; pdir->td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd)
for (p=0; pp->tif_dir.td_nsubifd; p++)
for (p=0; pndir; p++)
for (p=0; ptif->tif_dir.td_nsubifd++)
for (p=0; ptif->tif_dir.td_nsubifd+1; p++)
for (p=0; (ptif->tif_dir.td_nsubifd; p++))
for(p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd, p++)
for (p=1; ptif->tif_dir.td_nsubifd; p++)
for (p=0; pn; p++)
for (p=0; ptif->tif_dir.td_nsubifd;)
for (p=0; p0; p++)
for (p=0; *ptif->tif_dir.td_nsubifd; p++)
for (p=0; pdir_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd && p++)
for (p = 0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; pm->tif_dir.td_nsubifd; p++)
for (p = 0, p  tif->tif_dir.td_nsubifd; p++)
for (p=0; pp; p++)
for (p=0; pNULL; p++)
for (p=0; ptif->tif_dir.nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd-1; p++)
for (p=0; ptif->tif_dir.td_nsubifd + 1; p++)
for (P=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p(tif->tif_dir.td_nsubifd+1); p++)
while (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; pndir->tif_dir.td_nsubifd; p++)
for (p=0; p tif->tif_dir.td_nsubifd; p++)
for (p=NULL; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p  (tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd,p++)
for (p=0; ptif->tif_dir.d_nsubifd; p++)
while (p=0; ptif->tif_dir.td_nsubifd)
for (p=0; ptif->tif_dir.td_subifd; ++p)
for (p=-1; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p(tif->tif_dir.td_nsubifd; p++))
for (p=0; p  tif->tif_dir.td_subifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; i++)
for (p=0; pdir,p++)
for (p=0; ptif->tif_dataoff.td_nsubifd; p++)
for (p=0; p&p->tif_dir.td_nsubifd; p++)
for (p=0; p%s; p++)
for (p=0; ptif->tif_dir.td_nsubifd; *p++)
for (p=0; p&(tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_data.td_nsubifd; p++)
for (p=%d; ptif->tif_dir.td_nsubifd; p++)
for (p=0; (*p)tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd); p++)
for (p=0; ptf->tif_dir.td_nsubifd; p++)
for (p=0; ppa->tif_dir.td_nsubifd; p++)
for (p=0; p$tif->tif_dir.td_nsubifd; p++)
for (p=0; pndir.td_nsubifd; p++)
for (p=0; ptif->tif_dir->td_nsubifd; p++)
for (p=0; p/*tif->tif_dir.td_nsubifd; p++)
for (p=0; pnp->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd--; p++)
for (p=0; pth->tif_dir.td_nsubifd; p++)
for (p=0; pcurdir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++);
for (n=0; ntif->tif_dir.td_nsubifd; n++)
for (p=0; pp.td_nsubifd; p++)
for (p=0; pdir.td_subifd; p++)
for (p=0; p!tif->tif_dir.td_nsubifd; p++)
for (p=0; pdir.nsubifd; p++)
for (p=0; p  n; p++)
for (p=0; ptif->tif_dir.td_subifd)
for (p=0; psubifd; p++)
for (p=0; pdirs.td_nsubifd; p++)
for (p=0; p(tif->tif_dir.td_nsubifd++); p++)
for(p=0; p  tif->tif_dir.td_nsubifd; p++)
for (p=0; pv; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++,p)
for (p=0; p=0; p++)
for (p=0; p->tif_dir.td_nsubifd; p++)
for (p=0,ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_subifd++)
for (p=0; pdev.td_nsubifd; p++)
for (p=0; p/tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.pd_nsubifd; p++)
for (p=0; itif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_file.td_nsubifd; p++)
for (p=0; preg->tif_dir.td_nsubifd; p++)
if (tif->tif_dir.td_nsubifd==0)
for (p=0; ptif->tif_dir.td_nsubifd; )
for (i=0; i  tif->tif_dir.td_nsubifd; i++)
for (p=0; pdir->tif_dir; p++)
for (p=0; pbuf->tif_dir.td_nsubifd; p++)
for (s=0; stif->tif_dir.td_nsubifd; s++)
for (p=0; pdir++; p++)
for (p=0; ptif->tif_dir.td_subifd, p++)
for (p=0; p_tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; (p++))
for (dir=0; dirtif->tif_dir.td_nsubifd; dir++)
for (p=0; p*tif->tif_dir.td_nsubifd; p++)
for (p=0; pfile->tif_dir.td_nsubifd; p++)
for (p=0; pdev->tif_dir.td_nsubifd; p++)
for (p=0; plp; p++)
for ((p=0; ptif->tif_dir.td_nsubifd; p++))
for (p=0;!ptif->tif_dir.td_nsubifd; p++)
for (p=0; stif->tif_dir.td_nsubifd; p++)
for (a=0; atif->tif_dir.td_nsubifd; a++)
for (p=0; ptab->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_subifd+1; p++)
for (i=0; itif->tif_dir.td_subifd; i++)
for (p=0; pif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd;
for (p=0; p1; p++)
for (p=0; pdirtif->tif_dir.td_nsubifd; p++)
for (pb=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; Ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptemp->tif_dir.td_nsubifd; p++)
for (p=0; pa->tif_dir.td_nsubifd; p++)
for (p=0; pdirs; p++)
for (p=0; ptif->tif_dir.p_nsubifd; p++)
for (p=0; p  0; p++)
for (p=0; psc->tif_dir.td_nsubifd; p++)
for (p=0; pinfo->tif_dir.td_nsubifd; p++)
for (p=0; p%s->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd2; p++)
for (p=0; pdirs->tif_dir.td_nsubifd; p++)
for (p=0, ptif->tif_dir.td_nsubifd; p++)
for (p=0; p  ndir; p++)
for (p=0; p&dir; p++)
for (p=0; ptif->tif_dir.td_nsubid; p++)
for (p=0; pbp->tif_dir.td_nsubifd; p++)
for (p=0; (p  tif->tif_dir.td_nsubifd); p++)
for (p=0; ppb; p++)
for(i=0; itif->tif_dir.td_nsubifd; i++)
for (p=0; pcnt; p++)
for (p=0; p  dir; p++)
for (p=0; p_tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++),
for (p=0; ptif->tif_dir.td_nsubifd; (*p)++)
for (p=0; ptif->tif_dir.td_subifd - 1; p++)
for (p=0; ptif->tif_dir.td_subifd && p++)
for (p=0; p  dir.td_nsubifd; p++)
for (p=0; pdir, p++)
for (p=0; pb.td_nsubifd; p++)
if (p==0)
for (p=0; pm; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++,)
for (p=0; ptif->tif_dir.td_subifd;)
for (p=0; ptif->tif_dir.td_nsubifd++, p++)
for (p=0;!tif->tif_dir.td_nsubifd; p++)
for (p=0; pp++)
for (p=0; pdir2; p++)
for (p=0; ptif->tif_dir.td_nsubifd; (*p++))
for (p=0; pdir + 1; p++)
for (p=0; ppa; p++)
for (p=0; pbuf; p++)
for (p=0; ptif->tif_dir.td_tsubifd; p++)
for (p=0; pp->tif_dir.td_subifd; p++)
for (p=0; ptif->tif_dir; p++)
for (p=0; pp0; p++)
for (p=0; p2; p++)
for (p=0; ptif->tif_dir.td_nsubifd, ++p)
for (p=0; ptif->tif_dir.td_subid; p++)
for (p=0; (ptif->tif_dir.td_nsubifd)  0)
for (p=0; ptif->tif_nsubifd; p++)
p = 0; p  tif->tif_dir.td_nsubifd; p++;
for (p=0; ptif->tif_dir.td_nsubifd; p--)
for (p=0; pdirnsubifd; p++)
for (p==0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p=NULL; p++)
for (p=0; p--p; p++)
for (p=0; pdir; ++p)
for (p=0; p%d; p++)
for (p=0; p  p++)
for (p = 0; p  n; p++)
for (p=0; ptif->tif_dir.td_nsubifd++; p++)
for (p=0; p(uint32)&p++)
for (p=0; p&(tif->tif_dir.td_nsubifd == 0? p++ : 0); p=0; p++)
for (p=0; ptif->tif_dir.td_nsubifd -= 1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  uint32* i;
for (p=0; p((tif->tif_dir.td_nsubifd*)&p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p(uint32_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);  else  for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p((uint32)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  /* * XXX */
for (p=0; ptif->tif_dir.td_nsubifd - 1; p++)
for (p=0; p((uint32_t)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  /* * Write an error */
for (p=0; p(tif->tif_dir.td_nsubifd - 1); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  /* XXX */
for (p=0; p((uint64)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  /* * Do we have a directory with a directory *? */ if (p==NULL)  TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  if (tif->tif_flags&TIFF_BIGTIFF)  uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0);  if (pb=0xFFFFFFUL)  _TIFFfree(o);  else  TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0);  pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++)  _TIFFfree(p++);   p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++)  assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  _TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++)  p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; ptif->tif_dir.td_nsubifd; p++)  if (dir==NULL)
for (p=0; ptif->tif_dir.td_nsubifd && (p==0xFFFFFFFF)? p+p)
for (p=0; p(uint64_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  _TIFFfree(*pa);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  p++;
for (p=0; p((uint32)tif->tif_dir.td_nsubifd; p++))
for (p=0; p(int)tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd &&!tif->tif_dir.td_nsubifd; p++)
for (p=0; p(unsigned long)tif->tif_dir.td_nsubifd; p++)
for (p=0; p(uint32)tif->tif_dir.td_nsubifd; p++)
for (p=0; p((int)tif->tif_dir.td_nsubifd; p++))
for (p=0; ptif->tif_dir.td_nsubifd; p++)  p=((caddr_t)p);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);  else  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++)  p = tif->tif_dir.td_nsubifd;
for (p=0; ptif->tif_dir.td_nsubifd; p++)  if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++)  if (!tif->tif_dataoff)
for (p=0; p((unsigned char*)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd && p(dir) = 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)  p=0;
for (p=0; p&(tif->tif_dir.td_nsubifd++))
for (p=0; ptif->tif_dir.td_nsubifd; p++)  _TIFFfree(p); p++;
for (p=0; ptif->tif_dir.td_nsubifd && (*p++))
for (p=0; ptif->tif_dir.td_nsubifd; p++)  uint32_t buf[p++];
for (p=0; ptif->tif_dir.td_nsubifd; p++)  m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))  uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0);  if (o==NULL)  TIFFErrorExt(tif->tif_clientdata,module,"""); return (0);  n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);  else  TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p(unsigned long)tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) _TIFFfree(p); p++;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd + 1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd && p(dir) <= 0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <p++;
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <_TIFFfree(*pa);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (i=0; i<tif->tif_dir.td_subifd; i++)
while (p=0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p <dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ppb; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_subid; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) uint32* i;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) p = tif->tif_dir.td_nsubifd;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for(p=0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for(p=0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; pbp->tif_dir.td_nsubifd; p++)
for(p=0; p &tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) /* XXX */
for (p=0; p&pa->tif_dir.td_nsubifd; p++)
for (p=0; p&=tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&&(tif->tif_dir.td_nsubifd); p++)
for (p=0; p&(uint32_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd &&!tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; p<2; p++)
for (p=0; (p&tif->tif_dir.td_nsubifd) &0)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &/* * Write an error */
for (p=0; p&bp->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd && p<(dir) = 0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd+1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (dir==NULL)
for (p=0; p&tif->tif_dir.td_nsubifd); p++)
for (a=0; a<tif->tif_dir.td_nsubifd; a++)
for (p=0; p n; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; pnp->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&(int)tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pinfo->tif_dir.td_nsubifd; p++)
for (p=0; p<bp->tif_dir.td_nsubifd; p++)
for (p=0; p<$tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd && p&(dir) <= 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; (*p++))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
while (p=0; ptif->tif_dir.td_nsubifd)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; pNULL; p++)
for (p=0; pdir++; p++)
for (p=0; p</*tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd && p<(dir) = 0; p++)
for (p=0; p((uint32)tif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &_TIFFfree(*pa);
for (p=0; p&p++)
for (p=0; p&((uint64)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++) &p=((caddr_t)p);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <uint32_t buf[p++];
for (p=0; s&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pdir&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; *p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<&p->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<dev.td_nsubifd; p++)
for (p=0; p_tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_file.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_subifd)
for (p=0; p&sc->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<dirtif->tif_dir.td_nsubifd; p++)
for (pb=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&dir + 1; p++)
for ((p=0; ptif->tif_dir.td_nsubifd; p++))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_subifd; ++p)
for (p=0; p<(tif->tif_dir.td_nsubifd; p++))
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (i=0; i&tif->tif_dir.td_nsubifd; i++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; pndir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_subifd - 1; p++)
for (p=0; p&((int)tif->tif_dir.td_nsubifd; p++))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &uint32_t buf[p++];
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<_tif_dir.td_nsubifd; p++)
for (P=0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; pcnt; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) </* * XXX */
for (p=0; p<tif->tif_dir.td_subifd, p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<dev->tif_dir.td_nsubifd; p++)
for (p=0; p((uint64)tif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd && p(dir) <= 0; p++)
for (p=0; p&(unsigned long)tif->tif_dir.td_nsubifd; p++)
for (p=0; pp++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; (p<tif->tif_dir.td_nsubifd) 0)
for (p=0; p<b.td_nsubifd; p++)
for (p=0; p&=0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for(p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<((unsigned char*)tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd - 1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &_TIFFfree(p); p++;
for (p=0; p<p->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p(tif->tif_dir.td_nsubifd; p++))
for (p=0; ptif->tif_dir.td_nsubifd && p&(dir) = 0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p--)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&/*tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <uint32* i;
for (p=0; pp; p++)
for (p=0; pif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_subifd+1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p &p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) </* XXX */
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=%d; p&tif->tif_dir.td_nsubifd; p++)
for (p=%d; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; preg->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; *p++)
for (p=0; p<lp; p++)
for (p = 0; p <n; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&subifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <_TIFFfree(*pa);
for (p=0; pdirnsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ppa->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<1; p++)
for (p=0; ppa; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++) p++;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (!tif->tif_dataoff)
for (p=0; ptif->tif_dir.td_nsubifd,p++)
for (p=0; p<tif->tif_dir.p_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd2; p++)
for (p=0; ptif->tif_dir.td_subifd+1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; ++p)
for (p=0; p&dev->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &/* * Write an error */
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd && p(dir) = 0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&nsubifd; p++)
for (p=0; p&tf->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd && p(dir) &= 0; p++)
for (p=0; p&&(tif->tif_dir.td_nsubifd == 0? p++ : 0); p=0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++) </* XXX */
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&dirs.td_nsubifd; p++)
for (p=0; p<dir.td_subifd; p++)
for (p = 0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; pbuf; p++)
for (p=0; p&p; p++)
for (p=0; p<ndir->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for(i=0; i&tif->tif_dir.td_nsubifd; i++)
for (p=0; p<dir&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&&p->tif_dir.td_nsubifd; p++)
for (p=0; p<ndir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&dirs; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; pnsubifd; p++)
for (i=0; itif->tif_dir.td_nsubifd; i++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd &&!tif->tif_dir.td_nsubifd; p++)
for (p=0; p--p; p++)
for (p=0; p=tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubid; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0,p<tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p((unsigned char*)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for(p=0; p <tif->tif_dir.td_nsubifd; p++)
for (p=0; p<((uint32)tif->tif_dir.td_nsubifd; p++))
for (p=0; p(int)tif->tif_dir.td_nsubifd; p++)
for (p = 0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pv; p++)
for (p=0; p<tif->tif_dir.td_nsubifd++; p++)
for(p=0; p tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (i=0; i<tif->tif_dir.td_nsubifd; i++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&*tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&_tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_subifd && p++)
for (p=0; ptif->tif_dir.td_nsubifd++, p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubid; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p((int)tif->tif_dir.td_nsubifd; p++))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&a->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (dir=0; dir&tif->tif_dir.td_nsubifd; dir++)
for (p=0; ptf->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p <0; p++)
for (p=0; pdir->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
while (p=0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p((uint32_t)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (dir==NULL)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<((uint32)tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p &ndir; p++)
for (p=0; ptif->tif_dir.td_nsubifd - 1; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&&(tif->tif_dir.td_nsubifd++))
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &/* * XXX */
for (p=0; p&tif->tif_dir.td_nsubifd, ++p)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p (tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; p<=0; p++)
for (p=0; p<&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (i=0; i <tif->tif_dir.td_nsubifd; i++)
for (p=0; p2; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) p=((caddr_t)p);
for (p=0; pdir.td_subifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; *p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir->td_nsubifd; p++)
while (p=0; p<tif->tif_dir.td_nsubifd)
for (p=0; p<tif->tif_dir.td_nsubifd; p--)
for (p=0; p<dir, p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<dir->td_nsubifd; p++)
for (p=0; p<v; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&((uint32_t)tif->tif_dir.td_nsubifd); p++)
for (p=0;!p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; )
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&p; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; *ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p_tif->tif_dir.td_nsubifd; p++)
for (p=0; p<temp->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir->td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; (ptif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &uint32_t buf[p++];
for (p=0; p=0; p++)
for (p=0; p &(tif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_subifd - 1; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <p = tif->tif_dir.td_nsubifd;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_subifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++,p)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<buf; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) _TIFFfree(p); p++;
for (p=0; p<tif->tif_dir.td_subid; p++)
for (p=0; p<tif->tif_dir.td_subifd;)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&dir<tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&2; p++)
for (p=0; p<tif->tif_dir.td_nsubifd &&!tif->tif_dir.td_nsubifd; p++)
for (p=0; pdir2; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd && p&(dir) <= 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd++)
for (p=0; p&(uint64_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_subifd;)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; p&buf->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&if->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd++, p++)
for (p=0; p 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd && p<(dir) <= 0; p++)
for (p=0; pn; p++)
for (p=0; psubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptab->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (P=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) /* * Write an error */
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (n=0; ntif->tif_dir.td_nsubifd; n++)
for (p=0; p&dir->tif_dir.td_nsubifd; p++)
for (p=0; plp; p++)
for (p=0; ptif->tif_data.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd+1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; p++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&dirtif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; p&tif->tif_dir.td_nsubifd && (p==0xFFFFFFFF)? p+p)
for (p=0; p<dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd++; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (!tif->tif_dataoff)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; pdir<tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_subifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p = 0, p tif->tif_dir.td_nsubifd; p++)
for (p=0; (ptif->tif_dir.td_nsubifd) 0)
for (p=0; p&tif->tif_dir.td_nsubifd-1; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &p = tif->tif_dir.td_nsubifd;
for (p=0; p<tif->tif_dir.td_nsubifd && p<(dir) <= 0; p++)
for (i=0; i&tif->tif_dir.td_subifd; i++)
for (p=0; p<(tif->tif_dir.td_nsubifd++); p++)
for (i=0; i<tif->tif_dir.td_nsubifd; i++)
for (p=0; p&dir&tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&n; p++)
for (p=0; ptif->tif_file.td_nsubifd; p++)
for (p=0; p&p->tif_dir.td_subifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd && p<(dir) &= 0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (!tif->tif_dataoff)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; (*p)++)
for (p=0; p&ndir; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; pp->tif_dir.td_nsubifd; p++)
for (p=0, p<tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd && (p==0xFFFFFFFF)? p+p)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<if->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; p<dir,p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) uint32_t buf[p++];
for (p=0; p<tif->tif_dir.td_nsubifd; p++) _TIFFfree(*pa);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <p=((caddr_t)p);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<dirs->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd, p++)
for (p=0; p<p; p++)
for (p=0; p!tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) /* XXX */
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; (*p)++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&(tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<=NULL; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; ++p)
for (p=0; p&tif->tif_dir.td_nsubifd2; p++)
for (p=0; (*p)tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (pb=0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pp; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; psc->tif_dir.td_nsubifd; p++)
for (p=0; p<&(tif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd -= 1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++) </* * XXX */
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd); p++)
for (p=0; p<((uint32_t)tif->tif_dir.td_nsubifd); p++)
for (p=0; pdev->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&&dir; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0; p<tif->tif_dir->td_nsubifd; p++)
for (p=0; p&(uint32)&p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=-1; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.d_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; (p++))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd && p<(dir) = 0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd && p(dir) = 0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<!tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&dir2; p++)
for (p=0; p<(tif->tif_dir.td_nsubifd - 1); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (s=0; stif->tif_dir.td_nsubifd; s++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd, ++p)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&dirs->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<0; p++)
for (p=0; p<p->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; pm->tif_dir.td_nsubifd; p++)
for (p=0; p&dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) /* * XXX */
for (p=0; p&_tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p((tif->tif_dir.td_nsubifd*)&p++)
for (p=0; p&tif->tif_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; (*p++))
for (p=0; P&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++,p)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&(tif->tif_dir.td_nsubifd; p++))
for (p=0; p<tif->tif_dir.td_nsubifd; )
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&dir; ++p)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd && p<(dir) &= 0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p <n; p++)
for (p=0; p&tif->tif_file.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <p=0;
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; pdir; ++p)
for (n=0; n&tif->tif_dir.td_nsubifd; n++)
for (p=0; p<p; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0,p&tif->tif_dir.td_nsubifd; p++)
for (p=NULL; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) /* * XXX */
for (p=0; ptif->tif_dir.td_nsubifd; p++) p=((caddr_t)p);
for (p=0; ptif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<(uint64_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_subifd;)
for (p=0; p<tif->tif_dir.nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p = 0; p n; p++)
for (p=0; p(tif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<subifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for ((p=0; p<tif->tif_dir.td_nsubifd; p++))
for (p=0; p<pb; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; *p<tif->tif_dir.td_nsubifd; p++)
for (p=0; pp->tif_dir.td_nsubifd; p++)
for (p=0; p&m; p++)
for (p=0; p<tif->tif_dir.td_nsubifd)
for (p=1; p&tif->tif_dir.td_nsubifd; p++)
for (dir=0; dir<tif->tif_dir.td_nsubifd; dir++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) /* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; i++)
for (p=0; ptif->tif_dir.td_nsubifd)
for (p=0; p<(tif->tif_dir.td_nsubifd+1); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &p=0;
for (p=0; ptif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &p++;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&((unsigned char*)tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p==0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; (*p)&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++),
for (p=0; pdirs; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; i&tif->tif_dir.td_nsubifd; p++)
for (a=0; atif->tif_dir.td_nsubifd; a++)
for (p=0; p&tif->tif_dir.td_nsubifd--; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; p tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (!tif->tif_dataoff)
for (p = 0, p <tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd && p&(dir) = 0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; pp.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p/*tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &p = tif->tif_dir.td_nsubifd;
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd, p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p); p++;
for (p=0; p&p->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd && p&(dir) = 0; p++)
for (p=-1; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
p = 0; p tif->tif_dir.td_nsubifd; p++;
for (p=0; ptemp->tif_dir.td_nsubifd; p++)
for (p=0; p<%s; p++)
for (p=0; p&tif->tif_dataoff.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) _TIFFfree(*pa);
for (p=0; p->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p(tif->tif_dir.td_nsubifd++); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; (*p)++)
for (p=0; p<m->tif_dir.td_nsubifd; p++)
for (p=0; p<dir<tif->tif_dir.td_nsubifd; p++)
for (p=0; p(tif->tif_dir.td_nsubifd+1); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; pdir; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) /* XXX */
while (p=0; p&tif->tif_dir.td_nsubifd)
for (p=0; ptif->tif_dir.td_nsubifd++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<np->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dataoff.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0; p&--p; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for(p=0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=NULL; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; pdir.td_nsubifd; p++)
for (p = 0; p &n; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd -= 1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <uint32* i;
for (p=0; p<dir.nsubifd; p++)
for (p=0; p<th->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pndir; p++)
for (p=0; p%s; p++)
for (p=0; p*tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (i=0; itif->tif_dir.td_subifd; i++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; s<tif->tif_dir.td_nsubifd; p++)
for (i=0; itif->tif_dir.td_nsubifd; i++)
for (p=0; ptif->tif_dir.td_subifd++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&(tif->tif_dir.td_nsubifd == 0? p++ : 0); p=0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_data.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p</tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd && p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (dir==NULL)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&lp; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd -= 1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd-1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &p=0;
for (dir=0; dirtif->tif_dir.td_nsubifd; dir++)
for (p=0; ptif->tif_dir.td_nsubid; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd++)
for (p=0; p<%d; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<sc->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &p++;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <uint32* i;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &uint32* i;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) /* * XXX */
for (p=0; ptif->tif_dir.td_subifd)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<((tif->tif_dir.td_nsubifd*)&p++)
for (s=0; s&tif->tif_dir.td_nsubifd; s++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dataoff.td_nsubifd; p++)
for (p=0; i<tif->tif_dir.td_nsubifd; p++)
for (p=0; p&reg->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <p=((caddr_t)p);
for (p=0; p&tif->tif_dir.nsubifd; p++)
for (p=0; p dir; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd && p&(dir) <= 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; pdir->td_nsubifd; p++)
for (p=0; p<tif->tif_dir.d_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; p&dir; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; ++p)
for (p=0; ptif->tif_dir.td_subifd - 1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=%d; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&dev.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) uint32* i;
for (p=0; ptif->tif_dir.td_nsubifd; i++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_subifd; ++p)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; p&((uint32)tif->tif_dir.td_nsubifd; p++))
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<&dir; p++)
for (p=0; ptif->tif_dir.td_subifd && p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; stif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd+1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pdir, p++)
for (p=0; p&tif->tif_dir.td_subifd, p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &_TIFFfree(p); p++;
for (p=0; p&p0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; (p<tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<buf->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd-1; p++)
for (p=0; (p &tif->tif_dir.td_nsubifd); p++)
for (p=0; p<file->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.pd_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <p = tif->tif_dir.td_nsubifd;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0; p&dir_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(*pa);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p==0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) p=0;
for (p=0; p&0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p<tif->tif_dir.td_nsubifd + 1; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) /* * Write an error */
for (p=0; p&tif->tif_dir.td_subifd && p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p(tif->tif_dir.td_nsubifd - 1); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd); p++)
for (p=0; (p<tif->tif_dir.td_nsubifd) <0)
for (p=0; ptif->tif_dir.pd_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; (*p++))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for(i=0; i<tif->tif_dir.td_nsubifd; i++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p = 0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0;!ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; )
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&dir->tif_dir; p++)
for (p=0; p&p->tif_dir.td_nsubifd; p++)
for (p=0; p<p.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&v; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p--)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (!tif->tif_dataoff)
for (p=0; p&tif->tif_dir.td_nsubifd; p++),
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (!tif->tif_dataoff)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (!tif->tif_dataoff)
for (p=0; p<a->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; pdir_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <p=((caddr_t)p);
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&curdir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p(uint32)tif->tif_dir.td_nsubifd; p++)
for (p=NULL; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&file->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; p<tf->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (dir==NULL)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (dir==NULL)
for (p=0; ptif->tif_dir.td_nsubifd; p++)
for(p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; (p++))
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p &dir; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) </* * Write an error */
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &/* XXX */
for (p=0; p<tif->tif_dir.td_nsubifd && p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (dir==NULL)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd - 1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd;)
for (p=-1; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; Ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p(uint32_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.p_nsubifd; p++)
for (p=0; (ptif->tif_dir.td_nsubifd) &0)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&dir, p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&temp->tif_dir.td_nsubifd; p++)
for (p=0; pp0; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd && p(dir) <= 0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &uint32* i;
for (p=0; ptif->tif_dir.td_nsubifd; p++,)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &/* * XXX */
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&$tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd && p++)
for (p=0; p&tab->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &p=0;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_subifd; p++)
for (p=0; p&1; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&buf; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
p = 0; p &tif->tif_dir.td_nsubifd; p++;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &p = tif->tif_dir.td_nsubifd;
for (p=0; p<&(tif->tif_dir.td_nsubifd == 0? p++ : 0); p=0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++) &/* XXX */
for (p=0; p<tif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; p &0; p++)
for (p=0,ptif->tif_dir.td_nsubifd; p++)
for(i=0; itif->tif_dir.td_nsubifd; i++)
for (pb=0; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0; p&tif->tif_dir.td_nsubifd && p(dir) = 0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; ++p)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<p0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &_TIFFfree(p); p++;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; (p&tif->tif_dir.td_nsubifd; p++))
for (i=0; i &tif->tif_dir.td_nsubifd; i++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; (ptif->tif_dir.td_nsubifd) <0)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd && p(dir) &= 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&!tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd, ++p)
for (p=0; p<dirs.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<n; p++)
for (p=0; ptif->tif_dir.td_nsubifd; ++p)
for (i=0; i tif->tif_dir.td_nsubifd; i++)
for (p=0; p0; p++)
for (p=0; ptif->tif_dir.td_nsubifd--; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++),
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<ndir; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (dir==NULL)
for (p=0; p<tif->tif_dir.td_subifd++)
for (p=0; pdirs->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pdir.nsubifd; p++)
for (i=0; i&tif->tif_dir.td_nsubifd; i++)
for (p=0; p&((uint32)tif->tif_dir.td_nsubifd); p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p tif->tif_dir.td_subifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<pa; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd,p++)
for (p=0; p<curdir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <p++;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &/* XXX */
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_subifd, p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<(unsigned long)tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (dir==NULL)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <uint32_t buf[p++];
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++) <p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; P<tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<dir2; p++)
for (p=0; p&tif->tif_dir.td_nsubifd && p<(dir) &= 0; p++)
for (p=0; p&tif->tif_dir.td_subifd; p++)
for (p=0; p<tif->tif_dir.td_subifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd && p&(dir) &= 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++);
for (p=0; p<pa->tif_dir.td_nsubifd; p++)
for (p=0; (p <tif->tif_dir.td_nsubifd); p++)
for (p=0; p1; p++)
for (p=0; p<tif->tif_dir.td_tsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <_TIFFfree(*pa);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; ++p)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <uint32_t buf[p++];
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd && (*p++))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) p=0;
for (p=0; p <tif->tif_dir.td_nsubifd; p++)
for (p=0; p<(uint32)&p++)
for (p=0; p&dir.td_subifd; p++)
for (p=0; p &n; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_subifd)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) /* * Write an error */
for (p=0; ptif->tif_dir.td_nsubifd; p++) &/* * Write an error */
for (p=0; p<NULL; p++)
for (p=0; p&/tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p(uint64_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<(int)tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <_TIFFfree(p); p++;
for (p=0; p<tif->tif_dir.pd_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd;)
for (p=0; p<tif->tif_dir.td_nsubifd;
for (p=0; p&pa; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p<*tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; pfile->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_subifd; ++p)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &uint32_t buf[p++];
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd && (*p++))
for (p=0; p<tif->tif_dir.td_nsubifd2; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0, p&tif->tif_dir.td_nsubifd; p++)
for (a=0; a&tif->tif_dir.td_nsubifd; a++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p dir.td_nsubifd; p++)
for (p=0; pb.td_nsubifd; p++)
for (p=0; ptif->tif_dir.p_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) uint32_t buf[p++];
for (p=0; p&tif->tif_dir.td_nsubifd && p<(dir) <= 0; p++)
for (p=0; ptif->tif_dir.td_nsubifd; (p++))
for (p=0; p<reg->tif_dir.td_nsubifd; p++)
for (p=0; p&p.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <_TIFFfree(p); p++;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=1; ptif->tif_dir.td_nsubifd; p++)
for (p=0; pcurdir.td_nsubifd; p++)
for (p=0; p<(tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &p=((caddr_t)p);
for (p=0; p&((tif->tif_dir.td_nsubifd*)&p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) </* XXX */
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (!tif->tif_dataoff)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &uint32* i;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &/* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for(p=0; p<tif->tif_dir.td_nsubifd; p++)
for (s=0; s<tif->tif_dir.td_nsubifd; s++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <p++;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; itif->tif_dir.td_nsubifd; p++)
for (p=0; p%s->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; p<=tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; pa->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<dirnsubifd; p++)
for (p=0; ptif->tif_dir; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&dir++; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pdir,p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; p&ndir.td_nsubifd; p++)
p = 0; p <tif->tif_dir.td_nsubifd; p++;
for (p=0; ptif->tif_dir.td_nsubifd++; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; pdir->tif_dir; p++)
for (p=0; p &dir.td_nsubifd; p++)
for ((p=0; p&tif->tif_dir.td_nsubifd; p++))
for (p=0; (p<tif->tif_dir.td_nsubifd; p++))
for (p=0; p<info->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<dir; ++p)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) </* * XXX */
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p$tif->tif_dir.td_nsubifd; p++)
for (p=0; p&%d; p++)
for (p=0; p<((uint64)tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd + 1; p++)
for (p=0; (*p)<tif->tif_dir.td_nsubifd; p++)
for (p=0; p<((int)tif->tif_dir.td_nsubifd; p++))
for (p=0; p&dir->td_nsubifd; p++)
for (p=0; p&m->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&&tif->tif_dir.td_nsubifd; p++)
for (p=0; p<dir; p++)
for (p=0; p=NULL; p++)
for (p=0; p<tif->tif_dir.td_nsubifd && p&(dir) &= 0; p++)
for (p=0; (ptif->tif_dir.td_nsubifd; p++))
for (p=0; p<dir + 1; p++)
for (p=0; p<tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) p->tif_dataoff=&p->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF))
for (p=0; ptif->tif_dir.td_nsubifd; *p++)
for (p=0; p ndir; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++,)
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0, ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd--; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) <TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &_TIFFfree(*pa);
for (p=0; p&tif->tif_dir.td_nsubifd++, p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; p&(uint32)tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&dirnsubifd; p++)
for (p=0; ptif->tif_dir.td_subid; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) p=0;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&cnt; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &_TIFFfree(*pa);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_nsubifd; p++)
for (p=0; p<--p; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++,p)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p <(tif->tif_dir.td_nsubifd); p++)
for (p=0; p<dir->tif_dir; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0; p<tif->tif_dir.td_nsubifd;)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; p&th->tif_dir.td_nsubifd; p++)
for (P=0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<dir++; p++)
for (p=0; p&tif->tif_dir.td_subifd++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pth->tif_dir.td_nsubifd; p++)
for (p=0; pdir + 1; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; i++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p<tif->tif_dir.td_nsubifd; p++) uint32* i;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; (p tif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&ndir->tif_dir.td_nsubifd; p++)
for (p=0; p<dir_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p==0; p&tif->tif_dir.td_nsubifd; p++)
for (p=0; p((uint32)tif->tif_dir.td_nsubifd; p++))
for (n=0; n<tif->tif_dir.td_nsubifd; n++)
for (p=0; pdir; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) </* * Write an error */
for (p=0; p&%s; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); <if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p&tif->tif_dir.td_tsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) p=((caddr_t)p);
for (p=0; ptif->tif_dir.td_tsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p(uint32)&p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) p = tif->tif_dir.td_nsubifd;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&pb; p++)
for (p=0; p<(uint32_t)tif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) uint32_t buf[p++];
for (p=0; p<%s->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p%d; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd && p&(dir) &= 0; p++)
for (p=0; p&tif->tif_dir.td_nsubifd); p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&b.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (p&tif->tif_syslog.syslog_tracing))
for (p=0; p<tif->tif_dir.td_nsubifd && (*p++))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; ptif->tif_dir.td_nsubifd; p++) assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; pdirs.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (p<tif->tif_syslog.syslog_tracing))
for (p=0; p<m; p++)
for (p=0; p<tif->tif_dir.td_nsubifd)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<tab->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) p = tif->tif_dir.td_nsubifd;
for (p=0; p<(uint32)tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) </* * Do we have a directory with a directory *? */ if (p==NULL) &TIFF_WRITE_ARG(tif->tif_dir.td_nsubifd,0);
for (p=0; pdirtif->tif_dir.td_nsubifd; p++)
for (p=0; pm; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<dir; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &p=((caddr_t)p);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) p++;
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(ptif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_data.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &/* * XXX */
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&(tif->tif_dir.td_nsubifd++); p++)
for (p=0; p&(tif->tif_dir.td_nsubifd+1); p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p <ndir; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p &tif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd && p(dir) &= 0; p++)
for (p=0;!p<tif->tif_dir.td_nsubifd; p++)
for (p=0; p&(tif->tif_dir.td_nsubifd - 1); p++)
for (p=0; p&tif->tif_dir.d_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p <p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_subifd; p++)
for (p=0; p<_tif->tif_dir.td_nsubifd; p++)
for (p=0; p&np->tif_dir.td_nsubifd; p++)
for (p=0; p<p->tif_dir.td_subifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <p = tif->tif_dir.td_nsubifd;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) <_TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <p=0;
for (p=0; p&dir; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; (p&tif->tif_dir.td_nsubifd) <0)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) </* * Write an error */
for (p=0; p<cnt; p++)
for (p=0; pbuf->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); &else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd, p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <_TIFFfree(p); p++;
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; pndir->tif_dir.td_nsubifd; p++)
for (p=0; p<dir->tif_dir.td_nsubifd; p++)
for (p=0; (p&tif->tif_dir.td_nsubifd); p++)
for (p=0; p&tif->tif_dir.td_nsubifd,p++)
for (p=0; pdev.td_nsubifd; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) if (!tif->tif_dataoff)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &if (*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; (p<tif->tif_dir.td_nsubifd) &0)
for (p=0; p<tif->tif_dir.td_subifd+1; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) if (tif->tif_flags&TIFF_BIGTIFF) <uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&info->tif_dir.td_nsubifd; p++)
while (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&=NULL; p++)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); else n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p = 0, p &tif->tif_dir.td_nsubifd; p++)
for (p=0; p&dir.nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++,)
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) <assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++); &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd); p++)
for (p=0; p&dir,p++)
for (p=0; p&(tif->tif_dir.td_nsubifd++))
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if ((tif->tif_syslog.isDebug()) && (ptif->tif_syslog.syslog_tracing))
for (p=0; p<tif->tif_dir.td_nsubifd; p++) m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_subifd,o); _TIFFfree(o); <else <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p &tif->tif_dir.td_subifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd && (p==0xFFFFFFFF)? p+p)
for (p=0; (p&tif->tif_dir.td_nsubifd) 0)
for (p=0; p&NULL; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); &if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) &p++;
for (p=0; ptif->tif_dir.td_nsubifd; p++) <m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) &uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &_TIFFFree((uint32)(p<tif->tif_dir.td_nsubifd));
for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFFree((uint32)(p&tif->tif_dir.td_nsubifd));
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p<&(tif->tif_dir.td_nsubifd++))
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p <dir; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); <n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else for (p=0; ptif->tif_dir.td_nsubifd; p++)
for (p=0; p<tif->tif_dir.td_nsubifd++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) <if (*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p<tif->tif_dir.td_nsubifd; p++) &if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); &if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p <tif->tif_dir.td_subifd; p++)
for (p=0; pp->tif_dir.td_subifd; p++)
for (p=0; p<tif->tif_dir; p++)
for (p=0; p<tif->tif_dir.td_nsubifd; p++) p++;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa=0xFFFFFFUL); *pb++=(uint32)(*pa++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <p=0;
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &assert(*pa&=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o);
for (p=0; p<tif->tif_dir.td_nsubifd; p++);
for (p=0; p&tif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) &uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); <if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) &if (dir==NULL)
for (p=0; p<dirs; p++)
for (p=0; p/tif->tif_dir.td_nsubifd; p++)
for (p=0; p&%s->tif_dir.td_nsubifd; p++)
for (p=1; p<tif->tif_dir.td_nsubifd; p++)
for (p=0; ptif->tif_dir.td_nsubifd; p++) &m=tif->tif_dataoff; if (!(tif->tif_flags&TIFF_BIGTIFF)) <uint32* o; uint64* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""); return (0); if (o==NULL) TIFFErrorExt(tif->tif_clientdata,module,"""); return (0); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o); _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata
for (p=0; ptif->tif_dir.td_nsubifd; p++) <if (tif->tif_flags&TIFF_BIGTIFF) uint32* o; uint64* pa; uint32* pa; uint32* pb; uint16 p; o=_TIFFmalloc(tif->tif_clientdata,module,"""Out of memory""); return (0); if (pb=0xFFFFFFUL) _TIFFfree(o); else TIFFErrorExt(tif->tif_clientdata,module,"""Out of memory""); return (0); pb=o; for (p=0; ptif->tif_dir.td_nsubifd; p++) _TIFFfree(p++); p=0; ptif->
for (p=0; p&tif->tif_dir.td_nsubifd; p++) assert(*pa<=0xFFFFFFUL); *pb++=(uint32)(*pa++); n=TIFFWriteDirectoryTagCheckedIfdArray(tif,ndir,dir,TIFFTAG_SUBIFD,tif->tif_dir.td_nsubifd,o);
