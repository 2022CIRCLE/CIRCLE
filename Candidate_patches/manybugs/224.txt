golden:
if (! global_ld.from_cap_pipe) Sleep(1 * 1000);
inference:
if_sleep(1 * 1000);
sleep(1 * 1000);

Sleep(1 * 1000);
Sleep(0 * 1000);
Sleep(2 * 1000);
Sleep(100 * 1000);
(void) Sleep(1 * 1000);
Sleep(1, 1000);
Sleep(1);
Sleep(1000 * 1000);
Sleep(1 * 1000, 0);
Sleep(-1 * 1000);
Sleep();
/* Sleep(1 * 1000); */
SetSleep(1 * 1000);
Sleep(0);
Sleep((int)1 * 1000);
Sleep(1) * 1000;
Sleep(1 * 100);
Sleep(sizeof(if_info->name) * 1000);
Sleep(3 * 1000);
#endif
_sleep(1 * 1000);
GetSleep(1 * 1000);
splx(s);
Sleep(1024 * 1000);
Sleep(NULL * 1000);
self.sleep(1 * 1000);
g_sleep(1 * 1000);
(void)Sleep(1 * 1000);
msleep(1 * 1000);
Sleep(1 * 1024);
Sleep(1 * 1000000);
Sleep(size);
Sleep(SIZE);
1 * 1000;
Sleep(2) * 1000;
LEEP(1 * 1000);
if_list.sleep(1 * 1000);
Sleep(1, 100);
Sleep(sizeof(if_info->name));
.sleep(1 * 1000);
p = Sleep(1 * 1000);
Sleep(sleep);
Thread.sleep(1 * 1000);
Sleep(2);
Sleep(4 * 1000);
POSTCODE(SIZE);
void Sleep(1 * 1000);
Sleep(PRInt32(1 * 1000));
rv = Sleep(1 * 1000);
Sleep(3) * 1000;
Sleep(1000);
Sleep(200 * 1000);
Wake(1 * 1000);
Sleep(50 * 1000);
_Sleep(1 * 1000);
Sleep(1, 0);
Sleep(4) * 1000;
s = Sleep(1 * 1000);
Sleep(1 * 1000, NULL);
Sleep(NULL);
Sleep(10 * 1000);
if_sleep(1, 1000);
g_free(err_str);
Sleep(SIZE * 1000);
Sleep(10000 * 1000);
Load();
SLEEP(1 * 1000);
Sleep(20 * 1000);
LIST_Sleep(1 * 1000);
sleep(0 * 1000);
ret = Sleep(1 * 1000);
Sniff(1 * 1000);
if_free(if_info->name);
SINK(1 * 1000);
Sleep(MIN_PACKET_SIZE * 1000);
Sleep(3);
Print(1 * 1000);
/* Sleep(1 * 1000);*/
sleep(1, 1000);
pkg_sleep(1 * 1000);
/* * Sleep(1 * 1000); */
Memory(1 * 1000);
Init();
Sleep(size_t);
wsleep(1 * 1000);
sleep(2 * 1000);
GetSleep() * 1000;
Size() * 1000;
if_stat = sleep(1 * 1000);
Sleep((size_t)1 * 1000);
Sleep(Sleep(1 * 1000));
Sleep(1 * 1000, -1);
Sleep(500 * 1000);
sleep(-1 * 1000);
if_sleep(2 * 1000);
Sleep(6 * 1000);
Sleep(size * 1000);
Sleep(len * 1000);
Sleep((long)1 * 1000);
Sleep(1 * 5000);
Sleep(1 * 1000); #endif
sleep(1);
mtx_sleep(1 * 1000);
Sleep(size_t * 1000);
#ifdef HAVE_PCAP_OPEN
if (sleep) Sleep(1 * 1000);
Sleep(1 * 100000);
GetLock();
Sleep(1 * 10000.0);
p = sleep(1 * 1000);
if_stat_sleep(1 * 1000);
Sleep(0) * 1000;
snprintf(s, sizeof(s));
Sleep(4);
Sleep(1 * 1000, 0, 0);
pcap_sleep(1 * 1000);
if_sleep(100 * 1000);
if_sleep(1000 * 1000);
if_list_sleep(1 * 1000);
sleep(1 * 1000, 0);
Sleep(sizeof(if_info_t) * 1000);
if_stat.sleep(1 * 1000);
Sleep(1 * 1000 * 1000);
Sleep(sleep * 1000);
Sleep(PR_FALSE * 1000);
Sleep(1 * 10000000);
Sleep(1 * 1000+1);
if_sleep(-1 * 1000);
if_stat = 1 * 1000;
Sleep(1 * 1000 + 1);
Sleep(1 * 1000 * 1024);
if_stat = Sleep(1 * 1000);
GetSleep();
if_ret = Sleep(1 * 1000);
Sleep(sizeof(if_stat_t) * 1000);
Sleep(sizeof(if_info->name)-1);
if_sleep(0 * 1000);
Sleep(1 * 1000) + 1;
if_stat->sleep(1 * 1000);
Sleep(1 * 1000 || 0);
Sleep(1 * 1000, PR_FALSE);
if_sleep(0, 1 * 1000);
Sleep(1 * 1000) - 1;
Sleep(sizeof(int) * 1000);
Sleep(PACKAGE_SIZE * 1000);
if_sleep(1);
Sleep(sizeof(struct pcap_stat));
Sleep(1 * 1000, 1 * 1000);
Sleep(1 /* 1000 */);
g_free(if_info->name);
if_stat->name = NULL;
g_free(err);
if_sleep();
Sleep(sleep_size * 1000);
if_sleep(3 * 1000);
Sleep(1 * 1000); */
if_sleep(1, 1 * 1000);
Sleep(1 * 1000 * 100);
Sleep(sizeof(if_info->name) + 1);
Sleep(MIN_PACKET_SIZE, 0);
Sleep(1 * 1000, &err);
if (sleep) sleep(1 * 1000);
Sleep(1 * sizeof(if_info->name));
if_free(pch);
Sleep(1 * 1000, 0, NULL);
Sleep(1 * 1000 + errbuf);
Sleep(sizeof(if_info) * 1000);
POSTCODE(SIZE * 1000);
if_sleep(1000);
if_info->name = NULL;
if_free(if_info);
Sleep(sizeof(if_info_t));
Sleep(1 * 1000 || 1 * 1000);
Sleep(sizeof(if_info->name) * 100);
Sleep(1 * 1000 * 1000 * 1000);
if_sleep(sleep);
Sleep(MIN_PACKET_SIZE);
#ifdef HAVE_PCAP_OPEN #endif
g_free(errbuf);
Sleep(sizeof(if_info->name)+1);
if_sleep(1, 100);
if_sleep(1 * 100);
mtx_sleep(1000 * 1000);
POSTCODE(SUPPORTS);
mtx_sleep(1, 1000);
#ifdef HAVE_PCAP_LIST if_info = (if_info_t *)if_entry->data;
Sleep(SIZE(sizeof(struct pcap_stat)) * 1000);
/* * XXX * Then, if we get a free flag and then print the * result of the packets. */ if ((result = g_free(result)) && (g_free(result))!= NULL)  /* print the number of packets captured for each interface until we're killed. */ sleep(1) * 1000;
Sleep(1 * 1000 + args);
#ifdef HAVE_PCAP_OPEN pch = pcap_open(if_info->name, MIN_PACKET_SIZE, 0, 0, NULL, errbuf); #else pch = pcap_open_live(if_info->name, MIN_PACKET_SIZE, 0, 0, errbuf);
if_lock = 0;
sleep(1 * 1000, sizeof(*(if_info->name)));
ps->Sleep(1 * 1000);
if_data = g_list_first(if_list); if_info = (if_info_t *)if_entry->data;
#ifdef DEBUG print_statistics_loop("GList *%d", if_stat->name); #endif
sleep(1 * 1000); /* Set the status of packets captured for each interface until we're killed */
if_init_lock(&if_init_lock);
if_stat->name = g_strdup(if_info->name);  else  if_stat->name = g_strdup(if_info->name);
if (!mtx_sleep) Sleep(1 * 1000);
if (g_socket_nonempty(&sip->ip_entry))  /* if XXX */ if ((!if_info->name))  g_free(err_str); return err;  sleep(1 * 1000);
if ((is)->info)  if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);  else  if_stat->name = g_strdup(if_info->name);
if_stat->name = g_strdup(if_info->name); if_stat->name = g_strdup(if_info->name);
if_load_size(if_list, 0, 0);
if ((*if_entry = g_list_first(if_entry))!= NULL)  if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;  else  if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry))  if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;  else  if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry);  if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
Sleep(min_PACKET_SIZE, 0, 0, NULL, errbuf);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000)  1)  /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000)  1)  /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000)  2)  *(void *)0)  /* If we have a packet, * this is not needed */ if (sleep(100 * 1000)  2)  *(void *)0)  *(void *)0)  *(void *)0)  *(void *)0)  *(void *)0)  *(void *)0)  *(void *)0)  *(void *)0);  *(void *)0)  *(void *)0)  *
if_entry->data = NULL; else if_entry->data = NULL;
Sleep(PRInt32(sizeof(if_info_t) - 1) * 1000);
/* If this is an interface that should have been unable to allocate it to the GList, if we're not a number, but we'll be able to * allocate this in the GList so that we can't * * allocate them back to the g_list_first(if_list); */ if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);  if_stat = (if_info_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->name = g_strdup(if_info->name);
Sleep(sleep(1 * 1000));
Sleep(sizeof(*if_stat->name) * 1000);
PACKAGE_SIZE(pch, NULL);
if_info->stat->data.sleep = 1; else  if_info->stat->data.sleep = 0;
Sleep(1 * 1000);  else  /* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
if (ip_packet == NULL)  ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry);  else  if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry);  else  if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry))  if_entry =
if_loop = Sleep(1 * 1000);
if (pch->type == pch->name)  if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data;  else  if_info = (if_info_t *)if_info->data;
if_stat->stat = g_strdup(strlen(if_stat->stat));
Sleep(1 * 1000, int err);
Sleep(sizeof(if_info->name) / sizeof(if_info->name));
p = g_list_first(if_list); if_info = (if_info_t *)if_entry->data; g_free(p); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name);
/* * Log out if there is a err in the process, because of that, we will try to read sock to it to make this case * a single check. */ if_flags &= (PROP_SLEFT|PROP_SLEFT);
Sleep(LP_IN_PACKAGE, 1 * 1000);
if (ip!= -1)  ptr = ip->ip; sleep(ip);  else  ptr = ptr;
/* * If the packets are n-value, we want to sleep a truncated. */ if_stat->name = g_strdup(IF_INFO_TAG_ID); if_stat->name = g_strdup(IF_INFO_TAG_ID); if_stat->name = g_strdup(IF_INFO_TAG_ID);
Sleep(1 * 1000, g_strlen(item));
if (nc->nc_int >= sizeof(ip))  sleep(1 * 1000);  else  sleep(0 * 1000);
/* sleep*/ if_stat->name = g_strdup(IF_NO_ENTRY); if_stat->name = g_strdup(IF_NO_ENTRY);
if_prt->pch = sleep_max(100 * 1000);
if (!stat_id) sleep(1 * 1000);
p->p_sleep(1 * 1000);
if_loading = 1 * 1000;
if_data.sleep(1 * 1000);
if (!si_active)  /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0))  /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0))  /* Not implemented yet */  else  /* Not implemented yet */  /* Not implemented yet */ if ((si_active = 0) && (si_active == 0))  /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* * The re-load packet has been returned to sleep*/ if_info->name = g_malloc(sizeof(if_info->name));
if_stat->name = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name);
/* * Make sure we have a packet for the sock. */ sleep(1 * 1000);
#ifdef HAVE_PCAP_OPEN if_info = (if_info_t *)if_entry->data; #endif
if_reply('n');
Sleep(len);
#ifdef DEBUG
if (stat == NULL)  /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0)  gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL)  switch (err)  case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;  break;  for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
#endif Sleep(1 * 1000);
snprintf(stdout, sizeof(snprintf), "%s%s%s%s%s%s", snprintf(stdout, stdout), sizeof(snprintf), sizeof(stdout), sizeof(stdout), &snprintf(stdout, sizeof(stdout), &snprintf(stdout), sizeof(stdout), sizeof(stdout), sizeof(stdout), sizeof(stdout), sizeof(stdout), &snprintf(stdout), sizeof(stdout), &snprintf(stdout), sizeof(stdout), sizeof(stdout), sizeof(stdout), &snprintf(stdout), &snprintf(stdout), sizeof(stdout), sizeof(stdout), &snprintf(stdout), size
Sleep(1 * 1000); /* The number of packets captured for each interface until we're killed. */
if_info->name = g_malloc(sizeof(if_info->name));
if (in_proc && mtx_unlock_flag)  print_statistics_loop(G_SIZE, mtx_unlock);
/* Print the number of packets captured for each interface until we're killed. */ while(sleep(1000 * 1000))  if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry);
if ((flags & IF_STATUS_SIZE) == 0)  if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if (flags & 3 || flags & SAVE_LOCK)  fprintf(fd, "%s: %s", fd, flags);
Sleep(1, p->p_num);
#ifdef HAVE_PCAP_SUNALL if_info = (if_info_t *)if_info->data; #else if_info->name = g_strdup(if_info->name); #endif
#ifdef HAVE_PCAP_OPEN if_info = (if_info_t *)if_info->data; #endif
if_info = (if_info_t *)if_entry->data;
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name);  else  if_info->name = g_strdup(if_info->name);  if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!*/ sleep(1 * 1000);
/* if the ipv6 is a USB6, use the ipv6. */
Sleep(1 * 1000); /* print the number of packets captured for each interface until we're killed. */
/* Sleep() * 1000; */
if_patch_size--;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL)  switch (err)  case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;  if (if_info->name == NULL)  if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (len > 0)  if (!*if_entry == NULL)  if_info = (if_info_t *)if_entry->data;
Sleep(PRIVATE_INIT_STACK);
if ((stat_switch = ps->switch_list)!= NULL)  if_info = (if_info_t *)if_info->data; if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if_list->size = 0; else if_list->size = 0; /* Printing */ if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name
if_info->name = g_strdup(if_info->name); else  if_info->name = g_strdup(if_info->name); if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (*if_entry == NULL)  if_info = (if_info_t *)if_entry->data;
if_stat->name = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if_stat = g_strdup("n");
if (reply) sleep(1 * 1000);
Sleep(1 * 1000); /* Note that if we got an error in if_info. This will probably be because * we can't clear it * if it was on the next interface. */ if_entry = g_list_first(if_list); if_entry = g_list_next(if_entry);
if_stat->data.sleep(1 * 1000);
sleep(1000 * 1000);
fputs("%s", err_str);
if (!g_syntax) sleep(1 * 1000);
Sleep(&new_data);
if (ip_flags & SIPP_INFO_ENABLED)  if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->data = g_free(if_stat->data);
/* * We've got to get the PCAP code to use. */ if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name);
if_debug_sleep(1 * 1000);
Sleep(POP_STOP_BYTE, &rd);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th))  if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE);  else  if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
#ifdef HAVE_PCAP_OPEN if_stat = (if_info_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); #endif
POSTCODE(Sleeper(1 * 1000), "none");
PACKAGE_UNSIGNED("Invalid pcap_selection");
Sleep(PREFIX_LIST_SIZE);
Sleep(sizeof(if_info->name) / sizeof(if_info->name) / sizeof(if_info->name));
if_init = 1 * 1000;
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->name = g_strdup(if_info->name);
if (!get_initialized)  if (err->sched_mode && err->sched_mode)  /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL)  if_info->name = g_malloc(sizeof(if_info->name));
Sleep(p);
if (sleep(1 * 1000)  0)  print_statistics_loop(gboolean machine_readable);
/* Sleep*/
Sleep(1 * 1000, &sched_in_procs);
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL)  switch (err)  case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if (sip->sip->sip->ip_dev.ip_flags & SIP_NT) sleep(1 * 1000);
if_lock(&lock);
/* * Sleep (1 * 1000); */
if_set_last_ptr(&ptr);
sleep(1) * 1000;
if_in_list.sleep(1 * 1000);
if_stat->name = g_strdup(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); if_stat->stat = g_strdup(if_stat->name);
Sleep(1 * 1000, 1);
if_pch = pch_sleep(1 * 1000);
Sleep(1 * 1000, gboolean is_refresh);
if_info->name = g_strdup(if_info->name); if_stat = g_malloc(sizeof(if_stat_t));
/* In this case we have to set the state of mlock_saved */ if_signal("signal", NULL);
if (pch->list == NULL)  if_list = get_interface_list(&err, &err_str); if (if_list == NULL)  switch (err)  case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;   for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry))  if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry))  if_info =
if_entry = (if_info_t *)if_entry->data; g_free(err_str); break;
if_timer_sleep(100 * 1000);
if_entry->data.save_state = if_info->name;
Sleep(int_io_len * 1000);

if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((flags & IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip!= -1) <ptr = ip->ip; sleep(ip); &else ptr = ptr;
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!get_initialized) <if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); <else sleep(0 * 1000);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else if_info = (if_info_t *)if_info->data;
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (flags & 3 || flags & SAVE_LOCK) &fprintf(fd, "%s: %s", fd, flags);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; <sleep(1 * 1000);
if (!get_initialized) if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else &if_stat->name = g_strdup(if_info->name);
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); <else <sleep(0 * 1000);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!get_initialized) &if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if_stat = g_strdup("<n");
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (sleep(1 * 1000) &0) <print_statistics_loop(gboolean machine_readable);
if (!get_initialized) &if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) g_free(err_str); return err; &sleep(1 * 1000);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if_stat->name = g_strdup(if_info->name); &else <if_stat->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); <else <sleep(0 * 1000);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (!get_initialized) if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((flags & <IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else &if_stat->name = g_strdup(if_info->name);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (flags & &3 || flags & SAVE_LOCK) &fprintf(fd, "%s: %s", fd, flags);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); &else <sleep(0 * 1000);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip!= -1) <ptr = ip->ip; sleep(ip); <else ptr = ptr;
if (ip!= -1) &ptr = ip->ip; sleep(ip); <else &ptr = ptr;
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) g_free(err_str); return err; sleep(1 * 1000);
if_reply('n');
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip_flags & SIPP_INFO_ENABLED) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->data = g_free(if_stat->data);
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else &if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((flags & <IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if (!get_initialized) &if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); <else &sleep(0 * 1000);
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; <sleep(1 * 1000);
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if_stat->name = g_strdup(if_info->name); <else <if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip!= -1) ptr = ip->ip; sleep(ip); else ptr = ptr;
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (len > 0) &if (!*if_entry == NULL) if_info = (if_info_t *)if_entry->data;
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); else sleep(0 * 1000);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (sleep(1 * 1000) 0) print_statistics_loop(gboolean machine_readable);
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
p = g_list_first(if_list); if_info = (if_info_t *)if_entry->data; g_free(p); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (flags & 3 || flags & SAVE_LOCK) <fprintf(fd, "%s: %s", fd, flags);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else &if_info = (if_info_t *)if_info->data;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
Sleep(1 * 1000); <else &/* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip!= -1) ptr = ip->ip; sleep(ip); &else ptr = ptr;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip!= -1) &ptr = ip->ip; sleep(ip); &else ptr = ptr;
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (flags & <3 || flags & SAVE_LOCK) &fprintf(fd, "%s: %s", fd, flags);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If this is an interface that should have been unable to allocate it to the GList, if we're not a number, but we'll be able to * allocate this in the GList so that we can't * * allocate them back to the g_list_first(if_list); */ if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &if_stat = (if_info_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->name = g_strdup(if_info->name);
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else <if_stat->name = g_strdup(if_info->name);
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else <if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); &else <sleep(0 * 1000);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if_info = (if_info_t *)if_entry->data;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((flags & &IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else <if_info = (if_info_t *)if_info->data;
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; sleep(1 * 1000);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip!= -1) <ptr = ip->ip; sleep(ip); else <ptr = ptr;
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (sleep(1 * 1000) &0) &print_statistics_loop(gboolean machine_readable);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
Sleep(1 * 1000); &else /* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((flags & <IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if (len > 0) &if (!*if_entry == NULL) &if_info = (if_info_t *)if_entry->data;
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (sleep(1 * 1000) <0) &print_statistics_loop(gboolean machine_readable);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) g_free(err_str); return err; sleep(1 * 1000);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) g_free(err_str); return err; &sleep(1 * 1000);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip!= -1) <ptr = ip->ip; sleep(ip); else ptr = ptr;
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (in_proc && mtx_unlock_flag) print_statistics_loop(G_SIZE, mtx_unlock);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; &sleep(1 * 1000);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* * Log out if there is a err in the process, because of that, we will try to read sock to it to make this case * a single check. */ if_flags &= &(PROP_SLEFT|PROP_SLEFT);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!get_initialized) if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if_info->name = g_strdup(if_info->name); else <if_info->name = g_strdup(if_info->name); if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip!= -1) ptr = ip->ip; sleep(ip); &else <ptr = ptr;
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; &sleep(1 * 1000);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip!= -1) &ptr = ip->ip; sleep(ip); else <ptr = ptr;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if_stat->name = g_strdup(if_info->name); else <if_stat->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if_stat->name = g_strdup(if_info->name); else &if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!get_initialized) if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* * XXX * Then, if we get a free flag and then print the * result of the packets. */ if ((result = g_free(result)) && (g_free(result))!= NULL) /* print the number of packets captured for each interface until we're killed. */ sleep(1) * 1000;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (len > 0) if (!*if_entry == NULL) &if_info = (if_info_t *)if_entry->data;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if_stat->name = g_strdup(if_info->name); &else if_stat->name = g_strdup(if_info->name);
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else <if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; &sleep(1 * 1000);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (sleep(1 * 1000) &0) print_statistics_loop(gboolean machine_readable);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip!= -1) <ptr = ip->ip; sleep(ip); <else <ptr = ptr;
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) g_free(err_str); return err; <sleep(1 * 1000);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else <if_info = (if_info_t *)if_info->data;
if (!get_initialized) <if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); else sleep(0 * 1000);
if (ip_flags & SIPP_INFO_ENABLED) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->data = g_free(if_stat->data);
<#ifdef HAVE_PCAP_OPEN if_info = (if_info_t *)if_info->data; #endif
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((flags & &IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (in_proc && mtx_unlock_flag) &print_statistics_loop(G_SIZE, mtx_unlock);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else <if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((flags & &IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); else &sleep(0 * 1000);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((flags & &IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; <sleep(1 * 1000);
if ((flags & IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (len > 0) <if (!*if_entry == NULL) if_info = (if_info_t *)if_entry->data;
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else &if_stat->name = g_strdup(if_info->name);
if ((flags & IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else <if_info = (if_info_t *)if_info->data;
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else if_stat->name = g_strdup(if_info->name);
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else &if_stat->name = g_strdup(if_info->name);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((flags & &IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; sleep(1 * 1000);
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); else &sleep(0 * 1000);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); &else sleep(0 * 1000);
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (sleep(1 * 1000) 0) <print_statistics_loop(gboolean machine_readable);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (flags & &3 || flags & SAVE_LOCK) <fprintf(fd, "%s: %s", fd, flags);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((flags & <IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip_flags & SIPP_INFO_ENABLED) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->data = g_free(if_stat->data);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
&#ifdef HAVE_PCAP_OPEN if_info = (if_info_t *)if_info->data; #endif
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else <if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if_info->stat->data.sleep = 1; else if_info->stat->data.sleep = 0;
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip!= -1) ptr = ip->ip; sleep(ip); <else &ptr = ptr;
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else &if_info = (if_info_t *)if_info->data;
/* In this case we have to set the state of mlock_saved*/ if_signal("signal", NULL);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (sleep(1 * 1000) 0) &print_statistics_loop(gboolean machine_readable);
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else &if_stat->name = g_strdup(if_info->name);
Sleep(1 * 1000); &else &/* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((stat_switch = ps->switch_list)!= NULL) &if_info = (if_info_t *)if_info->data; if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* In this case we have to set the state of <mlock_saved*/ if_signal("signal", NULL);
/* In this case we have to set the state of mlock_saved<*/ if_signal("signal", NULL);
if (ip!= -1) &ptr = ip->ip; sleep(ip); else &ptr = ptr;
if_info->name = g_strdup(if_info->name); else &if_info->name = g_strdup(if_info->name); if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
#ifdef HAVE_PCAP_OPEN if_info = (if_info_t *)if_info->data; #endif
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; sleep(1 * 1000);
if_stat->name = g_strdup(if_info->name); <else if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip!= -1) <ptr = ip->ip; sleep(ip); &else <ptr = ptr;
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else &if_info = (if_info_t *)if_info->data;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip!= -1) &ptr = ip->ip; sleep(ip); &else &ptr = ptr;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((flags & <IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else &if_stat->name = g_strdup(if_info->name);
if_stat->name = g_strdup(if_info->name); <else &if_stat->name = g_strdup(if_info->name);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if_stat = g_strdup("n");
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else <if_stat->name = g_strdup(if_info->name);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else <if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else <if_stat->name = g_strdup(if_info->name);
if (!get_initialized) <if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else <if_info = (if_info_t *)if_info->data;
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if_reply('&n');
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; &sleep(1 * 1000);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else if_info = (if_info_t *)if_info->data;
if_reply('<n');
Sleep(1 * 1000); <else /* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else <if_info = (if_info_t *)if_info->data;
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else if_info = (if_info_t *)if_info->data;
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (!get_initialized) <if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (len > 0) if (!*if_entry == NULL) if_info = (if_info_t *)if_entry->data;
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((flags & IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); &else <sleep(0 * 1000);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); <else sleep(0 * 1000);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if_info->stat->data.sleep = 1; else &if_info->stat->data.sleep = 0;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else if_stat->name = g_strdup(if_info->name);
if ((flags & IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else if_stat->name = g_strdup(if_info->name);
if (!get_initialized) <if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else &if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; &sleep(1 * 1000);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else &if_info = (if_info_t *)if_info->data;
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((is)->info) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); &else &if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); else <sleep(0 * 1000);
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); else sleep(0 * 1000);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (flags & &3 || flags & SAVE_LOCK) fprintf(fd, "%s: %s", fd, flags);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip!= -1) &ptr = ip->ip; sleep(ip); &else <ptr = ptr;
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) g_free(err_str); return err; <sleep(1 * 1000);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!get_initialized) &if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else if_stat->name = g_strdup(if_info->name);
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; <sleep(1 * 1000);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
g_free(err_str);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else if_info = (if_info_t *)if_info->data;
if_stat = g_strdup("&n");
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* In this case we have to set the state of mlock_saved&*/ if_signal("signal", NULL);
if (ip!= -1) &ptr = ip->ip; sleep(ip); <else ptr = ptr;
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else if_info = (if_info_t *)if_info->data;
if_info->stat->data.sleep = 1; else <if_info->stat->data.sleep = 0;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (len > 0) if (!*if_entry == NULL) <if_info = (if_info_t *)if_entry->data;
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else <if_stat->name = g_strdup(if_info->name);
if ((flags & &IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (sleep(1 * 1000) <0) <print_statistics_loop(gboolean machine_readable);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (len > 0) <if (!*if_entry == NULL) &if_info = (if_info_t *)if_entry->data;
Sleep(1 * 1000); <else </* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (*if_entry == NULL) if_info = (if_info_t *)if_entry->data;
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else <if_info = (if_info_t *)if_info->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
Sleep(1 * 1000);
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((flags & IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* * XXX * Then, if we get a free flag and then print the * result of the packets. */ if ((result = g_free(result)) && (g_free(result))!= NULL) </* print the number of packets captured for each interface until we're killed. */ sleep(1) * 1000;
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); &else sleep(0 * 1000);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!get_initialized) if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
if (flags & 3 || flags & SAVE_LOCK) fprintf(fd, "%s: %s", fd, flags);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip!= -1) &ptr = ip->ip; sleep(ip); <else <ptr = ptr;
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else <if_info = (if_info_t *)if_info->data;
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); <else sleep(0 * 1000);
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else &if_info = (if_info_t *)if_info->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((flags & IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((stat_switch = ps->switch_list)!= NULL) if_info = (if_info_t *)if_info->data; if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else <if_info = (if_info_t *)if_info->data;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); <else <sleep(0 * 1000);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (in_proc && mtx_unlock_flag) <print_statistics_loop(G_SIZE, mtx_unlock);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
sleep(1 * 1000);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else &if_info = (if_info_t *)if_info->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* * Log out if there is a err in the process, because of that, we will try to read sock to it to make this case * a single check. */ if_flags &= (PROP_SLEFT|PROP_SLEFT);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
Sleep(1 * 1000); else </* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip!= -1) <ptr = ip->ip; sleep(ip); <else &ptr = ptr;
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((flags & <IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
Sleep(1 * 1000); else /* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
/* Print the number of packets captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break;
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (sleep(1 * 1000) <0) print_statistics_loop(gboolean machine_readable);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((is)->info) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); else if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); &else sleep(0 * 1000);
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((flags & <IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s&n", flags, errbuf, err_str);
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (!get_initialized) if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip!= -1) <ptr = ip->ip; sleep(ip); else &ptr = ptr;
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); &else &sleep(0 * 1000);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((flags & &IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if (ip!= -1) ptr = ip->ip; sleep(ip); <else <ptr = ptr;
if (!get_initialized) if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((flags & <IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else if_info = (if_info_t *)if_info->data;
if (!get_initialized) &if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip!= -1) ptr = ip->ip; sleep(ip); <else ptr = ptr;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!get_initialized) &if (err->sched_mode && err->sched_mode) &/* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If this is an interface that should have been unable to allocate it to the GList, if we're not a number, but we'll be able to * allocate this in the GList so that we can't * * allocate them back to the g_list_first(if_list); */ if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <if_stat = (if_info_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->name = g_strdup(if_info->name);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* Print the number of packets captured for each interface until we're killed. */ while(sleep(1000 * 1000)) if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (len > 0) &if (!*if_entry == NULL) <if_info = (if_info_t *)if_entry->data;
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else <if_info = (if_info_t *)if_info->data;
/* In this case we have to set the state of &mlock_saved*/ if_signal("signal", NULL);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->type == pch->name) if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else if_info = (if_info_t *)if_info->data;
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!get_initialized) &if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
if (ip!= -1) ptr = ip->ip; sleep(ip); &else &ptr = ptr;
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) g_free(err_str); return err; &sleep(1 * 1000);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); &else &sleep(0 * 1000);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Print the number of packets captured for each interface until we're killed. */ while(sleep(1000 * 1000)) <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* * Log out if there is a err in the process, because of that, we will try to read sock to it to make this case * a single check. */ if_flags &= <(PROP_SLEFT|PROP_SLEFT);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if_stat->name = g_strdup(if_info->name); else if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (*if_entry == NULL) &if_info = (if_info_t *)if_entry->data;
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (!get_initialized) <if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; <sleep(1 * 1000);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (!get_initialized) <if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* If this is an interface that should have been unable to allocate it to the GList, if we're not a number, but we'll be able to * allocate this in the GList so that we can't * * allocate them back to the g_list_first(if_list); */ if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat = (if_info_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); if_stat->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (flags & <3 || flags & SAVE_LOCK) fprintf(fd, "%s: %s", fd, flags);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else &if_info = (if_info_t *)if_info->data;
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; <sleep(1 * 1000);
if (nc->nc_int >= sizeof(ip)) sleep(1 * 1000); else <sleep(0 * 1000);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else if_info = (if_info_t *)if_info->data;
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; sleep(1 * 1000);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if_info->name = g_strdup(if_info->name); else if_info->name = g_strdup(if_info->name); if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); else &sleep(0 * 1000);
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); <else &sleep(0 * 1000);
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) g_free(err_str); return err; <sleep(1 * 1000);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) &g_free(err_str); return err; sleep(1 * 1000);
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); else <sleep(0 * 1000);
if (g_socket_nonempty(&sip->ip_entry)) &/* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; sleep(1 * 1000);
if (pch->type == pch->name) <if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; &else &if_info = (if_info_t *)if_info->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip!= -1) ptr = ip->ip; sleep(ip); else &ptr = ptr;
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; <else if_info = (if_info_t *)if_info->data;
if (g_socket_nonempty(&sip->ip_entry)) /* if XXX */ if ((!if_info->name)) <g_free(err_str); return err; &sleep(1 * 1000);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((flags & &IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if ((*if_entry = g_list_first(if_entry))!= NULL) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((flags & IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->type == pch->name) &if_info = (if_info_t *)if_info->data; if_info = (if_info_t *)if_info->data; else &if_info = (if_info_t *)if_info->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!get_initialized) &if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if ((stat_switch = ps->switch_list)!= NULL) <if_info = (if_info_t *)if_info->data; if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (stat == NULL) </* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (!get_initialized) <if (err->sched_mode && err->sched_mode) /* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (*if_entry == NULL) <if_info = (if_info_t *)if_entry->data;
if_stat->name = g_strdup(if_info->name); &else &if_stat->name = g_strdup(if_info->name);
if (flags & <3 || flags & SAVE_LOCK) <fprintf(fd, "%s: %s", fd, flags);
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((flags & IF_STATUS_SIZE) == 0) if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
if (!get_initialized) if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) <if_info->name = g_malloc(sizeof(if_info->name));
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip!= -1) <ptr = ip->ip; sleep(ip); &else &ptr = ptr;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (ip_packet == NULL) &ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if_stat->name = g_strdup(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); if_stat->stat = g_strdup(if_stat->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (nc->nc_int >= sizeof(ip)) &sleep(1 * 1000); &else &sleep(0 * 1000);
if (ip!= -1) &ptr = ip->ip; sleep(ip); else ptr = ptr;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) <if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (len > 0) <if (!*if_entry == NULL) <if_info = (if_info_t *)if_entry->data;
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (nc->nc_int >= sizeof(ip)) <sleep(1 * 1000); <else &sleep(0 * 1000);
/* * XXX * Then, if we get a free flag and then print the * result of the packets. */ if ((result = g_free(result)) && (g_free(result))!= NULL) &/* print the number of packets captured for each interface until we're killed. */ sleep(1) * 1000;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* In this case we have to set the state of <mlock_saved&*/ if_signal("signal", NULL);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else <if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
/* In this case we have to set the state of &mlock_saved<*/ if_signal("signal", NULL);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Print the number of packets captured for each interface until we're killed. */ while(sleep(1000 * 1000)) &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry);
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if_sleep(1 * 1000);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if ((flags & <IF_STATUS_SIZE) == 0) <if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %s<n", flags, errbuf, err_str);
Sleep(1 * 1000); &else </* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else &if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else &if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); else if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
Sleep(1 * 1000); else &/* Set the name of packets captured in a target or packet. */ if_stat->name = g_strdup(sizeof(if_stat_t));
if (!get_initialized) &if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
/* In this case we have to set the state of <mlock_saved<*/ if_signal("signal", NULL);
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) </* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) &switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (g_socket_nonempty(&sip->ip_entry)) </* if XXX */ if ((!if_info->name)) g_free(err_str); return err; sleep(1 * 1000);
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) <if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); &else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (ip!= -1) ptr = ip->ip; sleep(ip); else <ptr = ptr;
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* * Set the timeout - we're on the next frame to print */ if ((flags & PP_WIN) && (ptr_reply_th)) if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(IF_POST_SIZE); if_stat->stat = g_strdup(IF_POST_SIZE); <else &if_stat->name = g_strdup(IF_POST_SIZE); if_stat->name = g_strdup(IF_POST_SIZE);
if (!get_initialized) <if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) if_info->name = g_malloc(sizeof(if_info->name));
if (!si_active) /* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) /* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) &/* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ &else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) &/* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) &/* Not implemented yet */ <else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) 1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) &/* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; <if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if (pch->list == NULL) <if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) &/* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) <1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) <1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (stat == NULL) /* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) <gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) <switch (err) <case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((*if_entry = g_list_first(if_entry))!= NULL) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; if (if_info->name == NULL) if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; <else <if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) &if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) </* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) 1) /* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
if (!get_initialized) if (err->sched_mode && err->sched_mode) </* Delete nodes in the packet list, or make the exception on an initialized packet. */ if (*if_stat == NULL) &if_info->name = g_malloc(sizeof(if_info->name));
if (pch->list == NULL) &if_list = get_interface_list(&err, &err_str); if (if_list == NULL) <switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
if (ip_packet == NULL) <ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); else &if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if (pch->list == NULL) if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info = (if_info_t *)if_entry->data; if_entry!= NULL; if_entry = g_list_next(if_entry)) if_info =
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* In this case we have to set the state of &mlock_saved&*/ if_signal("signal", NULL);
if (!si_active) </* Not implemented yet */ if (!((si_active = 0) || (si_active == 0)) && ((si_active = 0) && (si_active == 0)) && (si_active == 0)) /* Not implemented yet */ if (!(si_active = 0) || (si_active = 0)) </* Not implemented yet */ else /* Not implemented yet */ /* Not implemented yet */ if ((si_active = 0) && (si_active == 0)) /* Get IPv6 /* Get IPv6 for the IPv6 address */ if_info->name = g_strdup(sizeof(if_info->name)); if_info->name = g_strdup(sizeof(if_info->name
&if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else &if_info->name = g_strdup(if_info->name); <if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
if (ip_packet == NULL) ip_packet = g_list_first(if_list); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); &else <if_entry = g_list_first(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); <else if_entry = (if_info_t *)if_entry->data; if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) if_entry =
if ((is)->info) &if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name); <else if_stat->name = g_strdup(if_info->name);
if ((*if_entry = g_list_first(if_entry))!= NULL) if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; &else &if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if_entry)) <if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data; else if_entry = g_list_next(if_entry); if_entry = g_list_next(if_entry); if_info = (if_info_t *)if_entry->data; if_info = (if_info_t *)if_entry->data;
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); &else if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); else <if_info->name = g_strdup(if_info->name); if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
<if_stat = g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_stat->name); <else <if_info->name = g_strdup(if_info->name); &if_stat = (if_stat_t *)g_malloc(sizeof(if_stat_t)); if_stat->name = g_strdup(if_info->name);
/* If we haven't got any data, we can't * get one */ if (sleep(1000 * 1000) &1) /* If the packet is already gone, we'll sleep until the packet has been released. */ if (sleep(100 * 1000) &1) </* If we've already found the packet, it's the only one that's printed. */ if (sleep(1000 * 1000) 2) *(void *)0) /* If we have a packet, * this is not needed */ if (sleep(100 * 1000) 2) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0) *(void *)0); *(void *)0) *(void *)0) *
/* Read the number of interfaces captured for each interface until we're killed. */ if_list = get_interface_list(&err, &err_str); if (if_list == NULL) switch (err) &case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; &if (if_info->name == NULL) &if_info->name = g_malloc(sizeof(if_info->name)); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name); if_info->name = g_strdup(if_info->name);
if ((flags & &IF_STATUS_SIZE) == 0) &if (flags & FAST_STATUS_LOOP) fprintf(stderr, "%s: %sn", flags, errbuf, err_str);
if (stat == NULL) &/* Print the number of packets captured for each interface until we're killed. */ if (error) print_statistics_loop(gboolean machine_readable); if (err == 0) &gchar *err_str; if_entry = get_interface_list(&err, &err_str); if (err == NULL) switch (err) case CANT_GET_INTERFACE_LIST: cmdarg_err("%s", err_str); g_free(err_str); break; case NO_INTERFACES_FOUND: cmdarg_err("There are no interfaces on which a capture can be done"); break; break; for (if_entry = g_list_first(if_entry); if_entry!= NULL; if_entry = g_list_next(if
